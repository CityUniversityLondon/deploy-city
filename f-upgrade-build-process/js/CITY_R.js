/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/main/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/bxslider/dist/jquery.bxslider.js":
/*!*******************************************************!*\
  !*** ./node_modules/bxslider/dist/jquery.bxslider.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * bxSlider v4.2.1d
 * Copyright 2013-2017 Steven Wanderski
 * Written while drinking Belgian ales and listening to jazz
 * Licensed under MIT (http://opensource.org/licenses/MIT)
 */

;(function($) {

  var defaults = {

    // GENERAL
    mode: 'horizontal',
    slideSelector: '',
    infiniteLoop: true,
    hideControlOnEnd: false,
    speed: 500,
    easing: null,
    slideMargin: 0,
    startSlide: 0,
    randomStart: false,
    captions: false,
    ticker: false,
    tickerHover: false,
    adaptiveHeight: false,
    adaptiveHeightSpeed: 500,
    video: false,
    useCSS: true,
    preloadImages: 'visible',
    responsive: true,
    slideZIndex: 50,
    wrapperClass: 'bx-wrapper',

    // TOUCH
    touchEnabled: true,
    swipeThreshold: 50,
    oneToOneTouch: true,
    preventDefaultSwipeX: true,
    preventDefaultSwipeY: false,

    // ACCESSIBILITY
    ariaLive: true,
    ariaHidden: true,

    // KEYBOARD
    keyboardEnabled: false,

    // PAGER
    pager: true,
    pagerType: 'full',
    pagerShortSeparator: ' / ',
    pagerSelector: null,
    buildPager: null,
    pagerCustom: null,

    // CONTROLS
    controls: true,
    nextText: 'Next',
    prevText: 'Prev',
    nextSelector: null,
    prevSelector: null,
    autoControls: false,
    startText: 'Start',
    stopText: 'Stop',
    autoControlsCombine: false,
    autoControlsSelector: null,

    // AUTO
    auto: false,
    pause: 4000,
    autoStart: true,
    autoDirection: 'next',
    stopAutoOnClick: false,
    autoHover: false,
    autoDelay: 0,
    autoSlideForOnePage: false,

    // CAROUSEL
    minSlides: 1,
    maxSlides: 1,
    moveSlides: 0,
    slideWidth: 0,
    shrinkItems: false,

    // CALLBACKS
    onSliderLoad: function() { return true; },
    onSlideBefore: function() { return true; },
    onSlideAfter: function() { return true; },
    onSlideNext: function() { return true; },
    onSlidePrev: function() { return true; },
    onSliderResize: function() { return true; },
	onAutoChange: function() { return true; } //calls when auto slides starts and stops
  };

  $.fn.bxSlider = function(options) {

    if (this.length === 0) {
      return this;
    }

    // support multiple elements
    if (this.length > 1) {
      this.each(function() {
        $(this).bxSlider(options);
      });
      return this;
    }

    // create a namespace to be used throughout the plugin
    var slider = {},
    // set a reference to our slider element
    el = this,
    // get the original window dimens (thanks a lot IE)
    windowWidth = $(window).width(),
    windowHeight = $(window).height();

    // Return if slider is already initialized
    if ($(el).data('bxSlider')) { return; }

    /**
     * ===================================================================================
     * = PRIVATE FUNCTIONS
     * ===================================================================================
     */

    /**
     * Initializes namespace settings to be used throughout plugin
     */
    var init = function() {
      // Return if slider is already initialized
      if ($(el).data('bxSlider')) { return; }
      // merge user-supplied options with the defaults
      slider.settings = $.extend({}, defaults, options);
      // parse slideWidth setting
      slider.settings.slideWidth = parseInt(slider.settings.slideWidth);
      // store the original children
      slider.children = el.children(slider.settings.slideSelector);
      // check if actual number of slides is less than minSlides / maxSlides
      if (slider.children.length < slider.settings.minSlides) { slider.settings.minSlides = slider.children.length; }
      if (slider.children.length < slider.settings.maxSlides) { slider.settings.maxSlides = slider.children.length; }
      // if random start, set the startSlide setting to random number
      if (slider.settings.randomStart) { slider.settings.startSlide = Math.floor(Math.random() * slider.children.length); }
      // store active slide information
      slider.active = { index: slider.settings.startSlide };
      // store if the slider is in carousel mode (displaying / moving multiple slides)
      slider.carousel = slider.settings.minSlides > 1 || slider.settings.maxSlides > 1;
      // if carousel, force preloadImages = 'all'
      if (slider.carousel) { slider.settings.preloadImages = 'all'; }
      // calculate the min / max width thresholds based on min / max number of slides
      // used to setup and update carousel slides dimensions
      slider.minThreshold = (slider.settings.minSlides * slider.settings.slideWidth) + ((slider.settings.minSlides - 1) * slider.settings.slideMargin);
      slider.maxThreshold = (slider.settings.maxSlides * slider.settings.slideWidth) + ((slider.settings.maxSlides - 1) * slider.settings.slideMargin);
      // store the current state of the slider (if currently animating, working is true)
      slider.working = false;
      // initialize the controls object
      slider.controls = {};
      // initialize an auto interval
      slider.interval = null;
      // determine which property to use for transitions
      slider.animProp = slider.settings.mode === 'vertical' ? 'top' : 'left';
      // determine if hardware acceleration can be used
      slider.usingCSS = slider.settings.useCSS && slider.settings.mode !== 'fade' && (function() {
        // create our test div element
        var div = document.createElement('div'),
        // css transition properties
        props = ['WebkitPerspective', 'MozPerspective', 'OPerspective', 'msPerspective'];
        // test for each property
        for (var i = 0; i < props.length; i++) {
          if (div.style[props[i]] !== undefined) {
            slider.cssPrefix = props[i].replace('Perspective', '').toLowerCase();
            slider.animProp = '-' + slider.cssPrefix + '-transform';
            return true;
          }
        }
        return false;
      }());
      // if vertical mode always make maxSlides and minSlides equal
      if (slider.settings.mode === 'vertical') { slider.settings.maxSlides = slider.settings.minSlides; }
      // save original style data
      el.data('origStyle', el.attr('style'));
      el.children(slider.settings.slideSelector).each(function() {
        $(this).data('origStyle', $(this).attr('style'));
      });

      // perform all DOM / CSS modifications
      setup();
    };

    /**
     * Performs all DOM and CSS modifications
     */
    var setup = function() {
      var preloadSelector = slider.children.eq(slider.settings.startSlide); // set the default preload selector (visible)

      // wrap el in a wrapper
      el.wrap('<div class="' + slider.settings.wrapperClass + '"><div class="bx-viewport"></div></div>');
      // store a namespace reference to .bx-viewport
      slider.viewport = el.parent();

      // add aria-live if the setting is enabled and ticker mode is disabled
      if (slider.settings.ariaLive && !slider.settings.ticker) {
        slider.viewport.attr('aria-live', 'polite');
      }
      // add a loading div to display while images are loading
      slider.loader = $('<div class="bx-loading" />');
      slider.viewport.prepend(slider.loader);
      // set el to a massive width, to hold any needed slides
      // also strip any margin and padding from el
      el.css({
        width: slider.settings.mode === 'horizontal' ? (slider.children.length * 1000 + 215) + '%' : 'auto',
        position: 'relative'
      });
      // if using CSS, add the easing property
      if (slider.usingCSS && slider.settings.easing) {
        el.css('-' + slider.cssPrefix + '-transition-timing-function', slider.settings.easing);
      // if not using CSS and no easing value was supplied, use the default JS animation easing (swing)
      } else if (!slider.settings.easing) {
        slider.settings.easing = 'swing';
      }
      // make modifications to the viewport (.bx-viewport)
      slider.viewport.css({
        width: '100%',
        overflow: 'hidden',
        position: 'relative'
      });
      slider.viewport.parent().css({
        maxWidth: getViewportMaxWidth()
      });
      // apply css to all slider children
      slider.children.css({
        // the float attribute is a reserved word in compressors like YUI compressor and need to be quoted #48
        'float': slider.settings.mode === 'horizontal' ? 'left' : 'none',
        listStyle: 'none',
        position: 'relative'
      });
      // apply the calculated width after the float is applied to prevent scrollbar interference
      slider.children.css('width', getSlideWidth());
      // if slideMargin is supplied, add the css
      if (slider.settings.mode === 'horizontal' && slider.settings.slideMargin > 0) { slider.children.css('marginRight', slider.settings.slideMargin); }
      if (slider.settings.mode === 'vertical' && slider.settings.slideMargin > 0) { slider.children.css('marginBottom', slider.settings.slideMargin); }
      // if "fade" mode, add positioning and z-index CSS
      if (slider.settings.mode === 'fade') {
        slider.children.css({
          position: 'absolute',
          zIndex: 0,
          display: 'none'
        });
        // prepare the z-index on the showing element
        slider.children.eq(slider.settings.startSlide).css({zIndex: slider.settings.slideZIndex, display: 'block'});
      }
      // create an element to contain all slider controls (pager, start / stop, etc)
      slider.controls.el = $('<div class="bx-controls" />');
      // if captions are requested, add them
      if (slider.settings.captions) { appendCaptions(); }
      // check if startSlide is last slide
      slider.active.last = slider.settings.startSlide === getPagerQty() - 1;
      // if video is true, set up the fitVids plugin
      if (slider.settings.video) { el.fitVids(); }
	  //preloadImages
	  if (slider.settings.preloadImages === 'none') { 
		  preloadSelector = null; 
	  }
      else if (slider.settings.preloadImages === 'all' || slider.settings.ticker) { 
		  preloadSelector = slider.children; 
	  }
      // only check for control addition if not in "ticker" mode
      if (!slider.settings.ticker) {
        // if controls are requested, add them
        if (slider.settings.controls) { appendControls(); }
        // if auto is true, and auto controls are requested, add them
        if (slider.settings.auto && slider.settings.autoControls) { appendControlsAuto(); }
        // if pager is requested, add it
        if (slider.settings.pager) { appendPager(); }
        // if any control option is requested, add the controls wrapper
        if (slider.settings.controls || slider.settings.autoControls || slider.settings.pager) { slider.viewport.after(slider.controls.el); }
      // if ticker mode, do not allow a pager
      } else {
        slider.settings.pager = false;
      }
	  if (preloadSelector === null) {
        start();
      } else {
        loadElements(preloadSelector, start);
      }
    };

    var loadElements = function(selector, callback) {
      var total = selector.find('img:not([src=""]), iframe').length,
      count = 0;
      if (total === 0) {
        callback();
        return;
      }
      selector.find('img:not([src=""]), iframe').each(function() {
        $(this).one('load error', function() {
          if (++count === total) { callback(); }
        }).each(function() {
          if (this.complete || this.src == '') { $(this).trigger('load'); }
        });
      });
    };

    /**
     * Start the slider
     */
    var start = function() {
      // if infinite loop, prepare additional slides
      if (slider.settings.infiniteLoop && slider.settings.mode !== 'fade' && !slider.settings.ticker) {
        var slice    = slider.settings.mode === 'vertical' ? slider.settings.minSlides : slider.settings.maxSlides,
        sliceAppend  = slider.children.slice(0, slice).clone(true).addClass('bx-clone'),
        slicePrepend = slider.children.slice(-slice).clone(true).addClass('bx-clone');
        if (slider.settings.ariaHidden) {
          sliceAppend.attr('aria-hidden', true);
          slicePrepend.attr('aria-hidden', true);
        }
        el.append(sliceAppend).prepend(slicePrepend);
      }
      // remove the loading DOM element
      slider.loader.remove();
      // set the left / top position of "el"
      setSlidePosition();
      // if "vertical" mode, always use adaptiveHeight to prevent odd behavior
      if (slider.settings.mode === 'vertical') { slider.settings.adaptiveHeight = true; }
      // set the viewport height
      slider.viewport.height(getViewportHeight());
      // make sure everything is positioned just right (same as a window resize)
      el.redrawSlider();
      // onSliderLoad callback
      slider.settings.onSliderLoad.call(el, slider.active.index);
      // slider has been fully initialized
      slider.initialized = true;
      // add the resize call to the window
      if (slider.settings.responsive) { $(window).on('resize', resizeWindow); }
      // if auto is true and has more than 1 page, start the show
      if (slider.settings.auto && slider.settings.autoStart && (getPagerQty() > 1 || slider.settings.autoSlideForOnePage)) { initAuto(); }
      // if ticker is true, start the ticker
      if (slider.settings.ticker) { initTicker(); }
      // if pager is requested, make the appropriate pager link active
      if (slider.settings.pager) { updatePagerActive(slider.settings.startSlide); }
      // check for any updates to the controls (like hideControlOnEnd updates)
      if (slider.settings.controls) { updateDirectionControls(); }
      // if touchEnabled is true, setup the touch events
      if (slider.settings.touchEnabled && !slider.settings.ticker) { initTouch(); }
      // if keyboardEnabled is true, setup the keyboard events
      if (slider.settings.keyboardEnabled && !slider.settings.ticker) {
        $(document).keydown(keyPress);
      }
    };

    /**
     * Returns the calculated height of the viewport, used to determine either adaptiveHeight or the maxHeight value
     */
    var getViewportHeight = function() {
      var height = 0;
      // first determine which children (slides) should be used in our height calculation
      var children = $();
      // if mode is not "vertical" and adaptiveHeight is false, include all children
      if (slider.settings.mode !== 'vertical' && !slider.settings.adaptiveHeight) {
        children = slider.children;
      } else {
        // if not carousel, return the single active child
        if (!slider.carousel) {
          children = slider.children.eq(slider.active.index);
        // if carousel, return a slice of children
        } else {
          // get the individual slide index
          var currentIndex = slider.settings.moveSlides === 1 ? slider.active.index : slider.active.index * getMoveBy();
          // add the current slide to the children
          children = slider.children.eq(currentIndex);
          // cycle through the remaining "showing" slides
          for (i = 1; i <= slider.settings.maxSlides - 1; i++) {
            // if looped back to the start
            if (currentIndex + i >= slider.children.length) {
              children = children.add(slider.children.eq(i - 1));
            } else {
              children = children.add(slider.children.eq(currentIndex + i));
            }
          }
        }
      }
      // if "vertical" mode, calculate the sum of the heights of the children
      if (slider.settings.mode === 'vertical') {
        children.each(function(index) {
          height += $(this).outerHeight();
        });
        // add user-supplied margins
        if (slider.settings.slideMargin > 0) {
          height += slider.settings.slideMargin * (slider.settings.minSlides - 1);
        }
      // if not "vertical" mode, calculate the max height of the children
      } else {
        height = Math.max.apply(Math, children.map(function() {
          return $(this).outerHeight(false);
        }).get());
      }

      if (slider.viewport.css('box-sizing') === 'border-box') {
        height += parseFloat(slider.viewport.css('padding-top')) + parseFloat(slider.viewport.css('padding-bottom')) +
              parseFloat(slider.viewport.css('border-top-width')) + parseFloat(slider.viewport.css('border-bottom-width'));
      } else if (slider.viewport.css('box-sizing') === 'padding-box') {
        height += parseFloat(slider.viewport.css('padding-top')) + parseFloat(slider.viewport.css('padding-bottom'));
      }

      return height;
    };

    /**
     * Returns the calculated width to be used for the outer wrapper / viewport
     */
    var getViewportMaxWidth = function() {
      var width = '100%';
      if (slider.settings.slideWidth > 0) {
        if (slider.settings.mode === 'horizontal') {
          width = (slider.settings.maxSlides * slider.settings.slideWidth) + ((slider.settings.maxSlides - 1) * slider.settings.slideMargin);
        } else {
          width = slider.settings.slideWidth;
        }
      }
      return width;
    };

    /**
     * Returns the calculated width to be applied to each slide
     */
    var getSlideWidth = function() {
      var newElWidth = slider.settings.slideWidth, // start with any user-supplied slide width
      wrapWidth      = slider.viewport.width();    // get the current viewport width
      // if slide width was not supplied, or is larger than the viewport use the viewport width
      if (slider.settings.slideWidth === 0 ||
        (slider.settings.slideWidth > wrapWidth && !slider.carousel) ||
        slider.settings.mode === 'vertical') {
        newElWidth = wrapWidth;
      // if carousel, use the thresholds to determine the width
      } else if (slider.settings.maxSlides > 1 && slider.settings.mode === 'horizontal') {
        if (wrapWidth > slider.maxThreshold) {
          return newElWidth;
        } else if (wrapWidth < slider.minThreshold) {
          newElWidth = (wrapWidth - (slider.settings.slideMargin * (slider.settings.minSlides - 1))) / slider.settings.minSlides;
        } else if (slider.settings.shrinkItems) {
          newElWidth = Math.floor((wrapWidth + slider.settings.slideMargin) / (Math.ceil((wrapWidth + slider.settings.slideMargin) / (newElWidth + slider.settings.slideMargin))) - slider.settings.slideMargin);
        }
      }
      return newElWidth;
    };

    /**
     * Returns the number of slides currently visible in the viewport (includes partially visible slides)
     */
    var getNumberSlidesShowing = function() {
      var slidesShowing = 1,
      childWidth = null;
      if (slider.settings.mode === 'horizontal' && slider.settings.slideWidth > 0) {
        // if viewport is smaller than minThreshold, return minSlides
        if (slider.viewport.width() < slider.minThreshold) {
          slidesShowing = slider.settings.minSlides;
        // if viewport is larger than maxThreshold, return maxSlides
        } else if (slider.viewport.width() > slider.maxThreshold) {
          slidesShowing = slider.settings.maxSlides;
        // if viewport is between min / max thresholds, divide viewport width by first child width
        } else {
          childWidth = slider.children.first().width() + slider.settings.slideMargin;
          slidesShowing = Math.floor((slider.viewport.width() +
            slider.settings.slideMargin) / childWidth) || 1;
        }
      // if "vertical" mode, slides showing will always be minSlides
      } else if (slider.settings.mode === 'vertical') {
        slidesShowing = slider.settings.minSlides;
      }
      return slidesShowing;
    };

    /**
     * Returns the number of pages (one full viewport of slides is one "page")
     */
    var getPagerQty = function() {
      var pagerQty = 0,
      breakPoint = 0,
      counter = 0;
      // if moveSlides is specified by the user
      if (slider.settings.moveSlides > 0) {
        if (slider.settings.infiniteLoop) {
          pagerQty = Math.ceil(slider.children.length / getMoveBy());
        } else {
          // when breakpoint goes above children length, counter is the number of pages
          while (breakPoint < slider.children.length) {
            ++pagerQty;
            breakPoint = counter + getNumberSlidesShowing();
            counter += slider.settings.moveSlides <= getNumberSlidesShowing() ? slider.settings.moveSlides : getNumberSlidesShowing();
          }
		  return counter;
        }
      // if moveSlides is 0 (auto) divide children length by sides showing, then round up
      } else {
        pagerQty = Math.ceil(slider.children.length / getNumberSlidesShowing());
      }
      return pagerQty;
    };

    /**
     * Returns the number of individual slides by which to shift the slider
     */
    var getMoveBy = function() {
      // if moveSlides was set by the user and moveSlides is less than number of slides showing
      if (slider.settings.moveSlides > 0 && slider.settings.moveSlides <= getNumberSlidesShowing()) {
        return slider.settings.moveSlides;
      }
      // if moveSlides is 0 (auto)
      return getNumberSlidesShowing();
    };

    /**
     * Sets the slider's (el) left or top position
     */
    var setSlidePosition = function() {
      var position, lastChild, lastShowingIndex;
      // if last slide, not infinite loop, and number of children is larger than specified maxSlides
      if (slider.children.length > slider.settings.maxSlides && slider.active.last && !slider.settings.infiniteLoop) {
        if (slider.settings.mode === 'horizontal') {
          // get the last child's position
          lastChild = slider.children.last();
          position = lastChild.position();
          // set the left position
          setPositionProperty(-(position.left - (slider.viewport.width() - lastChild.outerWidth())), 'reset', 0);
        } else if (slider.settings.mode === 'vertical') {
          // get the last showing index's position
          lastShowingIndex = slider.children.length - slider.settings.minSlides;
          position = slider.children.eq(lastShowingIndex).position();
          // set the top position
          setPositionProperty(-position.top, 'reset', 0);
        }
      // if not last slide
      } else {
        // get the position of the first showing slide
        position = slider.children.eq(slider.active.index * getMoveBy()).position();
        // check for last slide
        if (slider.active.index === getPagerQty() - 1) { slider.active.last = true; }
        // set the respective position
        if (position !== undefined) {
          if (slider.settings.mode === 'horizontal') { setPositionProperty(-position.left, 'reset', 0); }
          else if (slider.settings.mode === 'vertical') { setPositionProperty(-position.top, 'reset', 0); }
        }
      }
    };

    /**
     * Sets the el's animating property position (which in turn will sometimes animate el).
     * If using CSS, sets the transform property. If not using CSS, sets the top / left property.
     *
     * @param value (int)
     *  - the animating property's value
     *
     * @param type (string) 'slide', 'reset', 'ticker'
     *  - the type of instance for which the function is being
     *
     * @param duration (int)
     *  - the amount of time (in ms) the transition should occupy
     *
     * @param params (array) optional
     *  - an optional parameter containing any variables that need to be passed in
     */
    var setPositionProperty = function(value, type, duration, params) {
      var animateObj, propValue;
      // use CSS transform
      if (slider.usingCSS) {
        // determine the translate3d value
        propValue = slider.settings.mode === 'vertical' ? 'translate3d(0, ' + value + 'px, 0)' : 'translate3d(' + value + 'px, 0, 0)';
        // add the CSS transition-duration
        el.css('-' + slider.cssPrefix + '-transition-duration', duration / 1000 + 's');
        if (type === 'slide') {
          // set the property value
          el.css(slider.animProp, propValue);
          if (duration !== 0) {
            // add a callback method - executes when CSS transition completes
            el.on('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function(e) {
              //make sure it's the correct one
              if (!$(e.target).is(el)) { return; }
              // remove the callback
              el.off('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');
              updateAfterSlideTransition();
            });
          } else { //duration = 0
            updateAfterSlideTransition();
          }
        } else if (type === 'reset') {
          el.css(slider.animProp, propValue);
        } else if (type === 'ticker') {
          // make the transition use 'linear'
          el.css('-' + slider.cssPrefix + '-transition-timing-function', 'linear');
          el.css(slider.animProp, propValue);
          if (duration !== 0) {
            el.on('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function(e) {
              //make sure it's the correct one
              if (!$(e.target).is(el)) { return; }
              // remove the callback
              el.off('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');
              // reset the position
              setPositionProperty(params.resetValue, 'reset', 0);
              // start the loop again
              tickerLoop();
            });
          } else { //duration = 0
            setPositionProperty(params.resetValue, 'reset', 0);
            tickerLoop();
          }
        }
      // use JS animate
      } else {
        animateObj = {};
        animateObj[slider.animProp] = value;
        if (type === 'slide') {
          el.animate(animateObj, duration, slider.settings.easing, function() {
            updateAfterSlideTransition();
          });
        } else if (type === 'reset') {
          el.css(slider.animProp, value);
        } else if (type === 'ticker') {
          el.animate(animateObj, duration, 'linear', function() {
            setPositionProperty(params.resetValue, 'reset', 0);
            // run the recursive loop after animation
            tickerLoop();
          });
        }
      }
    };

    /**
     * Populates the pager with proper amount of pages
     */
    var populatePager = function() {
      var pagerHtml = '',
      linkContent = '',
      pagerQty = getPagerQty();
      // loop through each pager item
      for (var i = 0; i < pagerQty; i++) {
        linkContent = '';
        // if a buildPager function is supplied, use it to get pager link value, else use index + 1
        if (slider.settings.buildPager && $.isFunction(slider.settings.buildPager) || slider.settings.pagerCustom) {
          linkContent = slider.settings.buildPager(i);
          slider.pagerEl.addClass('bx-custom-pager');
        } else {
          linkContent = i + 1;
          slider.pagerEl.addClass('bx-default-pager');
        }
        // var linkContent = slider.settings.buildPager && $.isFunction(slider.settings.buildPager) ? slider.settings.buildPager(i) : i + 1;
        // add the markup to the string
        pagerHtml += '<div class="bx-pager-item"><a href="" data-slide-index="' + i + '" class="bx-pager-link">' + linkContent + '</a></div>';
      }
      // populate the pager element with pager links
      slider.pagerEl.html(pagerHtml);
    };

    /**
     * Appends the pager to the controls element
     */
    var appendPager = function() {
      if (!slider.settings.pagerCustom) {
        // create the pager DOM element
        slider.pagerEl = $('<div class="bx-pager" />');
        // if a pager selector was supplied, populate it with the pager
        if (slider.settings.pagerSelector) {
          $(slider.settings.pagerSelector).html(slider.pagerEl);
        // if no pager selector was supplied, add it after the wrapper
        } else {
          slider.controls.el.addClass('bx-has-pager').append(slider.pagerEl);
        }
        // populate the pager
        populatePager();
      } else {
        slider.pagerEl = $(slider.settings.pagerCustom);
      }
      // assign the pager click binding
      slider.pagerEl.on('click touchend', 'a', clickPagerBind);
    };

    /**
     * Appends prev / next controls to the controls element
     */
    var appendControls = function() {
      slider.controls.next = $('<a class="bx-next" href="">' + slider.settings.nextText + '</a>');
      slider.controls.prev = $('<a class="bx-prev" href="">' + slider.settings.prevText + '</a>');
      // add click actions to the controls
      slider.controls.next.on('click touchend', clickNextBind);
      slider.controls.prev.on('click touchend', clickPrevBind);
      // if nextSelector was supplied, populate it
      if (slider.settings.nextSelector) {
        $(slider.settings.nextSelector).append(slider.controls.next);
      }
      // if prevSelector was supplied, populate it
      if (slider.settings.prevSelector) {
        $(slider.settings.prevSelector).append(slider.controls.prev);
      }
      // if no custom selectors were supplied
      if (!slider.settings.nextSelector && !slider.settings.prevSelector) {
        // add the controls to the DOM
        slider.controls.directionEl = $('<div class="bx-controls-direction" />');
        // add the control elements to the directionEl
        slider.controls.directionEl.append(slider.controls.prev).append(slider.controls.next);
        // slider.viewport.append(slider.controls.directionEl);
        slider.controls.el.addClass('bx-has-controls-direction').append(slider.controls.directionEl);
      }
    };

    /**
     * Appends start / stop auto controls to the controls element
     */
    var appendControlsAuto = function() {
      slider.controls.start = $('<div class="bx-controls-auto-item"><a class="bx-start" href="">' + slider.settings.startText + '</a></div>');
      slider.controls.stop = $('<div class="bx-controls-auto-item"><a class="bx-stop" href="">' + slider.settings.stopText + '</a></div>');
      // add the controls to the DOM
      slider.controls.autoEl = $('<div class="bx-controls-auto" />');
      // on click actions to the controls
      slider.controls.autoEl.on('click', '.bx-start', clickStartBind);
      slider.controls.autoEl.on('click', '.bx-stop', clickStopBind);
      // if autoControlsCombine, insert only the "start" control
      if (slider.settings.autoControlsCombine) {
        slider.controls.autoEl.append(slider.controls.start);
      // if autoControlsCombine is false, insert both controls
      } else {
        slider.controls.autoEl.append(slider.controls.start).append(slider.controls.stop);
      }
      // if auto controls selector was supplied, populate it with the controls
      if (slider.settings.autoControlsSelector) {
        $(slider.settings.autoControlsSelector).html(slider.controls.autoEl);
      // if auto controls selector was not supplied, add it after the wrapper
      } else {
        slider.controls.el.addClass('bx-has-controls-auto').append(slider.controls.autoEl);
      }
      // update the auto controls
      updateAutoControls(slider.settings.autoStart ? 'stop' : 'start');
    };

    /**
     * Appends image captions to the DOM
     */
    var appendCaptions = function() {
      // cycle through each child
      slider.children.each(function(index) {
        // get the image title attribute
        var title = $(this).find('img:first').attr('title');
        // append the caption
        if (title !== undefined && ('' + title).length) {
          $(this).append('<div class="bx-caption"><span>' + title + '</span></div>');
        }
      });
    };

    /**
     * Click next binding
     *
     * @param e (event)
     *  - DOM event object
     */
    var clickNextBind = function(e) {
      e.preventDefault();
      if (slider.controls.el.hasClass('disabled')) { return; }
      // if auto show is running, stop it
      if (slider.settings.auto && slider.settings.stopAutoOnClick) { el.stopAuto(); }
      el.goToNextSlide();
    };

    /**
     * Click prev binding
     *
     * @param e (event)
     *  - DOM event object
     */
    var clickPrevBind = function(e) {
      e.preventDefault();
      if (slider.controls.el.hasClass('disabled')) { return; }
      // if auto show is running, stop it
      if (slider.settings.auto && slider.settings.stopAutoOnClick) { el.stopAuto(); }
      el.goToPrevSlide();
    };

    /**
     * Click start binding
     *
     * @param e (event)
     *  - DOM event object
     */
    var clickStartBind = function(e) {
      el.startAuto();
      e.preventDefault();
    };

    /**
     * Click stop binding
     *
     * @param e (event)
     *  - DOM event object
     */
    var clickStopBind = function(e) {
      el.stopAuto();
      e.preventDefault();
    };

    /**
     * Click pager binding
     *
     * @param e (event)
     *  - DOM event object
     */
    var clickPagerBind = function(e) {
      var pagerLink, pagerIndex;
      e.preventDefault();
      if (slider.controls.el.hasClass('disabled')) {
        return;
      }
      // if auto show is running, stop it
      if (slider.settings.auto  && slider.settings.stopAutoOnClick) { el.stopAuto(); }
      pagerLink = $(e.currentTarget);
      if (pagerLink.attr('data-slide-index') !== undefined) {
        pagerIndex = parseInt(pagerLink.attr('data-slide-index'));
        // if clicked pager link is not active, continue with the goToSlide call
        if (pagerIndex !== slider.active.index) { el.goToSlide(pagerIndex); }
      }
    };

    /**
     * Updates the pager links with an active class
     *
     * @param slideIndex (int)
     *  - index of slide to make active
     */
    var updatePagerActive = function(slideIndex) {
      // if "short" pager type
      var len = slider.children.length; // nb of children
      if (slider.settings.pagerType === 'short') {
        if (slider.settings.maxSlides > 1) {
          len = Math.ceil(slider.children.length / slider.settings.maxSlides);
        }
        slider.pagerEl.html((slideIndex + 1) + slider.settings.pagerShortSeparator + len);
        return;
      }
      // remove all pager active classes
      slider.pagerEl.find('a').removeClass('active');
      // apply the active class for all pagers
      slider.pagerEl.each(function(i, el) { $(el).find('a').eq(slideIndex).addClass('active'); });
    };

    /**
     * Performs needed actions after a slide transition
     */
    var updateAfterSlideTransition = function() {
      // if infinite loop is true
      if (slider.settings.infiniteLoop) {
        var position = '';
        // first slide
        if (slider.active.index === 0) {
          // set the new position
          position = slider.children.eq(0).position();
        // carousel, last slide
        } else if (slider.active.index === getPagerQty() - 1 && slider.carousel) {
          position = slider.children.eq((getPagerQty() - 1) * getMoveBy()).position();
        // last slide
        } else if (slider.active.index === slider.children.length - 1) {
          position = slider.children.eq(slider.children.length - 1).position();
        }
        if (position) {
          if (slider.settings.mode === 'horizontal') { setPositionProperty(-position.left, 'reset', 0); }
          else if (slider.settings.mode === 'vertical') { setPositionProperty(-position.top, 'reset', 0); }
        }
      }
      // declare that the transition is complete
      slider.working = false;
      // onSlideAfter callback
      slider.settings.onSlideAfter.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
    };

    /**
     * Updates the auto controls state (either active, or combined switch)
     *
     * @param state (string) "start", "stop"
     *  - the new state of the auto show
     */
    var updateAutoControls = function(state) {
      // if autoControlsCombine is true, replace the current control with the new state
      if (slider.settings.autoControlsCombine) {
        slider.controls.autoEl.html(slider.controls[state]);
      // if autoControlsCombine is false, apply the "active" class to the appropriate control
      } else {
        slider.controls.autoEl.find('a').removeClass('active');
        slider.controls.autoEl.find('a:not(.bx-' + state + ')').addClass('active');
      }
    };

    /**
     * Updates the direction controls (checks if either should be hidden)
     */
    var updateDirectionControls = function() {
      if (getPagerQty() === 1) {
        slider.controls.prev.addClass('disabled');
        slider.controls.next.addClass('disabled');
      } else if (!slider.settings.infiniteLoop && slider.settings.hideControlOnEnd) {
        // if first slide
        if (slider.active.index === 0) {
          slider.controls.prev.addClass('disabled');
          slider.controls.next.removeClass('disabled');
        // if last slide
        } else if (slider.active.index === getPagerQty() - 1) {
          slider.controls.next.addClass('disabled');
          slider.controls.prev.removeClass('disabled');
        // if any slide in the middle
        } else {
          slider.controls.prev.removeClass('disabled');
          slider.controls.next.removeClass('disabled');
        }
      }
    };
	/* auto start and stop functions */
	var windowFocusHandler = function() { el.startAuto(); };
	var windowBlurHandler = function() { el.stopAuto(); };
    /**
     * Initializes the auto process
     */
    var initAuto = function() {
      // if autoDelay was supplied, launch the auto show using a setTimeout() call
      if (slider.settings.autoDelay > 0) {
        setTimeout(el.startAuto, slider.settings.autoDelay);
      // if autoDelay was not supplied, start the auto show normally
      } else {
        el.startAuto();

        //add focus and blur events to ensure its running if timeout gets paused
        $(window).focus(windowFocusHandler).blur(windowBlurHandler);
      }
      // if autoHover is requested
      if (slider.settings.autoHover) {
        // on el hover
        el.hover(function() {
          // if the auto show is currently playing (has an active interval)
          if (slider.interval) {
            // stop the auto show and pass true argument which will prevent control update
            el.stopAuto(true);
            // create a new autoPaused value which will be used by the relative "mouseout" event
            slider.autoPaused = true;
          }
        }, function() {
          // if the autoPaused value was created be the prior "mouseover" event
          if (slider.autoPaused) {
            // start the auto show and pass true argument which will prevent control update
            el.startAuto(true);
            // reset the autoPaused value
            slider.autoPaused = null;
          }
        });
      }
    };

    /**
     * Initializes the ticker process
     */
    var initTicker = function() {
      var startPosition = 0,
      position, transform, value, idx, ratio, property, newSpeed, totalDimens;
      // if autoDirection is "next", append a clone of the entire slider
      if (slider.settings.autoDirection === 'next') {
        el.append(slider.children.clone().addClass('bx-clone'));
      // if autoDirection is "prev", prepend a clone of the entire slider, and set the left position
      } else {
        el.prepend(slider.children.clone().addClass('bx-clone'));
        position = slider.children.first().position();
        startPosition = slider.settings.mode === 'horizontal' ? -position.left : -position.top;
      }
      setPositionProperty(startPosition, 'reset', 0);
      // do not allow controls in ticker mode
      slider.settings.pager = false;
      slider.settings.controls = false;
      slider.settings.autoControls = false;
      // if autoHover is requested
      if (slider.settings.tickerHover) {
        if (slider.usingCSS) {
          idx = slider.settings.mode === 'horizontal' ? 4 : 5;
          slider.viewport.hover(function() {
            transform = el.css('-' + slider.cssPrefix + '-transform');
            value = parseFloat(transform.split(',')[idx]);
            setPositionProperty(value, 'reset', 0);
          }, function() {
            totalDimens = 0;
            slider.children.each(function(index) {
              totalDimens += slider.settings.mode === 'horizontal' ? $(this).outerWidth(true) : $(this).outerHeight(true);
            });
            // calculate the speed ratio (used to determine the new speed to finish the paused animation)
            ratio = slider.settings.speed / totalDimens;
            // determine which property to use
            property = slider.settings.mode === 'horizontal' ? 'left' : 'top';
            // calculate the new speed
            newSpeed = ratio * (totalDimens - (Math.abs(parseInt(value))));
            tickerLoop(newSpeed);
          });
        } else {
          // on el hover
          slider.viewport.hover(function() {
            el.stop();
          }, function() {
            // calculate the total width of children (used to calculate the speed ratio)
            totalDimens = 0;
            slider.children.each(function(index) {
              totalDimens += slider.settings.mode === 'horizontal' ? $(this).outerWidth(true) : $(this).outerHeight(true);
            });
            // calculate the speed ratio (used to determine the new speed to finish the paused animation)
            ratio = slider.settings.speed / totalDimens;
            // determine which property to use
            property = slider.settings.mode === 'horizontal' ? 'left' : 'top';
            // calculate the new speed
            newSpeed = ratio * (totalDimens - (Math.abs(parseInt(el.css(property)))));
            tickerLoop(newSpeed);
          });
        }
      }
      // start the ticker loop
      tickerLoop();
    };

    /**
     * Runs a continuous loop, news ticker-style
     */
    var tickerLoop = function(resumeSpeed) {
      var speed = resumeSpeed ? resumeSpeed : slider.settings.speed,
      position = {left: 0, top: 0},
      reset = {left: 0, top: 0},
      animateProperty, resetValue, params;

      // if "next" animate left position to last child, then reset left to 0
      if (slider.settings.autoDirection === 'next') {
        position = el.find('.bx-clone').first().position();
      // if "prev" animate left position to 0, then reset left to first non-clone child
      } else {
        reset = slider.children.first().position();
      }
      animateProperty = slider.settings.mode === 'horizontal' ? -position.left : -position.top;
      resetValue = slider.settings.mode === 'horizontal' ? -reset.left : -reset.top;
      params = {resetValue: resetValue};
      setPositionProperty(animateProperty, 'ticker', speed, params);
    };

    /**
     * Check if el is on screen
     */
    var isOnScreen = function(el) {
      var win = $(window),
      viewport = {
        top: win.scrollTop(),
        left: win.scrollLeft()
      },
      bounds = el.offset();

      viewport.right = viewport.left + win.width();
      viewport.bottom = viewport.top + win.height();
      bounds.right = bounds.left + el.outerWidth();
      bounds.bottom = bounds.top + el.outerHeight();

      return (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));
    };

    /**
     * Initializes keyboard events
     */
    var keyPress = function(e) {
      var activeElementTag = document.activeElement.tagName.toLowerCase(),
      tagFilters = 'input|textarea',
      p = new RegExp(activeElementTag,['i']),
      result = p.exec(tagFilters);

      if (result == null && isOnScreen(el)) {
        if (e.keyCode === 39) {
          clickNextBind(e);
          return false;
        } else if (e.keyCode === 37) {
          clickPrevBind(e);
          return false;
        }
      }
    };

    /**
     * Initializes touch events
     */
    var initTouch = function() {
      // initialize object to contain all touch values
      slider.touch = {
        start: {x: 0, y: 0},
        end: {x: 0, y: 0}
      };
      slider.viewport.on('touchstart MSPointerDown pointerdown', onTouchStart);

      //for browsers that have implemented pointer events and fire a click after
      //every pointerup regardless of whether pointerup is on same screen location as pointerdown or not
      slider.viewport.on('click', '.bxslider a', function(e) {
        if (slider.viewport.hasClass('click-disabled')) {
          e.preventDefault();
          slider.viewport.removeClass('click-disabled');
        }
      });
    };

    /**
     * Event handler for "touchstart"
     *
     * @param e (event)
     *  - DOM event object
     */
    var onTouchStart = function(e) {
      // watch only for left mouse, touch contact and pen contact
      // touchstart event object doesn`t have button property
      if (e.type !== 'touchstart' && e.button !== 0) {
        return;
      }
      e.preventDefault();
      //disable slider controls while user is interacting with slides to avoid slider freeze that happens on touch devices when a slide swipe happens immediately after interacting with slider controls
      slider.controls.el.addClass('disabled');

      if (slider.working) {
        slider.controls.el.removeClass('disabled');
      } else {
        // record the original position when touch starts
        slider.touch.originalPos = el.position();
        var orig = e.originalEvent,
        touchPoints = (typeof orig.changedTouches !== 'undefined') ? orig.changedTouches : [orig];
		var chromePointerEvents = typeof PointerEvent === 'function'; 
		if (chromePointerEvents) { 
			if (orig.pointerId === undefined) { 
				return;
			} 
		}
        // record the starting touch x, y coordinates
        slider.touch.start.x = touchPoints[0].pageX;
        slider.touch.start.y = touchPoints[0].pageY;

        if (slider.viewport.get(0).setPointerCapture) {
          slider.pointerId = orig.pointerId;
          slider.viewport.get(0).setPointerCapture(slider.pointerId);
        }
        // store original event data for click fixation
        slider.originalClickTarget = orig.originalTarget || orig.target;
        slider.originalClickButton = orig.button;
        slider.originalClickButtons = orig.buttons;
        slider.originalEventType = orig.type;
        // at this moment we don`t know what it is click or swipe
        slider.hasMove = false;
        // on a "touchmove" event to the viewport
        slider.viewport.on('touchmove MSPointerMove pointermove', onTouchMove);
        // on a "touchend" event to the viewport
        slider.viewport.on('touchend MSPointerUp pointerup', onTouchEnd);
        slider.viewport.on('MSPointerCancel pointercancel', onPointerCancel);
      }
    };

    /**
     * Cancel Pointer for Windows Phone
     *
     * @param e (event)
     *  - DOM event object
     */
    var onPointerCancel = function(e) {
      e.preventDefault();
      /* onPointerCancel handler is needed to deal with situations when a touchend
      doesn't fire after a touchstart (this happens on windows phones only) */
      setPositionProperty(slider.touch.originalPos.left, 'reset', 0);

      //remove handlers
      slider.controls.el.removeClass('disabled');
      slider.viewport.off('MSPointerCancel pointercancel', onPointerCancel);
      slider.viewport.off('touchmove MSPointerMove pointermove', onTouchMove);
      slider.viewport.off('touchend MSPointerUp pointerup', onTouchEnd);
      if (slider.viewport.get(0).releasePointerCapture) {
        slider.viewport.get(0).releasePointerCapture(slider.pointerId);
      }
    };

    /**
     * Event handler for "touchmove"
     *
     * @param e (event)
     *  - DOM event object
     */
    var onTouchMove = function(e) {
      var orig = e.originalEvent,
      touchPoints = (typeof orig.changedTouches !== 'undefined') ? orig.changedTouches : [orig],
      // if scrolling on y axis, do not prevent default
      xMovement = Math.abs(touchPoints[0].pageX - slider.touch.start.x),
      yMovement = Math.abs(touchPoints[0].pageY - slider.touch.start.y),
      value = 0,
      change = 0;
      // this is swipe
      slider.hasMove = true;

      // x axis swipe
      if ((xMovement * 3) > yMovement && slider.settings.preventDefaultSwipeX) {
        e.preventDefault();
      // y axis swipe
      } else if ((yMovement * 3) > xMovement && slider.settings.preventDefaultSwipeY) {
        e.preventDefault();
      }
      if (e.type !== 'touchmove') {
        e.preventDefault();
      }

      if (slider.settings.mode !== 'fade' && slider.settings.oneToOneTouch) {
        // if horizontal, drag along x axis
        if (slider.settings.mode === 'horizontal') {
          change = touchPoints[0].pageX - slider.touch.start.x;
          value = slider.touch.originalPos.left + change;
        // if vertical, drag along y axis
        } else {
          change = touchPoints[0].pageY - slider.touch.start.y;
          value = slider.touch.originalPos.top + change;
        }
        setPositionProperty(value, 'reset', 0);
      }
    };

    /**
     * Event handler for "touchend"
     *
     * @param e (event)
     *  - DOM event object
     */
    var onTouchEnd = function(e) {
      e.preventDefault();
      slider.viewport.off('touchmove MSPointerMove pointermove', onTouchMove);
      //enable slider controls as soon as user stops interacing with slides
      slider.controls.el.removeClass('disabled');
      var orig    = e.originalEvent,
      touchPoints = (typeof orig.changedTouches !== 'undefined') ? orig.changedTouches : [orig],
      value       = 0,
      distance    = 0;
      // record end x, y positions
      slider.touch.end.x = touchPoints[0].pageX;
      slider.touch.end.y = touchPoints[0].pageY;
      // if fade mode, check if absolute x distance clears the threshold
      if (slider.settings.mode === 'fade') {
        distance = Math.abs(slider.touch.start.x - slider.touch.end.x);
        if (distance >= slider.settings.swipeThreshold) {
          if (slider.touch.start.x > slider.touch.end.x) {
            el.goToNextSlide();
          } else {
            el.goToPrevSlide();
          }
          el.stopAuto();
        }
      // not fade mode
      } else {
        // calculate distance and el's animate property
        if (slider.settings.mode === 'horizontal') {
          distance = slider.touch.end.x - slider.touch.start.x;
          value = slider.touch.originalPos.left;
        } else {
          distance = slider.touch.end.y - slider.touch.start.y;
          value = slider.touch.originalPos.top;
        }
        // if not infinite loop and first / last slide, do not attempt a slide transition
        if (!slider.settings.infiniteLoop && ((slider.active.index === 0 && distance > 0) || (slider.active.last && distance < 0))) {
          setPositionProperty(value, 'reset', 200);
        } else {
          // check if distance clears threshold
          if (Math.abs(distance) >= slider.settings.swipeThreshold) {
            if (distance < 0) {
              el.goToNextSlide();
            } else {
              el.goToPrevSlide();
            }
            el.stopAuto();
          } else {
            // el.animate(property, 200);
            setPositionProperty(value, 'reset', 200);
          }
        }
      }
      slider.viewport.off('touchend MSPointerUp pointerup', onTouchEnd);

      if (slider.viewport.get(0).releasePointerCapture) {
        slider.viewport.get(0).releasePointerCapture(slider.pointerId);
      }
      // if slider had swipe with left mouse, touch contact and pen contact
      if (slider.hasMove === false && (slider.originalClickButton === 0 || slider.originalEventType === 'touchstart')) {
        // trigger click event (fix for Firefox59 and PointerEvent standard compatibility)
        $(slider.originalClickTarget).trigger({
          type: 'click',
          button: slider.originalClickButton,
          buttons: slider.originalClickButtons
        });
      }
    };

    /**
     * Window resize event callback
     */
    var resizeWindow = function(e) {
      // don't do anything if slider isn't initialized.
      if (!slider.initialized) { return; }
      // Delay if slider working.
      if (slider.working) {
        window.setTimeout(resizeWindow, 10);
      } else {
        // get the new window dimens (again, thank you IE)
        var windowWidthNew = $(window).width(),
        windowHeightNew = $(window).height();
        // make sure that it is a true window resize
        // *we must check this because our dinosaur friend IE fires a window resize event when certain DOM elements
        // are resized. Can you just die already?*
        if (windowWidth !== windowWidthNew || windowHeight !== windowHeightNew) {
          // set the new window dimens
          windowWidth = windowWidthNew;
          windowHeight = windowHeightNew;
          // update all dynamic elements
          el.redrawSlider();
          // Call user resize handler
          slider.settings.onSliderResize.call(el, slider.active.index);
        }
      }
    };

    /**
     * Adds an aria-hidden=true attribute to each element
     *
     * @param startVisibleIndex (int)
     *  - the first visible element's index
     */
    var applyAriaHiddenAttributes = function(startVisibleIndex) {
      var numberOfSlidesShowing = getNumberSlidesShowing();
      // only apply attributes if the setting is enabled and not in ticker mode
      if (slider.settings.ariaHidden && !slider.settings.ticker) {
        // add aria-hidden=true to all elements
        slider.children.attr('aria-hidden', 'true');
        // get the visible elements and change to aria-hidden=false
        slider.children.slice(startVisibleIndex, startVisibleIndex + numberOfSlidesShowing).attr('aria-hidden', 'false');
      }
    };

    /**
     * Returns index according to present page range
     *
     * @param slideOndex (int)
     *  - the desired slide index
     */
    var setSlideIndex = function(slideIndex) {
      if (slideIndex < 0) {
        if (slider.settings.infiniteLoop) {
          return getPagerQty() - 1;
        }else {
          //we don't go to undefined slides
          return slider.active.index;
        }
      // if slideIndex is greater than children length, set active index to 0 (this happens during infinite loop)
      } else if (slideIndex >= getPagerQty()) {
        if (slider.settings.infiniteLoop) {
          return 0;
        } else {
          //we don't move to undefined pages
          return slider.active.index;
        }
      // set active index to requested slide
      } else {
        return slideIndex;
      }
    };

    /**
     * ===================================================================================
     * = PUBLIC FUNCTIONS
     * ===================================================================================
     */

    /**
     * Performs slide transition to the specified slide
     *
     * @param slideIndex (int)
     *  - the destination slide's index (zero-based)
     *
     * @param direction (string)
     *  - INTERNAL USE ONLY - the direction of travel ("prev" / "next")
     */
    el.goToSlide = function(slideIndex, direction) {
      // onSlideBefore, onSlideNext, onSlidePrev callbacks
      // Allow transition canceling based on returned value
      var performTransition = true,
      moveBy = 0,
      position = {left: 0, top: 0},
      lastChild = null,
      lastShowingIndex, eq, value, requestEl;
      // store the old index
      slider.oldIndex = slider.active.index;
      //set new index
      slider.active.index = setSlideIndex(slideIndex);

      // if plugin is currently in motion, ignore request
      if (slider.working || slider.active.index === slider.oldIndex) { return; }
      // declare that plugin is in motion
      slider.working = true;

      performTransition = slider.settings.onSlideBefore.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);

      // If transitions canceled, reset and return
      if (typeof (performTransition) !== 'undefined' && !performTransition) {
        slider.active.index = slider.oldIndex; // restore old index
        slider.working = false; // is not in motion
        return;
      }

      if (direction === 'next') {
        // Prevent canceling in future functions or lack there-of from negating previous commands to cancel
        if (!slider.settings.onSlideNext.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index)) {
          performTransition = false;
        }
      } else if (direction === 'prev') {
        // Prevent canceling in future functions or lack there-of from negating previous commands to cancel
        if (!slider.settings.onSlidePrev.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index)) {
          performTransition = false;
        }
      }

      // check if last slide
      slider.active.last = slider.active.index >= getPagerQty() - 1;
      // update the pager with active class
      if (slider.settings.pager || slider.settings.pagerCustom) { updatePagerActive(slider.active.index); }
      // // check for direction control update
      if (slider.settings.controls) { updateDirectionControls(); }
      // if slider is set to mode: "fade"
      if (slider.settings.mode === 'fade') {
        // if adaptiveHeight is true and next height is different from current height, animate to the new height
        if (slider.settings.adaptiveHeight && slider.viewport.height() !== getViewportHeight()) {
          slider.viewport.animate({height: getViewportHeight()}, slider.settings.adaptiveHeightSpeed);
        }
        // fade out the visible child and reset its z-index value
        slider.children.filter(':visible').fadeOut(slider.settings.speed).css({zIndex: 0});
        // fade in the newly requested slide
        slider.children.eq(slider.active.index).css('zIndex', slider.settings.slideZIndex + 1).fadeIn(slider.settings.speed, function() {
          $(this).css('zIndex', slider.settings.slideZIndex);
          updateAfterSlideTransition();
        });
      // slider mode is not "fade"
      } else {
        // if adaptiveHeight is true and next height is different from current height, animate to the new height
        if (slider.settings.adaptiveHeight && slider.viewport.height() !== getViewportHeight()) {
          slider.viewport.animate({height: getViewportHeight()}, slider.settings.adaptiveHeightSpeed);
        }
        // if carousel and not infinite loop
        if (!slider.settings.infiniteLoop && slider.carousel && slider.active.last) {
          if (slider.settings.mode === 'horizontal') {
            // get the last child position
            lastChild = slider.children.eq(slider.children.length - 1);
            position = lastChild.position();
            // calculate the position of the last slide
            moveBy = slider.viewport.width() - lastChild.outerWidth();
          } else {
            // get last showing index position
            lastShowingIndex = slider.children.length - slider.settings.minSlides;
            position = slider.children.eq(lastShowingIndex).position();
          }
          // horizontal carousel, going previous while on first slide (infiniteLoop mode)
        } else if (slider.carousel && slider.active.last && direction === 'prev') {
          // get the last child position
          eq = slider.settings.moveSlides === 1 ? slider.settings.maxSlides - getMoveBy() : ((getPagerQty() - 1) * getMoveBy()) - (slider.children.length - slider.settings.maxSlides);
          lastChild = el.children('.bx-clone').eq(eq);
          position = lastChild.position();
        // if infinite loop and "Next" is clicked on the last slide
        } else if (direction === 'next' && slider.active.index === 0) {
          // get the last clone position
          position = el.find('> .bx-clone').eq(slider.settings.maxSlides).position();
          slider.active.last = false;
        // normal non-zero requests
        } else if (slideIndex >= 0) {
          //parseInt is applied to allow floats for slides/page
          requestEl = slideIndex * parseInt(getMoveBy());
          position = slider.children.eq(requestEl).position();
        }

        /* If the position doesn't exist
         * (e.g. if you destroy the slider on a next click),
         * it doesn't throw an error.
         */
        if (typeof (position) !== 'undefined') {
          value = slider.settings.mode === 'horizontal' ? -(position.left - moveBy) : -position.top;
          // plugin values to be animated
          setPositionProperty(value, 'slide', slider.settings.speed);
        }
        slider.working = false;
      }
      if (slider.settings.ariaHidden) { applyAriaHiddenAttributes(slider.active.index * getMoveBy()); }
    };

    /**
     * Transitions to the next slide in the show
     */
    el.goToNextSlide = function() {
      // if infiniteLoop is false and last page is showing, disregard call
      if (!slider.settings.infiniteLoop && slider.active.last) { return; }
	  if (slider.working === true){ return ;}
      var pagerIndex = parseInt(slider.active.index) + 1;
      el.goToSlide(pagerIndex, 'next');
    };

    /**
     * Transitions to the prev slide in the show
     */
    el.goToPrevSlide = function() {
      // if infiniteLoop is false and last page is showing, disregard call
      if (!slider.settings.infiniteLoop && slider.active.index === 0) { return; }
	  if (slider.working === true){ return ;}
      var pagerIndex = parseInt(slider.active.index) - 1;
      el.goToSlide(pagerIndex, 'prev');
    };

    /**
     * Starts the auto show
     *
     * @param preventControlUpdate (boolean)
     *  - if true, auto controls state will not be updated
     */
    el.startAuto = function(preventControlUpdate) {
      // if an interval already exists, disregard call
      if (slider.interval) { return; }
      // create an interval
      slider.interval = setInterval(function() {
        if (slider.settings.autoDirection === 'next') {
          el.goToNextSlide();
        } else {
          el.goToPrevSlide();
        }
      }, slider.settings.pause);
	  //allback for when the auto rotate status changes
	  slider.settings.onAutoChange.call(el, true);
      // if auto controls are displayed and preventControlUpdate is not true
      if (slider.settings.autoControls && preventControlUpdate !== true) { updateAutoControls('stop'); }
    };

    /**
     * Stops the auto show
     *
     * @param preventControlUpdate (boolean)
     *  - if true, auto controls state will not be updated
     */
    el.stopAuto = function(preventControlUpdate) {
      // if slider is auto paused, just clear that state
      if (slider.autoPaused) slider.autoPaused = false;
      // if no interval exists, disregard call
      if (!slider.interval) { return; }
      // clear the interval
      clearInterval(slider.interval);
      slider.interval = null;
	  //allback for when the auto rotate status changes
	  slider.settings.onAutoChange.call(el, false);
      // if auto controls are displayed and preventControlUpdate is not true
      if (slider.settings.autoControls && preventControlUpdate !== true) { updateAutoControls('start'); }
    };

    /**
     * Returns current slide index (zero-based)
     */
    el.getCurrentSlide = function() {
      return slider.active.index;
    };

    /**
     * Returns current slide element
     */
    el.getCurrentSlideElement = function() {
      return slider.children.eq(slider.active.index);
    };

    /**
     * Returns a slide element
     * @param index (int)
     *  - The index (zero-based) of the element you want returned.
     */
    el.getSlideElement = function(index) {
      return slider.children.eq(index);
    };

    /**
     * Returns number of slides in show
     */
    el.getSlideCount = function() {
      return slider.children.length;
    };

    /**
     * Return slider.working variable
     */
    el.isWorking = function() {
      return slider.working;
    };

    /**
     * Update all dynamic slider elements
     */
    el.redrawSlider = function() {
      // resize all children in ratio to new screen size
      slider.children.add(el.find('.bx-clone')).outerWidth(getSlideWidth());
      // adjust the height
      slider.viewport.css('height', getViewportHeight());
      // update the slide position
      if (!slider.settings.ticker) { setSlidePosition(); }
      // if active.last was true before the screen resize, we want
      // to keep it last no matter what screen size we end on
      if (slider.active.last) { slider.active.index = getPagerQty() - 1; }
      // if the active index (page) no longer exists due to the resize, simply set the index as last
      if (slider.active.index >= getPagerQty()) { slider.active.last = true; }
      // if a pager is being displayed and a custom pager is not being used, update it
      if (slider.settings.pager && !slider.settings.pagerCustom) {
        populatePager();
        updatePagerActive(slider.active.index);
      }
      if (slider.settings.ariaHidden) { applyAriaHiddenAttributes(slider.active.index * getMoveBy()); }
    };

    /**
     * Destroy the current instance of the slider (revert everything back to original state)
     */
    el.destroySlider = function() {
      // don't do anything if slider has already been destroyed
      if (!slider.initialized) { return; }
      slider.initialized = false;
      $('.bx-clone', this).remove();
      slider.children.each(function() {
        if ($(this).data('origStyle') !== undefined) {
          $(this).attr('style', $(this).data('origStyle'));
        } else {
          $(this).removeAttr('style');
        }
      });
      if ($(this).data('origStyle') !== undefined) {
        this.attr('style', $(this).data('origStyle'));
      } else {
        $(this).removeAttr('style');
      }
      $(this).unwrap().unwrap();
      if (slider.controls.el) { slider.controls.el.remove(); }
      if (slider.controls.next) { slider.controls.next.remove(); }
      if (slider.controls.prev) { slider.controls.prev.remove(); }
      if (slider.pagerEl && slider.settings.controls && !slider.settings.pagerCustom) { slider.pagerEl.remove(); }
      $('.bx-caption', this).remove();
      if (slider.controls.autoEl) { slider.controls.autoEl.remove(); }
      clearInterval(slider.interval);
      if (slider.settings.responsive) { $(window).off('resize', resizeWindow); }
      if (slider.settings.keyboardEnabled) { $(document).off('keydown', keyPress); }
      //remove self reference in data
      $(this).removeData('bxSlider');
	  // remove global window handlers
	  $(window).off('blur', windowBlurHandler).off('focus', windowFocusHandler);
    };

    /**
     * Reload the slider (revert all DOM changes, and re-initialize)
     */
    el.reloadSlider = function(settings) {
      if (settings !== undefined) { options = settings; }
      el.destroySlider();
      init();
      //store reference to self in order to access public functions later
      $(el).data('bxSlider', this);
    };

    init();

    $(el).data('bxSlider', this);

    // returns the current jQuery object
    return this;
  };

})(jQuery);


/***/ }),

/***/ "./node_modules/core-js/modules/_a-function.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_a-function.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_add-to-unscopables.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_add-to-unscopables.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_an-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_an-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-includes.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_array-includes.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-methods.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_array-methods.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var asc = __webpack_require__(/*! ./_array-species-create */ "./node_modules/core-js/modules/_array-species-create.js");
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-species-constructor.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-species-constructor.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-species-create.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-species-create.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(/*! ./_array-species-constructor */ "./node_modules/core-js/modules/_array-species-constructor.js");

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_cof.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_cof.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_core.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_core.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.5.7' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),

/***/ "./node_modules/core-js/modules/_ctx.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_ctx.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_defined.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_defined.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_descriptors.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_descriptors.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/modules/_dom-create.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_dom-create.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),

/***/ "./node_modules/core-js/modules/_enum-bug-keys.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_enum-bug-keys.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),

/***/ "./node_modules/core-js/modules/_enum-keys.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_enum-keys.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_export.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_export.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),

/***/ "./node_modules/core-js/modules/_fails.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_fails.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_fix-re-wks.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_fix-re-wks.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var fns = exec(defined, SYMBOL, ''[KEY]);
  var strfn = fns[0];
  var rxfn = fns[1];
  if (fails(function () {
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  })) {
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_flags.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_flags.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_global.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_global.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),

/***/ "./node_modules/core-js/modules/_has.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_has.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_hide.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_hide.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_html.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_html.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document;
module.exports = document && document.documentElement;


/***/ }),

/***/ "./node_modules/core-js/modules/_ie8-dom-define.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_ie8-dom-define.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/modules/_inherit-if-required.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_inherit-if-required.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var setPrototypeOf = __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js").set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iobject.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_iobject.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-array.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_is-array.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-regexp.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-regexp.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var MATCH = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-create.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-create.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var descriptor = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(IteratorPrototype, __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-define.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-define.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var $iterCreate = __webpack_require__(/*! ./_iter-create */ "./node_modules/core-js/modules/_iter-create.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-step.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-step.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iterators.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iterators.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/modules/_library.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_library.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),

/***/ "./node_modules/core-js/modules/_meta.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_meta.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('meta');
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var setDesc = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-create.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-create.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var dPs = __webpack_require__(/*! ./_object-dps */ "./node_modules/core-js/modules/_object-dps.js");
var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js");
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js").appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-dp.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dp.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var dP = Object.defineProperty;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-dps.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dps.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopd.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopd.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopn-ext.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopn-ext.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopn.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopn.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/modules/_object-keys-internal.js");
var hiddenKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js").concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gops.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gops.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gpo.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gpo.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys-internal.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys-internal.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var arrayIndexOf = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(false);
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/modules/_object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js");

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-pie.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-pie.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),

/***/ "./node_modules/core-js/modules/_property-desc.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_property-desc.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_redefine.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var SRC = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js").inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});


/***/ }),

/***/ "./node_modules/core-js/modules/_set-proto.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_set-proto.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js")(Function.call, __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),

/***/ "./node_modules/core-js/modules/_set-species.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_set-species.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_set-to-string-tag.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_set-to-string-tag.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_shared-key.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_shared-key.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('keys');
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_shared.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_shared.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js") ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "./node_modules/core-js/modules/_strict-method.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_strict-method.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_string-html.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_string-html.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-absolute-index.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_to-absolute-index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-integer.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-integer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-iobject.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-iobject.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-length.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-length.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-primitive.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_to-primitive.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "./node_modules/core-js/modules/_uid.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_uid.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_wks-define.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_wks-define.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/core-js/modules/_wks-ext.js");
var defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_wks-ext.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_wks-ext.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");


/***/ }),

/***/ "./node_modules/core-js/modules/_wks.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_wks.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('wks');
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
var Symbol = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.find.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.find.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $find = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")(KEY);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.iterator.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js");
var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/core-js/modules/_iter-step.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js")(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.sort.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.sort.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.name.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.function.name.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.constructor.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.constructor.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");
var $flags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && (!CORRECT_NEW || __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  re2[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(global, 'RegExp', $RegExp);
}

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")('RegExp');


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.flags.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.flags.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && /./g.flags != 'g') __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js")
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.match.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.match.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// @@match logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('match', 1, function (defined, MATCH, $match) {
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.replace.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.replace.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// @@replace logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('replace', 2, function (defined, REPLACE, $replace) {
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue) {
    'use strict';
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.search.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.search.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// @@search logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('search', 1, function (defined, SEARCH, $search) {
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.split.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.split.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// @@split logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('split', 2, function (defined, SPLIT, $split) {
  'use strict';
  var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");
  var _split = $split;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while (match = separatorCopy.exec(string)) {
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          // eslint-disable-next-line no-loop-func
          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
          });
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    $split = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit) {
    var O = defined(this);
    var fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.to-string.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(/*! ./es6.regexp.flags */ "./node_modules/core-js/modules/es6.regexp.flags.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var $flags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.sub.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.sub.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.13 String.prototype.sub()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.symbol.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es6.symbol.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var META = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").KEY;
var $fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/core-js/modules/_wks-ext.js");
var wksDefine = __webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/modules/_wks-define.js");
var enumKeys = __webpack_require__(/*! ./_enum-keys */ "./node_modules/core-js/modules/_enum-keys.js");
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var _create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var gOPNExt = __webpack_require__(/*! ./_object-gopn-ext */ "./node_modules/core-js/modules/_object-gopn-ext.js");
var $GOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var $DP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var $keys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js").f = $propertyIsEnumerable;
  __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js").f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js")) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),

/***/ "./node_modules/core-js/modules/es7.symbol.async-iterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.symbol.async-iterator.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/modules/_wks-define.js")('asyncIterator');


/***/ }),

/***/ "./node_modules/core-js/modules/web.dom.iterable.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom.iterable.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__(/*! ./es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}


/***/ }),

/***/ "./node_modules/js-cookie/src/js.cookie.js":
/*!*************************************************!*\
  !*** ./node_modules/js-cookie/src/js.cookie.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * JavaScript Cookie v2.2.0
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader = false;
	if (true) {
		!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		registeredInModuleLoader = true;
	}
	if (true) {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function init (converter) {
		function api (key, value, attributes) {
			var result;
			if (typeof document === 'undefined') {
				return;
			}

			// Write

			if (arguments.length > 1) {
				attributes = extend({
					path: '/'
				}, api.defaults, attributes);

				if (typeof attributes.expires === 'number') {
					var expires = new Date();
					expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
					attributes.expires = expires;
				}

				// We're using "expires" because "max-age" is not supported by IE
				attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

				try {
					result = JSON.stringify(value);
					if (/^[\{\[]/.test(result)) {
						value = result;
					}
				} catch (e) {}

				if (!converter.write) {
					value = encodeURIComponent(String(value))
						.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
				} else {
					value = converter.write(value, key);
				}

				key = encodeURIComponent(String(key));
				key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
				key = key.replace(/[\(\)]/g, escape);

				var stringifiedAttributes = '';

				for (var attributeName in attributes) {
					if (!attributes[attributeName]) {
						continue;
					}
					stringifiedAttributes += '; ' + attributeName;
					if (attributes[attributeName] === true) {
						continue;
					}
					stringifiedAttributes += '=' + attributes[attributeName];
				}
				return (document.cookie = key + '=' + value + stringifiedAttributes);
			}

			// Read

			if (!key) {
				result = {};
			}

			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all. Also prevents odd result when
			// calling "get()"
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var rdecode = /(%[0-9A-Z]{2})+/g;
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (!this.json && cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = parts[0].replace(rdecode, decodeURIComponent);
					cookie = converter.read ?
						converter.read(cookie, name) : converter(cookie, name) ||
						cookie.replace(rdecode, decodeURIComponent);

					if (this.json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					if (key === name) {
						result = cookie;
						break;
					}

					if (!key) {
						result[name] = cookie;
					}
				} catch (e) {}
			}

			return result;
		}

		api.set = api;
		api.get = function (key) {
			return api.call(api, key);
		};
		api.getJSON = function () {
			return api.apply({
				json: true
			}, [].slice.call(arguments));
		};
		api.defaults = {};

		api.remove = function (key, attributes) {
			api(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));


/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(originalModule) {
	if (!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/js/main/custom-sliders/index.js":
/*!*********************************************!*\
  !*** ./src/js/main/custom-sliders/index.js ***!
  \*********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__);




module.exports = function () {
  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js"),
      sliders = [__webpack_require__(/*! ./profiles-carousel */ "./src/js/main/custom-sliders/profiles-carousel.js"), __webpack_require__(/*! ./stat-carousel */ "./src/js/main/custom-sliders/stat-carousel.js")],
      create = function create(data) {
    var $carouselWrapper = $(data.id),
        $carousel = $carouselWrapper.find('.bxslider'),
        slideCount = $carousel.children().length;
    $carouselWrapper.removeClass('carousel-loading');

    if (slideCount > 1) {
      $carousel.bxSlider(data.options(slideCount));
    }
  },
      init = function init() {
    for (var i = 0; i < sliders.length; i++) {
      create(sliders[i]);
    }
  };

  return init;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/custom-sliders/profiles-carousel.js":
/*!*********************************************************!*\
  !*** ./src/js/main/custom-sliders/profiles-carousel.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  id: '#profiles-carousel',
  options: function options() {
    return {
      auto: false,
      autoControls: false,
      controls: true,
      pager: true,
      infiniteLoop: false,
      responsive: true,
      slideWidth: 330,
      slideMargin: 0,
      adaptiveHeight: false,
      hideControlOnEnd: true,
      maxSlides: 1,
      prevText: '<i class="fa fa-angle-left"></i>',
      nextText: '<i class="fa fa-angle-right"></i>'
    };
  }
};

/***/ }),

/***/ "./src/js/main/custom-sliders/stat-carousel.js":
/*!*****************************************************!*\
  !*** ./src/js/main/custom-sliders/stat-carousel.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  id: '#statistic-carousel',
  options: function options(n) {
    return {
      auto: false,
      autoControls: false,
      controls: true,
      pager: false,
      infiniteLoop: false,
      responsive: true,
      slideWidth: 300,
      slideMargin: 60,
      adaptiveHeight: true,
      hideControlOnEnd: true,
      minSlides: 1,
      moveSlides: 1,
      maxSlides: n >= 3 ? 3 : 2,
      prevText: '<i class=" fa fa-caret-left"></i>',
      nextText: '<i class=" fa fa-caret-right"></i>'
    };
  }
};

/***/ }),

/***/ "./src/js/main/deferred.js":
/*!*********************************!*\
  !*** ./src/js/main/deferred.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  var $ = __webpack_require__(/*! ../main/jquery */ "./src/js/main/jquery/index.js");

  $(function () {
    if (typeof CITY_OPTIONS !== 'undefined' && CITY_OPTIONS.defer) {
      for (var i = 0; i < CITY_OPTIONS.defer.length; i++) {
        CITY_OPTIONS.defer[i]();
      }
    }
  });
};

/***/ }),

/***/ "./src/js/main/funcs/az-listing.js":
/*!*****************************************!*\
  !*** ./src/js/main/funcs/az-listing.js ***!
  \*****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__);




module.exports = function () {
  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js");

  return function (azListings) {
    azListings.each(function () {
      var me = $(this),
          letters = me.find('.letter-list a'),
          letterGroups = me.find('.letter-group'),
          select = function select(anchor) {
        letters.filter('[href!="' + anchor + '"]').removeClass('selected');
        letters.filter('[href="' + anchor + '"]').addClass('selected');

        if (anchor) {
          var name = anchor.substr(1);
          letterGroups.filter('[name!="' + name + '"]').addClass('unselected').removeClass('selected');
          letterGroups.filter('[name="' + name + '"]').removeClass('unselected').addClass('selected');
        } else {
          letterGroups.removeClass('unselected').removeClass('selected');
        }
      };

      letterGroups.find('.go-up').click(function (e) {
        e.preventDefault();
        select(false);
      }).children('span').html('Show all').end().children('i').removeClass('fa-arrow-circle-o-up').addClass('fa-reply');
      letters.click(function (e) {
        select($(this).attr('href'));
        e.preventDefault();
      });
    });
  };
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/funcs/create-gallery.js":
/*!*********************************************!*\
  !*** ./src/js/main/funcs/create-gallery.js ***!
  \*********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.regexp.replace */ "./node_modules/core-js/modules/es6.regexp.replace.js");
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_1__);





/**
 * Create a image Gallery
 *
 * @param {Object} a jquery object representing a single instance of a gallery
 * @param {Boolean} true if the gallery is in a widget, false if in main content body
 * @return {Object || Undefined} returns the galleria jQuery object if
 * successful else undefined - for instance if $gallery is not a jQuery object
 *
 */
module.exports = function () {
  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js"),
      debug = __webpack_require__(/*! ../../utils/debug */ "./src/js/utils/debug.js"),
      state = 'not-loaded',
      queue = [],
      create = function create(gallery, options) {
    var root = gallery.attr('id').replace('gallery-', ''),
        galleryInner = gallery.find('.gallery-inner');
    $.getJSON('/apis/galleries/galleria-json?root=' + root, function (data) {
      //remove loader
      gallery.find('span.loading').hide();
      gallery.css('opacity', '1');
      options.data_source = data;
      galleryInner.galleria(options);
    });
    return galleryInner;
  },
      loadComplete = function loadComplete() {
    //get id of root from id of gallery div
    state = 'loaded';

    for (var i = 0; i < queue.length; i++) {
      create(queue[i].gallery, queue[i].options);
    }

    queue = [];
  },
      request = function request(gallery) {
    var galleryInner = gallery && gallery.find('.gallery-inner');

    if (!galleryInner || galleryInner.length === 0) {
      debug('no gallery found');
    } else {
      var galleriaOptions = {
        height: 0.5625,
        lightbox: galleryInner.hasClass('lightbox'),
        maxScaleRatio: 1,
        preload: 2,
        showInfo: galleryInner.hasClass('caption'),
        imageCrop: false,
        debug: false,
        extend: function extend()
        /* defined but not used: options */
        {
          if ('city' === gallery.attr('data-theme')) {
            gallery.prepend($('<div/>', {
              class: 'cg-caption'
            }));
            /*loadstart is triggered every time galleria loads an image*/

            this.bind('loadstart', function (e) {
              var data = this._data[e.index],
                  //caption is refound here as it needs to be scoped to this gallery
              caption = gallery.find('.cg-caption');

              if (data.m_caption) {
                caption.html(data.m_caption);
              } else {
                caption.html('&nbsp;');
              }
            });
          }
        }
      };

      if (state === 'loaded') {
        create(gallery, galleriaOptions);
      } else {
        if (state === 'not-loaded') {
          state = 'loading';
          $.getMultiJsScripts(['lib/jquery/plugins/galleria/galleria-1.4.2/galleria-1.4.2.min.js', 'lib/jquery/plugins/galleria/galleria-1.4.2/themes/classic/galleria.classic.city.min.js'], loadComplete, true);
        }

        gallery.prepend($('<div class="loading"><div class="loading__icon"><i class="fa fa-refresh fa-spin"></i></div></span>'));
        queue.push({
          gallery: gallery,
          options: galleriaOptions
        });
      }
    }
  };

  return request;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/funcs/create-slider.js":
/*!********************************************!*\
  !*** ./src/js/main/funcs/create-slider.js ***!
  \********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__);




/*
 * sets up a carousel on a page
 * @param carouselObj : Object
 *
 */
module.exports = function () {
  'use strict';

  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js"),
      debug = __webpack_require__(/*! ../../utils/debug */ "./src/js/utils/debug.js");

  return function ($carouselObj) {
    if ($carouselObj.length !== 0) {
      $carouselObj.append($('#main-carousel-slides').html());

      var numSlides = $carouselObj.children().length,
          $promoWrapper = $carouselObj.parents('#promo-wrapper'),
          overrideControls = numSlides > 1 ? {} : {
        auto: false,
        autoControls: false,
        touchEnabled: false,
        controls: false,
        pager: false
      },
          // options for the home carousel
      sliderOptions = $promoWrapper.attr('data-carousel-type') !== 'home' ? {} : {
        autoHover: true,
        touchEnabled: true,
        preventDefaultSwipeX: true,
        preventDefaultSwipeY: false,
        buildPager: function buildPager(index) {
          return '<span class="fa fa-circle" aria-hidden="true"></span><span class="sr-only">Go to slide ' + (index + 1) + '</span>';
        },
        startText: '<span class="bg fa fa-circle" aria-hidden="true"></span><span class="ic fa fa-play"></span><span class="sr-only">Play slides</span>',
        stopText: '<span class="bg fa fa-circle" aria-hidden="true"></span><span class="ic fa fa-pause"></span><span class="sr-only">Stop slides</span>',
        prevText: '<span class="bg fa fa-circle" aria-hidden="true"></span><span class="ic fa fa-chevron-left"></span><span class="sr-only">Previous slide</span>',
        nextText: '<span class="bg fa fa-circle" aria-hidden="true"></span><span class="ic fa fa-chevron-right"></span><span class="sr-only">Next slide</span>'
      },
          clearingOptions = $promoWrapper.attr('data-carousel-type') !== 'clearing' ? {} : {
        auto: false,
        controls: false,
        pager: false,
        autoControls: false,
        autoStart: false
      },
          initSlider = function initSlider() {
        var options = $.extend({
          auto: true,
          autoControls: true,
          pause: 15000,
          autoHover: true,
          touchEnabled: false,
          preventDefaultSwipeX: false,
          preventDefaultSwipeY: false,
          startText: '<span class="visuallyhidden">Start slider</span><span class="fa fa-play"></span>',
          stopText: '<span class="visuallyhidden">Pause slider</span><span class="fa fa-pause"></span>',
          nextText: '<span class="visuallyhidden">Next slide</span><span class="fa fa-caret-right"></span>',
          prevText: '<span class="visuallyhidden">Previous slide</span><span class="fa fa-caret-left"></span>',
          controls: true,
          adaptiveHeight: true,
          onSliderLoad: function onSliderLoad(e) {
            if (numSlides < 2) {
              $promoWrapper.addClass('promo-wrapper--single');
            }
          }
        }, sliderOptions, overrideControls, clearingOptions);
        $promoWrapper.removeClass('carousel-loading');
        $promoWrapper.find('.loading-fa-icon').remove();
        $promoWrapper.find('.bxslider').show();
        $carouselObj.bxSlider(options);
        $promoWrapper.find('.bx-controls').show();
      }; //set up slider


      if (numSlides > 0) {
        debug('more than 0 slides, need carousel. NumSlides =' + numSlides);
        initSlider($carouselObj);
      }
    }
  };
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/funcs/custom-ajax.js":
/*!******************************************!*\
  !*** ./src/js/main/funcs/custom-ajax.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Custom AJAX Method
 *
 * // Success
 * customAJAX('//www.city.ac.uk/fb/search.html', {'somekey': 'somevalue'})
 * .done(
 *     function(data)) {
 *         doSomething();
 *     }
 * );
 *
 * // Failure
 * customAJAX('//www.city.ac.uk/fb/search.html', {'somekey': 'somevalue'})
 * .fail(
 *     function(xhr, status, err)) {
 *         console.log(status, err);
 *     }
 * );
 *
 * // Success or Failure
 * customAJAX('//www.city.ac.uk/fb/search.html', {'somekey': 'somevalue'})
 * .then(
 *     function(data)) {
 *         doSomething();
 *     },
 *     function(xhr, status, err) {
 *         console.log(status, err);
 *     }
 * );
 */
module.exports = function () {
  'use strict';

  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js");

  return function (inputURL, inputData, inputType) {
    var promise = $.ajax({
      url: inputURL,
      data: inputData,
      type: inputType ? inputType : 'get'
    }).done(function (responseData, status, xhr) {// Pre-determined Logic for Success
      // (this will run before any `.done()` or `.fail()` where `customAJAX()` is called)
      // console.log('Success');
    }).fail(function (xhr, status, err) {// Pre-determined Logic for Failure
      // (this will run before any `.done()` or `.fail()` where `customAJAX()` is called)
      // console.log('Failure');
    });
    return promise;
  };
}();

/***/ }),

/***/ "./src/js/main/funcs/cyclic-popup.js":
/*!*******************************************!*\
  !*** ./src/js/main/funcs/cyclic-popup.js ***!
  \*******************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__);




module.exports = function () {
  'use strict';

  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js");

  return function () {
    $('.cyclic-popup-item__title').click(function () {
      var clickedItemLink = $(this);
      var clickedItem = $(this).closest('.cyclic-popup-item');
      var popupGroup = clickedItemLink.closest('.cyclic-popup-group');
      var allPopupItems = popupGroup.children('.cyclic-popup-item');
      var currentIndex = 0;
      var noOfPopupItems = allPopupItems.length;
      allPopupItems.each(function (index, value) {
        if ($(this).get(0) === clickedItem.get(0)) {
          currentIndex = index;
        }
      });

      function getWidth() {
        var width = $(window).width() * 0.9;

        if (width > 500) {
          width = 500;
        }

        return width;
      }

      function getNextItem(reverse) {
        if (reverse == false) {
          if (currentIndex == noOfPopupItems - 1) {
            currentIndex = 0;
          } else {
            currentIndex++;
          }
        } else {
          if (currentIndex == 0) {
            currentIndex = noOfPopupItems - 1;
          } else {
            currentIndex--;
          }
        }

        var nextItem = allPopupItems.get(currentIndex);
        return nextItem;
      }

      function setDialogButtons() {
        if (noOfPopupItems > 1) {
          var buttonsToSet = [{
            text: 'PREVIOUS',
            click: function click() {
              $(this).html($(getNextItem(true)).find('.cyclic-popup-item__detail').html());
            }
          }, {
            text: 'NEXT',
            click: function click() {
              $(this).html($(getNextItem(false)).find('.cyclic-popup-item__detail').html());
            }
          }];
          $('.ui-dialog-content').dialog('option', 'buttons', buttonsToSet);
        }
      }

      $('<div></div>').dialog({
        modal: true,
        draggable: false,
        resizable: false,
        width: getWidth(),
        close: function close() {
          $(this).dialog('destroy');
        },
        create: function create() {
          $(this).closest('.ui-dialog').addClass('cyclic-popup');
          $(this).html(clickedItem.find('.cyclic-popup-item__detail').html());
          setDialogButtons();
        },
        open: function open() {
          if (noOfPopupItems > 1) {
            $(this).parent().find('button:nth-child(2)').focus();
          } else {
            $(this).parent().find('.ui-dialog-titlebar-close').focus();
          }
        }
      });
      $(window).resize(function () {
        $('.ui-dialog-content').dialog('option', 'position', 'center');
        $('.ui-dialog-content').dialog('option', 'width', getWidth());
      });
      $('.ui-widget-overlay').click(function () {
        $('div:ui-dialog:visible').dialog('close');
      });
      return false;
    });
  };
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/funcs/download-file-types.js":
/*!**************************************************!*\
  !*** ./src/js/main/funcs/download-file-types.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * used for detecting download filetypes by extension
 */
module.exports = ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'pps', 'ppsx', 'pdf', 'jpg', 'png', 'gif', 'zip', 'txt', 'rtf', 'mp3'];

/***/ }),

/***/ "./src/js/main/funcs/footer.js":
/*!*************************************!*\
  !*** ./src/js/main/funcs/footer.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  init = function init() {
    $('.link--goto').click(function () {
      $('html,body').scrollTop(0);
      return false;
    });
  };

  return init();
};

/***/ }),

/***/ "./src/js/main/funcs/get-window-width.js":
/*!***********************************************!*\
  !*** ./src/js/main/funcs/get-window-width.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * gets window width
 * @param: {Object} - window object
 * @return: {Number} - window width
 */
module.exports = function () {
  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js");

  return function (w) {
    return Math.round($(w).width());
  };
}();

/***/ }),

/***/ "./src/js/main/funcs/header-navs.js":
/*!******************************************!*\
  !*** ./src/js/main/funcs/header-navs.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  var $globalNavToggler = $('.global-nav__toggle'),
      $headerSearch = $('.header__search'),
      $headerSearchToggler = $('.header__search__toggle'),
      $globalNavWrapper = $('.global-nav__wrapper'),
      $globalNavDropToggler = $('.global-nav__menu-item__toggle'),
      $utilNav = $('.header__util__audience__button-link'),
      $body = $('body'),
      $compactWidth = 748,
      $stickyHeaderScrollThreshold = 70,
      $lastScrollTop = 0,
      $window = $(window),
      closeMenus = function closeMenus() {
    $('.header__util__item--active').removeClass('header__util__item--active');
    $('.global-nav__menu-item--active').removeClass('global-nav__menu-item--active');
    $globalNavDropToggler.attr('aria-expanded', 'false');
    $utilNav.attr('aria-expanded', 'false');
  },
      toggleMobileGlobalMenu = function toggleMobileGlobalMenu(openMenu) {
    var openSearch = openMenu === 'search' && !$headerSearch.hasClass('header__search--active');
    var openNav = openMenu === 'nav' && !$globalNavWrapper.hasClass('global-nav__wrapper--active');
    $globalNavWrapper.toggleClass('global-nav__wrapper--active', openNav);
    $globalNavToggler.attr('aria-expanded', openNav ? 'true' : 'false');
    $headerSearch.toggleClass('header__search--active', openSearch);
    $headerSearchToggler.attr('aria-expanded', openSearch ? 'true' : 'false');
  },
      initSkipLinks = function initSkipLinks() {
    $('#skip-to-query').click(function () {
      setTimeout(function () {
        toggleMobileGlobalMenu('search');
        $('#query').focus();
      }, 25);
    });
    $('#skip-to-accessibility').click(function () {
      setTimeout(function () {
        $('#accessibility').focus();
      }, 25);
    });
  },
      updateTabNavigation = function updateTabNavigation() {
    if ($window.width() > $compactWidth) {
      $('.global-nav__menu-item__link').each(function () {
        if ($(this).siblings('.global-nav__menu-item__toggle').length) {
          $(this).attr('tabindex', -1);
        }
      });
    } else {
      $('.global-nav__menu-item__link').removeAttr('tabindex');
    }
  },
      updateScrollDown = function updateScrollDown() {
    var $newScrollTop = $(this).scrollTop();
    $body.toggleClass('scroll-down', $newScrollTop > $stickyHeaderScrollThreshold && $newScrollTop < $lastScrollTop);
    $lastScrollTop = $newScrollTop;
  },
      init = function init() {
    initSkipLinks();
    /**
     * Update classname depending on scroll position
     */

    $window.scroll(updateScrollDown);
    updateScrollDown();
    /**
     * With JS enabled, links going to other pages should not be reachable through the tab key,
     * as opposed to toggle links - except when menu is in compact view.
     */

    $window.resize(updateTabNavigation);
    updateTabNavigation();
    closeMenus();
    $utilNav.on('click', function (e) {
      var that = $(this),
          parent = that.parent('li'),
          targetIsActive = parent.hasClass('header__util__item--active');
      closeMenus();

      if (!targetIsActive) {
        parent.addClass('header__util__item--active');
        that.attr('aria-expanded', 'true');
      }

      e.preventDefault();
      e.stopPropagation();
      return false;
    });
    $body.click(function () {
      closeMenus();
    });
    /**
     * Not perfect as it relies on keyup instead of keydown
     */

    $body.keyup(function (e) {
      if (e.keyCode === 9 && $('.header__util__item--active,.global-nav__menu-item--active').length > 0 && !$(e.target).is('.header__util__item--active,.header__util__item--active *, .global-nav__menu-item--active, .global-nav__menu-item--active *')) {
        closeMenus();
      }
    });
    $globalNavDropToggler.on('click', function (e) {
      var that = $(this),
          parent = that.parents('.global-nav__menu-item'),
          targetIsActive = parent.hasClass('global-nav__menu-item--active');
      closeMenus();

      if (!targetIsActive) {
        parent.addClass('global-nav__menu-item--active');
        that.attr('aria-expanded', 'true');
      }

      e.preventDefault();
      e.stopPropagation();
      return false;
    });
    toggleMobileGlobalMenu('none');
    $globalNavToggler.on('click', function (e) {
      e.preventDefault();
      toggleMobileGlobalMenu('nav');
    });
    $headerSearchToggler.on('click', function (e) {
      e.preventDefault();
      toggleMobileGlobalMenu('search');
    });
  };

  return init();
};

/***/ }),

/***/ "./src/js/main/funcs/header-primary-nav.js":
/*!*************************************************!*\
  !*** ./src/js/main/funcs/header-primary-nav.js ***!
  \*************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.regexp.replace */ "./node_modules/core-js/modules/es6.regexp.replace.js");
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1__);





module.exports = function () {
  var $menuWrapper = $('.primary-menu-wrapper'),
      $menuToggle = $('.primary-menu-toggle'),
      $menu = $('.primary-menu'),
      updateToggleLink = function updateToggleLink(toggle, isOpen) {
    toggle.toggleClass('primary-menu__item-toggle--open', isOpen);
    toggle.attr('aria-expanded', isOpen ? 'true' : 'false');
  },
      buildMenu = function buildMenu() {
    $menu.find('li:has(ul)').addClass('primary-menu__item--branch').children('.primary-menu__item-interior').each(function (index) {
      $ariaLabel = 'show or hide items under ' + $(this).find('.primary-menu__item-text').text();
      $(this).append("<a class='primary-menu__item-toggle' href='#' aria-label='" + $ariaLabel + "'></a>");
    });
    $menuToggle.attr('aria-label', $menuToggle.find('.primary-menu-toggle__section-name').text() + ' menu');
  },
      highlightCurrentPage = function highlightCurrentPage() {
    var pathname = window.location.pathname.replace('/_nocache', '').replace('/_recache', '');
    $(".primary-menu .primary-menu__item-link[href$='" + pathname + "']").addClass('primary-menu__item-link--selected');
  },
      openCurrentSubmenus = function openCurrentSubmenus() {
    $menu.find('.primary-menu__submenu').each(function (index) {
      if ($(this).find('.primary-menu__item-link--selected').length > 0) {
        $(this).show();
        updateToggleLink($(this).prev().children('.primary-menu__item-toggle'), true);
      } else {
        $(this).hide();
        updateToggleLink($(this).prev().children('.primary-menu__item-toggle'), false);
      }
    });
  },
      openSubmenu = function openSubmenu($toggle) {
    updateToggleLink($toggle, true);
    $toggle.parent('.primary-menu__item-interior').next().slideDown('fast', function () {
      closeSameLevelSubmenus($toggle);
    });
  },
      closeSameLevelSubmenus = function closeSameLevelSubmenus($toggle) {
    var $siblingBranches = $toggle.closest('.primary-menu__item--branch').siblings('.primary-menu__item--branch');
    $.each($siblingBranches, function (index) {
      if ($(this).find('.primary-menu__item-link--selected').length <= 0) {
        updateToggleLink($(this).find('.primary-menu__item-toggle'), false);
        $(this).find('.primary-menu__submenu').slideUp('medium');
      }
    });
  },
      closeSubmenu = function closeSubmenu($toggle) {
    var $enclosingMenuItem = $toggle.closest('.primary-menu__item--branch');

    if ($enclosingMenuItem.find('.primary-menu__item-link--selected').length > 0) {
      updateToggleLink($toggle, false);
      $toggle.parent('.primary-menu__item-interior').next().slideUp('fast');
    } else {
      updateToggleLink($enclosingMenuItem.find('.primary-menu__item-toggle'), false);
      $enclosingMenuItem.find('.primary-menu__submenu').slideUp('fast');
    }
  },
      initMenu = function initMenu() {
    buildMenu();
    highlightCurrentPage();
    $menuToggle.attr('aria-expanded', 'false').click(function () {
      if ($menu.is(':hidden')) {
        openCurrentSubmenus();
      }

      var setOpen = !$menuToggle.hasClass('primary-menu-toggle--open');
      $menuToggle.toggleClass('primary-menu-toggle--open', setOpen);
      $menuToggle.attr('aria-expanded', setOpen ? 'true' : 'false');
      $menu.slideToggle('fast');
      return false;
    });
    $('.primary-menu__item-toggle').click(function () {
      if ($(this).hasClass('primary-menu__item-toggle--open')) {
        closeSubmenu($(this));
      } else {
        openSubmenu($(this));
      }

      return false;
    });
  };

  return initMenu();
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/funcs/image-accordion.js":
/*!**********************************************!*\
  !*** ./src/js/main/funcs/image-accordion.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  'use strict';

  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js");

  return function () {
    $('.image-accordion label').click(function () {
      var labelTarget = $(this).attr('for');
      $('#' + labelTarget).blur();
      $('#' + labelTarget).focus();
    });
    $('.image-accordion input[type="radio"]').change(function () {
      var radioInput = $(this);
      $('.image-accordion input[type="radio"]').removeClass('checked');

      if (this.checked) {
        radioInput.addClass('checked');
      }
    });
  };
}();

/***/ }),

/***/ "./src/js/main/funcs/image-creditation.js":
/*!************************************************!*\
  !*** ./src/js/main/funcs/image-creditation.js ***!
  \************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__);




/**
 * Toggle Visibility of Image Credit Component
 */
module.exports = function () {
  'use strict';

  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js");

  return function () {
    var $credits = $('.image-credit'),
        $creditItems = $('.credits-items'),
        $scpCreditsTitle = $('.credits-title'),
        creditButtonClass = '.image-credit__button',
        toggleImageCredit = function toggleImageCredit(node) {
      var state = node.attr('aria-pressed') === 'true' ? 'false' : 'true';
      node.attr('aria-pressed', state);
      node.parent().attr('aria-expanded', state);
    };

    $credits.each(function () {
      $(this).find(creditButtonClass).click(function (event) {
        event.preventDefault();
        toggleImageCredit($(this));
      });
    });
    $scpCreditsTitle.on('click', function () {
      $(this).toggleClass('credits-title--active').next('.credits-items').toggleClass('sr-only');
    });
  };
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/funcs/init-dropdowns.js":
/*!*********************************************!*\
  !*** ./src/js/main/funcs/init-dropdowns.js ***!
  \*********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.regexp.split */ "./node_modules/core-js/modules/es6.regexp.split.js");
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1__);





/**
 * Initialise Dropdowns
 */
module.exports = function () {
  'use strict';

  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js");

  var contentWrapper = $('.city-health__container');
  var loading = $('.city-health__loading');
  var form = $('.city-health__form');
  var inputs = form.find('input');

  var fixPagination = function fixPagination() {
    $('.city-health__pagination--all a').click(function (e) {
      e.preventDefault();
      var page = $(this).attr('href').split('result_314729_result_page=')[1];
      reload({
        result_314729_result_page: page
      });
    });
    $('.city-health__pagination--filtered a').click(function (e) {
      e.preventDefault();
      var page = $(this).attr('href').split('current_result_page=')[1].split('&')[0];
      reload({
        current_result_page: page
      });
    });
  };

  var reload = function reload(fixedParams) {
    var params = $.extend({
      t: new Date().getTime()
    }, fixedParams);
    inputs.each(function () {
      var input = $(this);
      var name = input.attr('name');
      var value = input.val();

      if (name && name.length > 0 && value && value.length > 0) {
        params[name] = value;
      }
    });
    contentWrapper.css('display', 'none');
    loading.css('display', 'inline-block');
    $.get('//www.city.ac.uk/api/city-health-courses/_nocache', params, function (data) {}).done(function (data) {
      contentWrapper.html(data);
    }).always(function (data) {
      contentWrapper.css('display', 'block');
      loading.css('display', 'none');
      fixPagination();
    });
  };

  return function () {
    $('.city-health__form .dropdown-select').cityDropdown({
      onselect: function onselect() {
        reload();
      }
    });
    fixPagination();
  };
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/funcs/init-dynamic-map.js":
/*!***********************************************!*\
  !*** ./src/js/main/funcs/init-dynamic-map.js ***!
  \***********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.function.name */ "./node_modules/core-js/modules/es6.function.name.js");
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_0__);




/**
 * creates dynamic google maps
 * @return: Undefined
 */
module.exports = function () {
  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js"),
      onLoad = function onLoad(dynamicMap) {
    var iii,
        currentMarker,
        marker,
        centerMarker,
        gmap,
        labelBox,
        infoWindow,
        gmapData,
        userMapCenter,
        locationRootNode = dynamicMap.attr('data-locations-node'),
        computedSize = new google.maps.Size(36, 43),
        infoWindowOffSet = new google.maps.Size(0, -30),
        gmapColourOptions = [{
      featureType: 'landscape',
      stylers: [{
        saturation: -60
      }, {
        lightness: 65
      }, {
        visibility: 'on'
      }]
    }, {
      featureType: 'poi',
      stylers: [{
        saturation: -40
      }, {
        lightness: 40
      }, {
        visibility: 'simplified'
      }]
    }, {
      featureType: 'road.highway',
      stylers: [{
        saturation: -80
      }, {
        lightness: 40
      }, {
        visibility: 'simplified'
      }]
    }, {
      featureType: 'road.arterial',
      stylers: [{
        saturation: -60
      }, {
        lightness: 40
      }, {
        visibility: 'on'
      }]
    }, {
      featureType: 'road.local',
      stylers: [{
        saturation: -60
      }, {
        lightness: 40
      }, {
        visibility: 'on'
      }]
    }, {
      featureType: 'transit',
      stylers: [{
        saturation: -60
      }, {
        lightness: 40
      }, {
        visibility: 'simplified'
      }]
    }, {
      featureType: 'administrative.province',
      stylers: [{
        visibility: 'off'
      }]
    }, {
      featureType: 'water',
      elementType: 'labels',
      stylers: [{
        visibility: 'on'
      }, {
        lightness: -10
      }, {
        saturation: 10
      }]
    }, {
      featureType: 'water',
      elementType: 'geometry',
      stylers: [{
        lightness: -10
      }, {
        saturation: 10
      }]
    }, {
      featureType: 'transit.station',
      stylers: [{
        saturation: 30
      }, {
        lightness: -10
      }, {
        visibility: 'on'
      }]
    }],
        attachClickEvent = function attachClickEvent(map, marker, labeledBox, description) {
      // on click on a marker, set the content of infowindow and open it
      //also center the map on that marker
      google.maps.event.addListener(marker, 'click', function () {
        infoWindow.setContent('<span class="marker-description">' + description + '</span>');
        infoWindow.setPosition(marker.position);
        infoWindow.open(map);
        map.panTo(marker.position);
      });
    },
        placeCenterMarker = function placeCenterMarker(map, marker) {
      // the marker for the center of the map
      centerMarker = new google.maps.Marker({
        icon: {
          url: marker.icon
        },
        map: map,
        visible: true,
        position: new google.maps.LatLng(marker.latitude, marker.longitude),
        title: marker.name
      });
      centerMarker.setZIndex(180);
      google.maps.event.addListener(centerMarker, 'click', function () {
        infoWindow.setContent('<span class="marker-title">' + centerMarker.title + '</span><span class="marker-description">' + marker.description + '</span>');
        infoWindow.setPosition(centerMarker.position);
        infoWindow.open(map);
      });
    },
        placeAllMarker = function placeAllMarker(markers) {
      for (iii = 0; iii < markers.length; iii++) {
        currentMarker = markers[iii]; // define a new marker

        marker = new google.maps.Marker({
          icon: {
            url: currentMarker.icon
          },
          map: gmap,
          visible: true,
          position: new google.maps.LatLng(currentMarker.latitude, currentMarker.longitude),
          title: currentMarker.name
        }); // set a label for each marker
        // uses google map plugin

        labelBox = new InfoBox({
          content: marker.title,
          position: marker.position,
          pane: 'mapPane',
          closeBoxURL: '',
          disableAutoPan: true,
          boxStyle: {
            width: 'auto'
          }
        });
        labelBox.open(gmap);
        attachClickEvent(gmap, marker, labelBox, currentMarker.description + '&nbsp;');
      }
    }; // call the google maps location api in matrix to get the data on the markers and the initial map parameters


    $.ajax({
      url: '//www.city.ac.uk/api/google-map-locations?root=' + locationRootNode,
      dataType: 'json'
    }).done(function (data) {
      if (data !== null) {
        // map and markers data
        gmapData = data; // create the map

        gmap = new google.maps.Map(document.getElementById('dynamic-gmap'), {
          scrollwheel: false,
          streetViewControl: false,
          zoom: gmapData.loadOptions.zoom,
          center: new google.maps.LatLng(gmapData.loadOptions.latitude, gmapData.loadOptions.longitude),
          styles: gmapColourOptions
        }); // create a new info window

        infoWindow = new google.maps.InfoWindow({
          pixelOffset: infoWindowOffSet
        }); // create all the markers except the central one
        // add a label to each of them

        placeAllMarker(gmapData.markers); // add a marker for the center of the map

        placeCenterMarker(gmap, gmapData.centerMarker); // on resizing the map, make sure we keep the current center position

        google.maps.event.addDomListener(window, 'resize', function () {
          userMapCenter = gmap.getCenter();
          google.maps.event.trigger(gmap, 'resize');
          gmap.setCenter(userMapCenter);
        });
      }
    });
  };

  return function (dynamicMap) {
    if (dynamicMap.length > 0) {
      $.getMultiJsScripts(['lib/google/map/infobox-packed-1.1.9.js'], onLoad.bind(null, dynamicMap));
    }
  };
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/funcs/init-image-carousel.js":
/*!**************************************************!*\
  !*** ./src/js/main/funcs/init-image-carousel.js ***!
  \**************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__);




module.exports = function () {
  'use strict';

  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js");

  return function () {
    $('.image-carousel').each(function () {
      var carousel = $(this);
      var slides = carousel.children();
      slides.each(function (i) {
        $(this).attr('data-index', i);
      }).wrapAll('<div></div>');

      var updateActive = function updateActive(slideElement, oldIndex, newIndex) {
        carousel.find('.image-carouse__item--active').removeClass('image-carouse__item--active');
        carousel.find('.image-carouse__item[data-index="' + newIndex + '"]').addClass('image-carouse__item--active');
      };

      var slider = null;
      var options = {
        controls: true,
        touchEnabled: true,
        preventDefaultSwipeX: true,
        preventDefaultSwipeY: false,
        nextText: '<span><span class="sr-only">Go to next slide</span><span class="fa fa-chevron-right" aria-hidden="true"></span></span>',
        prevText: '<span><span class="sr-only">Go to previous slide</span><span class="fa fa-chevron-left" aria-hidden="true"></span></span>',
        pager: false,
        moveSlides: 1,
        slideWidth: 0,
        firstSlideMargin: 0,
        onSlideBefore: updateActive,
        onSlideAfter: updateActive,
        onSliderLoad: function onSliderLoad(currentIndex) {
          carousel.find('.bx-controls a').attr('role', 'button');

          if (parseInt(carousel.find('.image-carouse__item').css('width')) !== options.slideWidth) {
            setTimeout(update, 0);
          } else {
            carousel.find('.image-carouse__item[data-index="' + currentIndex + '"]').addClass('image-carouse__item--active');
            carousel.find('.image-carouse__item').css({
              'margin-left': options.firstSlideMargin + 'px',
              'margin-right': -options.firstSlideMargin + 'px'
            });
          }
        }
      };

      var update = function update() {
        var width = carousel.width();

        if (Modernizr.mq('(min-width: 600px)')) {
          options.maxSlides = 2;
          options.slideWidth = Math.round(0.5 * (20 + width));
          options.firstSlideMargin = 0.25 * width - 5;
        } else {
          options.maxSlides = 1;
          options.slideWidth = width;
          options.firstSlideMargin = 0;
        }

        if (slider === null) {
          slider = carousel.children().bxSlider(options);
        } else {
          slider.reloadSlider(options);
        }
      };

      $(window).resize(update);
    });
  };
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/funcs/init-news-events-strip.js":
/*!*****************************************************!*\
  !*** ./src/js/main/funcs/init-news-events-strip.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js"),
      screenWidth = -1,
      inMd = true,
      slider = null,
      $w = $(window),
      updateNewsSlider = function updateNewsSlider() {
    var $homeNews = $('.news-events-strip__news'),
        width = Math.round($w.width());

    if (width !== screenWidth) {
      screenWidth = width;
      var newInMd = screenWidth >= 850;

      if (newInMd !== inMd) {
        inMd = newInMd;

        if (inMd) {
          slider.destroySlider();
          setTimeout(function () {
            $homeNews.addClass('row').attr('style', '').children().addClass('col-xs-24 col-md-8').css('width', '');
          }, 0);
          slider = null;
        } else {
          slider = $homeNews.removeClass('row').children().removeClass('col-xs-24 col-md-8').end().bxSlider({
            autoHover: true,
            touchEnabled: true,
            preventDefaultSwipeX: true,
            preventDefaultSwipeY: false,
            adaptiveHeight: true,
            pager: false,
            autoControls: false,
            controls: true,
            prevText: '<i class="bg fa fa-circle"></i><i class="ic fa fa-chevron-left"></i>',
            nextText: '<i class="bg fa fa-circle"></i><i class="ic fa fa-chevron-right"></i>'
          });
        }
      }
    }
  };

  return function () {
    $w.resize(updateNewsSlider);
    updateNewsSlider();
  };
}();

/***/ }),

/***/ "./src/js/main/funcs/init-see-more.js":
/*!********************************************!*\
  !*** ./src/js/main/funcs/init-see-more.js ***!
  \********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__);




/**
 * Init see more widget
 */
module.exports = function () {
  'use strict';

  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js");

  return function () {
    var widgets = $('.see-more');
    widgets.each(function () {
      var widget = $(this);
      var toggle = widget.find('.see-more__toggle');
      var toggleLabel = toggle.find('.see-more__toggle__label');

      if (toggleLabel.length === 0) {
        toggleLabel = toggle;
      }

      var content = widget.find('.see-more__content');
      var showText = toggle.html();
      var hideText = toggle.attr('data-hide-text') || 'Hide';
      toggle.click(function (e) {
        e.preventDefault();

        if (widget.hasClass('see-more--active')) {
          toggleLabel.html(showText);
          widget.removeClass('see-more--active');
          content.slideUp();
        } else {
          widget.addClass('see-more--active');
          toggleLabel.html(hideText);
          content.slideDown();
        }
      });
    });
  };
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/funcs/init-white-cards.js":
/*!***********************************************!*\
  !*** ./src/js/main/funcs/init-white-cards.js ***!
  \***********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__);




module.exports = function () {
  'use strict';

  var initWhiteCards = function initWhiteCards() {
    if ($(window).width() < 600) {
      $('.white-card').each(function () {
        var box = $(this),
            content = box.find('.white-card__content');

        if (content.height() > 200) {
          content.addClass('white-card__content--read-more');
          var button = $('<div class="white-card__read-more">' + '<div class="white-card__read-more__bg"></div>' + '<a  href="#"><span>read more</span></a>' + '</div>').click(function (e) {
            content.removeClass('white-card__content--read-more');
            button.remove();
            e.preventDefault();
          }).appendTo(box);
        }
      });
    }

    $('.white-card .embed-container').videoPreview({
      allowFullscreen: true
    });
  };

  return initWhiteCards;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/funcs/placeholder-fallback.js":
/*!***************************************************!*\
  !*** ./src/js/main/funcs/placeholder-fallback.js ***!
  \***************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__);




// fallback for browsers that don't understand placeholder attribute
module.exports = function () {
  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js"),
      Modernizr = window.Modernizr;

  return function () {
    if (Modernizr && !Modernizr.input.placeholder) {
      var inputs = $('[placeholder]');
      inputs.focus(function () {
        var input = $(this);

        if (input.val() === input.attr('placeholder')) {
          input.val('');
          input.removeClass('placeholder');
        }
      }).blur(function () {
        var input = $(this);

        if (input.val() === '' || input.val() === input.attr('placeholder')) {
          input.addClass('placeholder');
          input.val(input.attr('placeholder'));
        }
      }).blur();
      inputs.parents('form').submit(function () {
        $(this).find('[placeholder]').each(function () {
          var input = $(this);

          if (input.val() === input.attr('placeholder')) {
            input.val('');
          }
        });
      });
    }
  };
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/funcs/popup-dialog.js":
/*!*******************************************!*\
  !*** ./src/js/main/funcs/popup-dialog.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Init see popup
 */
module.exports = function () {
  'use strict';

  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js");

  return function () {
    var anchors = $('a[data-popup-dialog]');
    anchors.each(function () {
      var anchor = $(this);
      anchor.click(function (e) {
        e.preventDefault();
        var link = $(e.currentTarget).attr('href');
        $('#' + anchor.attr('data-popup-dialog')).dialog({
          modal: true,
          title: anchor.attr('title'),
          width: 800,
          height: 500,
          draggable: false,
          resizable: false,
          buttons: [{
            text: 'Cancel',
            click: function click() {
              $(this).dialog('close');
            }
          }, {
            text: 'Accept',
            click: function click() {
              window.location = link;
              $(this).dialog('close');
            }
          }]
        });
      });
    });
  };
}();

/***/ }),

/***/ "./src/js/main/funcs/responsive-tables.js":
/*!************************************************!*\
  !*** ./src/js/main/funcs/responsive-tables.js ***!
  \************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__);




module.exports = function () {
  'use strict';

  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js");

  return function () {
    $('.responsive-table').each(function () {
      var thetable = $(this);
      thetable.find('tbody td').each(function () {
        $(this).attr('data-th', thetable.find('thead th:nth-child(' + ($(this).index() + 1) + ')').text());
      });
    });
  };
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/funcs/search-autocomplete.js":
/*!**************************************************!*\
  !*** ./src/js/main/funcs/search-autocomplete.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * adds autocomplete functionality to the main search bar, using jQuery UI
 * @param: {Object} form - jQuery object for form to run autoSuggest on
 * @param: {Object} input - jQuery object for input elements to run autoSuggest on
 * @param: {String} collection - the name of the Funnelback collection to query
 * @retun: {Undefined}
 */
module.exports = function () {
  'use strict';

  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js"),
      arrayDuplicateZapper = function arrayDuplicateZapper(myArray) {
    var myUniqueArray = [];
    $.each(myArray, function (i, el) {
      if ($.inArray(el, myUniqueArray) === -1) myUniqueArray.push(el);
    });
    return myUniqueArray;
  };

  return function (form, input, collection) {
    input.autocomplete({
      source: function source(request, response) {
        var fbcollection = collection || 'main-all';
        $.ajax({
          url: '/fb/suggest.json?collection=' + fbcollection + '&fmt=json',
          dataType: 'json',
          data: {
            partial_query: request.term
          },
          success: function success(data) {
            data = arrayDuplicateZapper(data);
            response($.map(data, function (item) {
              return {
                label: item
              };
            }));
          }
        }); //end $.ajax
      },
      //end source function
      minLength: 2,
      delay: 20,
      //when you have selected something
      select: function select(event, ui) {
        //close the drop down
        //need to create a dummy assignment, to please jslint
        //close is still performed
        var c = this.close; //make sure on click the selected value replaces the type value

        $(this).val(ui.item.value);
        form.submit();
      },
      //show the drop down
      open: function open() {
        $(this).removeClass('ui-corner-all').addClass('ui-corner-top');
      },
      //close the drop down
      close: function close() {
        $(this).removeClass('ui-corner-top').addClass('ui-corner-all');
      }
    });
  };
}();

/***/ }),

/***/ "./src/js/main/funcs/viewport-changed.js":
/*!***********************************************!*\
  !*** ./src/js/main/funcs/viewport-changed.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * returns true if the viewport size has changed -
 * useful in responsive layout, see
 * snook.ca/archives/javascript/ie6_fires_onresize
 */
module.exports = function (w) {
  return function () {
    var debug = __webpack_require__(/*! ../../utils/debug */ "./src/js/utils/debug.js"),
        changed = false,
        docEl = w.document.documentElement,
        coolOff = 20,
        //further calls within this window get
    //the same return value
    now = Date.now ? Date.now() : function () {
      return new Date().valueOf();
    }(); //set up a holder object (if it doesn't exist)


    w.viewport = w.viewport || {}; //these need zeroing before we begin (if not already set)

    w.viewport.dimensions = w.viewport.dimensions || {
      height: null,
      width: null
    }; //need to handle the situation where many calls to this
    //function happen in quick succession

    if (w.viewport.timeStamp && now - w.viewport.timeStamp < coolOff) {
      debug('within window, returning ' + w.viewport.storedResult);
      return w.viewport.storedResult;
    } //store the time of this call


    w.viewport.timeStamp = now; //have we changed viewport size?

    if (w.viewport.dimensions.width !== docEl.clientWidth || w.viewport.dimensions.height !== docEl.clientHeight) {
      changed = true;
    } //store new dimensions


    w.viewport.dimensions.height = docEl.clientHeight;
    w.viewport.dimensions.width = docEl.clientWidth; //store this result in case of a re-call within coolOff

    w.viewport.storedResult = changed;
    debug('viewport changed: ' + changed);
    return changed;
  };
}(window);

/***/ }),

/***/ "./src/js/main/index.js":
/*!******************************!*\
  !*** ./src/js/main/index.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var CITY = __webpack_require__(/*! ./main */ "./src/js/main/main.js"),
    deferred = __webpack_require__(/*! ./deferred */ "./src/js/main/deferred.js"),
    initJsFailureNotifier = __webpack_require__(/*! ./js-error-notifier */ "./src/js/main/js-error-notifier.js"),
    initWidgets = __webpack_require__(/*! ./widgets */ "./src/js/main/widgets.js"),
    initOnResize = __webpack_require__(/*! ./on-resize */ "./src/js/main/on-resize/index.js"),
    initCustomSliders = __webpack_require__(/*! ./custom-sliders */ "./src/js/main/custom-sliders/index.js");

CITY.init();
initJsFailureNotifier();
deferred();
initOnResize();
initWidgets();
initCustomSliders();

/***/ }),

/***/ "./src/js/main/jquery/index.js":
/*!*************************************!*\
  !*** ./src/js/main/jquery/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  __webpack_require__(/*! ./lib/jquery.min */ "./src/js/main/jquery/lib/jquery.min.js");

  __webpack_require__(/*! ./lib/jquery-ui.min */ "./src/js/main/jquery/lib/jquery-ui.min.js");

  __webpack_require__(/*! ./lib/jquery.ba-bbq.min */ "./src/js/main/jquery/lib/jquery.ba-bbq.min.js");

  __webpack_require__(/*! bxslider/dist/jquery.bxslider.js */ "./node_modules/bxslider/dist/jquery.bxslider.js");

  __webpack_require__(/*! ./jquery.idize */ "./src/js/main/jquery/jquery.idize.js")(window.jQuery);

  __webpack_require__(/*! ./jquery.citydropdown */ "./src/js/main/jquery/jquery.citydropdown.js")(window.jQuery);

  __webpack_require__(/*! ./jquery.accordion-tabs */ "./src/js/main/jquery/jquery.accordion-tabs.js")(window.jQuery);

  __webpack_require__(/*! ./jquery.youtubepreview */ "./src/js/main/jquery/jquery.youtubepreview.js")(window.jQuery);

  __webpack_require__(/*! ./jquery.multiscripts */ "./src/js/main/jquery/jquery.multiscripts.js")(window.jQuery);

  return window.jQuery;
}();

/***/ }),

/***/ "./src/js/main/jquery/jquery.accordion-tabs.js":
/*!*****************************************************!*\
  !*** ./src/js/main/jquery/jquery.accordion-tabs.js ***!
  \*****************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.regexp.match */ "./node_modules/core-js/modules/es6.regexp.match.js");
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1__);





module.exports = function ($) {
  var scrollTo = __webpack_require__(/*! ../../utils/scroll-to */ "./src/js/utils/scroll-to.js"),
      init = function init(widgets) {
    var w = $(window),
        map = {};
    widgets.each(function () {
      var widget = $(this),
          contentPanels = widget.find('>div >.content-panel'),
          id = widget.attr('id') || 'tab',
          activate = function activate(anchor) {
        var match = (anchor.attr('href') || '').match(/^#(.+)$/),
            newHeader = anchor.parent('h2');

        if (match) {
          var params = {},
              isTab = anchor.parent('li').length > 0,
              alreadySelected = !isTab && anchor.closest('.tab-panel').hasClass('selected'),
              contentPanel = anchor.closest('.tab-panel').find('.panel-content');
          params[id] = alreadySelected ? null : match[1];
          select(widget, params[id] || false);

          if (!$.isEmptyObject(newHeader.offset())) {
            $('html:not(:animated), body:not(:animated)').animate({
              scrollTop: newHeader.offset().top
            }, 'slow');
          }

          contentPanels.removeAttr('tabindex');

          if (anchor.parent().hasClass('accordion-toogle')) {
            contentPanel.attr('tabindex', '0');
            contentPanel.focus();
          } else {
            anchor.focus();
          }

          $.bbq.pushState(params);
        }
      };

      $('a[href^="#' + id + '="]').each(function () {
        var anchor = $(this),
            match = anchor.attr('href').match(/#([a-zA-Z0-9]+)=[a-zA-Z0-9]+/);

        if (match) {
          anchor.click(function () {
            $('html, body').animate({
              scrollTop: $('#' + id).offset().top
            }, 200);
          });
        }
      });
      map[id] = widget;
      widget.find('>ul a, >.tab-panel >.accordion-toogle a').click(function (e) {
        activate($(this));
        e.preventDefault();
      }).keydown(function (e) {
        if (e.which === 37) {
          activate($(this).parent().prev().children('a'));
        } else if (e.which === 39) {
          activate($(this).parent().next().children('a'));
        }
      });
    });
    w.on('hashchange', function () {
      var params = $.bbq.getState();

      for (var id in map) {
        if (map.hasOwnProperty(id)) {
          select(map[id], params[id] || false);
        }
      }
    });
    w.trigger('hashchange');
  },
      select = function select(widget, id) {
    widget.find('>.tab-panel.default').removeClass('default');
    widget.find('>ul .selected, >.tab-panel.selected').removeClass('selected');

    if (id) {
      var hash = '#' + id;
      widget.find('>ul a[href="' + hash + '"]').addClass('selected');
      widget.find(hash).addClass('selected');
    } else {
      widget.find('>ul li').first().find('a').addClass('selected');
      widget.find('>.tab-panel').first().addClass('default');
    }
  };

  $.fn.accordionTabs = function (opt) {
    init(this, opt);
    return this;
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/jquery/jquery.citydropdown.js":
/*!***************************************************!*\
  !*** ./src/js/main/jquery/jquery.citydropdown.js ***!
  \***************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/web.dom.iterable */ "./node_modules/core-js/modules/web.dom.iterable.js");
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_array_iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");
/* harmony import */ var core_js_modules_es6_array_iterator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_iterator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_2__);






module.exports = function ($) {
  var pageDropdowns = [];

  var closePageDropdowns = function closePageDropdowns(except) {
    for (var i = 0; i < pageDropdowns.length; i++) {
      pageDropdowns[i].each(function () {
        var pageDropdown = $(this);

        if (!except || except.length != 1 || pageDropdown.get(0) != except.get(0)) {
          pageDropdown.removeClass('active');
        }
      });
    }
  };

  $('body').click(function () {
    closePageDropdowns(null);
  });

  var init = function init(dropdowns, opt) {
    var _opt = $.extend({
      changeListeners: [],
      isMenu: false
    }, opt);

    pageDropdowns.push(dropdowns);
    dropdowns.each(function () {
      var dropdown = $(this);
      dropdown.data('dropdown-options', _opt);
      dropdown.find('a.display').click(function () {
        dropdown.toggleClass('active');
        closePageDropdowns(dropdown);
        return false;
      });

      if (opt && opt.values) {
        setOptions(dropdown, opt.values);
      }

      if (opt && opt.initialValue) {
        select(dropdown, opt.initialValue);
      }

      initOptions(dropdown, true);
    });
  };

  var optionValue = function optionValue(dropdown, key) {
    var opt = dropdown.data('dropdown-options');
    return opt ? opt[key] : null;
  };

  var invokeOptionExt = function invokeOptionExt(dropdown, fkey, a, b, c) {
    var f = optionValue(dropdown, fkey);

    if (f) {
      f(a, b, c);
    }
  };

  var initOptions = function initOptions(dropdown, readInputValue) {
    var options = dropdown.find('.options > a');
    dropdown.toggleClass('disabled', options.length < 2);

    if (!dropdown.data('dropdown-options').isMenu) {
      options.click(function () {
        selectAndNotify(dropdown, $(this).attr('data-value'));
        closePageDropdowns(dropdown);
        return false;
      });

      if (readInputValue) {
        var v = dropdown.find('input:hidden').val();

        if (typeof v !== 'undefined') {
          select(dropdown, v);
        }
      }
    }
  };

  var fireOnSelect = function fireOnSelect(dropdown) {
    var opt = dropdown.data('dropdown-options');

    for (var i = 0; i < opt.changeListeners.length; i++) {
      opt.changeListeners[i]();
    }
  };

  var selectAndNotify = function selectAndNotify(dropdown, value) {
    select(dropdown, value);
    fireOnSelect(dropdown);
    invokeOptionExt(dropdown, 'onselect', value);
  };

  var select = function select(dropdown, value) {
    var link = dropdown.find('a[data-value="' + value + '"]');
    dropdown.find('a.display span').html(link.html());
    link.addClass('selected');
    dropdown.find('a[data-value!="' + value + '"]').removeClass('selected');
    dropdown.removeClass('active');
    dropdown.find('input:hidden').val(value);
  };

  var setOptions = function setOptions(dropdown, options, selectedKey) {
    var optionsContainer = dropdown.find('.options');
    optionsContainer.empty();
    var selected = null;

    for (var i = 0; i < options.length; i++) {
      var o = options[i];
      var isSelected = o[0] == selectedKey;

      if (isSelected) {
        selected = o;
      }

      $('<a href="#"></a>').attr('data-value', o[0]).html(o[1]).toggleClass('selected', isSelected).appendTo(optionsContainer);
    }

    if (selected) {
      dropdown.find('a.display span').html(selected[1]);
    }

    initOptions(dropdown, false);
  };

  var value = function value(dropdown) {
    return dropdown.find('.options a.selected').attr('data-value');
  };

  var addChangeListener = function addChangeListener(dropdowns, listener) {
    dropdowns.each(function () {
      var dropdown = $(this);
      var opt = dropdown.data('dropdown-options');
      opt.changeListeners.push(listener);
      dropdown.data('dropdown-options', opt);
    });
  };

  $.fn.cityDropdown = function (opt, p1, p2) {
    if (typeof opt === 'string') {
      switch (opt) {
        case 'disable':
          break;

        case 'enable':
          break;

        case 'select':
          select(this, p1);
          break;

        case 'setOptions':
          setOptions(this, p1, p2);
          break;

        case 'value':
          return value(this);

        case 'change':
          return addChangeListener(this, p1);

        default:
          break;
      }
    } else {
      init(this, opt);
    }

    return this;
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/jquery/jquery.idize.js":
/*!********************************************!*\
  !*** ./src/js/main/jquery/jquery.idize.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * jQuery plugin to wrap elements
 *
 * http://jsbin.com/idize
 *
 */
module.exports = function ($) {
  $.fn.wrapChildren = function (options) {
    options = $.extend({
      childElem: undefined,
      sets: 1,
      wrapper: 'div'
    }, options || {});

    if (options.childElem === undefined) {
      return this;
    } else {
      return this.each(function () {
        var elems = $(this).children(options.childElem);
        var arr = [];
        elems.each(function (i, value) {
          arr.push(value);

          if ((i + 1) % options.sets === 0 || i === elems.length - 1) {
            var set = $(arr);
            arr = [];
            set.wrapAll(document.createElement(options.wrapper));
          }
        });
      });
    }
  };
};

/***/ }),

/***/ "./src/js/main/jquery/jquery.multiscripts.js":
/*!***************************************************!*\
  !*** ./src/js/main/jquery/jquery.multiscripts.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * from:
 * http://stackoverflow.com/questions/11803215/how-to-include-multiple-js-files-using-jquery-getscript-method
 * */
module.exports = function ($) {
  var jsPath = __webpack_require__(/*! ./js-path */ "./src/js/main/jquery/js-path.js");

  $.getMultiJsScripts = function (list, cb, forceXdomain) {
    var path = jsPath(),
        i = 0,
        fetch = function fetch() {
      if (i < list.length) {
        $.ajax({
          url: path + list[i++],
          dataType: 'script',
          success: fetch,
          cache: false,
          crossDomain: forceXdomain || false
        });
      } else {
        cb();
      }
    };

    fetch();
  };
};

/***/ }),

/***/ "./src/js/main/jquery/jquery.youtubepreview.js":
/*!*****************************************************!*\
  !*** ./src/js/main/jquery/jquery.youtubepreview.js ***!
  \*****************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__);




module.exports = function ($) {
  var access = false,
      init = function init(videoContainers, opt) {
    videoContainers.not('[data-video-id-ready]').each(function () {
      var container = $(this).attr('data-video-id-ready', 1),
          imgGroup = container.find('.youtube-preview'),
          iframeId = container.attr('data-video-iframe-id'),
          anchor = imgGroup.children('a'),
          clickable = anchor.length > 0 ? anchor : imgGroup,
          load = function load() {
        var mode = access == 'youku' && container.attr('data-youku-id') ? 'youku' : 'youtube',
            src;

        if (mode === 'youtube') {
          src = 'https://www.youtube.com/embed/' + container.attr('data-video-id') + '?rel=0&autoplay=1&wmode=transparent&controls=' + opt.controls + '&showinfo=' + opt.showInfo;

          if (opt.autoPlay) {
            src += '&enablejsapi=1&version=3';
          }
        } else {
          src = 'http://player.youku.com/embed/' + container.attr('data-youku-id');

          if (opt.autoPlay) {
            src += '&autoplay=1';
          }
        }

        var iframe = $('<iframe></iframe>').attr('id', iframeId).attr('src', src).attr('frameborder', 0);

        if (opt.allowFullscreen) {
          iframe.attr('allowfullscreen', 1);
        }

        iframe.appendTo(container);

        if (opt.callback) {
          opt.callback();
        }

        if (mode === 'youtube' && opt.autoPlay && typeof YT !== 'undefined') {
          new YT.Player(iframeId, {
            events: {
              onReady: function onReady(event) {
                event.target.playVideo();
                setTimeout(function () {
                  iframe.focus();
                }, 100);
              }
            }
          });
        }
      };

      clickable.bind('click', function (e) {
        e.preventDefault();
        clickable.unbind().click(function (e) {
          e.preventDefault();
        });

        if (access === false) {
          var test = new Image();

          test.onload = function () {
            access = 'youtube';
            load();
          };

          test.onerror = function () {
            access = 'youku';
            load();
          };

          test.src = 'http://youtube.com/favicon.ico';
        } else {
          load();
        }
      });
    });
  };

  $.fn.videoPreview = function (opt) {
    init(this, $.extend({
      autoPlay: true,
      allowFullscreen: false,
      controls: 2,
      showInfo: 1
    }, opt));
    return this;
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/jquery/js-path.js":
/*!***************************************!*\
  !*** ./src/js/main/jquery/js-path.js ***!
  \***************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.regexp.match */ "./node_modules/core-js/modules/es6.regexp.match.js");
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_0__);




module.exports = function () {
  var path = null;
  $('script[src]').each(function () {
    var src = $(this).attr('src'),
        match = src.match(/(.+\/)([0-9]+\.)?CITY_R\.(min\.)?js(\?v=[0-9]+)?$/);

    if (match) {
      path = match[1];
      return false;
    }
  });
  return path;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/jquery/lib/jquery-ui.min.js":
/*!*************************************************!*\
  !*** ./src/js/main/jquery/lib/jquery-ui.min.js ***!
  \*************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es7.symbol.async-iterator */ "./node_modules/core-js/modules/es7.symbol.async-iterator.js");
/* harmony import */ var core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.symbol */ "./node_modules/core-js/modules/es6.symbol.js");
/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.regexp.constructor */ "./node_modules/core-js/modules/es6.regexp.constructor.js");
/* harmony import */ var core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es6.regexp.replace */ "./node_modules/core-js/modules/es6.regexp.replace.js");
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es6_regexp_search__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es6.regexp.search */ "./node_modules/core-js/modules/es6.regexp.search.js");
/* harmony import */ var core_js_modules_es6_regexp_search__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_search__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es6.array.sort */ "./node_modules/core-js/modules/es6.array.sort.js");
/* harmony import */ var core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es6.regexp.match */ "./node_modules/core-js/modules/es6.regexp.match.js");
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es6.regexp.split */ "./node_modules/core-js/modules/es6.regexp.split.js");
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es6.function.name */ "./node_modules/core-js/modules/es6.function.name.js");
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_9__);













function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*! jQuery UI - v1.9.2 - 2016-06-17
 * http://jqueryui.com
 * Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.position.js, jquery.ui.draggable.js, jquery.ui.resizable.js, jquery.ui.accordion.js, jquery.ui.autocomplete.js, jquery.ui.button.js, jquery.ui.datepicker.js, jquery.ui.dialog.js, jquery.ui.menu.js
 * Copyright jQuery Foundation and other contributors; Licensed MIT */
(function (e, t) {
  function i(t, i) {
    var n,
        a,
        o,
        r = t.nodeName.toLowerCase();
    return 'area' === r ? (n = t.parentNode, a = n.name, t.href && a && 'map' === n.nodeName.toLowerCase() ? (o = e('img[usemap=#' + a + ']')[0], !!o && s(o)) : !1) : (/input|select|textarea|button|object/.test(r) ? !t.disabled : 'a' === r ? t.href || i : i) && s(t);
  }

  function s(t) {
    return e.expr.filters.visible(t) && !e(t).parents().andSelf().filter(function () {
      return 'hidden' === e.css(this, 'visibility');
    }).length;
  }

  var n = 0,
      a = /^ui-id-\d+$/;
  e.ui = e.ui || {}, e.ui.version || (e.extend(e.ui, {
    version: '1.9.2',
    keyCode: {
      BACKSPACE: 8,
      COMMA: 188,
      DELETE: 46,
      DOWN: 40,
      END: 35,
      ENTER: 13,
      ESCAPE: 27,
      HOME: 36,
      LEFT: 37,
      NUMPAD_ADD: 107,
      NUMPAD_DECIMAL: 110,
      NUMPAD_DIVIDE: 111,
      NUMPAD_ENTER: 108,
      NUMPAD_MULTIPLY: 106,
      NUMPAD_SUBTRACT: 109,
      PAGE_DOWN: 34,
      PAGE_UP: 33,
      PERIOD: 190,
      RIGHT: 39,
      SPACE: 32,
      TAB: 9,
      UP: 38
    }
  }), e.fn.extend({
    _focus: e.fn.focus,
    focus: function focus(t, i) {
      return 'number' == typeof t ? this.each(function () {
        var s = this;
        setTimeout(function () {
          e(s).focus(), i && i.call(s);
        }, t);
      }) : this._focus.apply(this, arguments);
    },
    scrollParent: function scrollParent() {
      var t;
      return t = e.ui.ie && /(static|relative)/.test(this.css('position')) || /absolute/.test(this.css('position')) ? this.parents().filter(function () {
        return /(relative|absolute|fixed)/.test(e.css(this, 'position')) && /(auto|scroll)/.test(e.css(this, 'overflow') + e.css(this, 'overflow-y') + e.css(this, 'overflow-x'));
      }).eq(0) : this.parents().filter(function () {
        return /(auto|scroll)/.test(e.css(this, 'overflow') + e.css(this, 'overflow-y') + e.css(this, 'overflow-x'));
      }).eq(0), /fixed/.test(this.css('position')) || !t.length ? e(document) : t;
    },
    zIndex: function zIndex(i) {
      if (i !== t) return this.css('zIndex', i);
      if (this.length) for (var s, n, a = e(this[0]); a.length && a[0] !== document;) {
        if (s = a.css('position'), ('absolute' === s || 'relative' === s || 'fixed' === s) && (n = parseInt(a.css('zIndex'), 10), !isNaN(n) && 0 !== n)) return n;
        a = a.parent();
      }
      return 0;
    },
    uniqueId: function uniqueId() {
      return this.each(function () {
        this.id || (this.id = 'ui-id-' + ++n);
      });
    },
    removeUniqueId: function removeUniqueId() {
      return this.each(function () {
        a.test(this.id) && e(this).removeAttr('id');
      });
    }
  }), e.extend(e.expr[':'], {
    data: e.expr.createPseudo ? e.expr.createPseudo(function (t) {
      return function (i) {
        return !!e.data(i, t);
      };
    }) : function (t, i, s) {
      return !!e.data(t, s[3]);
    },
    focusable: function focusable(t) {
      return i(t, !isNaN(e.attr(t, 'tabindex')));
    },
    tabbable: function tabbable(t) {
      var s = e.attr(t, 'tabindex'),
          n = isNaN(s);
      return (n || s >= 0) && i(t, !n);
    }
  }), e(function () {
    var t = document.body,
        i = t.appendChild(i = document.createElement('div'));
    i.offsetHeight, e.extend(i.style, {
      minHeight: '100px',
      height: 'auto',
      padding: 0,
      borderWidth: 0
    }), e.support.minHeight = 100 === i.offsetHeight, e.support.selectstart = 'onselectstart' in i, t.removeChild(i).style.display = 'none';
  }), e('<a>').outerWidth(1).jquery || e.each(['Width', 'Height'], function (i, s) {
    function n(t, i, s, n) {
      return e.each(a, function () {
        i -= parseFloat(e.css(t, 'padding' + this)) || 0, s && (i -= parseFloat(e.css(t, 'border' + this + 'Width')) || 0), n && (i -= parseFloat(e.css(t, 'margin' + this)) || 0);
      }), i;
    }

    var a = 'Width' === s ? ['Left', 'Right'] : ['Top', 'Bottom'],
        o = s.toLowerCase(),
        r = {
      innerWidth: e.fn.innerWidth,
      innerHeight: e.fn.innerHeight,
      outerWidth: e.fn.outerWidth,
      outerHeight: e.fn.outerHeight
    };
    e.fn['inner' + s] = function (i) {
      return i === t ? r['inner' + s].call(this) : this.each(function () {
        e(this).css(o, n(this, i) + 'px');
      });
    }, e.fn['outer' + s] = function (t, i) {
      return 'number' != typeof t ? r['outer' + s].call(this, t) : this.each(function () {
        e(this).css(o, n(this, t, !0, i) + 'px');
      });
    };
  }), e('<a>').data('a-b', 'a').removeData('a-b').data('a-b') && (e.fn.removeData = function (t) {
    return function (i) {
      return arguments.length ? t.call(this, e.camelCase(i)) : t.call(this);
    };
  }(e.fn.removeData)), function () {
    var t = /msie ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || [];
    e.ui.ie = t.length ? !0 : !1, e.ui.ie6 = 6 === parseFloat(t[1], 10);
  }(), e.fn.extend({
    disableSelection: function disableSelection() {
      return this.bind((e.support.selectstart ? 'selectstart' : 'mousedown') + '.ui-disableSelection', function (e) {
        e.preventDefault();
      });
    },
    enableSelection: function enableSelection() {
      return this.unbind('.ui-disableSelection');
    }
  }), e.extend(e.ui, {
    plugin: {
      add: function add(t, i, s) {
        var n,
            a = e.ui[t].prototype;

        for (n in s) {
          a.plugins[n] = a.plugins[n] || [], a.plugins[n].push([i, s[n]]);
        }
      },
      call: function call(e, t, i) {
        var s,
            n = e.plugins[t];
        if (n && e.element[0].parentNode && 11 !== e.element[0].parentNode.nodeType) for (s = 0; n.length > s; s++) {
          e.options[n[s][0]] && n[s][1].apply(e.element, i);
        }
      }
    },
    contains: e.contains,
    hasScroll: function hasScroll(t, i) {
      if ('hidden' === e(t).css('overflow')) return !1;
      var s = i && 'left' === i ? 'scrollLeft' : 'scrollTop',
          n = !1;
      return t[s] > 0 ? !0 : (t[s] = 1, n = t[s] > 0, t[s] = 0, n);
    },
    isOverAxis: function isOverAxis(e, t, i) {
      return e > t && t + i > e;
    },
    isOver: function isOver(t, i, s, n, a, o) {
      return e.ui.isOverAxis(t, s, a) && e.ui.isOverAxis(i, n, o);
    }
  }));
})(jQuery);

(function (e, t) {
  var i = 0,
      s = Array.prototype.slice,
      n = e.cleanData;
  e.cleanData = function (t) {
    for (var i, s = 0; null != (i = t[s]); s++) {
      try {
        e(i).triggerHandler('remove');
      } catch (a) {}
    }

    n(t);
  }, e.widget = function (i, s, n) {
    var a,
        o,
        r,
        h,
        l = i.split('.')[0];
    i = i.split('.')[1], a = l + '-' + i, n || (n = s, s = e.Widget), e.expr[':'][a.toLowerCase()] = function (t) {
      return !!e.data(t, a);
    }, e[l] = e[l] || {}, o = e[l][i], r = e[l][i] = function (e, i) {
      return this._createWidget ? (arguments.length && this._createWidget(e, i), t) : new r(e, i);
    }, e.extend(r, o, {
      version: n.version,
      _proto: e.extend({}, n),
      _childConstructors: []
    }), h = new s(), h.options = e.widget.extend({}, h.options), e.each(n, function (t, i) {
      e.isFunction(i) && (n[t] = function () {
        var e = function e() {
          return s.prototype[t].apply(this, arguments);
        },
            n = function n(e) {
          return s.prototype[t].apply(this, e);
        };

        return function () {
          var t,
              s = this._super,
              a = this._superApply;
          return this._super = e, this._superApply = n, t = i.apply(this, arguments), this._super = s, this._superApply = a, t;
        };
      }());
    }), r.prototype = e.widget.extend(h, {
      widgetEventPrefix: o ? h.widgetEventPrefix : i
    }, n, {
      constructor: r,
      namespace: l,
      widgetName: i,
      widgetBaseClass: a,
      widgetFullName: a
    }), o ? (e.each(o._childConstructors, function (t, i) {
      var s = i.prototype;
      e.widget(s.namespace + '.' + s.widgetName, r, i._proto);
    }), delete o._childConstructors) : s._childConstructors.push(r), e.widget.bridge(i, r);
  }, e.widget.extend = function (i) {
    for (var n, a, o = s.call(arguments, 1), r = 0, h = o.length; h > r; r++) {
      for (n in o[r]) {
        a = o[r][n], o[r].hasOwnProperty(n) && a !== t && (i[n] = e.isPlainObject(a) ? e.isPlainObject(i[n]) ? e.widget.extend({}, i[n], a) : e.widget.extend({}, a) : a);
      }
    }

    return i;
  }, e.widget.bridge = function (i, n) {
    var a = n.prototype.widgetFullName || i;

    e.fn[i] = function (o) {
      var r = 'string' == typeof o,
          h = s.call(arguments, 1),
          l = this;
      return o = !r && h.length ? e.widget.extend.apply(null, [o].concat(h)) : o, r ? this.each(function () {
        var s,
            n = e.data(this, a);
        return n ? e.isFunction(n[o]) && '_' !== o.charAt(0) ? (s = n[o].apply(n, h), s !== n && s !== t ? (l = s && s.jquery ? l.pushStack(s.get()) : s, !1) : t) : e.error("no such method '" + o + "' for " + i + ' widget instance') : e.error('cannot call methods on ' + i + ' prior to initialization; ' + "attempted to call method '" + o + "'");
      }) : this.each(function () {
        var t = e.data(this, a);
        t ? t.option(o || {})._init() : e.data(this, a, new n(o, this));
      }), l;
    };
  }, e.Widget = function () {}, e.Widget._childConstructors = [], e.Widget.prototype = {
    widgetName: 'widget',
    widgetEventPrefix: '',
    defaultElement: '<div>',
    options: {
      disabled: !1,
      create: null
    },
    _createWidget: function _createWidget(t, s) {
      s = e(s || this.defaultElement || this)[0], this.element = e(s), this.uuid = i++, this.eventNamespace = '.' + this.widgetName + this.uuid, this.options = e.widget.extend({}, this.options, this._getCreateOptions(), t), this.bindings = e(), this.hoverable = e(), this.focusable = e(), s !== this && (e.data(s, this.widgetName, this), e.data(s, this.widgetFullName, this), this._on(!0, this.element, {
        remove: function remove(e) {
          e.target === s && this.destroy();
        }
      }), this.document = e(s.style ? s.ownerDocument : s.document || s), this.window = e(this.document[0].defaultView || this.document[0].parentWindow)), this._create(), this._trigger('create', null, this._getCreateEventData()), this._init();
    },
    _getCreateOptions: e.noop,
    _getCreateEventData: e.noop,
    _create: e.noop,
    _init: e.noop,
    destroy: function destroy() {
      this._destroy(), this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)), this.widget().unbind(this.eventNamespace).removeAttr('aria-disabled').removeClass(this.widgetFullName + '-disabled ' + 'ui-state-disabled'), this.bindings.unbind(this.eventNamespace), this.hoverable.removeClass('ui-state-hover'), this.focusable.removeClass('ui-state-focus');
    },
    _destroy: e.noop,
    widget: function widget() {
      return this.element;
    },
    option: function option(i, s) {
      var n,
          a,
          o,
          r = i;
      if (0 === arguments.length) return e.widget.extend({}, this.options);
      if ('string' == typeof i) if (r = {}, n = i.split('.'), i = n.shift(), n.length) {
        for (a = r[i] = e.widget.extend({}, this.options[i]), o = 0; n.length - 1 > o; o++) {
          a[n[o]] = a[n[o]] || {}, a = a[n[o]];
        }

        if (i = n.pop(), s === t) return a[i] === t ? null : a[i];
        a[i] = s;
      } else {
        if (s === t) return this.options[i] === t ? null : this.options[i];
        r[i] = s;
      }
      return this._setOptions(r), this;
    },
    _setOptions: function _setOptions(e) {
      var t;

      for (t in e) {
        this._setOption(t, e[t]);
      }

      return this;
    },
    _setOption: function _setOption(e, t) {
      return this.options[e] = t, 'disabled' === e && (this.widget().toggleClass(this.widgetFullName + '-disabled ui-state-disabled', !!t).attr('aria-disabled', t), this.hoverable.removeClass('ui-state-hover'), this.focusable.removeClass('ui-state-focus')), this;
    },
    enable: function enable() {
      return this._setOption('disabled', !1);
    },
    disable: function disable() {
      return this._setOption('disabled', !0);
    },
    _on: function _on(i, s, n) {
      var a,
          o = this;
      'boolean' != typeof i && (n = s, s = i, i = !1), n ? (s = a = e(s), this.bindings = this.bindings.add(s)) : (n = s, s = this.element, a = this.widget()), e.each(n, function (n, r) {
        function h() {
          return i || o.options.disabled !== !0 && !e(this).hasClass('ui-state-disabled') ? ('string' == typeof r ? o[r] : r).apply(o, arguments) : t;
        }

        'string' != typeof r && (h.guid = r.guid = r.guid || h.guid || e.guid++);
        var l = n.match(/^(\w+)\s*(.*)$/),
            u = l[1] + o.eventNamespace,
            d = l[2];
        d ? a.delegate(d, u, h) : s.bind(u, h);
      });
    },
    _off: function _off(e, t) {
      t = (t || '').split(' ').join(this.eventNamespace + ' ') + this.eventNamespace, e.unbind(t).undelegate(t);
    },
    _delay: function _delay(e, t) {
      function i() {
        return ('string' == typeof e ? s[e] : e).apply(s, arguments);
      }

      var s = this;
      return setTimeout(i, t || 0);
    },
    _hoverable: function _hoverable(t) {
      this.hoverable = this.hoverable.add(t), this._on(t, {
        mouseenter: function mouseenter(t) {
          e(t.currentTarget).addClass('ui-state-hover');
        },
        mouseleave: function mouseleave(t) {
          e(t.currentTarget).removeClass('ui-state-hover');
        }
      });
    },
    _focusable: function _focusable(t) {
      this.focusable = this.focusable.add(t), this._on(t, {
        focusin: function focusin(t) {
          e(t.currentTarget).addClass('ui-state-focus');
        },
        focusout: function focusout(t) {
          e(t.currentTarget).removeClass('ui-state-focus');
        }
      });
    },
    _trigger: function _trigger(t, i, s) {
      var n,
          a,
          o = this.options[t];
      if (s = s || {}, i = e.Event(i), i.type = (t === this.widgetEventPrefix ? t : this.widgetEventPrefix + t).toLowerCase(), i.target = this.element[0], a = i.originalEvent) for (n in a) {
        n in i || (i[n] = a[n]);
      }
      return this.element.trigger(i, s), !(e.isFunction(o) && o.apply(this.element[0], [i].concat(s)) === !1 || i.isDefaultPrevented());
    }
  }, e.each({
    show: 'fadeIn',
    hide: 'fadeOut'
  }, function (t, i) {
    e.Widget.prototype['_' + t] = function (s, n, a) {
      'string' == typeof n && (n = {
        effect: n
      });
      var o,
          r = n ? n === !0 || 'number' == typeof n ? i : n.effect || i : t;
      n = n || {}, 'number' == typeof n && (n = {
        duration: n
      }), o = !e.isEmptyObject(n), n.complete = a, n.delay && s.delay(n.delay), o && e.effects && (e.effects.effect[r] || e.uiBackCompat !== !1 && e.effects[r]) ? s[t](n) : r !== t && s[r] ? s[r](n.duration, n.easing, a) : s.queue(function (i) {
        e(this)[t](), a && a.call(s[0]), i();
      });
    };
  }), e.uiBackCompat !== !1 && (e.Widget.prototype._getCreateOptions = function () {
    return e.metadata && e.metadata.get(this.element[0])[this.widgetName];
  });
})(jQuery);

(function (e) {
  var t = !1;
  e(document).mouseup(function () {
    t = !1;
  }), e.widget('ui.mouse', {
    version: '1.9.2',
    options: {
      cancel: 'input,textarea,button,select,option',
      distance: 1,
      delay: 0
    },
    _mouseInit: function _mouseInit() {
      var t = this;
      this.element.bind('mousedown.' + this.widgetName, function (e) {
        return t._mouseDown(e);
      }).bind('click.' + this.widgetName, function (i) {
        return !0 === e.data(i.target, t.widgetName + '.preventClickEvent') ? (e.removeData(i.target, t.widgetName + '.preventClickEvent'), i.stopImmediatePropagation(), !1) : undefined;
      }), this.started = !1;
    },
    _mouseDestroy: function _mouseDestroy() {
      this.element.unbind('.' + this.widgetName), this._mouseMoveDelegate && e(document).unbind('mousemove.' + this.widgetName, this._mouseMoveDelegate).unbind('mouseup.' + this.widgetName, this._mouseUpDelegate);
    },
    _mouseDown: function _mouseDown(i) {
      if (!t) {
        this._mouseStarted && this._mouseUp(i), this._mouseDownEvent = i;
        var s = this,
            n = 1 === i.which,
            a = 'string' == typeof this.options.cancel && i.target.nodeName ? e(i.target).closest(this.options.cancel).length : !1;
        return n && !a && this._mouseCapture(i) ? (this.mouseDelayMet = !this.options.delay, this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function () {
          s.mouseDelayMet = !0;
        }, this.options.delay)), this._mouseDistanceMet(i) && this._mouseDelayMet(i) && (this._mouseStarted = this._mouseStart(i) !== !1, !this._mouseStarted) ? (i.preventDefault(), !0) : (!0 === e.data(i.target, this.widgetName + '.preventClickEvent') && e.removeData(i.target, this.widgetName + '.preventClickEvent'), this._mouseMoveDelegate = function (e) {
          return s._mouseMove(e);
        }, this._mouseUpDelegate = function (e) {
          return s._mouseUp(e);
        }, e(document).bind('mousemove.' + this.widgetName, this._mouseMoveDelegate).bind('mouseup.' + this.widgetName, this._mouseUpDelegate), i.preventDefault(), t = !0, !0)) : !0;
      }
    },
    _mouseMove: function _mouseMove(t) {
      return !e.ui.ie || document.documentMode >= 9 || t.button ? this._mouseStarted ? (this._mouseDrag(t), t.preventDefault()) : (this._mouseDistanceMet(t) && this._mouseDelayMet(t) && (this._mouseStarted = this._mouseStart(this._mouseDownEvent, t) !== !1, this._mouseStarted ? this._mouseDrag(t) : this._mouseUp(t)), !this._mouseStarted) : this._mouseUp(t);
    },
    _mouseUp: function _mouseUp(t) {
      return e(document).unbind('mousemove.' + this.widgetName, this._mouseMoveDelegate).unbind('mouseup.' + this.widgetName, this._mouseUpDelegate), this._mouseStarted && (this._mouseStarted = !1, t.target === this._mouseDownEvent.target && e.data(t.target, this.widgetName + '.preventClickEvent', !0), this._mouseStop(t)), !1;
    },
    _mouseDistanceMet: function _mouseDistanceMet(e) {
      return Math.max(Math.abs(this._mouseDownEvent.pageX - e.pageX), Math.abs(this._mouseDownEvent.pageY - e.pageY)) >= this.options.distance;
    },
    _mouseDelayMet: function _mouseDelayMet() {
      return this.mouseDelayMet;
    },
    _mouseStart: function _mouseStart() {},
    _mouseDrag: function _mouseDrag() {},
    _mouseStop: function _mouseStop() {},
    _mouseCapture: function _mouseCapture() {
      return !0;
    }
  });
})(jQuery);

(function (e, t) {
  function i(e, t, i) {
    return [parseInt(e[0], 10) * (c.test(e[0]) ? t / 100 : 1), parseInt(e[1], 10) * (c.test(e[1]) ? i / 100 : 1)];
  }

  function s(t, i) {
    return parseInt(e.css(t, i), 10) || 0;
  }

  e.ui = e.ui || {};
  var n,
      a = Math.max,
      o = Math.abs,
      r = Math.round,
      h = /left|center|right/,
      l = /top|center|bottom/,
      u = /[\+\-]\d+%?/,
      d = /^\w+/,
      c = /%$/,
      p = e.fn.position;
  e.position = {
    scrollbarWidth: function scrollbarWidth() {
      if (n !== t) return n;
      var i,
          s,
          a = e("<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),
          o = a.children()[0];
      return e('body').append(a), i = o.offsetWidth, a.css('overflow', 'scroll'), s = o.offsetWidth, i === s && (s = a[0].clientWidth), a.remove(), n = i - s;
    },
    getScrollInfo: function getScrollInfo(t) {
      var i = t.isWindow ? '' : t.element.css('overflow-x'),
          s = t.isWindow ? '' : t.element.css('overflow-y'),
          n = 'scroll' === i || 'auto' === i && t.width < t.element[0].scrollWidth,
          a = 'scroll' === s || 'auto' === s && t.height < t.element[0].scrollHeight;
      return {
        width: n ? e.position.scrollbarWidth() : 0,
        height: a ? e.position.scrollbarWidth() : 0
      };
    },
    getWithinInfo: function getWithinInfo(t) {
      var i = e(t || window),
          s = e.isWindow(i[0]);
      return {
        element: i,
        isWindow: s,
        offset: i.offset() || {
          left: 0,
          top: 0
        },
        scrollLeft: i.scrollLeft(),
        scrollTop: i.scrollTop(),
        width: s ? i.width() : i.outerWidth(),
        height: s ? i.height() : i.outerHeight()
      };
    }
  }, e.fn.position = function (t) {
    if (!t || !t.of) return p.apply(this, arguments);
    t = e.extend({}, t);

    var n,
        c,
        f,
        m,
        g,
        v = e(t.of),
        _ = e.position.getWithinInfo(t.within),
        b = e.position.getScrollInfo(_),
        y = v[0],
        x = (t.collision || 'flip').split(' '),
        w = {};

    return 9 === y.nodeType ? (c = v.width(), f = v.height(), m = {
      top: 0,
      left: 0
    }) : e.isWindow(y) ? (c = v.width(), f = v.height(), m = {
      top: v.scrollTop(),
      left: v.scrollLeft()
    }) : y.preventDefault ? (t.at = 'left top', c = f = 0, m = {
      top: y.pageY,
      left: y.pageX
    }) : (c = v.outerWidth(), f = v.outerHeight(), m = v.offset()), g = e.extend({}, m), e.each(['my', 'at'], function () {
      var e,
          i,
          s = (t[this] || '').split(' ');
      1 === s.length && (s = h.test(s[0]) ? s.concat(['center']) : l.test(s[0]) ? ['center'].concat(s) : ['center', 'center']), s[0] = h.test(s[0]) ? s[0] : 'center', s[1] = l.test(s[1]) ? s[1] : 'center', e = u.exec(s[0]), i = u.exec(s[1]), w[this] = [e ? e[0] : 0, i ? i[0] : 0], t[this] = [d.exec(s[0])[0], d.exec(s[1])[0]];
    }), 1 === x.length && (x[1] = x[0]), 'right' === t.at[0] ? g.left += c : 'center' === t.at[0] && (g.left += c / 2), 'bottom' === t.at[1] ? g.top += f : 'center' === t.at[1] && (g.top += f / 2), n = i(w.at, c, f), g.left += n[0], g.top += n[1], this.each(function () {
      var h,
          l,
          u = e(this),
          d = u.outerWidth(),
          p = u.outerHeight(),
          y = s(this, 'marginLeft'),
          k = s(this, 'marginTop'),
          D = d + y + s(this, 'marginRight') + b.width,
          T = p + k + s(this, 'marginBottom') + b.height,
          S = e.extend({}, g),
          N = i(w.my, u.outerWidth(), u.outerHeight());
      'right' === t.my[0] ? S.left -= d : 'center' === t.my[0] && (S.left -= d / 2), 'bottom' === t.my[1] ? S.top -= p : 'center' === t.my[1] && (S.top -= p / 2), S.left += N[0], S.top += N[1], e.support.offsetFractions || (S.left = r(S.left), S.top = r(S.top)), h = {
        marginLeft: y,
        marginTop: k
      }, e.each(['left', 'top'], function (i, s) {
        e.ui.position[x[i]] && e.ui.position[x[i]][s](S, {
          targetWidth: c,
          targetHeight: f,
          elemWidth: d,
          elemHeight: p,
          collisionPosition: h,
          collisionWidth: D,
          collisionHeight: T,
          offset: [n[0] + N[0], n[1] + N[1]],
          my: t.my,
          at: t.at,
          within: _,
          elem: u
        });
      }), e.fn.bgiframe && u.bgiframe(), t.using && (l = function l(e) {
        var i = m.left - S.left,
            s = i + c - d,
            n = m.top - S.top,
            r = n + f - p,
            h = {
          target: {
            element: v,
            left: m.left,
            top: m.top,
            width: c,
            height: f
          },
          element: {
            element: u,
            left: S.left,
            top: S.top,
            width: d,
            height: p
          },
          horizontal: 0 > s ? 'left' : i > 0 ? 'right' : 'center',
          vertical: 0 > r ? 'top' : n > 0 ? 'bottom' : 'middle'
        };
        d > c && c > o(i + s) && (h.horizontal = 'center'), p > f && f > o(n + r) && (h.vertical = 'middle'), h.important = a(o(i), o(s)) > a(o(n), o(r)) ? 'horizontal' : 'vertical', t.using.call(this, e, h);
      }), u.offset(e.extend(S, {
        using: l
      }));
    });
  }, e.ui.position = {
    fit: {
      left: function left(e, t) {
        var i,
            s = t.within,
            n = s.isWindow ? s.scrollLeft : s.offset.left,
            o = s.width,
            r = e.left - t.collisionPosition.marginLeft,
            h = n - r,
            l = r + t.collisionWidth - o - n;
        t.collisionWidth > o ? h > 0 && 0 >= l ? (i = e.left + h + t.collisionWidth - o - n, e.left += h - i) : e.left = l > 0 && 0 >= h ? n : h > l ? n + o - t.collisionWidth : n : h > 0 ? e.left += h : l > 0 ? e.left -= l : e.left = a(e.left - r, e.left);
      },
      top: function top(e, t) {
        var i,
            s = t.within,
            n = s.isWindow ? s.scrollTop : s.offset.top,
            o = t.within.height,
            r = e.top - t.collisionPosition.marginTop,
            h = n - r,
            l = r + t.collisionHeight - o - n;
        t.collisionHeight > o ? h > 0 && 0 >= l ? (i = e.top + h + t.collisionHeight - o - n, e.top += h - i) : e.top = l > 0 && 0 >= h ? n : h > l ? n + o - t.collisionHeight : n : h > 0 ? e.top += h : l > 0 ? e.top -= l : e.top = a(e.top - r, e.top);
      }
    },
    flip: {
      left: function left(e, t) {
        var i,
            s,
            n = t.within,
            a = n.offset.left + n.scrollLeft,
            r = n.width,
            h = n.isWindow ? n.scrollLeft : n.offset.left,
            l = e.left - t.collisionPosition.marginLeft,
            u = l - h,
            d = l + t.collisionWidth - r - h,
            c = 'left' === t.my[0] ? -t.elemWidth : 'right' === t.my[0] ? t.elemWidth : 0,
            p = 'left' === t.at[0] ? t.targetWidth : 'right' === t.at[0] ? -t.targetWidth : 0,
            f = -2 * t.offset[0];
        0 > u ? (i = e.left + c + p + f + t.collisionWidth - r - a, (0 > i || o(u) > i) && (e.left += c + p + f)) : d > 0 && (s = e.left - t.collisionPosition.marginLeft + c + p + f - h, (s > 0 || d > o(s)) && (e.left += c + p + f));
      },
      top: function top(e, t) {
        var i,
            s,
            n = t.within,
            a = n.offset.top + n.scrollTop,
            r = n.height,
            h = n.isWindow ? n.scrollTop : n.offset.top,
            l = e.top - t.collisionPosition.marginTop,
            u = l - h,
            d = l + t.collisionHeight - r - h,
            c = 'top' === t.my[1],
            p = c ? -t.elemHeight : 'bottom' === t.my[1] ? t.elemHeight : 0,
            f = 'top' === t.at[1] ? t.targetHeight : 'bottom' === t.at[1] ? -t.targetHeight : 0,
            m = -2 * t.offset[1];
        0 > u ? (s = e.top + p + f + m + t.collisionHeight - r - a, e.top + p + f + m > u && (0 > s || o(u) > s) && (e.top += p + f + m)) : d > 0 && (i = e.top - t.collisionPosition.marginTop + p + f + m - h, e.top + p + f + m > d && (i > 0 || d > o(i)) && (e.top += p + f + m));
      }
    },
    flipfit: {
      left: function left() {
        e.ui.position.flip.left.apply(this, arguments), e.ui.position.fit.left.apply(this, arguments);
      },
      top: function top() {
        e.ui.position.flip.top.apply(this, arguments), e.ui.position.fit.top.apply(this, arguments);
      }
    }
  }, function () {
    var t,
        i,
        s,
        n,
        a,
        o = document.getElementsByTagName('body')[0],
        r = document.createElement('div');
    t = document.createElement(o ? 'div' : 'body'), s = {
      visibility: 'hidden',
      width: 0,
      height: 0,
      border: 0,
      margin: 0,
      background: 'none'
    }, o && e.extend(s, {
      position: 'absolute',
      left: '-1000px',
      top: '-1000px'
    });

    for (a in s) {
      t.style[a] = s[a];
    }

    t.appendChild(r), i = o || document.documentElement, i.insertBefore(t, i.firstChild), r.style.cssText = 'position: absolute; left: 10.7432222px;', n = e(r).offset().left, e.support.offsetFractions = n > 10 && 11 > n, t.innerHTML = '', i.removeChild(t);
  }(), e.uiBackCompat !== !1 && function (e) {
    var i = e.fn.position;

    e.fn.position = function (s) {
      if (!s || !s.offset) return i.call(this, s);
      var n = s.offset.split(' '),
          a = s.at.split(' ');
      return 1 === n.length && (n[1] = n[0]), /^\d/.test(n[0]) && (n[0] = '+' + n[0]), /^\d/.test(n[1]) && (n[1] = '+' + n[1]), 1 === a.length && (/left|center|right/.test(a[0]) ? a[1] = 'center' : (a[1] = a[0], a[0] = 'center')), i.call(this, e.extend(s, {
        at: a[0] + n[0] + ' ' + a[1] + n[1],
        offset: t
      }));
    };
  }(jQuery);
})(jQuery);

(function (e) {
  e.widget('ui.draggable', e.ui.mouse, {
    version: '1.9.2',
    widgetEventPrefix: 'drag',
    options: {
      addClasses: !0,
      appendTo: 'parent',
      axis: !1,
      connectToSortable: !1,
      containment: !1,
      cursor: 'auto',
      cursorAt: !1,
      grid: !1,
      handle: !1,
      helper: 'original',
      iframeFix: !1,
      opacity: !1,
      refreshPositions: !1,
      revert: !1,
      revertDuration: 500,
      scope: 'default',
      scroll: !0,
      scrollSensitivity: 20,
      scrollSpeed: 20,
      snap: !1,
      snapMode: 'both',
      snapTolerance: 20,
      stack: !1,
      zIndex: !1
    },
    _create: function _create() {
      'original' != this.options.helper || /^(?:r|a|f)/.test(this.element.css('position')) || (this.element[0].style.position = 'relative'), this.options.addClasses && this.element.addClass('ui-draggable'), this.options.disabled && this.element.addClass('ui-draggable-disabled'), this._mouseInit();
    },
    _destroy: function _destroy() {
      this.element.removeClass('ui-draggable ui-draggable-dragging ui-draggable-disabled'), this._mouseDestroy();
    },
    _mouseCapture: function _mouseCapture(t) {
      var i = this.options;
      return this.helper || i.disabled || e(t.target).is('.ui-resizable-handle') ? !1 : (this.handle = this._getHandle(t), this.handle ? (e(i.iframeFix === !0 ? 'iframe' : i.iframeFix).each(function () {
        e('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({
          width: this.offsetWidth + 'px',
          height: this.offsetHeight + 'px',
          position: 'absolute',
          opacity: '0.001',
          zIndex: 1e3
        }).css(e(this).offset()).appendTo('body');
      }), !0) : !1);
    },
    _mouseStart: function _mouseStart(t) {
      var i = this.options;
      return this.helper = this._createHelper(t), this.helper.addClass('ui-draggable-dragging'), this._cacheHelperProportions(), e.ui.ddmanager && (e.ui.ddmanager.current = this), this._cacheMargins(), this.cssPosition = this.helper.css('position'), this.scrollParent = this.helper.scrollParent(), this.offset = this.positionAbs = this.element.offset(), this.offset = {
        top: this.offset.top - this.margins.top,
        left: this.offset.left - this.margins.left
      }, e.extend(this.offset, {
        click: {
          left: t.pageX - this.offset.left,
          top: t.pageY - this.offset.top
        },
        parent: this._getParentOffset(),
        relative: this._getRelativeOffset()
      }), this.originalPosition = this.position = this._generatePosition(t), this.originalPageX = t.pageX, this.originalPageY = t.pageY, i.cursorAt && this._adjustOffsetFromHelper(i.cursorAt), i.containment && this._setContainment(), this._trigger('start', t) === !1 ? (this._clear(), !1) : (this._cacheHelperProportions(), e.ui.ddmanager && !i.dropBehaviour && e.ui.ddmanager.prepareOffsets(this, t), this._mouseDrag(t, !0), e.ui.ddmanager && e.ui.ddmanager.dragStart(this, t), !0);
    },
    _mouseDrag: function _mouseDrag(t, i) {
      if (this.position = this._generatePosition(t), this.positionAbs = this._convertPositionTo('absolute'), !i) {
        var s = this._uiHash();

        if (this._trigger('drag', t, s) === !1) return this._mouseUp({}), !1;
        this.position = s.position;
      }

      return this.options.axis && 'y' == this.options.axis || (this.helper[0].style.left = this.position.left + 'px'), this.options.axis && 'x' == this.options.axis || (this.helper[0].style.top = this.position.top + 'px'), e.ui.ddmanager && e.ui.ddmanager.drag(this, t), !1;
    },
    _mouseStop: function _mouseStop(t) {
      var i = !1;
      e.ui.ddmanager && !this.options.dropBehaviour && (i = e.ui.ddmanager.drop(this, t)), this.dropped && (i = this.dropped, this.dropped = !1);

      for (var s = this.element[0], n = !1; s && (s = s.parentNode);) {
        s == document && (n = !0);
      }

      if (!n && 'original' === this.options.helper) return !1;

      if ('invalid' == this.options.revert && !i || 'valid' == this.options.revert && i || this.options.revert === !0 || e.isFunction(this.options.revert) && this.options.revert.call(this.element, i)) {
        var a = this;
        e(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
          a._trigger('stop', t) !== !1 && a._clear();
        });
      } else this._trigger('stop', t) !== !1 && this._clear();

      return !1;
    },
    _mouseUp: function _mouseUp(t) {
      return e('div.ui-draggable-iframeFix').each(function () {
        this.parentNode.removeChild(this);
      }), e.ui.ddmanager && e.ui.ddmanager.dragStop(this, t), e.ui.mouse.prototype._mouseUp.call(this, t);
    },
    cancel: function cancel() {
      return this.helper.is('.ui-draggable-dragging') ? this._mouseUp({}) : this._clear(), this;
    },
    _getHandle: function _getHandle(t) {
      var i = this.options.handle && e(this.options.handle, this.element).length ? !1 : !0;
      return e(this.options.handle, this.element).find('*').andSelf().each(function () {
        this == t.target && (i = !0);
      }), i;
    },
    _createHelper: function _createHelper(t) {
      var i = this.options,
          s = e.isFunction(i.helper) ? e(i.helper.apply(this.element[0], [t])) : 'clone' == i.helper ? this.element.clone().removeAttr('id') : this.element;
      return s.parents('body').length || s.appendTo('parent' == i.appendTo ? this.element[0].parentNode : i.appendTo), s[0] == this.element[0] || /(fixed|absolute)/.test(s.css('position')) || s.css('position', 'absolute'), s;
    },
    _adjustOffsetFromHelper: function _adjustOffsetFromHelper(t) {
      'string' == typeof t && (t = t.split(' ')), e.isArray(t) && (t = {
        left: +t[0],
        top: +t[1] || 0
      }), 'left' in t && (this.offset.click.left = t.left + this.margins.left), 'right' in t && (this.offset.click.left = this.helperProportions.width - t.right + this.margins.left), 'top' in t && (this.offset.click.top = t.top + this.margins.top), 'bottom' in t && (this.offset.click.top = this.helperProportions.height - t.bottom + this.margins.top);
    },
    _getParentOffset: function _getParentOffset() {
      this.offsetParent = this.helper.offsetParent();
      var t = this.offsetParent.offset();
      return 'absolute' == this.cssPosition && this.scrollParent[0] != document && e.contains(this.scrollParent[0], this.offsetParent[0]) && (t.left += this.scrollParent.scrollLeft(), t.top += this.scrollParent.scrollTop()), (this.offsetParent[0] == document.body || this.offsetParent[0].tagName && 'html' == this.offsetParent[0].tagName.toLowerCase() && e.ui.ie) && (t = {
        top: 0,
        left: 0
      }), {
        top: t.top + (parseInt(this.offsetParent.css('borderTopWidth'), 10) || 0),
        left: t.left + (parseInt(this.offsetParent.css('borderLeftWidth'), 10) || 0)
      };
    },
    _getRelativeOffset: function _getRelativeOffset() {
      if ('relative' == this.cssPosition) {
        var e = this.element.position();
        return {
          top: e.top - (parseInt(this.helper.css('top'), 10) || 0) + this.scrollParent.scrollTop(),
          left: e.left - (parseInt(this.helper.css('left'), 10) || 0) + this.scrollParent.scrollLeft()
        };
      }

      return {
        top: 0,
        left: 0
      };
    },
    _cacheMargins: function _cacheMargins() {
      this.margins = {
        left: parseInt(this.element.css('marginLeft'), 10) || 0,
        top: parseInt(this.element.css('marginTop'), 10) || 0,
        right: parseInt(this.element.css('marginRight'), 10) || 0,
        bottom: parseInt(this.element.css('marginBottom'), 10) || 0
      };
    },
    _cacheHelperProportions: function _cacheHelperProportions() {
      this.helperProportions = {
        width: this.helper.outerWidth(),
        height: this.helper.outerHeight()
      };
    },
    _setContainment: function _setContainment() {
      var t = this.options;
      if ('parent' == t.containment && (t.containment = this.helper[0].parentNode), ('document' == t.containment || 'window' == t.containment) && (this.containment = ['document' == t.containment ? 0 : e(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, 'document' == t.containment ? 0 : e(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, ('document' == t.containment ? 0 : e(window).scrollLeft()) + e('document' == t.containment ? document : window).width() - this.helperProportions.width - this.margins.left, ('document' == t.containment ? 0 : e(window).scrollTop()) + (e('document' == t.containment ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]), /^(document|window|parent)$/.test(t.containment) || t.containment.constructor == Array) t.containment.constructor == Array && (this.containment = t.containment);else {
        var i = e(t.containment),
            s = i[0];
        if (!s) return;
        i.offset();
        var n = 'hidden' != e(s).css('overflow');
        this.containment = [(parseInt(e(s).css('borderLeftWidth'), 10) || 0) + (parseInt(e(s).css('paddingLeft'), 10) || 0), (parseInt(e(s).css('borderTopWidth'), 10) || 0) + (parseInt(e(s).css('paddingTop'), 10) || 0), (n ? Math.max(s.scrollWidth, s.offsetWidth) : s.offsetWidth) - (parseInt(e(s).css('borderLeftWidth'), 10) || 0) - (parseInt(e(s).css('paddingRight'), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (n ? Math.max(s.scrollHeight, s.offsetHeight) : s.offsetHeight) - (parseInt(e(s).css('borderTopWidth'), 10) || 0) - (parseInt(e(s).css('paddingBottom'), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom], this.relative_container = i;
      }
    },
    _convertPositionTo: function _convertPositionTo(t, i) {
      i || (i = this.position);
      var s = 'absolute' == t ? 1 : -1,
          n = (this.options, 'absolute' != this.cssPosition || this.scrollParent[0] != document && e.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent),
          a = /(html|body)/i.test(n[0].tagName);
      return {
        top: i.top + this.offset.relative.top * s + this.offset.parent.top * s - ('fixed' == this.cssPosition ? -this.scrollParent.scrollTop() : a ? 0 : n.scrollTop()) * s,
        left: i.left + this.offset.relative.left * s + this.offset.parent.left * s - ('fixed' == this.cssPosition ? -this.scrollParent.scrollLeft() : a ? 0 : n.scrollLeft()) * s
      };
    },
    _generatePosition: function _generatePosition(t) {
      var i = this.options,
          s = 'absolute' != this.cssPosition || this.scrollParent[0] != document && e.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent,
          n = /(html|body)/i.test(s[0].tagName),
          a = t.pageX,
          o = t.pageY;

      if (this.originalPosition) {
        var r;

        if (this.containment) {
          if (this.relative_container) {
            var h = this.relative_container.offset();
            r = [this.containment[0] + h.left, this.containment[1] + h.top, this.containment[2] + h.left, this.containment[3] + h.top];
          } else r = this.containment;

          t.pageX - this.offset.click.left < r[0] && (a = r[0] + this.offset.click.left), t.pageY - this.offset.click.top < r[1] && (o = r[1] + this.offset.click.top), t.pageX - this.offset.click.left > r[2] && (a = r[2] + this.offset.click.left), t.pageY - this.offset.click.top > r[3] && (o = r[3] + this.offset.click.top);
        }

        if (i.grid) {
          var l = i.grid[1] ? this.originalPageY + Math.round((o - this.originalPageY) / i.grid[1]) * i.grid[1] : this.originalPageY;
          o = r ? l - this.offset.click.top < r[1] || l - this.offset.click.top > r[3] ? l - this.offset.click.top < r[1] ? l + i.grid[1] : l - i.grid[1] : l : l;
          var u = i.grid[0] ? this.originalPageX + Math.round((a - this.originalPageX) / i.grid[0]) * i.grid[0] : this.originalPageX;
          a = r ? u - this.offset.click.left < r[0] || u - this.offset.click.left > r[2] ? u - this.offset.click.left < r[0] ? u + i.grid[0] : u - i.grid[0] : u : u;
        }
      }

      return {
        top: o - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ('fixed' == this.cssPosition ? -this.scrollParent.scrollTop() : n ? 0 : s.scrollTop()),
        left: a - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ('fixed' == this.cssPosition ? -this.scrollParent.scrollLeft() : n ? 0 : s.scrollLeft())
      };
    },
    _clear: function _clear() {
      this.helper.removeClass('ui-draggable-dragging'), this.helper[0] == this.element[0] || this.cancelHelperRemoval || this.helper.remove(), this.helper = null, this.cancelHelperRemoval = !1;
    },
    _trigger: function _trigger(t, i, s) {
      return s = s || this._uiHash(), e.ui.plugin.call(this, t, [i, s]), 'drag' == t && (this.positionAbs = this._convertPositionTo('absolute')), e.Widget.prototype._trigger.call(this, t, i, s);
    },
    plugins: {},
    _uiHash: function _uiHash() {
      return {
        helper: this.helper,
        position: this.position,
        originalPosition: this.originalPosition,
        offset: this.positionAbs
      };
    }
  }), e.ui.plugin.add('draggable', 'connectToSortable', {
    start: function start(t, i) {
      var s = e(this).data('draggable'),
          n = s.options,
          a = e.extend({}, i, {
        item: s.element
      });
      s.sortables = [], e(n.connectToSortable).each(function () {
        var i = e.data(this, 'sortable');
        i && !i.options.disabled && (s.sortables.push({
          instance: i,
          shouldRevert: i.options.revert
        }), i.refreshPositions(), i._trigger('activate', t, a));
      });
    },
    stop: function stop(t, i) {
      var s = e(this).data('draggable'),
          n = e.extend({}, i, {
        item: s.element
      });
      e.each(s.sortables, function () {
        this.instance.isOver ? (this.instance.isOver = 0, s.cancelHelperRemoval = !0, this.instance.cancelHelperRemoval = !1, this.shouldRevert && (this.instance.options.revert = !0), this.instance._mouseStop(t), this.instance.options.helper = this.instance.options._helper, 'original' == s.options.helper && this.instance.currentItem.css({
          top: 'auto',
          left: 'auto'
        })) : (this.instance.cancelHelperRemoval = !1, this.instance._trigger('deactivate', t, n));
      });
    },
    drag: function drag(t, i) {
      var s = e(this).data('draggable'),
          n = this;
      e.each(s.sortables, function () {
        var a = !1,
            o = this;
        this.instance.positionAbs = s.positionAbs, this.instance.helperProportions = s.helperProportions, this.instance.offset.click = s.offset.click, this.instance._intersectsWith(this.instance.containerCache) && (a = !0, e.each(s.sortables, function () {
          return this.instance.positionAbs = s.positionAbs, this.instance.helperProportions = s.helperProportions, this.instance.offset.click = s.offset.click, this != o && this.instance._intersectsWith(this.instance.containerCache) && e.ui.contains(o.instance.element[0], this.instance.element[0]) && (a = !1), a;
        })), a ? (this.instance.isOver || (this.instance.isOver = 1, this.instance.currentItem = e(n).clone().removeAttr('id').appendTo(this.instance.element).data('sortable-item', !0), this.instance.options._helper = this.instance.options.helper, this.instance.options.helper = function () {
          return i.helper[0];
        }, t.target = this.instance.currentItem[0], this.instance._mouseCapture(t, !0), this.instance._mouseStart(t, !0, !0), this.instance.offset.click.top = s.offset.click.top, this.instance.offset.click.left = s.offset.click.left, this.instance.offset.parent.left -= s.offset.parent.left - this.instance.offset.parent.left, this.instance.offset.parent.top -= s.offset.parent.top - this.instance.offset.parent.top, s._trigger('toSortable', t), s.dropped = this.instance.element, s.currentItem = s.element, this.instance.fromOutside = s), this.instance.currentItem && this.instance._mouseDrag(t)) : this.instance.isOver && (this.instance.isOver = 0, this.instance.cancelHelperRemoval = !0, this.instance.options.revert = !1, this.instance._trigger('out', t, this.instance._uiHash(this.instance)), this.instance._mouseStop(t, !0), this.instance.options.helper = this.instance.options._helper, this.instance.currentItem.remove(), this.instance.placeholder && this.instance.placeholder.remove(), s._trigger('fromSortable', t), s.dropped = !1);
      });
    }
  }), e.ui.plugin.add('draggable', 'cursor', {
    start: function start() {
      var t = e('body'),
          i = e(this).data('draggable').options;
      t.css('cursor') && (i._cursor = t.css('cursor')), t.css('cursor', i.cursor);
    },
    stop: function stop() {
      var t = e(this).data('draggable').options;
      t._cursor && e('body').css('cursor', t._cursor);
    }
  }), e.ui.plugin.add('draggable', 'opacity', {
    start: function start(t, i) {
      var s = e(i.helper),
          n = e(this).data('draggable').options;
      s.css('opacity') && (n._opacity = s.css('opacity')), s.css('opacity', n.opacity);
    },
    stop: function stop(t, i) {
      var s = e(this).data('draggable').options;
      s._opacity && e(i.helper).css('opacity', s._opacity);
    }
  }), e.ui.plugin.add('draggable', 'scroll', {
    start: function start() {
      var t = e(this).data('draggable');
      t.scrollParent[0] != document && 'HTML' != t.scrollParent[0].tagName && (t.overflowOffset = t.scrollParent.offset());
    },
    drag: function drag(t) {
      var i = e(this).data('draggable'),
          s = i.options,
          n = !1;
      i.scrollParent[0] != document && 'HTML' != i.scrollParent[0].tagName ? (s.axis && 'x' == s.axis || (i.overflowOffset.top + i.scrollParent[0].offsetHeight - t.pageY < s.scrollSensitivity ? i.scrollParent[0].scrollTop = n = i.scrollParent[0].scrollTop + s.scrollSpeed : t.pageY - i.overflowOffset.top < s.scrollSensitivity && (i.scrollParent[0].scrollTop = n = i.scrollParent[0].scrollTop - s.scrollSpeed)), s.axis && 'y' == s.axis || (i.overflowOffset.left + i.scrollParent[0].offsetWidth - t.pageX < s.scrollSensitivity ? i.scrollParent[0].scrollLeft = n = i.scrollParent[0].scrollLeft + s.scrollSpeed : t.pageX - i.overflowOffset.left < s.scrollSensitivity && (i.scrollParent[0].scrollLeft = n = i.scrollParent[0].scrollLeft - s.scrollSpeed))) : (s.axis && 'x' == s.axis || (t.pageY - e(document).scrollTop() < s.scrollSensitivity ? n = e(document).scrollTop(e(document).scrollTop() - s.scrollSpeed) : e(window).height() - (t.pageY - e(document).scrollTop()) < s.scrollSensitivity && (n = e(document).scrollTop(e(document).scrollTop() + s.scrollSpeed))), s.axis && 'y' == s.axis || (t.pageX - e(document).scrollLeft() < s.scrollSensitivity ? n = e(document).scrollLeft(e(document).scrollLeft() - s.scrollSpeed) : e(window).width() - (t.pageX - e(document).scrollLeft()) < s.scrollSensitivity && (n = e(document).scrollLeft(e(document).scrollLeft() + s.scrollSpeed)))), n !== !1 && e.ui.ddmanager && !s.dropBehaviour && e.ui.ddmanager.prepareOffsets(i, t);
    }
  }), e.ui.plugin.add('draggable', 'snap', {
    start: function start() {
      var t = e(this).data('draggable'),
          i = t.options;
      t.snapElements = [], e(i.snap.constructor != String ? i.snap.items || ':data(draggable)' : i.snap).each(function () {
        var i = e(this),
            s = i.offset();
        this != t.element[0] && t.snapElements.push({
          item: this,
          width: i.outerWidth(),
          height: i.outerHeight(),
          top: s.top,
          left: s.left
        });
      });
    },
    drag: function drag(t, i) {
      for (var s = e(this).data('draggable'), n = s.options, a = n.snapTolerance, o = i.offset.left, r = o + s.helperProportions.width, h = i.offset.top, l = h + s.helperProportions.height, u = s.snapElements.length - 1; u >= 0; u--) {
        var d = s.snapElements[u].left,
            c = d + s.snapElements[u].width,
            p = s.snapElements[u].top,
            f = p + s.snapElements[u].height;

        if (o > d - a && c + a > o && h > p - a && f + a > h || o > d - a && c + a > o && l > p - a && f + a > l || r > d - a && c + a > r && h > p - a && f + a > h || r > d - a && c + a > r && l > p - a && f + a > l) {
          if ('inner' != n.snapMode) {
            var m = a >= Math.abs(p - l),
                g = a >= Math.abs(f - h),
                v = a >= Math.abs(d - r),
                _ = a >= Math.abs(c - o);

            m && (i.position.top = s._convertPositionTo('relative', {
              top: p - s.helperProportions.height,
              left: 0
            }).top - s.margins.top), g && (i.position.top = s._convertPositionTo('relative', {
              top: f,
              left: 0
            }).top - s.margins.top), v && (i.position.left = s._convertPositionTo('relative', {
              top: 0,
              left: d - s.helperProportions.width
            }).left - s.margins.left), _ && (i.position.left = s._convertPositionTo('relative', {
              top: 0,
              left: c
            }).left - s.margins.left);
          }

          var b = m || g || v || _;

          if ('outer' != n.snapMode) {
            var m = a >= Math.abs(p - h),
                g = a >= Math.abs(f - l),
                v = a >= Math.abs(d - o),
                _ = a >= Math.abs(c - r);

            m && (i.position.top = s._convertPositionTo('relative', {
              top: p,
              left: 0
            }).top - s.margins.top), g && (i.position.top = s._convertPositionTo('relative', {
              top: f - s.helperProportions.height,
              left: 0
            }).top - s.margins.top), v && (i.position.left = s._convertPositionTo('relative', {
              top: 0,
              left: d
            }).left - s.margins.left), _ && (i.position.left = s._convertPositionTo('relative', {
              top: 0,
              left: c - s.helperProportions.width
            }).left - s.margins.left);
          }

          !s.snapElements[u].snapping && (m || g || v || _ || b) && s.options.snap.snap && s.options.snap.snap.call(s.element, t, e.extend(s._uiHash(), {
            snapItem: s.snapElements[u].item
          })), s.snapElements[u].snapping = m || g || v || _ || b;
        } else s.snapElements[u].snapping && s.options.snap.release && s.options.snap.release.call(s.element, t, e.extend(s._uiHash(), {
          snapItem: s.snapElements[u].item
        })), s.snapElements[u].snapping = !1;
      }
    }
  }), e.ui.plugin.add('draggable', 'stack', {
    start: function start() {
      var t = e(this).data('draggable').options,
          i = e.makeArray(e(t.stack)).sort(function (t, i) {
        return (parseInt(e(t).css('zIndex'), 10) || 0) - (parseInt(e(i).css('zIndex'), 10) || 0);
      });

      if (i.length) {
        var s = parseInt(i[0].style.zIndex) || 0;
        e(i).each(function (e) {
          this.style.zIndex = s + e;
        }), this[0].style.zIndex = s + i.length;
      }
    }
  }), e.ui.plugin.add('draggable', 'zIndex', {
    start: function start(t, i) {
      var s = e(i.helper),
          n = e(this).data('draggable').options;
      s.css('zIndex') && (n._zIndex = s.css('zIndex')), s.css('zIndex', n.zIndex);
    },
    stop: function stop(t, i) {
      var s = e(this).data('draggable').options;
      s._zIndex && e(i.helper).css('zIndex', s._zIndex);
    }
  });
})(jQuery);

(function (e) {
  e.widget('ui.resizable', e.ui.mouse, {
    version: '1.9.2',
    widgetEventPrefix: 'resize',
    options: {
      alsoResize: !1,
      animate: !1,
      animateDuration: 'slow',
      animateEasing: 'swing',
      aspectRatio: !1,
      autoHide: !1,
      containment: !1,
      ghost: !1,
      grid: !1,
      handles: 'e,s,se',
      helper: !1,
      maxHeight: null,
      maxWidth: null,
      minHeight: 10,
      minWidth: 10,
      zIndex: 1e3
    },
    _create: function _create() {
      var t = this,
          i = this.options;

      if (this.element.addClass('ui-resizable'), e.extend(this, {
        _aspectRatio: !!i.aspectRatio,
        aspectRatio: i.aspectRatio,
        originalElement: this.element,
        _proportionallyResizeElements: [],
        _helper: i.helper || i.ghost || i.animate ? i.helper || 'ui-resizable-helper' : null
      }), this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i) && (this.element.wrap(e('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({
        position: this.element.css('position'),
        width: this.element.outerWidth(),
        height: this.element.outerHeight(),
        top: this.element.css('top'),
        left: this.element.css('left')
      })), this.element = this.element.parent().data('resizable', this.element.data('resizable')), this.elementIsWrapper = !0, this.element.css({
        marginLeft: this.originalElement.css('marginLeft'),
        marginTop: this.originalElement.css('marginTop'),
        marginRight: this.originalElement.css('marginRight'),
        marginBottom: this.originalElement.css('marginBottom')
      }), this.originalElement.css({
        marginLeft: 0,
        marginTop: 0,
        marginRight: 0,
        marginBottom: 0
      }), this.originalResizeStyle = this.originalElement.css('resize'), this.originalElement.css('resize', 'none'), this._proportionallyResizeElements.push(this.originalElement.css({
        position: 'static',
        zoom: 1,
        display: 'block'
      })), this.originalElement.css({
        margin: this.originalElement.css('margin')
      }), this._proportionallyResize()), this.handles = i.handles || (e('.ui-resizable-handle', this.element).length ? {
        n: '.ui-resizable-n',
        e: '.ui-resizable-e',
        s: '.ui-resizable-s',
        w: '.ui-resizable-w',
        se: '.ui-resizable-se',
        sw: '.ui-resizable-sw',
        ne: '.ui-resizable-ne',
        nw: '.ui-resizable-nw'
      } : 'e,s,se'), this.handles.constructor == String) {
        'all' == this.handles && (this.handles = 'n,e,s,w,se,sw,ne,nw');
        var s = this.handles.split(',');
        this.handles = {};

        for (var n = 0; s.length > n; n++) {
          var a = e.trim(s[n]),
              o = 'ui-resizable-' + a,
              r = e('<div class="ui-resizable-handle ' + o + '"></div>');
          r.css({
            zIndex: i.zIndex
          }), 'se' == a && r.addClass('ui-icon ui-icon-gripsmall-diagonal-se'), this.handles[a] = '.ui-resizable-' + a, this.element.append(r);
        }
      }

      this._renderAxis = function (t) {
        t = t || this.element;

        for (var i in this.handles) {
          if (this.handles[i].constructor == String && (this.handles[i] = e(this.handles[i], this.element).show()), this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {
            var s = e(this.handles[i], this.element),
                n = 0;
            n = /sw|ne|nw|se|n|s/.test(i) ? s.outerHeight() : s.outerWidth();
            var a = ['padding', /ne|nw|n/.test(i) ? 'Top' : /se|sw|s/.test(i) ? 'Bottom' : /^e$/.test(i) ? 'Right' : 'Left'].join('');
            t.css(a, n), this._proportionallyResize();
          }

          e(this.handles[i]).length;
        }
      }, this._renderAxis(this.element), this._handles = e('.ui-resizable-handle', this.element).disableSelection(), this._handles.mouseover(function () {
        if (!t.resizing) {
          if (this.className) var e = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
          t.axis = e && e[1] ? e[1] : 'se';
        }
      }), i.autoHide && (this._handles.hide(), e(this.element).addClass('ui-resizable-autohide').mouseenter(function () {
        i.disabled || (e(this).removeClass('ui-resizable-autohide'), t._handles.show());
      }).mouseleave(function () {
        i.disabled || t.resizing || (e(this).addClass('ui-resizable-autohide'), t._handles.hide());
      })), this._mouseInit();
    },
    _destroy: function _destroy() {
      this._mouseDestroy();

      var t = function t(_t) {
        e(_t).removeClass('ui-resizable ui-resizable-disabled ui-resizable-resizing').removeData('resizable').removeData('ui-resizable').unbind('.resizable').find('.ui-resizable-handle').remove();
      };

      if (this.elementIsWrapper) {
        t(this.element);
        var i = this.element;
        this.originalElement.css({
          position: i.css('position'),
          width: i.outerWidth(),
          height: i.outerHeight(),
          top: i.css('top'),
          left: i.css('left')
        }).insertAfter(i), i.remove();
      }

      return this.originalElement.css('resize', this.originalResizeStyle), t(this.originalElement), this;
    },
    _mouseCapture: function _mouseCapture(t) {
      var i = !1;

      for (var s in this.handles) {
        e(this.handles[s])[0] == t.target && (i = !0);
      }

      return !this.options.disabled && i;
    },
    _mouseStart: function _mouseStart(i) {
      var s = this.options,
          n = this.element.position(),
          a = this.element;
      this.resizing = !0, this.documentScroll = {
        top: e(document).scrollTop(),
        left: e(document).scrollLeft()
      }, (a.is('.ui-draggable') || /absolute/.test(a.css('position'))) && a.css({
        position: 'absolute',
        top: n.top,
        left: n.left
      }), this._renderProxy();
      var o = t(this.helper.css('left')),
          r = t(this.helper.css('top'));
      s.containment && (o += e(s.containment).scrollLeft() || 0, r += e(s.containment).scrollTop() || 0), this.offset = this.helper.offset(), this.position = {
        left: o,
        top: r
      }, this.size = this._helper ? {
        width: a.outerWidth(),
        height: a.outerHeight()
      } : {
        width: a.width(),
        height: a.height()
      }, this.originalSize = this._helper ? {
        width: a.outerWidth(),
        height: a.outerHeight()
      } : {
        width: a.width(),
        height: a.height()
      }, this.originalPosition = {
        left: o,
        top: r
      }, this.sizeDiff = {
        width: a.outerWidth() - a.width(),
        height: a.outerHeight() - a.height()
      }, this.originalMousePosition = {
        left: i.pageX,
        top: i.pageY
      }, this.aspectRatio = 'number' == typeof s.aspectRatio ? s.aspectRatio : this.originalSize.width / this.originalSize.height || 1;
      var h = e('.ui-resizable-' + this.axis).css('cursor');
      return e('body').css('cursor', 'auto' == h ? this.axis + '-resize' : h), a.addClass('ui-resizable-resizing'), this._propagate('start', i), !0;
    },
    _mouseDrag: function _mouseDrag(e) {
      var t = this.helper,
          i = (this.options, this.originalMousePosition),
          s = this.axis,
          n = e.pageX - i.left || 0,
          a = e.pageY - i.top || 0,
          o = this._change[s];
      if (!o) return !1;
      var r = o.apply(this, [e, n, a]);
      return this._updateVirtualBoundaries(e.shiftKey), (this._aspectRatio || e.shiftKey) && (r = this._updateRatio(r, e)), r = this._respectSize(r, e), this._propagate('resize', e), t.css({
        top: this.position.top + 'px',
        left: this.position.left + 'px',
        width: this.size.width + 'px',
        height: this.size.height + 'px'
      }), !this._helper && this._proportionallyResizeElements.length && this._proportionallyResize(), this._updateCache(r), this._trigger('resize', e, this.ui()), !1;
    },
    _mouseStop: function _mouseStop(t) {
      this.resizing = !1;
      var i = this.options,
          s = this;

      if (this._helper) {
        var n = this._proportionallyResizeElements,
            a = n.length && /textarea/i.test(n[0].nodeName),
            o = a && e.ui.hasScroll(n[0], 'left') ? 0 : s.sizeDiff.height,
            r = a ? 0 : s.sizeDiff.width,
            h = {
          width: s.helper.width() - r,
          height: s.helper.height() - o
        },
            l = parseInt(s.element.css('left'), 10) + (s.position.left - s.originalPosition.left) || null,
            u = parseInt(s.element.css('top'), 10) + (s.position.top - s.originalPosition.top) || null;
        i.animate || this.element.css(e.extend(h, {
          top: u,
          left: l
        })), s.helper.height(s.size.height), s.helper.width(s.size.width), this._helper && !i.animate && this._proportionallyResize();
      }

      return e('body').css('cursor', 'auto'), this.element.removeClass('ui-resizable-resizing'), this._propagate('stop', t), this._helper && this.helper.remove(), !1;
    },
    _updateVirtualBoundaries: function _updateVirtualBoundaries(e) {
      var t,
          s,
          n,
          a,
          o,
          r = this.options;
      o = {
        minWidth: i(r.minWidth) ? r.minWidth : 0,
        maxWidth: i(r.maxWidth) ? r.maxWidth : 1 / 0,
        minHeight: i(r.minHeight) ? r.minHeight : 0,
        maxHeight: i(r.maxHeight) ? r.maxHeight : 1 / 0
      }, (this._aspectRatio || e) && (t = o.minHeight * this.aspectRatio, n = o.minWidth / this.aspectRatio, s = o.maxHeight * this.aspectRatio, a = o.maxWidth / this.aspectRatio, t > o.minWidth && (o.minWidth = t), n > o.minHeight && (o.minHeight = n), o.maxWidth > s && (o.maxWidth = s), o.maxHeight > a && (o.maxHeight = a)), this._vBoundaries = o;
    },
    _updateCache: function _updateCache(e) {
      this.options, this.offset = this.helper.offset(), i(e.left) && (this.position.left = e.left), i(e.top) && (this.position.top = e.top), i(e.height) && (this.size.height = e.height), i(e.width) && (this.size.width = e.width);
    },
    _updateRatio: function _updateRatio(e) {
      var t = (this.options, this.position),
          s = this.size,
          n = this.axis;
      return i(e.height) ? e.width = e.height * this.aspectRatio : i(e.width) && (e.height = e.width / this.aspectRatio), 'sw' == n && (e.left = t.left + (s.width - e.width), e.top = null), 'nw' == n && (e.top = t.top + (s.height - e.height), e.left = t.left + (s.width - e.width)), e;
    },
    _respectSize: function _respectSize(e, t) {
      var s = (this.helper, this._vBoundaries),
          n = (this._aspectRatio || t.shiftKey, this.axis),
          a = i(e.width) && s.maxWidth && s.maxWidth < e.width,
          o = i(e.height) && s.maxHeight && s.maxHeight < e.height,
          r = i(e.width) && s.minWidth && s.minWidth > e.width,
          h = i(e.height) && s.minHeight && s.minHeight > e.height;
      r && (e.width = s.minWidth), h && (e.height = s.minHeight), a && (e.width = s.maxWidth), o && (e.height = s.maxHeight);
      var l = this.originalPosition.left + this.originalSize.width,
          u = this.position.top + this.size.height,
          d = /sw|nw|w/.test(n),
          c = /nw|ne|n/.test(n);
      r && d && (e.left = l - s.minWidth), a && d && (e.left = l - s.maxWidth), h && c && (e.top = u - s.minHeight), o && c && (e.top = u - s.maxHeight);
      var p = !e.width && !e.height;
      return p && !e.left && e.top ? e.top = null : p && !e.top && e.left && (e.left = null), e;
    },
    _proportionallyResize: function _proportionallyResize() {
      if (this.options, this._proportionallyResizeElements.length) for (var t = this.helper || this.element, i = 0; this._proportionallyResizeElements.length > i; i++) {
        var s = this._proportionallyResizeElements[i];

        if (!this.borderDif) {
          var n = [s.css('borderTopWidth'), s.css('borderRightWidth'), s.css('borderBottomWidth'), s.css('borderLeftWidth')],
              a = [s.css('paddingTop'), s.css('paddingRight'), s.css('paddingBottom'), s.css('paddingLeft')];
          this.borderDif = e.map(n, function (e, t) {
            var i = parseInt(e, 10) || 0,
                s = parseInt(a[t], 10) || 0;
            return i + s;
          });
        }

        s.css({
          height: t.height() - this.borderDif[0] - this.borderDif[2] || 0,
          width: t.width() - this.borderDif[1] - this.borderDif[3] || 0
        });
      }
    },
    _renderProxy: function _renderProxy() {
      var t = this.element,
          i = this.options;

      if (this.elementOffset = t.offset(), this._helper) {
        this.helper = this.helper || e('<div style="overflow:hidden;"></div>');
        var s = e.ui.ie6 ? 1 : 0,
            n = e.ui.ie6 ? 2 : -1;
        this.helper.addClass(this._helper).css({
          width: this.element.outerWidth() + n,
          height: this.element.outerHeight() + n,
          position: 'absolute',
          left: this.elementOffset.left - s + 'px',
          top: this.elementOffset.top - s + 'px',
          zIndex: ++i.zIndex
        }), this.helper.appendTo('body').disableSelection();
      } else this.helper = this.element;
    },
    _change: {
      e: function e(_e, t) {
        return {
          width: this.originalSize.width + t
        };
      },
      w: function w(e, t) {
        var i = (this.options, this.originalSize),
            s = this.originalPosition;
        return {
          left: s.left + t,
          width: i.width - t
        };
      },
      n: function n(e, t, i) {
        var s = (this.options, this.originalSize),
            n = this.originalPosition;
        return {
          top: n.top + i,
          height: s.height - i
        };
      },
      s: function s(e, t, i) {
        return {
          height: this.originalSize.height + i
        };
      },
      se: function se(t, i, s) {
        return e.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [t, i, s]));
      },
      sw: function sw(t, i, s) {
        return e.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [t, i, s]));
      },
      ne: function ne(t, i, s) {
        return e.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [t, i, s]));
      },
      nw: function nw(t, i, s) {
        return e.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [t, i, s]));
      }
    },
    _propagate: function _propagate(t, i) {
      e.ui.plugin.call(this, t, [i, this.ui()]), 'resize' != t && this._trigger(t, i, this.ui());
    },
    plugins: {},
    ui: function ui() {
      return {
        originalElement: this.originalElement,
        element: this.element,
        helper: this.helper,
        position: this.position,
        size: this.size,
        originalSize: this.originalSize,
        originalPosition: this.originalPosition
      };
    }
  }), e.ui.plugin.add('resizable', 'alsoResize', {
    start: function start() {
      var t = e(this).data('resizable'),
          i = t.options,
          s = function s(t) {
        e(t).each(function () {
          var t = e(this);
          t.data('resizable-alsoresize', {
            width: parseInt(t.width(), 10),
            height: parseInt(t.height(), 10),
            left: parseInt(t.css('left'), 10),
            top: parseInt(t.css('top'), 10)
          });
        });
      };

      'object' != _typeof(i.alsoResize) || i.alsoResize.parentNode ? s(i.alsoResize) : i.alsoResize.length ? (i.alsoResize = i.alsoResize[0], s(i.alsoResize)) : e.each(i.alsoResize, function (e) {
        s(e);
      });
    },
    resize: function resize(t, i) {
      var s = e(this).data('resizable'),
          n = s.options,
          a = s.originalSize,
          o = s.originalPosition,
          r = {
        height: s.size.height - a.height || 0,
        width: s.size.width - a.width || 0,
        top: s.position.top - o.top || 0,
        left: s.position.left - o.left || 0
      },
          h = function h(t, s) {
        e(t).each(function () {
          var t = e(this),
              n = e(this).data('resizable-alsoresize'),
              a = {},
              o = s && s.length ? s : t.parents(i.originalElement[0]).length ? ['width', 'height'] : ['width', 'height', 'top', 'left'];
          e.each(o, function (e, t) {
            var i = (n[t] || 0) + (r[t] || 0);
            i && i >= 0 && (a[t] = i || null);
          }), t.css(a);
        });
      };

      'object' != _typeof(n.alsoResize) || n.alsoResize.nodeType ? h(n.alsoResize) : e.each(n.alsoResize, function (e, t) {
        h(e, t);
      });
    },
    stop: function stop() {
      e(this).removeData('resizable-alsoresize');
    }
  }), e.ui.plugin.add('resizable', 'animate', {
    stop: function stop(t) {
      var i = e(this).data('resizable'),
          s = i.options,
          n = i._proportionallyResizeElements,
          a = n.length && /textarea/i.test(n[0].nodeName),
          o = a && e.ui.hasScroll(n[0], 'left') ? 0 : i.sizeDiff.height,
          r = a ? 0 : i.sizeDiff.width,
          h = {
        width: i.size.width - r,
        height: i.size.height - o
      },
          l = parseInt(i.element.css('left'), 10) + (i.position.left - i.originalPosition.left) || null,
          u = parseInt(i.element.css('top'), 10) + (i.position.top - i.originalPosition.top) || null;
      i.element.animate(e.extend(h, u && l ? {
        top: u,
        left: l
      } : {}), {
        duration: s.animateDuration,
        easing: s.animateEasing,
        step: function step() {
          var s = {
            width: parseInt(i.element.css('width'), 10),
            height: parseInt(i.element.css('height'), 10),
            top: parseInt(i.element.css('top'), 10),
            left: parseInt(i.element.css('left'), 10)
          };
          n && n.length && e(n[0]).css({
            width: s.width,
            height: s.height
          }), i._updateCache(s), i._propagate('resize', t);
        }
      });
    }
  }), e.ui.plugin.add('resizable', 'containment', {
    start: function start() {
      var i = e(this).data('resizable'),
          s = i.options,
          n = i.element,
          a = s.containment,
          o = a instanceof e ? a.get(0) : /parent/.test(a) ? n.parent().get(0) : a;
      if (o) if (i.containerElement = e(o), /document/.test(a) || a == document) i.containerOffset = {
        left: 0,
        top: 0
      }, i.containerPosition = {
        left: 0,
        top: 0
      }, i.parentData = {
        element: e(document),
        left: 0,
        top: 0,
        width: e(document).width(),
        height: e(document).height() || document.body.parentNode.scrollHeight
      };else {
        var r = e(o),
            h = [];
        e(['Top', 'Right', 'Left', 'Bottom']).each(function (e, i) {
          h[e] = t(r.css('padding' + i));
        }), i.containerOffset = r.offset(), i.containerPosition = r.position(), i.containerSize = {
          height: r.innerHeight() - h[3],
          width: r.innerWidth() - h[1]
        };
        var l = i.containerOffset,
            u = i.containerSize.height,
            d = i.containerSize.width,
            c = e.ui.hasScroll(o, 'left') ? o.scrollWidth : d,
            p = e.ui.hasScroll(o) ? o.scrollHeight : u;
        i.parentData = {
          element: o,
          left: l.left,
          top: l.top,
          width: c,
          height: p
        };
      }
    },
    resize: function resize(t) {
      var i = e(this).data('resizable'),
          s = i.options,
          n = (i.containerSize, i.containerOffset),
          a = (i.size, i.position),
          o = i._aspectRatio || t.shiftKey,
          r = {
        top: 0,
        left: 0
      },
          h = i.containerElement;
      h[0] != document && /static/.test(h.css('position')) && (r = n), a.left < (i._helper ? n.left : 0) && (i.size.width = i.size.width + (i._helper ? i.position.left - n.left : i.position.left - r.left), o && (i.size.height = i.size.width / i.aspectRatio), i.position.left = s.helper ? n.left : 0), a.top < (i._helper ? n.top : 0) && (i.size.height = i.size.height + (i._helper ? i.position.top - n.top : i.position.top), o && (i.size.width = i.size.height * i.aspectRatio), i.position.top = i._helper ? n.top : 0), i.offset.left = i.parentData.left + i.position.left, i.offset.top = i.parentData.top + i.position.top;
      var l = Math.abs((i._helper ? i.offset.left - r.left : i.offset.left - r.left) + i.sizeDiff.width),
          u = Math.abs((i._helper ? i.offset.top - r.top : i.offset.top - n.top) + i.sizeDiff.height),
          d = i.containerElement.get(0) == i.element.parent().get(0),
          c = /relative|absolute/.test(i.containerElement.css('position'));
      d && c && (l -= i.parentData.left), l + i.size.width >= i.parentData.width && (i.size.width = i.parentData.width - l, o && (i.size.height = i.size.width / i.aspectRatio)), u + i.size.height >= i.parentData.height && (i.size.height = i.parentData.height - u, o && (i.size.width = i.size.height * i.aspectRatio));
    },
    stop: function stop() {
      var t = e(this).data('resizable'),
          i = t.options,
          s = (t.position, t.containerOffset),
          n = t.containerPosition,
          a = t.containerElement,
          o = e(t.helper),
          r = o.offset(),
          h = o.outerWidth() - t.sizeDiff.width,
          l = o.outerHeight() - t.sizeDiff.height;
      t._helper && !i.animate && /relative/.test(a.css('position')) && e(this).css({
        left: r.left - n.left - s.left,
        width: h,
        height: l
      }), t._helper && !i.animate && /static/.test(a.css('position')) && e(this).css({
        left: r.left - n.left - s.left,
        width: h,
        height: l
      });
    }
  }), e.ui.plugin.add('resizable', 'ghost', {
    start: function start() {
      var t = e(this).data('resizable'),
          i = t.options,
          s = t.size;
      t.ghost = t.originalElement.clone(), t.ghost.css({
        opacity: 0.25,
        display: 'block',
        position: 'relative',
        height: s.height,
        width: s.width,
        margin: 0,
        left: 0,
        top: 0
      }).addClass('ui-resizable-ghost').addClass('string' == typeof i.ghost ? i.ghost : ''), t.ghost.appendTo(t.helper);
    },
    resize: function resize() {
      var t = e(this).data('resizable');
      t.options, t.ghost && t.ghost.css({
        position: 'relative',
        height: t.size.height,
        width: t.size.width
      });
    },
    stop: function stop() {
      var t = e(this).data('resizable');
      t.options, t.ghost && t.helper && t.helper.get(0).removeChild(t.ghost.get(0));
    }
  }), e.ui.plugin.add('resizable', 'grid', {
    resize: function resize(t) {
      var i = e(this).data('resizable'),
          s = i.options,
          n = i.size,
          a = i.originalSize,
          o = i.originalPosition,
          r = i.axis;
      s._aspectRatio || t.shiftKey, s.grid = 'number' == typeof s.grid ? [s.grid, s.grid] : s.grid;
      var h = Math.round((n.width - a.width) / (s.grid[0] || 1)) * (s.grid[0] || 1),
          l = Math.round((n.height - a.height) / (s.grid[1] || 1)) * (s.grid[1] || 1);
      /^(se|s|e)$/.test(r) ? (i.size.width = a.width + h, i.size.height = a.height + l) : /^(ne)$/.test(r) ? (i.size.width = a.width + h, i.size.height = a.height + l, i.position.top = o.top - l) : /^(sw)$/.test(r) ? (i.size.width = a.width + h, i.size.height = a.height + l, i.position.left = o.left - h) : (i.size.width = a.width + h, i.size.height = a.height + l, i.position.top = o.top - l, i.position.left = o.left - h);
    }
  });

  var t = function t(e) {
    return parseInt(e, 10) || 0;
  },
      i = function i(e) {
    return !isNaN(parseInt(e, 10));
  };
})(jQuery);

(function (e) {
  var t = 0,
      i = {},
      s = {};
  i.height = i.paddingTop = i.paddingBottom = i.borderTopWidth = i.borderBottomWidth = 'hide', s.height = s.paddingTop = s.paddingBottom = s.borderTopWidth = s.borderBottomWidth = 'show', e.widget('ui.accordion', {
    version: '1.9.2',
    options: {
      active: 0,
      animate: {},
      collapsible: !1,
      event: 'click',
      header: '> li > :first-child,> :not(li):even',
      heightStyle: 'auto',
      icons: {
        activeHeader: 'ui-icon-triangle-1-s',
        header: 'ui-icon-triangle-1-e'
      },
      activate: null,
      beforeActivate: null
    },
    _create: function _create() {
      var i = this.accordionId = 'ui-accordion-' + (this.element.attr('id') || ++t),
          s = this.options;
      this.prevShow = this.prevHide = e(), this.element.addClass('ui-accordion ui-widget ui-helper-reset'), this.headers = this.element.find(s.header).addClass('ui-accordion-header ui-helper-reset ui-state-default ui-corner-all'), this._hoverable(this.headers), this._focusable(this.headers), this.headers.next().addClass('ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom').hide(), s.collapsible || s.active !== !1 && null != s.active || (s.active = 0), 0 > s.active && (s.active += this.headers.length), this.active = this._findActive(s.active).addClass('ui-accordion-header-active ui-state-active').toggleClass('ui-corner-all ui-corner-top'), this.active.next().addClass('ui-accordion-content-active').show(), this._createIcons(), this.refresh(), this.element.attr('role', 'tablist'), this.headers.attr('role', 'tab').each(function (t) {
        var s = e(this),
            n = s.attr('id'),
            a = s.next(),
            o = a.attr('id');
        n || (n = i + '-header-' + t, s.attr('id', n)), o || (o = i + '-panel-' + t, a.attr('id', o)), s.attr('aria-controls', o), a.attr('aria-labelledby', n);
      }).next().attr('role', 'tabpanel'), this.headers.not(this.active).attr({
        'aria-selected': 'false',
        tabIndex: -1
      }).next().attr({
        'aria-expanded': 'false',
        'aria-hidden': 'true'
      }).hide(), this.active.length ? this.active.attr({
        'aria-selected': 'true',
        tabIndex: 0
      }).next().attr({
        'aria-expanded': 'true',
        'aria-hidden': 'false'
      }) : this.headers.eq(0).attr('tabIndex', 0), this._on(this.headers, {
        keydown: '_keydown'
      }), this._on(this.headers.next(), {
        keydown: '_panelKeyDown'
      }), this._setupEvents(s.event);
    },
    _getCreateEventData: function _getCreateEventData() {
      return {
        header: this.active,
        content: this.active.length ? this.active.next() : e()
      };
    },
    _createIcons: function _createIcons() {
      var t = this.options.icons;
      t && (e('<span>').addClass('ui-accordion-header-icon ui-icon ' + t.header).prependTo(this.headers), this.active.children('.ui-accordion-header-icon').removeClass(t.header).addClass(t.activeHeader), this.headers.addClass('ui-accordion-icons'));
    },
    _destroyIcons: function _destroyIcons() {
      this.headers.removeClass('ui-accordion-icons').children('.ui-accordion-header-icon').remove();
    },
    _destroy: function _destroy() {
      var e;
      this.element.removeClass('ui-accordion ui-widget ui-helper-reset').removeAttr('role'), this.headers.removeClass('ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top').removeAttr('role').removeAttr('aria-selected').removeAttr('aria-controls').removeAttr('tabIndex').each(function () {
        /^ui-accordion/.test(this.id) && this.removeAttribute('id');
      }), this._destroyIcons(), e = this.headers.next().css('display', '').removeAttr('role').removeAttr('aria-expanded').removeAttr('aria-hidden').removeAttr('aria-labelledby').removeClass('ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled').each(function () {
        /^ui-accordion/.test(this.id) && this.removeAttribute('id');
      }), 'content' !== this.options.heightStyle && e.css('height', '');
    },
    _setOption: function _setOption(e, t) {
      return 'active' === e ? (this._activate(t), undefined) : ('event' === e && (this.options.event && this._off(this.headers, this.options.event), this._setupEvents(t)), this._super(e, t), 'collapsible' !== e || t || this.options.active !== !1 || this._activate(0), 'icons' === e && (this._destroyIcons(), t && this._createIcons()), 'disabled' === e && this.headers.add(this.headers.next()).toggleClass('ui-state-disabled', !!t), undefined);
    },
    _keydown: function _keydown(t) {
      if (!t.altKey && !t.ctrlKey) {
        var i = e.ui.keyCode,
            s = this.headers.length,
            n = this.headers.index(t.target),
            a = !1;

        switch (t.keyCode) {
          case i.RIGHT:
          case i.DOWN:
            a = this.headers[(n + 1) % s];
            break;

          case i.LEFT:
          case i.UP:
            a = this.headers[(n - 1 + s) % s];
            break;

          case i.SPACE:
          case i.ENTER:
            this._eventHandler(t);

            break;

          case i.HOME:
            a = this.headers[0];
            break;

          case i.END:
            a = this.headers[s - 1];
        }

        a && (e(t.target).attr('tabIndex', -1), e(a).attr('tabIndex', 0), a.focus(), t.preventDefault());
      }
    },
    _panelKeyDown: function _panelKeyDown(t) {
      t.keyCode === e.ui.keyCode.UP && t.ctrlKey && e(t.currentTarget).prev().focus();
    },
    refresh: function refresh() {
      var t,
          i,
          s = this.options.heightStyle,
          n = this.element.parent();
      'fill' === s ? (e.support.minHeight || (i = n.css('overflow'), n.css('overflow', 'hidden')), t = n.height(), this.element.siblings(':visible').each(function () {
        var i = e(this),
            s = i.css('position');
        'absolute' !== s && 'fixed' !== s && (t -= i.outerHeight(!0));
      }), i && n.css('overflow', i), this.headers.each(function () {
        t -= e(this).outerHeight(!0);
      }), this.headers.next().each(function () {
        e(this).height(Math.max(0, t - e(this).innerHeight() + e(this).height()));
      }).css('overflow', 'auto')) : 'auto' === s && (t = 0, this.headers.next().each(function () {
        t = Math.max(t, e(this).css('height', '').height());
      }).height(t));
    },
    _activate: function _activate(t) {
      var i = this._findActive(t)[0];

      i !== this.active[0] && (i = i || this.active[0], this._eventHandler({
        target: i,
        currentTarget: i,
        preventDefault: e.noop
      }));
    },
    _findActive: function _findActive(t) {
      return 'number' == typeof t ? this.headers.eq(t) : e();
    },
    _setupEvents: function _setupEvents(t) {
      var i = {};
      t && (e.each(t.split(' '), function (e, t) {
        i[t] = '_eventHandler';
      }), this._on(this.headers, i));
    },
    _eventHandler: function _eventHandler(t) {
      var i = this.options,
          s = this.active,
          n = e(t.currentTarget),
          a = n[0] === s[0],
          o = a && i.collapsible,
          r = o ? e() : n.next(),
          h = s.next(),
          l = {
        oldHeader: s,
        oldPanel: h,
        newHeader: o ? e() : n,
        newPanel: r
      };
      t.preventDefault(), a && !i.collapsible || this._trigger('beforeActivate', t, l) === !1 || (i.active = o ? !1 : this.headers.index(n), this.active = a ? e() : n, this._toggle(l), s.removeClass('ui-accordion-header-active ui-state-active'), i.icons && s.children('.ui-accordion-header-icon').removeClass(i.icons.activeHeader).addClass(i.icons.header), a || (n.removeClass('ui-corner-all').addClass('ui-accordion-header-active ui-state-active ui-corner-top'), i.icons && n.children('.ui-accordion-header-icon').removeClass(i.icons.header).addClass(i.icons.activeHeader), n.next().addClass('ui-accordion-content-active')));
    },
    _toggle: function _toggle(t) {
      var i = t.newPanel,
          s = this.prevShow.length ? this.prevShow : t.oldPanel;
      this.prevShow.add(this.prevHide).stop(!0, !0), this.prevShow = i, this.prevHide = s, this.options.animate ? this._animate(i, s, t) : (s.hide(), i.show(), this._toggleComplete(t)), s.attr({
        'aria-expanded': 'false',
        'aria-hidden': 'true'
      }), s.prev().attr('aria-selected', 'false'), i.length && s.length ? s.prev().attr('tabIndex', -1) : i.length && this.headers.filter(function () {
        return 0 === e(this).attr('tabIndex');
      }).attr('tabIndex', -1), i.attr({
        'aria-expanded': 'true',
        'aria-hidden': 'false'
      }).prev().attr({
        'aria-selected': 'true',
        tabIndex: 0
      });
    },
    _animate: function _animate(e, t, n) {
      var a,
          o,
          r,
          h = this,
          l = 0,
          u = e.length && (!t.length || e.index() < t.index()),
          d = this.options.animate || {},
          c = u && d.down || d,
          p = function p() {
        h._toggleComplete(n);
      };

      return 'number' == typeof c && (r = c), 'string' == typeof c && (o = c), o = o || c.easing || d.easing, r = r || c.duration || d.duration, t.length ? e.length ? (a = e.show().outerHeight(), t.animate(i, {
        duration: r,
        easing: o,
        step: function step(e, t) {
          t.now = Math.round(e);
        }
      }), e.hide().animate(s, {
        duration: r,
        easing: o,
        complete: p,
        step: function step(e, i) {
          i.now = Math.round(e), 'height' !== i.prop ? l += i.now : 'content' !== h.options.heightStyle && (i.now = Math.round(a - t.outerHeight() - l), l = 0);
        }
      }), undefined) : t.animate(i, r, o, p) : e.animate(s, r, o, p);
    },
    _toggleComplete: function _toggleComplete(e) {
      var t = e.oldPanel;
      t.removeClass('ui-accordion-content-active').prev().removeClass('ui-corner-top').addClass('ui-corner-all'), t.length && (t.parent()[0].className = t.parent()[0].className), this._trigger('activate', null, e);
    }
  }), e.uiBackCompat !== !1 && (function (e, t) {
    e.extend(t.options, {
      navigation: !1,
      navigationFilter: function navigationFilter() {
        return this.href.toLowerCase() === location.href.toLowerCase();
      }
    });
    var i = t._create;

    t._create = function () {
      if (this.options.navigation) {
        var t = this,
            s = this.element.find(this.options.header),
            n = s.next(),
            a = s.add(n).find('a').filter(this.options.navigationFilter)[0];
        a && s.add(n).each(function (i) {
          return e.contains(this, a) ? (t.options.active = Math.floor(i / 2), !1) : undefined;
        });
      }

      i.call(this);
    };
  }(jQuery, jQuery.ui.accordion.prototype), function (e, t) {
    e.extend(t.options, {
      heightStyle: null,
      autoHeight: !0,
      clearStyle: !1,
      fillSpace: !1
    });
    var i = t._create,
        s = t._setOption;
    e.extend(t, {
      _create: function _create() {
        this.options.heightStyle = this.options.heightStyle || this._mergeHeightStyle(), i.call(this);
      },
      _setOption: function _setOption(e) {
        ('autoHeight' === e || 'clearStyle' === e || 'fillSpace' === e) && (this.options.heightStyle = this._mergeHeightStyle()), s.apply(this, arguments);
      },
      _mergeHeightStyle: function _mergeHeightStyle() {
        var e = this.options;
        return e.fillSpace ? 'fill' : e.clearStyle ? 'content' : e.autoHeight ? 'auto' : undefined;
      }
    });
  }(jQuery, jQuery.ui.accordion.prototype), function (e, t) {
    e.extend(t.options.icons, {
      activeHeader: null,
      headerSelected: 'ui-icon-triangle-1-s'
    });
    var i = t._createIcons;

    t._createIcons = function () {
      this.options.icons && (this.options.icons.activeHeader = this.options.icons.activeHeader || this.options.icons.headerSelected), i.call(this);
    };
  }(jQuery, jQuery.ui.accordion.prototype), function (e, t) {
    t.activate = t._activate;
    var i = t._findActive;

    t._findActive = function (e) {
      return -1 === e && (e = !1), e && 'number' != typeof e && (e = this.headers.index(this.headers.filter(e)), -1 === e && (e = !1)), i.call(this, e);
    };
  }(jQuery, jQuery.ui.accordion.prototype), jQuery.ui.accordion.prototype.resize = jQuery.ui.accordion.prototype.refresh, function (e, t) {
    e.extend(t.options, {
      change: null,
      changestart: null
    });
    var i = t._trigger;

    t._trigger = function (e, t, s) {
      var n = i.apply(this, arguments);
      return n ? ('beforeActivate' === e ? n = i.call(this, 'changestart', t, {
        oldHeader: s.oldHeader,
        oldContent: s.oldPanel,
        newHeader: s.newHeader,
        newContent: s.newPanel
      }) : 'activate' === e && (n = i.call(this, 'change', t, {
        oldHeader: s.oldHeader,
        oldContent: s.oldPanel,
        newHeader: s.newHeader,
        newContent: s.newPanel
      })), n) : !1;
    };
  }(jQuery, jQuery.ui.accordion.prototype), function (e, t) {
    e.extend(t.options, {
      animate: null,
      animated: 'slide'
    });
    var i = t._create;

    t._create = function () {
      var e = this.options;
      null === e.animate && (e.animate = e.animated ? 'slide' === e.animated ? 300 : 'bounceslide' === e.animated ? {
        duration: 200,
        down: {
          easing: 'easeOutBounce',
          duration: 1e3
        }
      } : e.animated : !1), i.call(this);
    };
  }(jQuery, jQuery.ui.accordion.prototype));
})(jQuery);

(function (e) {
  var t = 0;
  e.widget('ui.autocomplete', {
    version: '1.9.2',
    defaultElement: '<input>',
    options: {
      appendTo: 'body',
      autoFocus: !1,
      delay: 300,
      minLength: 1,
      position: {
        my: 'left top',
        at: 'left bottom',
        collision: 'none'
      },
      source: null,
      change: null,
      close: null,
      focus: null,
      open: null,
      response: null,
      search: null,
      select: null
    },
    pending: 0,
    _create: function _create() {
      var t, i, s;
      this.isMultiLine = this._isMultiLine(), this.valueMethod = this.element[this.element.is('input,textarea') ? 'val' : 'text'], this.isNewMenu = !0, this.element.addClass('ui-autocomplete-input').attr('autocomplete', 'off'), this._on(this.element, {
        keydown: function keydown(n) {
          if (this.element.prop('readOnly')) return t = !0, s = !0, i = !0, undefined;
          t = !1, s = !1, i = !1;
          var a = e.ui.keyCode;

          switch (n.keyCode) {
            case a.PAGE_UP:
              t = !0, this._move('previousPage', n);
              break;

            case a.PAGE_DOWN:
              t = !0, this._move('nextPage', n);
              break;

            case a.UP:
              t = !0, this._keyEvent('previous', n);
              break;

            case a.DOWN:
              t = !0, this._keyEvent('next', n);
              break;

            case a.ENTER:
            case a.NUMPAD_ENTER:
              this.menu.active && (t = !0, n.preventDefault(), this.menu.select(n));
              break;

            case a.TAB:
              this.menu.active && this.menu.select(n);
              break;

            case a.ESCAPE:
              this.menu.element.is(':visible') && (this._value(this.term), this.close(n), n.preventDefault());
              break;

            default:
              i = !0, this._searchTimeout(n);
          }
        },
        keypress: function keypress(s) {
          if (t) return t = !1, s.preventDefault(), undefined;

          if (!i) {
            var n = e.ui.keyCode;

            switch (s.keyCode) {
              case n.PAGE_UP:
                this._move('previousPage', s);

                break;

              case n.PAGE_DOWN:
                this._move('nextPage', s);

                break;

              case n.UP:
                this._keyEvent('previous', s);

                break;

              case n.DOWN:
                this._keyEvent('next', s);

            }
          }
        },
        input: function input(e) {
          return s ? (s = !1, e.preventDefault(), undefined) : (this._searchTimeout(e), undefined);
        },
        focus: function focus() {
          this.selectedItem = null, this.previous = this._value();
        },
        blur: function blur(e) {
          return this.cancelBlur ? (delete this.cancelBlur, undefined) : (clearTimeout(this.searching), this.close(e), this._change(e), undefined);
        }
      }), this._initSource(), this.menu = e('<ul>').addClass('ui-autocomplete').appendTo(this.document.find(this.options.appendTo || 'body')[0]).menu({
        input: e(),
        role: null
      }).zIndex(this.element.zIndex() + 1).hide().data('menu'), this._on(this.menu.element, {
        mousedown: function mousedown(t) {
          t.preventDefault(), this.cancelBlur = !0, this._delay(function () {
            delete this.cancelBlur;
          });
          var i = this.menu.element[0];
          e(t.target).closest('.ui-menu-item').length || this._delay(function () {
            var t = this;
            this.document.one('mousedown', function (s) {
              s.target === t.element[0] || s.target === i || e.contains(i, s.target) || t.close();
            });
          });
        },
        menufocus: function menufocus(t, i) {
          if (this.isNewMenu && (this.isNewMenu = !1, t.originalEvent && /^mouse/.test(t.originalEvent.type))) return this.menu.blur(), this.document.one('mousemove', function () {
            e(t.target).trigger(t.originalEvent);
          }), undefined;
          var s = i.item.data('ui-autocomplete-item') || i.item.data('item.autocomplete');
          !1 !== this._trigger('focus', t, {
            item: s
          }) ? t.originalEvent && /^key/.test(t.originalEvent.type) && this._value(s.value) : this.liveRegion.text(s.value);
        },
        menuselect: function menuselect(e, t) {
          var i = t.item.data('ui-autocomplete-item') || t.item.data('item.autocomplete'),
              s = this.previous;
          this.element[0] !== this.document[0].activeElement && (this.element.focus(), this.previous = s, this._delay(function () {
            this.previous = s, this.selectedItem = i;
          })), !1 !== this._trigger('select', e, {
            item: i
          }) && this._value(i.value), this.term = this._value(), this.close(e), this.selectedItem = i;
        }
      }), this.liveRegion = e('<span>', {
        role: 'status',
        'aria-live': 'polite'
      }).addClass('ui-helper-hidden-accessible').insertAfter(this.element), e.fn.bgiframe && this.menu.element.bgiframe(), this._on(this.window, {
        beforeunload: function beforeunload() {
          this.element.removeAttr('autocomplete');
        }
      });
    },
    _destroy: function _destroy() {
      clearTimeout(this.searching), this.element.removeClass('ui-autocomplete-input').removeAttr('autocomplete'), this.menu.element.remove(), this.liveRegion.remove();
    },
    _setOption: function _setOption(e, t) {
      this._super(e, t), 'source' === e && this._initSource(), 'appendTo' === e && this.menu.element.appendTo(this.document.find(t || 'body')[0]), 'disabled' === e && t && this.xhr && this.xhr.abort();
    },
    _isMultiLine: function _isMultiLine() {
      return this.element.is('textarea') ? !0 : this.element.is('input') ? !1 : this.element.prop('isContentEditable');
    },
    _initSource: function _initSource() {
      var t,
          i,
          s = this;
      e.isArray(this.options.source) ? (t = this.options.source, this.source = function (i, s) {
        s(e.ui.autocomplete.filter(t, i.term));
      }) : 'string' == typeof this.options.source ? (i = this.options.source, this.source = function (t, n) {
        s.xhr && s.xhr.abort(), s.xhr = e.ajax({
          url: i,
          data: t,
          dataType: 'json',
          success: function success(e) {
            n(e);
          },
          error: function error() {
            n([]);
          }
        });
      }) : this.source = this.options.source;
    },
    _searchTimeout: function _searchTimeout(e) {
      clearTimeout(this.searching), this.searching = this._delay(function () {
        this.term !== this._value() && (this.selectedItem = null, this.search(null, e));
      }, this.options.delay);
    },
    search: function search(e, t) {
      return e = null != e ? e : this._value(), this.term = this._value(), e.length < this.options.minLength ? this.close(t) : this._trigger('search', t) !== !1 ? this._search(e) : undefined;
    },
    _search: function _search(e) {
      this.pending++, this.element.addClass('ui-autocomplete-loading'), this.cancelSearch = !1, this.source({
        term: e
      }, this._response());
    },
    _response: function _response() {
      var e = this,
          i = ++t;
      return function (s) {
        i === t && e.__response(s), e.pending--, e.pending || e.element.removeClass('ui-autocomplete-loading');
      };
    },
    __response: function __response(e) {
      e && (e = this._normalize(e)), this._trigger('response', null, {
        content: e
      }), !this.options.disabled && e && e.length && !this.cancelSearch ? (this._suggest(e), this._trigger('open')) : this._close();
    },
    close: function close(e) {
      this.cancelSearch = !0, this._close(e);
    },
    _close: function _close(e) {
      this.menu.element.is(':visible') && (this.menu.element.hide(), this.menu.blur(), this.isNewMenu = !0, this._trigger('close', e));
    },
    _change: function _change(e) {
      this.previous !== this._value() && this._trigger('change', e, {
        item: this.selectedItem
      });
    },
    _normalize: function _normalize(t) {
      return t.length && t[0].label && t[0].value ? t : e.map(t, function (t) {
        return 'string' == typeof t ? {
          label: t,
          value: t
        } : e.extend({
          label: t.label || t.value,
          value: t.value || t.label
        }, t);
      });
    },
    _suggest: function _suggest(t) {
      var i = this.menu.element.empty().zIndex(this.element.zIndex() + 1);
      this._renderMenu(i, t), this.menu.refresh(), i.show(), this._resizeMenu(), i.position(e.extend({
        of: this.element
      }, this.options.position)), this.options.autoFocus && this.menu.next();
    },
    _resizeMenu: function _resizeMenu() {
      var e = this.menu.element;
      e.outerWidth(Math.max(e.width('').outerWidth() + 1, this.element.outerWidth()));
    },
    _renderMenu: function _renderMenu(t, i) {
      var s = this;
      e.each(i, function (e, i) {
        s._renderItemData(t, i);
      });
    },
    _renderItemData: function _renderItemData(e, t) {
      return this._renderItem(e, t).data('ui-autocomplete-item', t);
    },
    _renderItem: function _renderItem(t, i) {
      return e('<li>').append(e('<a>').text(i.label)).appendTo(t);
    },
    _move: function _move(e, t) {
      return this.menu.element.is(':visible') ? this.menu.isFirstItem() && /^previous/.test(e) || this.menu.isLastItem() && /^next/.test(e) ? (this._value(this.term), this.menu.blur(), undefined) : (this.menu[e](t), undefined) : (this.search(null, t), undefined);
    },
    widget: function widget() {
      return this.menu.element;
    },
    _value: function _value() {
      return this.valueMethod.apply(this.element, arguments);
    },
    _keyEvent: function _keyEvent(e, t) {
      (!this.isMultiLine || this.menu.element.is(':visible')) && (this._move(e, t), t.preventDefault());
    }
  }), e.extend(e.ui.autocomplete, {
    escapeRegex: function escapeRegex(e) {
      return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
    },
    filter: function filter(t, i) {
      var s = RegExp(e.ui.autocomplete.escapeRegex(i), 'i');
      return e.grep(t, function (e) {
        return s.test(e.label || e.value || e);
      });
    }
  }), e.widget('ui.autocomplete', e.ui.autocomplete, {
    options: {
      messages: {
        noResults: 'No search results.',
        results: function results(e) {
          return e + (e > 1 ? ' results are' : ' result is') + ' available, use up and down arrow keys to navigate.';
        }
      }
    },
    __response: function __response(e) {
      var t;
      this._superApply(arguments), this.options.disabled || this.cancelSearch || (t = e && e.length ? this.options.messages.results(e.length) : this.options.messages.noResults, this.liveRegion.text(t));
    }
  });
})(jQuery);

(function (e) {
  var t,
      i,
      s,
      n,
      a = 'ui-button ui-widget ui-state-default ui-corner-all',
      o = 'ui-state-hover ui-state-active ',
      r = 'ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only',
      h = function h() {
    var t = e(this).find(':ui-button');
    setTimeout(function () {
      t.button('refresh');
    }, 1);
  },
      l = function l(t) {
    var i = t.name,
        s = t.form,
        n = e([]);
    return i && (n = s ? e(s).find("[name='" + i + "']") : e("[name='" + i + "']", t.ownerDocument).filter(function () {
      return !this.form;
    })), n;
  };

  e.widget('ui.button', {
    version: '1.9.2',
    defaultElement: '<button>',
    options: {
      disabled: null,
      text: !0,
      label: null,
      icons: {
        primary: null,
        secondary: null
      }
    },
    _create: function _create() {
      this.element.closest('form').unbind('reset' + this.eventNamespace).bind('reset' + this.eventNamespace, h), 'boolean' != typeof this.options.disabled ? this.options.disabled = !!this.element.prop('disabled') : this.element.prop('disabled', this.options.disabled), this._determineButtonType(), this.hasTitle = !!this.buttonElement.attr('title');
      var o = this,
          r = this.options,
          u = 'checkbox' === this.type || 'radio' === this.type,
          d = u ? '' : 'ui-state-active',
          c = 'ui-state-focus';
      null === r.label && (r.label = 'input' === this.type ? this.buttonElement.val() : this.buttonElement.html()), this._hoverable(this.buttonElement), this.buttonElement.addClass(a).attr('role', 'button').bind('mouseenter' + this.eventNamespace, function () {
        r.disabled || this === t && e(this).addClass('ui-state-active');
      }).bind('mouseleave' + this.eventNamespace, function () {
        r.disabled || e(this).removeClass(d);
      }).bind('click' + this.eventNamespace, function (e) {
        r.disabled && (e.preventDefault(), e.stopImmediatePropagation());
      }), this.element.bind('focus' + this.eventNamespace, function () {
        o.buttonElement.addClass(c);
      }).bind('blur' + this.eventNamespace, function () {
        o.buttonElement.removeClass(c);
      }), u && (this.element.bind('change' + this.eventNamespace, function () {
        n || o.refresh();
      }), this.buttonElement.bind('mousedown' + this.eventNamespace, function (e) {
        r.disabled || (n = !1, i = e.pageX, s = e.pageY);
      }).bind('mouseup' + this.eventNamespace, function (e) {
        r.disabled || (i !== e.pageX || s !== e.pageY) && (n = !0);
      })), 'checkbox' === this.type ? this.buttonElement.bind('click' + this.eventNamespace, function () {
        return r.disabled || n ? !1 : (e(this).toggleClass('ui-state-active'), o.buttonElement.attr('aria-pressed', o.element[0].checked), undefined);
      }) : 'radio' === this.type ? this.buttonElement.bind('click' + this.eventNamespace, function () {
        if (r.disabled || n) return !1;
        e(this).addClass('ui-state-active'), o.buttonElement.attr('aria-pressed', 'true');
        var t = o.element[0];
        l(t).not(t).map(function () {
          return e(this).button('widget')[0];
        }).removeClass('ui-state-active').attr('aria-pressed', 'false');
      }) : (this.buttonElement.bind('mousedown' + this.eventNamespace, function () {
        return r.disabled ? !1 : (e(this).addClass('ui-state-active'), t = this, o.document.one('mouseup', function () {
          t = null;
        }), undefined);
      }).bind('mouseup' + this.eventNamespace, function () {
        return r.disabled ? !1 : (e(this).removeClass('ui-state-active'), undefined);
      }).bind('keydown' + this.eventNamespace, function (t) {
        return r.disabled ? !1 : ((t.keyCode === e.ui.keyCode.SPACE || t.keyCode === e.ui.keyCode.ENTER) && e(this).addClass('ui-state-active'), undefined);
      }).bind('keyup' + this.eventNamespace, function () {
        e(this).removeClass('ui-state-active');
      }), this.buttonElement.is('a') && this.buttonElement.keyup(function (t) {
        t.keyCode === e.ui.keyCode.SPACE && e(this).click();
      })), this._setOption('disabled', r.disabled), this._resetButton();
    },
    _determineButtonType: function _determineButtonType() {
      var e, t, i;
      this.type = this.element.is('[type=checkbox]') ? 'checkbox' : this.element.is('[type=radio]') ? 'radio' : this.element.is('input') ? 'input' : 'button', 'checkbox' === this.type || 'radio' === this.type ? (e = this.element.parents().last(), t = "label[for='" + this.element.attr('id') + "']", this.buttonElement = e.find(t), this.buttonElement.length || (e = e.length ? e.siblings() : this.element.siblings(), this.buttonElement = e.filter(t), this.buttonElement.length || (this.buttonElement = e.find(t))), this.element.addClass('ui-helper-hidden-accessible'), i = this.element.is(':checked'), i && this.buttonElement.addClass('ui-state-active'), this.buttonElement.prop('aria-pressed', i)) : this.buttonElement = this.element;
    },
    widget: function widget() {
      return this.buttonElement;
    },
    _destroy: function _destroy() {
      this.element.removeClass('ui-helper-hidden-accessible'), this.buttonElement.removeClass(a + ' ' + o + ' ' + r).removeAttr('role').removeAttr('aria-pressed').html(this.buttonElement.find('.ui-button-text').html()), this.hasTitle || this.buttonElement.removeAttr('title');
    },
    _setOption: function _setOption(e, t) {
      return this._super(e, t), 'disabled' === e ? (t ? this.element.prop('disabled', !0) : this.element.prop('disabled', !1), undefined) : (this._resetButton(), undefined);
    },
    refresh: function refresh() {
      var t = this.element.is('input, button') ? this.element.is(':disabled') : this.element.hasClass('ui-button-disabled');
      t !== this.options.disabled && this._setOption('disabled', t), 'radio' === this.type ? l(this.element[0]).each(function () {
        e(this).is(':checked') ? e(this).button('widget').addClass('ui-state-active').attr('aria-pressed', 'true') : e(this).button('widget').removeClass('ui-state-active').attr('aria-pressed', 'false');
      }) : 'checkbox' === this.type && (this.element.is(':checked') ? this.buttonElement.addClass('ui-state-active').attr('aria-pressed', 'true') : this.buttonElement.removeClass('ui-state-active').attr('aria-pressed', 'false'));
    },
    _resetButton: function _resetButton() {
      if ('input' === this.type) return this.options.label && this.element.val(this.options.label), undefined;
      var t = this.buttonElement.removeClass(r),
          i = e('<span></span>', this.document[0]).addClass('ui-button-text').html(this.options.label).appendTo(t.empty()).text(),
          s = this.options.icons,
          n = s.primary && s.secondary,
          a = [];
      s.primary || s.secondary ? (this.options.text && a.push('ui-button-text-icon' + (n ? 's' : s.primary ? '-primary' : '-secondary')), s.primary && t.prepend("<span class='ui-button-icon-primary ui-icon " + s.primary + "'></span>"), s.secondary && t.append("<span class='ui-button-icon-secondary ui-icon " + s.secondary + "'></span>"), this.options.text || (a.push(n ? 'ui-button-icons-only' : 'ui-button-icon-only'), this.hasTitle || t.attr('title', e.trim(i)))) : a.push('ui-button-text-only'), t.addClass(a.join(' '));
    }
  }), e.widget('ui.buttonset', {
    version: '1.9.2',
    options: {
      items: 'button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(button)'
    },
    _create: function _create() {
      this.element.addClass('ui-buttonset');
    },
    _init: function _init() {
      this.refresh();
    },
    _setOption: function _setOption(e, t) {
      'disabled' === e && this.buttons.button('option', e, t), this._super(e, t);
    },
    refresh: function refresh() {
      var t = 'rtl' === this.element.css('direction');
      this.buttons = this.element.find(this.options.items).filter(':ui-button').button('refresh').end().not(':ui-button').button().end().map(function () {
        return e(this).button('widget')[0];
      }).removeClass('ui-corner-all ui-corner-left ui-corner-right').filter(':first').addClass(t ? 'ui-corner-right' : 'ui-corner-left').end().filter(':last').addClass(t ? 'ui-corner-left' : 'ui-corner-right').end().end();
    },
    _destroy: function _destroy() {
      this.element.removeClass('ui-buttonset'), this.buttons.map(function () {
        return e(this).button('widget')[0];
      }).removeClass('ui-corner-left ui-corner-right').end().button('destroy');
    }
  });
})(jQuery);

(function ($, undefined) {
  function Datepicker() {
    this.debug = !1, this._curInst = null, this._keyEvent = !1, this._disabledInputs = [], this._datepickerShowing = !1, this._inDialog = !1, this._mainDivId = 'ui-datepicker-div', this._inlineClass = 'ui-datepicker-inline', this._appendClass = 'ui-datepicker-append', this._triggerClass = 'ui-datepicker-trigger', this._dialogClass = 'ui-datepicker-dialog', this._disableClass = 'ui-datepicker-disabled', this._unselectableClass = 'ui-datepicker-unselectable', this._currentClass = 'ui-datepicker-current-day', this._dayOverClass = 'ui-datepicker-days-cell-over', this.regional = [], this.regional[''] = {
      closeText: 'Done',
      prevText: 'Prev',
      nextText: 'Next',
      currentText: 'Today',
      monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
      monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
      dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
      weekHeader: 'Wk',
      dateFormat: 'mm/dd/yy',
      firstDay: 0,
      isRTL: !1,
      showMonthAfterYear: !1,
      yearSuffix: ''
    }, this._defaults = {
      showOn: 'focus',
      showAnim: 'fadeIn',
      showOptions: {},
      defaultDate: null,
      appendText: '',
      buttonText: '...',
      buttonImage: '',
      buttonImageOnly: !1,
      hideIfNoPrevNext: !1,
      navigationAsDateFormat: !1,
      gotoCurrent: !1,
      changeMonth: !1,
      changeYear: !1,
      yearRange: 'c-10:c+10',
      showOtherMonths: !1,
      selectOtherMonths: !1,
      showWeek: !1,
      calculateWeek: this.iso8601Week,
      shortYearCutoff: '+10',
      minDate: null,
      maxDate: null,
      duration: 'fast',
      beforeShowDay: null,
      beforeShow: null,
      onSelect: null,
      onChangeMonthYear: null,
      onClose: null,
      numberOfMonths: 1,
      showCurrentAtPos: 0,
      stepMonths: 1,
      stepBigMonths: 12,
      altField: '',
      altFormat: '',
      constrainInput: !0,
      showButtonPanel: !1,
      autoSize: !1,
      disabled: !1
    }, $.extend(this._defaults, this.regional['']), this.dpDiv = bindHover($('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'));
  }

  function bindHover(e) {
    var t = 'button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a';
    return e.delegate(t, 'mouseout', function () {
      $(this).removeClass('ui-state-hover'), -1 != this.className.indexOf('ui-datepicker-prev') && $(this).removeClass('ui-datepicker-prev-hover'), -1 != this.className.indexOf('ui-datepicker-next') && $(this).removeClass('ui-datepicker-next-hover');
    }).delegate(t, 'mouseover', function () {
      $.datepicker._isDisabledDatepicker(instActive.inline ? e.parent()[0] : instActive.input[0]) || ($(this).parents('.ui-datepicker-calendar').find('a').removeClass('ui-state-hover'), $(this).addClass('ui-state-hover'), -1 != this.className.indexOf('ui-datepicker-prev') && $(this).addClass('ui-datepicker-prev-hover'), -1 != this.className.indexOf('ui-datepicker-next') && $(this).addClass('ui-datepicker-next-hover'));
    });
  }

  function extendRemove(e, t) {
    $.extend(e, t);

    for (var i in t) {
      (null == t[i] || t[i] == undefined) && (e[i] = t[i]);
    }

    return e;
  }

  $.extend($.ui, {
    datepicker: {
      version: '1.9.2'
    }
  });
  var PROP_NAME = 'datepicker',
      dpuuid = new Date().getTime(),
      instActive;
  $.extend(Datepicker.prototype, {
    markerClassName: 'hasDatepicker',
    maxRows: 4,
    log: function log() {
      this.debug && console.log.apply('', arguments);
    },
    _widgetDatepicker: function _widgetDatepicker() {
      return this.dpDiv;
    },
    setDefaults: function setDefaults(e) {
      return extendRemove(this._defaults, e || {}), this;
    },
    _attachDatepicker: function _attachDatepicker(target, settings) {
      var inlineSettings = null;

      for (var attrName in this._defaults) {
        var attrValue = target.getAttribute('date:' + attrName);

        if (attrValue) {
          inlineSettings = inlineSettings || {};

          try {
            inlineSettings[attrName] = eval(attrValue);
          } catch (err) {
            inlineSettings[attrName] = attrValue;
          }
        }
      }

      var nodeName = target.nodeName.toLowerCase(),
          inline = 'div' == nodeName || 'span' == nodeName;
      target.id || (this.uuid += 1, target.id = 'dp' + this.uuid);

      var inst = this._newInst($(target), inline);

      inst.settings = $.extend({}, settings || {}, inlineSettings || {}), 'input' == nodeName ? this._connectDatepicker(target, inst) : inline && this._inlineDatepicker(target, inst);
    },
    _newInst: function _newInst(e, t) {
      var i = e[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\$1');
      return {
        id: i,
        input: e,
        selectedDay: 0,
        selectedMonth: 0,
        selectedYear: 0,
        drawMonth: 0,
        drawYear: 0,
        inline: t,
        dpDiv: t ? bindHover($('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')) : this.dpDiv
      };
    },
    _connectDatepicker: function _connectDatepicker(e, t) {
      var i = $(e);
      t.append = $([]), t.trigger = $([]), i.hasClass(this.markerClassName) || (this._attachments(i, t), i.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp).bind('setData.datepicker', function (e, i, s) {
        t.settings[i] = s;
      }).bind('getData.datepicker', function (e, i) {
        return this._get(t, i);
      }), this._autoSize(t), $.data(e, PROP_NAME, t), t.settings.disabled && this._disableDatepicker(e));
    },
    _attachments: function _attachments(e, t) {
      var i = this._get(t, 'appendText'),
          s = this._get(t, 'isRTL');

      t.append && t.append.remove(), i && (t.append = $('<span class="' + this._appendClass + '">' + i + '</span>'), e[s ? 'before' : 'after'](t.append)), e.unbind('focus', this._showDatepicker), t.trigger && t.trigger.remove();

      var n = this._get(t, 'showOn');

      if (('focus' == n || 'both' == n) && e.focus(this._showDatepicker), 'button' == n || 'both' == n) {
        var a = this._get(t, 'buttonText'),
            o = this._get(t, 'buttonImage');

        t.trigger = $(this._get(t, 'buttonImageOnly') ? $('<img/>').addClass(this._triggerClass).attr({
          src: o,
          alt: a,
          title: a
        }) : $('<button type="button"></button>').addClass(this._triggerClass).html('' == o ? a : $('<img/>').attr({
          src: o,
          alt: a,
          title: a
        }))), e[s ? 'before' : 'after'](t.trigger), t.trigger.click(function () {
          return $.datepicker._datepickerShowing && $.datepicker._lastInput == e[0] ? $.datepicker._hideDatepicker() : $.datepicker._datepickerShowing && $.datepicker._lastInput != e[0] ? ($.datepicker._hideDatepicker(), $.datepicker._showDatepicker(e[0])) : $.datepicker._showDatepicker(e[0]), !1;
        });
      }
    },
    _autoSize: function _autoSize(e) {
      if (this._get(e, 'autoSize') && !e.inline) {
        var t = new Date(2009, 11, 20),
            i = this._get(e, 'dateFormat');

        if (i.match(/[DM]/)) {
          var s = function s(e) {
            for (var t = 0, i = 0, s = 0; e.length > s; s++) {
              e[s].length > t && (t = e[s].length, i = s);
            }

            return i;
          };

          t.setMonth(s(this._get(e, i.match(/MM/) ? 'monthNames' : 'monthNamesShort'))), t.setDate(s(this._get(e, i.match(/DD/) ? 'dayNames' : 'dayNamesShort')) + 20 - t.getDay());
        }

        e.input.attr('size', this._formatDate(e, t).length);
      }
    },
    _inlineDatepicker: function _inlineDatepicker(e, t) {
      var i = $(e);
      i.hasClass(this.markerClassName) || (i.addClass(this.markerClassName).append(t.dpDiv).bind('setData.datepicker', function (e, i, s) {
        t.settings[i] = s;
      }).bind('getData.datepicker', function (e, i) {
        return this._get(t, i);
      }), $.data(e, PROP_NAME, t), this._setDate(t, this._getDefaultDate(t), !0), this._updateDatepicker(t), this._updateAlternate(t), t.settings.disabled && this._disableDatepicker(e), t.dpDiv.css('display', 'block'));
    },
    _dialogDatepicker: function _dialogDatepicker(e, t, i, s, n) {
      var a = this._dialogInst;

      if (!a) {
        this.uuid += 1;
        var o = 'dp' + this.uuid;
        this._dialogInput = $('<input type="text" id="' + o + '" style="position: absolute; top: -100px; width: 0px;"/>'), this._dialogInput.keydown(this._doKeyDown), $('body').append(this._dialogInput), a = this._dialogInst = this._newInst(this._dialogInput, !1), a.settings = {}, $.data(this._dialogInput[0], PROP_NAME, a);
      }

      if (extendRemove(a.settings, s || {}), t = t && t.constructor == Date ? this._formatDate(a, t) : t, this._dialogInput.val(t), this._pos = n ? n.length ? n : [n.pageX, n.pageY] : null, !this._pos) {
        var r = document.documentElement.clientWidth,
            h = document.documentElement.clientHeight,
            l = document.documentElement.scrollLeft || document.body.scrollLeft,
            u = document.documentElement.scrollTop || document.body.scrollTop;
        this._pos = [r / 2 - 100 + l, h / 2 - 150 + u];
      }

      return this._dialogInput.css('left', this._pos[0] + 20 + 'px').css('top', this._pos[1] + 'px'), a.settings.onSelect = i, this._inDialog = !0, this.dpDiv.addClass(this._dialogClass), this._showDatepicker(this._dialogInput[0]), $.blockUI && $.blockUI(this.dpDiv), $.data(this._dialogInput[0], PROP_NAME, a), this;
    },
    _destroyDatepicker: function _destroyDatepicker(e) {
      var t = $(e),
          i = $.data(e, PROP_NAME);

      if (t.hasClass(this.markerClassName)) {
        var s = e.nodeName.toLowerCase();
        $.removeData(e, PROP_NAME), 'input' == s ? (i.append.remove(), i.trigger.remove(), t.removeClass(this.markerClassName).unbind('focus', this._showDatepicker).unbind('keydown', this._doKeyDown).unbind('keypress', this._doKeyPress).unbind('keyup', this._doKeyUp)) : ('div' == s || 'span' == s) && t.removeClass(this.markerClassName).empty();
      }
    },
    _enableDatepicker: function _enableDatepicker(e) {
      var t = $(e),
          i = $.data(e, PROP_NAME);

      if (t.hasClass(this.markerClassName)) {
        var s = e.nodeName.toLowerCase();
        if ('input' == s) e.disabled = !1, i.trigger.filter('button').each(function () {
          this.disabled = !1;
        }).end().filter('img').css({
          opacity: '1.0',
          cursor: ''
        });else if ('div' == s || 'span' == s) {
          var n = t.children('.' + this._inlineClass);
          n.children().removeClass('ui-state-disabled'), n.find('select.ui-datepicker-month, select.ui-datepicker-year').prop('disabled', !1);
        }
        this._disabledInputs = $.map(this._disabledInputs, function (t) {
          return t == e ? null : t;
        });
      }
    },
    _disableDatepicker: function _disableDatepicker(e) {
      var t = $(e),
          i = $.data(e, PROP_NAME);

      if (t.hasClass(this.markerClassName)) {
        var s = e.nodeName.toLowerCase();
        if ('input' == s) e.disabled = !0, i.trigger.filter('button').each(function () {
          this.disabled = !0;
        }).end().filter('img').css({
          opacity: '0.5',
          cursor: 'default'
        });else if ('div' == s || 'span' == s) {
          var n = t.children('.' + this._inlineClass);
          n.children().addClass('ui-state-disabled'), n.find('select.ui-datepicker-month, select.ui-datepicker-year').prop('disabled', !0);
        }
        this._disabledInputs = $.map(this._disabledInputs, function (t) {
          return t == e ? null : t;
        }), this._disabledInputs[this._disabledInputs.length] = e;
      }
    },
    _isDisabledDatepicker: function _isDisabledDatepicker(e) {
      if (!e) return !1;

      for (var t = 0; this._disabledInputs.length > t; t++) {
        if (this._disabledInputs[t] == e) return !0;
      }

      return !1;
    },
    _getInst: function _getInst(e) {
      try {
        return $.data(e, PROP_NAME);
      } catch (t) {
        throw 'Missing instance data for this datepicker';
      }
    },
    _optionDatepicker: function _optionDatepicker(e, t, i) {
      var s = this._getInst(e);

      if (2 == arguments.length && 'string' == typeof t) return 'defaults' == t ? $.extend({}, $.datepicker._defaults) : s ? 'all' == t ? $.extend({}, s.settings) : this._get(s, t) : null;
      var n = t || {};

      if ('string' == typeof t && (n = {}, n[t] = i), s) {
        this._curInst == s && this._hideDatepicker();

        var a = this._getDateDatepicker(e, !0),
            o = this._getMinMaxDate(s, 'min'),
            r = this._getMinMaxDate(s, 'max');

        extendRemove(s.settings, n), null !== o && n.dateFormat !== undefined && n.minDate === undefined && (s.settings.minDate = this._formatDate(s, o)), null !== r && n.dateFormat !== undefined && n.maxDate === undefined && (s.settings.maxDate = this._formatDate(s, r)), this._attachments($(e), s), this._autoSize(s), this._setDate(s, a), this._updateAlternate(s), this._updateDatepicker(s);
      }
    },
    _changeDatepicker: function _changeDatepicker(e, t, i) {
      this._optionDatepicker(e, t, i);
    },
    _refreshDatepicker: function _refreshDatepicker(e) {
      var t = this._getInst(e);

      t && this._updateDatepicker(t);
    },
    _setDateDatepicker: function _setDateDatepicker(e, t) {
      var i = this._getInst(e);

      i && (this._setDate(i, t), this._updateDatepicker(i), this._updateAlternate(i));
    },
    _getDateDatepicker: function _getDateDatepicker(e, t) {
      var i = this._getInst(e);

      return i && !i.inline && this._setDateFromField(i, t), i ? this._getDate(i) : null;
    },
    _doKeyDown: function _doKeyDown(e) {
      var t = $.datepicker._getInst(e.target),
          i = !0,
          s = t.dpDiv.is('.ui-datepicker-rtl');

      if (t._keyEvent = !0, $.datepicker._datepickerShowing) switch (e.keyCode) {
        case 9:
          $.datepicker._hideDatepicker(), i = !1;
          break;

        case 13:
          var n = $('td.' + $.datepicker._dayOverClass + ':not(.' + $.datepicker._currentClass + ')', t.dpDiv);
          n[0] && $.datepicker._selectDay(e.target, t.selectedMonth, t.selectedYear, n[0]);

          var a = $.datepicker._get(t, 'onSelect');

          if (a) {
            var o = $.datepicker._formatDate(t);

            a.apply(t.input ? t.input[0] : null, [o, t]);
          } else $.datepicker._hideDatepicker();

          return !1;

        case 27:
          $.datepicker._hideDatepicker();

          break;

        case 33:
          $.datepicker._adjustDate(e.target, e.ctrlKey ? -$.datepicker._get(t, 'stepBigMonths') : -$.datepicker._get(t, 'stepMonths'), 'M');

          break;

        case 34:
          $.datepicker._adjustDate(e.target, e.ctrlKey ? +$.datepicker._get(t, 'stepBigMonths') : +$.datepicker._get(t, 'stepMonths'), 'M');

          break;

        case 35:
          (e.ctrlKey || e.metaKey) && $.datepicker._clearDate(e.target), i = e.ctrlKey || e.metaKey;
          break;

        case 36:
          (e.ctrlKey || e.metaKey) && $.datepicker._gotoToday(e.target), i = e.ctrlKey || e.metaKey;
          break;

        case 37:
          (e.ctrlKey || e.metaKey) && $.datepicker._adjustDate(e.target, s ? 1 : -1, 'D'), i = e.ctrlKey || e.metaKey, e.originalEvent.altKey && $.datepicker._adjustDate(e.target, e.ctrlKey ? -$.datepicker._get(t, 'stepBigMonths') : -$.datepicker._get(t, 'stepMonths'), 'M');
          break;

        case 38:
          (e.ctrlKey || e.metaKey) && $.datepicker._adjustDate(e.target, -7, 'D'), i = e.ctrlKey || e.metaKey;
          break;

        case 39:
          (e.ctrlKey || e.metaKey) && $.datepicker._adjustDate(e.target, s ? -1 : 1, 'D'), i = e.ctrlKey || e.metaKey, e.originalEvent.altKey && $.datepicker._adjustDate(e.target, e.ctrlKey ? +$.datepicker._get(t, 'stepBigMonths') : +$.datepicker._get(t, 'stepMonths'), 'M');
          break;

        case 40:
          (e.ctrlKey || e.metaKey) && $.datepicker._adjustDate(e.target, 7, 'D'), i = e.ctrlKey || e.metaKey;
          break;

        default:
          i = !1;
      } else 36 == e.keyCode && e.ctrlKey ? $.datepicker._showDatepicker(this) : i = !1;
      i && (e.preventDefault(), e.stopPropagation());
    },
    _doKeyPress: function _doKeyPress(e) {
      var t = $.datepicker._getInst(e.target);

      if ($.datepicker._get(t, 'constrainInput')) {
        var i = $.datepicker._possibleChars($.datepicker._get(t, 'dateFormat')),
            s = String.fromCharCode(e.charCode == undefined ? e.keyCode : e.charCode);

        return e.ctrlKey || e.metaKey || ' ' > s || !i || i.indexOf(s) > -1;
      }
    },
    _doKeyUp: function _doKeyUp(e) {
      var t = $.datepicker._getInst(e.target);

      if (t.input.val() != t.lastVal) try {
        var i = $.datepicker.parseDate($.datepicker._get(t, 'dateFormat'), t.input ? t.input.val() : null, $.datepicker._getFormatConfig(t));
        i && ($.datepicker._setDateFromField(t), $.datepicker._updateAlternate(t), $.datepicker._updateDatepicker(t));
      } catch (s) {
        $.datepicker.log(s);
      }
      return !0;
    },
    _showDatepicker: function _showDatepicker(e) {
      if (e = e.target || e, 'input' != e.nodeName.toLowerCase() && (e = $('input', e.parentNode)[0]), !$.datepicker._isDisabledDatepicker(e) && $.datepicker._lastInput != e) {
        var t = $.datepicker._getInst(e);

        $.datepicker._curInst && $.datepicker._curInst != t && ($.datepicker._curInst.dpDiv.stop(!0, !0), t && $.datepicker._datepickerShowing && $.datepicker._hideDatepicker($.datepicker._curInst.input[0]));

        var i = $.datepicker._get(t, 'beforeShow'),
            s = i ? i.apply(e, [e, t]) : {};

        if (s !== !1) {
          extendRemove(t.settings, s), t.lastVal = null, $.datepicker._lastInput = e, $.datepicker._setDateFromField(t), $.datepicker._inDialog && (e.value = ''), $.datepicker._pos || ($.datepicker._pos = $.datepicker._findPos(e), $.datepicker._pos[1] += e.offsetHeight);
          var n = !1;
          $(e).parents().each(function () {
            return n |= 'fixed' == $(this).css('position'), !n;
          });
          var a = {
            left: $.datepicker._pos[0],
            top: $.datepicker._pos[1]
          };

          if ($.datepicker._pos = null, t.dpDiv.empty(), t.dpDiv.css({
            position: 'absolute',
            display: 'block',
            top: '-1000px'
          }), $.datepicker._updateDatepicker(t), a = $.datepicker._checkOffset(t, a, n), t.dpDiv.css({
            position: $.datepicker._inDialog && $.blockUI ? 'static' : n ? 'fixed' : 'absolute',
            display: 'none',
            left: a.left + 'px',
            top: a.top + 'px'
          }), !t.inline) {
            var o = $.datepicker._get(t, 'showAnim'),
                r = $.datepicker._get(t, 'duration'),
                h = function h() {
              var e = t.dpDiv.find('iframe.ui-datepicker-cover');

              if (e.length) {
                var i = $.datepicker._getBorders(t.dpDiv);

                e.css({
                  left: -i[0],
                  top: -i[1],
                  width: t.dpDiv.outerWidth(),
                  height: t.dpDiv.outerHeight()
                });
              }
            };

            t.dpDiv.zIndex($(e).zIndex() + 1), $.datepicker._datepickerShowing = !0, $.effects && ($.effects.effect[o] || $.effects[o]) ? t.dpDiv.show(o, $.datepicker._get(t, 'showOptions'), r, h) : t.dpDiv[o || 'show'](o ? r : null, h), o && r || h(), t.input.is(':visible') && !t.input.is(':disabled') && t.input.focus(), $.datepicker._curInst = t;
          }
        }
      }
    },
    _updateDatepicker: function _updateDatepicker(e) {
      this.maxRows = 4;

      var t = $.datepicker._getBorders(e.dpDiv);

      instActive = e, e.dpDiv.empty().append(this._generateHTML(e)), this._attachHandlers(e);
      var i = e.dpDiv.find('iframe.ui-datepicker-cover');
      i.length && i.css({
        left: -t[0],
        top: -t[1],
        width: e.dpDiv.outerWidth(),
        height: e.dpDiv.outerHeight()
      }), e.dpDiv.find('.' + this._dayOverClass + ' a').mouseover();

      var s = this._getNumberOfMonths(e),
          n = s[1],
          a = 17;

      if (e.dpDiv.removeClass('ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4').width(''), n > 1 && e.dpDiv.addClass('ui-datepicker-multi-' + n).css('width', a * n + 'em'), e.dpDiv[(1 != s[0] || 1 != s[1] ? 'add' : 'remove') + 'Class']('ui-datepicker-multi'), e.dpDiv[(this._get(e, 'isRTL') ? 'add' : 'remove') + 'Class']('ui-datepicker-rtl'), e == $.datepicker._curInst && $.datepicker._datepickerShowing && e.input && e.input.is(':visible') && !e.input.is(':disabled') && e.input[0] != document.activeElement && e.input.focus(), e.yearshtml) {
        var o = e.yearshtml;
        setTimeout(function () {
          o === e.yearshtml && e.yearshtml && e.dpDiv.find('select.ui-datepicker-year:first').replaceWith(e.yearshtml), o = e.yearshtml = null;
        }, 0);
      }
    },
    _getBorders: function _getBorders(e) {
      var t = function t(e) {
        return {
          thin: 1,
          medium: 2,
          thick: 3
        }[e] || e;
      };

      return [parseFloat(t(e.css('border-left-width'))), parseFloat(t(e.css('border-top-width')))];
    },
    _checkOffset: function _checkOffset(e, t, i) {
      var s = e.dpDiv.outerWidth(),
          n = e.dpDiv.outerHeight(),
          a = e.input ? e.input.outerWidth() : 0,
          o = e.input ? e.input.outerHeight() : 0,
          r = document.documentElement.clientWidth + (i ? 0 : $(document).scrollLeft()),
          h = document.documentElement.clientHeight + (i ? 0 : $(document).scrollTop());
      return t.left -= this._get(e, 'isRTL') ? s - a : 0, t.left -= i && t.left == e.input.offset().left ? $(document).scrollLeft() : 0, t.top -= i && t.top == e.input.offset().top + o ? $(document).scrollTop() : 0, t.left -= Math.min(t.left, t.left + s > r && r > s ? Math.abs(t.left + s - r) : 0), t.top -= Math.min(t.top, t.top + n > h && h > n ? Math.abs(n + o) : 0), t;
    },
    _findPos: function _findPos(e) {
      for (var t = this._getInst(e), i = this._get(t, 'isRTL'); e && ('hidden' == e.type || 1 != e.nodeType || $.expr.filters.hidden(e));) {
        e = e[i ? 'previousSibling' : 'nextSibling'];
      }

      var s = $(e).offset();
      return [s.left, s.top];
    },
    _hideDatepicker: function _hideDatepicker(e) {
      var t = this._curInst;

      if (t && (!e || t == $.data(e, PROP_NAME)) && this._datepickerShowing) {
        var i = this._get(t, 'showAnim'),
            s = this._get(t, 'duration'),
            n = function n() {
          $.datepicker._tidyDialog(t);
        };

        $.effects && ($.effects.effect[i] || $.effects[i]) ? t.dpDiv.hide(i, $.datepicker._get(t, 'showOptions'), s, n) : t.dpDiv['slideDown' == i ? 'slideUp' : 'fadeIn' == i ? 'fadeOut' : 'hide'](i ? s : null, n), i || n(), this._datepickerShowing = !1;

        var a = this._get(t, 'onClose');

        a && a.apply(t.input ? t.input[0] : null, [t.input ? t.input.val() : '', t]), this._lastInput = null, this._inDialog && (this._dialogInput.css({
          position: 'absolute',
          left: '0',
          top: '-100px'
        }), $.blockUI && ($.unblockUI(), $('body').append(this.dpDiv))), this._inDialog = !1;
      }
    },
    _tidyDialog: function _tidyDialog(e) {
      e.dpDiv.removeClass(this._dialogClass).unbind('.ui-datepicker-calendar');
    },
    _checkExternalClick: function _checkExternalClick(e) {
      if ($.datepicker._curInst) {
        var t = $(e.target),
            i = $.datepicker._getInst(t[0]);

        (t[0].id != $.datepicker._mainDivId && 0 == t.parents('#' + $.datepicker._mainDivId).length && !t.hasClass($.datepicker.markerClassName) && !t.closest('.' + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && (!$.datepicker._inDialog || !$.blockUI) || t.hasClass($.datepicker.markerClassName) && $.datepicker._curInst != i) && $.datepicker._hideDatepicker();
      }
    },
    _adjustDate: function _adjustDate(e, t, i) {
      var s = $(e),
          n = this._getInst(s[0]);

      this._isDisabledDatepicker(s[0]) || (this._adjustInstDate(n, t + ('M' == i ? this._get(n, 'showCurrentAtPos') : 0), i), this._updateDatepicker(n));
    },
    _gotoToday: function _gotoToday(e) {
      var t = $(e),
          i = this._getInst(t[0]);

      if (this._get(i, 'gotoCurrent') && i.currentDay) i.selectedDay = i.currentDay, i.drawMonth = i.selectedMonth = i.currentMonth, i.drawYear = i.selectedYear = i.currentYear;else {
        var s = new Date();
        i.selectedDay = s.getDate(), i.drawMonth = i.selectedMonth = s.getMonth(), i.drawYear = i.selectedYear = s.getFullYear();
      }
      this._notifyChange(i), this._adjustDate(t);
    },
    _selectMonthYear: function _selectMonthYear(e, t, i) {
      var s = $(e),
          n = this._getInst(s[0]);

      n['selected' + ('M' == i ? 'Month' : 'Year')] = n['draw' + ('M' == i ? 'Month' : 'Year')] = parseInt(t.options[t.selectedIndex].value, 10), this._notifyChange(n), this._adjustDate(s);
    },
    _selectDay: function _selectDay(e, t, i, s) {
      var n = $(e);

      if (!$(s).hasClass(this._unselectableClass) && !this._isDisabledDatepicker(n[0])) {
        var a = this._getInst(n[0]);

        a.selectedDay = a.currentDay = $('a', s).html(), a.selectedMonth = a.currentMonth = t, a.selectedYear = a.currentYear = i, this._selectDate(e, this._formatDate(a, a.currentDay, a.currentMonth, a.currentYear));
      }
    },
    _clearDate: function _clearDate(e) {
      var t = $(e);
      this._getInst(t[0]), this._selectDate(t, '');
    },
    _selectDate: function _selectDate(e, t) {
      var i = $(e),
          s = this._getInst(i[0]);

      t = null != t ? t : this._formatDate(s), s.input && s.input.val(t), this._updateAlternate(s);

      var n = this._get(s, 'onSelect');

      n ? n.apply(s.input ? s.input[0] : null, [t, s]) : s.input && s.input.trigger('change'), s.inline ? this._updateDatepicker(s) : (this._hideDatepicker(), this._lastInput = s.input[0], 'object' != _typeof(s.input[0]) && s.input.focus(), this._lastInput = null);
    },
    _updateAlternate: function _updateAlternate(e) {
      var t = this._get(e, 'altField');

      if (t) {
        var i = this._get(e, 'altFormat') || this._get(e, 'dateFormat'),
            s = this._getDate(e),
            n = this.formatDate(i, s, this._getFormatConfig(e));

        $(t).each(function () {
          $(this).val(n);
        });
      }
    },
    noWeekends: function noWeekends(e) {
      var t = e.getDay();
      return [t > 0 && 6 > t, ''];
    },
    iso8601Week: function iso8601Week(e) {
      var t = new Date(e.getTime());
      t.setDate(t.getDate() + 4 - (t.getDay() || 7));
      var i = t.getTime();
      return t.setMonth(0), t.setDate(1), Math.floor(Math.round((i - t) / 864e5) / 7) + 1;
    },
    parseDate: function parseDate(e, t, i) {
      if (null == e || null == t) throw 'Invalid arguments';
      if (t = 'object' == _typeof(t) ? '' + t : t + '', '' == t) return null;
      var s = (i ? i.shortYearCutoff : null) || this._defaults.shortYearCutoff;
      s = 'string' != typeof s ? s : new Date().getFullYear() % 100 + parseInt(s, 10);

      for (var n = (i ? i.dayNamesShort : null) || this._defaults.dayNamesShort, a = (i ? i.dayNames : null) || this._defaults.dayNames, o = (i ? i.monthNamesShort : null) || this._defaults.monthNamesShort, r = (i ? i.monthNames : null) || this._defaults.monthNames, h = -1, l = -1, u = -1, d = -1, c = !1, p = function p(t) {
        var i = e.length > _ + 1 && e.charAt(_ + 1) == t;
        return i && _++, i;
      }, f = function f(e) {
        var i = p(e),
            s = '@' == e ? 14 : '!' == e ? 20 : 'y' == e && i ? 4 : 'o' == e ? 3 : 2,
            n = RegExp('^\\d{1,' + s + '}'),
            a = t.substring(v).match(n);
        if (!a) throw 'Missing number at position ' + v;
        return v += a[0].length, parseInt(a[0], 10);
      }, m = function m(e, i, s) {
        var n = $.map(p(e) ? s : i, function (e, t) {
          return [[t, e]];
        }).sort(function (e, t) {
          return -(e[1].length - t[1].length);
        }),
            a = -1;
        if ($.each(n, function (e, i) {
          var s = i[1];
          return t.substr(v, s.length).toLowerCase() == s.toLowerCase() ? (a = i[0], v += s.length, !1) : undefined;
        }), -1 != a) return a + 1;
        throw 'Unknown name at position ' + v;
      }, g = function g() {
        if (t.charAt(v) != e.charAt(_)) throw 'Unexpected literal at position ' + v;
        v++;
      }, v = 0, _ = 0; e.length > _; _++) {
        if (c) "'" != e.charAt(_) || p("'") ? g() : c = !1;else switch (e.charAt(_)) {
          case 'd':
            u = f('d');
            break;

          case 'D':
            m('D', n, a);
            break;

          case 'o':
            d = f('o');
            break;

          case 'm':
            l = f('m');
            break;

          case 'M':
            l = m('M', o, r);
            break;

          case 'y':
            h = f('y');
            break;

          case '@':
            var y = new Date(f('@'));
            h = y.getFullYear(), l = y.getMonth() + 1, u = y.getDate();
            break;

          case '!':
            var y = new Date((f('!') - this._ticksTo1970) / 1e4);
            h = y.getFullYear(), l = y.getMonth() + 1, u = y.getDate();
            break;

          case "'":
            p("'") ? g() : c = !0;
            break;

          default:
            g();
        }
      }

      if (t.length > v) {
        var b = t.substr(v);
        if (!/^\s+/.test(b)) throw 'Extra/unparsed characters found in date: ' + b;
      }

      if (-1 == h ? h = new Date().getFullYear() : 100 > h && (h += new Date().getFullYear() - new Date().getFullYear() % 100 + (s >= h ? 0 : -100)), d > -1) for (l = 1, u = d;;) {
        var x = this._getDaysInMonth(h, l - 1);

        if (x >= u) break;
        l++, u -= x;
      }

      var y = this._daylightSavingAdjust(new Date(h, l - 1, u));

      if (y.getFullYear() != h || y.getMonth() + 1 != l || y.getDate() != u) throw 'Invalid date';
      return y;
    },
    ATOM: 'yy-mm-dd',
    COOKIE: 'D, dd M yy',
    ISO_8601: 'yy-mm-dd',
    RFC_822: 'D, d M y',
    RFC_850: 'DD, dd-M-y',
    RFC_1036: 'D, d M y',
    RFC_1123: 'D, d M yy',
    RFC_2822: 'D, d M yy',
    RSS: 'D, d M y',
    TICKS: '!',
    TIMESTAMP: '@',
    W3C: 'yy-mm-dd',
    _ticksTo1970: 1e7 * 60 * 60 * 24 * (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)),
    formatDate: function formatDate(e, t, i) {
      if (!t) return '';

      var s = (i ? i.dayNamesShort : null) || this._defaults.dayNamesShort,
          n = (i ? i.dayNames : null) || this._defaults.dayNames,
          a = (i ? i.monthNamesShort : null) || this._defaults.monthNamesShort,
          o = (i ? i.monthNames : null) || this._defaults.monthNames,
          r = function r(t) {
        var i = e.length > c + 1 && e.charAt(c + 1) == t;
        return i && c++, i;
      },
          h = function h(e, t, i) {
        var s = '' + t;
        if (r(e)) for (; i > s.length;) {
          s = '0' + s;
        }
        return s;
      },
          l = function l(e, t, i, s) {
        return r(e) ? s[t] : i[t];
      },
          u = '',
          d = !1;

      if (t) for (var c = 0; e.length > c; c++) {
        if (d) "'" != e.charAt(c) || r("'") ? u += e.charAt(c) : d = !1;else switch (e.charAt(c)) {
          case 'd':
            u += h('d', t.getDate(), 2);
            break;

          case 'D':
            u += l('D', t.getDay(), s, n);
            break;

          case 'o':
            u += h('o', Math.round((new Date(t.getFullYear(), t.getMonth(), t.getDate()).getTime() - new Date(t.getFullYear(), 0, 0).getTime()) / 864e5), 3);
            break;

          case 'm':
            u += h('m', t.getMonth() + 1, 2);
            break;

          case 'M':
            u += l('M', t.getMonth(), a, o);
            break;

          case 'y':
            u += r('y') ? t.getFullYear() : (10 > t.getYear() % 100 ? '0' : '') + t.getYear() % 100;
            break;

          case '@':
            u += t.getTime();
            break;

          case '!':
            u += 1e4 * t.getTime() + this._ticksTo1970;
            break;

          case "'":
            r("'") ? u += "'" : d = !0;
            break;

          default:
            u += e.charAt(c);
        }
      }
      return u;
    },
    _possibleChars: function _possibleChars(e) {
      for (var t = '', i = !1, s = function s(t) {
        var i = e.length > n + 1 && e.charAt(n + 1) == t;
        return i && n++, i;
      }, n = 0; e.length > n; n++) {
        if (i) "'" != e.charAt(n) || s("'") ? t += e.charAt(n) : i = !1;else switch (e.charAt(n)) {
          case 'd':
          case 'm':
          case 'y':
          case '@':
            t += '0123456789';
            break;

          case 'D':
          case 'M':
            return null;

          case "'":
            s("'") ? t += "'" : i = !0;
            break;

          default:
            t += e.charAt(n);
        }
      }

      return t;
    },
    _get: function _get(e, t) {
      return e.settings[t] !== undefined ? e.settings[t] : this._defaults[t];
    },
    _setDateFromField: function _setDateFromField(e, t) {
      if (e.input.val() != e.lastVal) {
        var i,
            s,
            n = this._get(e, 'dateFormat'),
            a = e.lastVal = e.input ? e.input.val() : null;

        i = s = this._getDefaultDate(e);

        var o = this._getFormatConfig(e);

        try {
          i = this.parseDate(n, a, o) || s;
        } catch (r) {
          this.log(r), a = t ? '' : a;
        }

        e.selectedDay = i.getDate(), e.drawMonth = e.selectedMonth = i.getMonth(), e.drawYear = e.selectedYear = i.getFullYear(), e.currentDay = a ? i.getDate() : 0, e.currentMonth = a ? i.getMonth() : 0, e.currentYear = a ? i.getFullYear() : 0, this._adjustInstDate(e);
      }
    },
    _getDefaultDate: function _getDefaultDate(e) {
      return this._restrictMinMax(e, this._determineDate(e, this._get(e, 'defaultDate'), new Date()));
    },
    _determineDate: function _determineDate(e, t, i) {
      var s = function s(e) {
        var t = new Date();
        return t.setDate(t.getDate() + e), t;
      },
          n = function n(t) {
        try {
          return $.datepicker.parseDate($.datepicker._get(e, 'dateFormat'), t, $.datepicker._getFormatConfig(e));
        } catch (i) {}

        for (var s = (t.toLowerCase().match(/^c/) ? $.datepicker._getDate(e) : null) || new Date(), n = s.getFullYear(), a = s.getMonth(), o = s.getDate(), r = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, h = r.exec(t); h;) {
          switch (h[2] || 'd') {
            case 'd':
            case 'D':
              o += parseInt(h[1], 10);
              break;

            case 'w':
            case 'W':
              o += 7 * parseInt(h[1], 10);
              break;

            case 'm':
            case 'M':
              a += parseInt(h[1], 10), o = Math.min(o, $.datepicker._getDaysInMonth(n, a));
              break;

            case 'y':
            case 'Y':
              n += parseInt(h[1], 10), o = Math.min(o, $.datepicker._getDaysInMonth(n, a));
          }

          h = r.exec(t);
        }

        return new Date(n, a, o);
      },
          a = null == t || '' === t ? i : 'string' == typeof t ? n(t) : 'number' == typeof t ? isNaN(t) ? i : s(t) : new Date(t.getTime());

      return a = a && 'Invalid Date' == '' + a ? i : a, a && (a.setHours(0), a.setMinutes(0), a.setSeconds(0), a.setMilliseconds(0)), this._daylightSavingAdjust(a);
    },
    _daylightSavingAdjust: function _daylightSavingAdjust(e) {
      return e ? (e.setHours(e.getHours() > 12 ? e.getHours() + 2 : 0), e) : null;
    },
    _setDate: function _setDate(e, t, i) {
      var s = !t,
          n = e.selectedMonth,
          a = e.selectedYear,
          o = this._restrictMinMax(e, this._determineDate(e, t, new Date()));

      e.selectedDay = e.currentDay = o.getDate(), e.drawMonth = e.selectedMonth = e.currentMonth = o.getMonth(), e.drawYear = e.selectedYear = e.currentYear = o.getFullYear(), n == e.selectedMonth && a == e.selectedYear || i || this._notifyChange(e), this._adjustInstDate(e), e.input && e.input.val(s ? '' : this._formatDate(e));
    },
    _getDate: function _getDate(e) {
      var t = !e.currentYear || e.input && '' == e.input.val() ? null : this._daylightSavingAdjust(new Date(e.currentYear, e.currentMonth, e.currentDay));
      return t;
    },
    _attachHandlers: function _attachHandlers(e) {
      var t = this._get(e, 'stepMonths'),
          i = '#' + e.id.replace(/\\\\/g, '\\');

      e.dpDiv.find('[data-handler]').map(function () {
        var e = {
          prev: function prev() {
            window['DP_jQuery_' + dpuuid].datepicker._adjustDate(i, -t, 'M');
          },
          next: function next() {
            window['DP_jQuery_' + dpuuid].datepicker._adjustDate(i, +t, 'M');
          },
          hide: function hide() {
            window['DP_jQuery_' + dpuuid].datepicker._hideDatepicker();
          },
          today: function today() {
            window['DP_jQuery_' + dpuuid].datepicker._gotoToday(i);
          },
          selectDay: function selectDay() {
            return window['DP_jQuery_' + dpuuid].datepicker._selectDay(i, +this.getAttribute('data-month'), +this.getAttribute('data-year'), this), !1;
          },
          selectMonth: function selectMonth() {
            return window['DP_jQuery_' + dpuuid].datepicker._selectMonthYear(i, this, 'M'), !1;
          },
          selectYear: function selectYear() {
            return window['DP_jQuery_' + dpuuid].datepicker._selectMonthYear(i, this, 'Y'), !1;
          }
        };
        $(this).bind(this.getAttribute('data-event'), e[this.getAttribute('data-handler')]);
      });
    },
    _generateHTML: function _generateHTML(e) {
      var t = new Date();
      t = this._daylightSavingAdjust(new Date(t.getFullYear(), t.getMonth(), t.getDate()));

      var i = this._get(e, 'isRTL'),
          s = this._get(e, 'showButtonPanel'),
          n = this._get(e, 'hideIfNoPrevNext'),
          a = this._get(e, 'navigationAsDateFormat'),
          o = this._getNumberOfMonths(e),
          r = this._get(e, 'showCurrentAtPos'),
          h = this._get(e, 'stepMonths'),
          l = 1 != o[0] || 1 != o[1],
          u = this._daylightSavingAdjust(e.currentDay ? new Date(e.currentYear, e.currentMonth, e.currentDay) : new Date(9999, 9, 9)),
          d = this._getMinMaxDate(e, 'min'),
          c = this._getMinMaxDate(e, 'max'),
          p = e.drawMonth - r,
          f = e.drawYear;

      if (0 > p && (p += 12, f--), c) {
        var m = this._daylightSavingAdjust(new Date(c.getFullYear(), c.getMonth() - o[0] * o[1] + 1, c.getDate()));

        for (m = d && d > m ? d : m; this._daylightSavingAdjust(new Date(f, p, 1)) > m;) {
          p--, 0 > p && (p = 11, f--);
        }
      }

      e.drawMonth = p, e.drawYear = f;

      var g = this._get(e, 'prevText');

      g = a ? this.formatDate(g, this._daylightSavingAdjust(new Date(f, p - h, 1)), this._getFormatConfig(e)) : g;

      var v = this._canAdjustMonth(e, -1, f, p) ? '<a class="ui-datepicker-prev ui-corner-all" data-handler="prev" data-event="click" title="' + g + '"><span class="ui-icon ui-icon-circle-triangle-' + (i ? 'e' : 'w') + '">' + g + '</span></a>' : n ? '' : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="' + g + '"><span class="ui-icon ui-icon-circle-triangle-' + (i ? 'e' : 'w') + '">' + g + '</span></a>',
          _ = this._get(e, 'nextText');

      _ = a ? this.formatDate(_, this._daylightSavingAdjust(new Date(f, p + h, 1)), this._getFormatConfig(e)) : _;

      var y = this._canAdjustMonth(e, 1, f, p) ? '<a class="ui-datepicker-next ui-corner-all" data-handler="next" data-event="click" title="' + _ + '"><span class="ui-icon ui-icon-circle-triangle-' + (i ? 'w' : 'e') + '">' + _ + '</span></a>' : n ? '' : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="' + _ + '"><span class="ui-icon ui-icon-circle-triangle-' + (i ? 'w' : 'e') + '">' + _ + '</span></a>',
          b = this._get(e, 'currentText'),
          x = this._get(e, 'gotoCurrent') && e.currentDay ? u : t;

      b = a ? this.formatDate(b, x, this._getFormatConfig(e)) : b;
      var w = e.inline ? '' : '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" data-handler="hide" data-event="click">' + this._get(e, 'closeText') + '</button>',
          k = s ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (i ? w : '') + (this._isInRange(e, x) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" data-handler="today" data-event="click">' + b + '</button>' : '') + (i ? '' : w) + '</div>' : '',
          D = parseInt(this._get(e, 'firstDay'), 10);
      D = isNaN(D) ? 0 : D;

      var T = this._get(e, 'showWeek'),
          S = this._get(e, 'dayNames');

      this._get(e, 'dayNamesShort');

      var M = this._get(e, 'dayNamesMin'),
          N = this._get(e, 'monthNames'),
          C = this._get(e, 'monthNamesShort'),
          P = this._get(e, 'beforeShowDay'),
          A = this._get(e, 'showOtherMonths'),
          I = this._get(e, 'selectOtherMonths');

      this._get(e, 'calculateWeek') || this.iso8601Week;

      for (var H = this._getDefaultDate(e), z = '', F = 0; o[0] > F; F++) {
        var E = '';
        this.maxRows = 4;

        for (var O = 0; o[1] > O; O++) {
          var W = this._daylightSavingAdjust(new Date(f, p, e.selectedDay)),
              j = ' ui-corner-all',
              L = '';

          if (l) {
            if (L += '<div class="ui-datepicker-group', o[1] > 1) switch (O) {
              case 0:
                L += ' ui-datepicker-group-first', j = ' ui-corner-' + (i ? 'right' : 'left');
                break;

              case o[1] - 1:
                L += ' ui-datepicker-group-last', j = ' ui-corner-' + (i ? 'left' : 'right');
                break;

              default:
                L += ' ui-datepicker-group-middle', j = '';
            }
            L += '">';
          }

          L += '<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + j + '">' + (/all|left/.test(j) && 0 == F ? i ? y : v : '') + (/all|right/.test(j) && 0 == F ? i ? v : y : '') + this._generateMonthYearHeader(e, p, f, d, c, F > 0 || O > 0, N, C) + '</div><table class="ui-datepicker-calendar"><thead>' + '<tr>';

          for (var R = T ? '<th class="ui-datepicker-week-col">' + this._get(e, 'weekHeader') + '</th>' : '', Y = 0; 7 > Y; Y++) {
            var B = (Y + D) % 7;
            R += '<th' + ((Y + D + 6) % 7 >= 5 ? ' class="ui-datepicker-week-end"' : '') + '>' + '<span title="' + S[B] + '">' + M[B] + '</span></th>';
          }

          L += R + '</tr></thead><tbody>';

          var J = this._getDaysInMonth(f, p);

          f == e.selectedYear && p == e.selectedMonth && (e.selectedDay = Math.min(e.selectedDay, J));
          var K = (this._getFirstDayOfMonth(f, p) - D + 7) % 7,
              V = Math.ceil((K + J) / 7),
              U = l ? this.maxRows > V ? this.maxRows : V : V;
          this.maxRows = U;

          for (var q = this._daylightSavingAdjust(new Date(f, p, 1 - K)), Q = 0; U > Q; Q++) {
            L += '<tr>';

            for (var G = T ? '<td class="ui-datepicker-week-col">' + this._get(e, 'calculateWeek')(q) + '</td>' : '', Y = 0; 7 > Y; Y++) {
              var X = P ? P.apply(e.input ? e.input[0] : null, [q]) : [!0, ''],
                  Z = q.getMonth() != p,
                  et = Z && !I || !X[0] || d && d > q || c && q > c;
              G += '<td class="' + ((Y + D + 6) % 7 >= 5 ? ' ui-datepicker-week-end' : '') + (Z ? ' ui-datepicker-other-month' : '') + (q.getTime() == W.getTime() && p == e.selectedMonth && e._keyEvent || H.getTime() == q.getTime() && H.getTime() == W.getTime() ? ' ' + this._dayOverClass : '') + (et ? ' ' + this._unselectableClass + ' ui-state-disabled' : '') + (Z && !A ? '' : ' ' + X[1] + (q.getTime() == u.getTime() ? ' ' + this._currentClass : '') + (q.getTime() == t.getTime() ? ' ui-datepicker-today' : '')) + '"' + (Z && !A || !X[2] ? '' : ' title="' + X[2] + '"') + (et ? '' : ' data-handler="selectDay" data-event="click" data-month="' + q.getMonth() + '" data-year="' + q.getFullYear() + '"') + '>' + (Z && !A ? '&#xa0;' : et ? '<span class="ui-state-default">' + q.getDate() + '</span>' : '<a class="ui-state-default' + (q.getTime() == t.getTime() ? ' ui-state-highlight' : '') + (q.getTime() == u.getTime() ? ' ui-state-active' : '') + (Z ? ' ui-priority-secondary' : '') + '" href="#">' + q.getDate() + '</a>') + '</td>', q.setDate(q.getDate() + 1), q = this._daylightSavingAdjust(q);
            }

            L += G + '</tr>';
          }

          p++, p > 11 && (p = 0, f++), L += '</tbody></table>' + (l ? '</div>' + (o[0] > 0 && O == o[1] - 1 ? '<div class="ui-datepicker-row-break"></div>' : '') : ''), E += L;
        }

        z += E;
      }

      return z += k + ($.ui.ie6 && !e.inline ? '<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : ''), e._keyEvent = !1, z;
    },
    _generateMonthYearHeader: function _generateMonthYearHeader(e, t, i, s, n, a, o, r) {
      var h = this._get(e, 'changeMonth'),
          l = this._get(e, 'changeYear'),
          u = this._get(e, 'showMonthAfterYear'),
          d = '<div class="ui-datepicker-title">',
          c = '';

      if (a || !h) c += '<span class="ui-datepicker-month">' + o[t] + '</span>';else {
        var p = s && s.getFullYear() == i,
            f = n && n.getFullYear() == i;
        c += '<select class="ui-datepicker-month" data-handler="selectMonth" data-event="change">';

        for (var m = 0; 12 > m; m++) {
          (!p || m >= s.getMonth()) && (!f || n.getMonth() >= m) && (c += '<option value="' + m + '"' + (m == t ? ' selected="selected"' : '') + '>' + r[m] + '</option>');
        }

        c += '</select>';
      }
      if (u || (d += c + (!a && h && l ? '' : '&#xa0;')), !e.yearshtml) if (e.yearshtml = '', a || !l) d += '<span class="ui-datepicker-year">' + i + '</span>';else {
        var g = this._get(e, 'yearRange').split(':'),
            v = new Date().getFullYear(),
            _ = function _(e) {
          var t = e.match(/c[+-].*/) ? i + parseInt(e.substring(1), 10) : e.match(/[+-].*/) ? v + parseInt(e, 10) : parseInt(e, 10);
          return isNaN(t) ? v : t;
        },
            y = _(g[0]),
            b = Math.max(y, _(g[1] || ''));

        for (y = s ? Math.max(y, s.getFullYear()) : y, b = n ? Math.min(b, n.getFullYear()) : b, e.yearshtml += '<select class="ui-datepicker-year" data-handler="selectYear" data-event="change">'; b >= y; y++) {
          e.yearshtml += '<option value="' + y + '"' + (y == i ? ' selected="selected"' : '') + '>' + y + '</option>';
        }

        e.yearshtml += '</select>', d += e.yearshtml, e.yearshtml = null;
      }
      return d += this._get(e, 'yearSuffix'), u && (d += (!a && h && l ? '' : '&#xa0;') + c), d += '</div>';
    },
    _adjustInstDate: function _adjustInstDate(e, t, i) {
      var s = e.drawYear + ('Y' == i ? t : 0),
          n = e.drawMonth + ('M' == i ? t : 0),
          a = Math.min(e.selectedDay, this._getDaysInMonth(s, n)) + ('D' == i ? t : 0),
          o = this._restrictMinMax(e, this._daylightSavingAdjust(new Date(s, n, a)));

      e.selectedDay = o.getDate(), e.drawMonth = e.selectedMonth = o.getMonth(), e.drawYear = e.selectedYear = o.getFullYear(), ('M' == i || 'Y' == i) && this._notifyChange(e);
    },
    _restrictMinMax: function _restrictMinMax(e, t) {
      var i = this._getMinMaxDate(e, 'min'),
          s = this._getMinMaxDate(e, 'max'),
          n = i && i > t ? i : t;

      return n = s && n > s ? s : n;
    },
    _notifyChange: function _notifyChange(e) {
      var t = this._get(e, 'onChangeMonthYear');

      t && t.apply(e.input ? e.input[0] : null, [e.selectedYear, e.selectedMonth + 1, e]);
    },
    _getNumberOfMonths: function _getNumberOfMonths(e) {
      var t = this._get(e, 'numberOfMonths');

      return null == t ? [1, 1] : 'number' == typeof t ? [1, t] : t;
    },
    _getMinMaxDate: function _getMinMaxDate(e, t) {
      return this._determineDate(e, this._get(e, t + 'Date'), null);
    },
    _getDaysInMonth: function _getDaysInMonth(e, t) {
      return 32 - this._daylightSavingAdjust(new Date(e, t, 32)).getDate();
    },
    _getFirstDayOfMonth: function _getFirstDayOfMonth(e, t) {
      return new Date(e, t, 1).getDay();
    },
    _canAdjustMonth: function _canAdjustMonth(e, t, i, s) {
      var n = this._getNumberOfMonths(e),
          a = this._daylightSavingAdjust(new Date(i, s + (0 > t ? t : n[0] * n[1]), 1));

      return 0 > t && a.setDate(this._getDaysInMonth(a.getFullYear(), a.getMonth())), this._isInRange(e, a);
    },
    _isInRange: function _isInRange(e, t) {
      var i = this._getMinMaxDate(e, 'min'),
          s = this._getMinMaxDate(e, 'max');

      return (!i || t.getTime() >= i.getTime()) && (!s || t.getTime() <= s.getTime());
    },
    _getFormatConfig: function _getFormatConfig(e) {
      var t = this._get(e, 'shortYearCutoff');

      return t = 'string' != typeof t ? t : new Date().getFullYear() % 100 + parseInt(t, 10), {
        shortYearCutoff: t,
        dayNamesShort: this._get(e, 'dayNamesShort'),
        dayNames: this._get(e, 'dayNames'),
        monthNamesShort: this._get(e, 'monthNamesShort'),
        monthNames: this._get(e, 'monthNames')
      };
    },
    _formatDate: function _formatDate(e, t, i, s) {
      t || (e.currentDay = e.selectedDay, e.currentMonth = e.selectedMonth, e.currentYear = e.selectedYear);
      var n = t ? 'object' == _typeof(t) ? t : this._daylightSavingAdjust(new Date(s, i, t)) : this._daylightSavingAdjust(new Date(e.currentYear, e.currentMonth, e.currentDay));
      return this.formatDate(this._get(e, 'dateFormat'), n, this._getFormatConfig(e));
    }
  }), $.fn.datepicker = function (e) {
    if (!this.length) return this;
    $.datepicker.initialized || ($(document).mousedown($.datepicker._checkExternalClick).find(document.body).append($.datepicker.dpDiv), $.datepicker.initialized = !0);
    var t = Array.prototype.slice.call(arguments, 1);
    return 'string' != typeof e || 'isDisabled' != e && 'getDate' != e && 'widget' != e ? 'option' == e && 2 == arguments.length && 'string' == typeof arguments[1] ? $.datepicker['_' + e + 'Datepicker'].apply($.datepicker, [this[0]].concat(t)) : this.each(function () {
      'string' == typeof e ? $.datepicker['_' + e + 'Datepicker'].apply($.datepicker, [this].concat(t)) : $.datepicker._attachDatepicker(this, e);
    }) : $.datepicker['_' + e + 'Datepicker'].apply($.datepicker, [this[0]].concat(t));
  }, $.datepicker = new Datepicker(), $.datepicker.initialized = !1, $.datepicker.uuid = new Date().getTime(), $.datepicker.version = '1.9.2', window['DP_jQuery_' + dpuuid] = $;
})(jQuery);

(function (e, t) {
  var i = 'ui-dialog ui-widget ui-widget-content ui-corner-all ',
      s = {
    buttons: !0,
    height: !0,
    maxHeight: !0,
    maxWidth: !0,
    minHeight: !0,
    minWidth: !0,
    width: !0
  },
      n = {
    maxHeight: !0,
    maxWidth: !0,
    minHeight: !0,
    minWidth: !0
  };
  e.widget('ui.dialog', {
    version: '1.9.2',
    options: {
      autoOpen: !0,
      buttons: {},
      closeOnEscape: !0,
      closeText: 'close',
      dialogClass: '',
      draggable: !0,
      hide: null,
      height: 'auto',
      maxHeight: !1,
      maxWidth: !1,
      minHeight: 150,
      minWidth: 150,
      modal: !1,
      position: {
        my: 'center',
        at: 'center',
        of: window,
        collision: 'fit',
        using: function using(t) {
          var i = e(this).css(t).offset().top;
          0 > i && e(this).css('top', t.top - i);
        }
      },
      resizable: !0,
      show: null,
      stack: !0,
      title: '',
      width: 300,
      zIndex: 1e3
    },
    _create: function _create() {
      this.originalTitle = this.element.attr('title'), 'string' != typeof this.originalTitle && (this.originalTitle = ''), this.oldPosition = {
        parent: this.element.parent(),
        index: this.element.parent().children().index(this.element)
      }, this.options.title = this.options.title || this.originalTitle;
      var s,
          n,
          a,
          o,
          r,
          h = this,
          l = this.options,
          u = l.title || '&#160;';
      s = (this.uiDialog = e('<div>')).addClass(i + l.dialogClass).css({
        display: 'none',
        outline: 0,
        zIndex: l.zIndex
      }).attr('tabIndex', -1).keydown(function (t) {
        l.closeOnEscape && !t.isDefaultPrevented() && t.keyCode && t.keyCode === e.ui.keyCode.ESCAPE && (h.close(t), t.preventDefault());
      }).mousedown(function (e) {
        h.moveToTop(!1, e);
      }).appendTo('body'), this.element.show().removeAttr('title').addClass('ui-dialog-content ui-widget-content').appendTo(s), n = (this.uiDialogTitlebar = e('<div>')).addClass('ui-dialog-titlebar  ui-widget-header  ui-corner-all  ui-helper-clearfix').bind('mousedown', function () {
        s.focus();
      }).prependTo(s), a = e("<a href='#'></a>").addClass('ui-dialog-titlebar-close  ui-corner-all').attr('role', 'button').click(function (e) {
        e.preventDefault(), h.close(e);
      }).appendTo(n), (this.uiDialogTitlebarCloseText = e('<span>')).addClass('ui-icon ui-icon-closethick').text(l.closeText).appendTo(a), o = e('<span>').uniqueId().addClass('ui-dialog-title').html(u).prependTo(n), r = (this.uiDialogButtonPane = e('<div>')).addClass('ui-dialog-buttonpane ui-widget-content ui-helper-clearfix'), (this.uiButtonSet = e('<div>')).addClass('ui-dialog-buttonset').appendTo(r), s.attr({
        role: 'dialog',
        'aria-labelledby': o.attr('id')
      }), n.find('*').add(n).disableSelection(), this._hoverable(a), this._focusable(a), l.draggable && e.fn.draggable && this._makeDraggable(), l.resizable && e.fn.resizable && this._makeResizable(), this._createButtons(l.buttons), this._isOpen = !1, e.fn.bgiframe && s.bgiframe(), this._on(s, {
        keydown: function keydown(i) {
          if (l.modal && i.keyCode === e.ui.keyCode.TAB) {
            var n = e(':tabbable', s),
                a = n.filter(':first'),
                o = n.filter(':last');
            return i.target !== o[0] || i.shiftKey ? i.target === a[0] && i.shiftKey ? (o.focus(1), !1) : t : (a.focus(1), !1);
          }
        }
      });
    },
    _init: function _init() {
      this.options.autoOpen && this.open();
    },
    _destroy: function _destroy() {
      var e,
          t = this.oldPosition;
      this.overlay && this.overlay.destroy(), this.uiDialog.hide(), this.element.removeClass('ui-dialog-content ui-widget-content').hide().appendTo('body'), this.uiDialog.remove(), this.originalTitle && this.element.attr('title', this.originalTitle), e = t.parent.children().eq(t.index), e.length && e[0] !== this.element[0] ? e.before(this.element) : t.parent.append(this.element);
    },
    widget: function widget() {
      return this.uiDialog;
    },
    close: function close(t) {
      var i,
          s,
          n = this;
      if (this._isOpen && !1 !== this._trigger('beforeClose', t)) return this._isOpen = !1, this.overlay && this.overlay.destroy(), this.options.hide ? this._hide(this.uiDialog, this.options.hide, function () {
        n._trigger('close', t);
      }) : (this.uiDialog.hide(), this._trigger('close', t)), e.ui.dialog.overlay.resize(), this.options.modal && (i = 0, e('.ui-dialog').each(function () {
        this !== n.uiDialog[0] && (s = e(this).css('z-index'), isNaN(s) || (i = Math.max(i, s)));
      }), e.ui.dialog.maxZ = i), this;
    },
    isOpen: function isOpen() {
      return this._isOpen;
    },
    moveToTop: function moveToTop(t, i) {
      var s,
          n = this.options;
      return n.modal && !t || !n.stack && !n.modal ? this._trigger('focus', i) : (n.zIndex > e.ui.dialog.maxZ && (e.ui.dialog.maxZ = n.zIndex), this.overlay && (e.ui.dialog.maxZ += 1, e.ui.dialog.overlay.maxZ = e.ui.dialog.maxZ, this.overlay.$el.css('z-index', e.ui.dialog.overlay.maxZ)), s = {
        scrollTop: this.element.scrollTop(),
        scrollLeft: this.element.scrollLeft()
      }, e.ui.dialog.maxZ += 1, this.uiDialog.css('z-index', e.ui.dialog.maxZ), this.element.attr(s), this._trigger('focus', i), this);
    },
    open: function open() {
      if (!this._isOpen) {
        var t,
            i = this.options,
            s = this.uiDialog;
        return this._size(), this._position(i.position), s.show(i.show), this.overlay = i.modal ? new e.ui.dialog.overlay(this) : null, this.moveToTop(!0), t = this.element.find(':tabbable'), t.length || (t = this.uiDialogButtonPane.find(':tabbable'), t.length || (t = s)), t.eq(0).focus(), this._isOpen = !0, this._trigger('open'), this;
      }
    },
    _createButtons: function _createButtons(t) {
      var i = this,
          s = !1;
      this.uiDialogButtonPane.remove(), this.uiButtonSet.empty(), 'object' == _typeof(t) && null !== t && e.each(t, function () {
        return !(s = !0);
      }), s ? (e.each(t, function (t, s) {
        var n, a;
        s = e.isFunction(s) ? {
          click: s,
          text: t
        } : s, s = e.extend({
          type: 'button'
        }, s), a = s.click, s.click = function () {
          a.apply(i.element[0], arguments);
        }, n = e('<button></button>', s).appendTo(i.uiButtonSet), e.fn.button && n.button();
      }), this.uiDialog.addClass('ui-dialog-buttons'), this.uiDialogButtonPane.appendTo(this.uiDialog)) : this.uiDialog.removeClass('ui-dialog-buttons');
    },
    _makeDraggable: function _makeDraggable() {
      function t(e) {
        return {
          position: e.position,
          offset: e.offset
        };
      }

      var i = this,
          s = this.options;
      this.uiDialog.draggable({
        cancel: '.ui-dialog-content, .ui-dialog-titlebar-close',
        handle: '.ui-dialog-titlebar',
        containment: 'document',
        start: function start(s, n) {
          e(this).addClass('ui-dialog-dragging'), i._trigger('dragStart', s, t(n));
        },
        drag: function drag(e, s) {
          i._trigger('drag', e, t(s));
        },
        stop: function stop(n, a) {
          s.position = [a.position.left - i.document.scrollLeft(), a.position.top - i.document.scrollTop()], e(this).removeClass('ui-dialog-dragging'), i._trigger('dragStop', n, t(a)), e.ui.dialog.overlay.resize();
        }
      });
    },
    _makeResizable: function _makeResizable(i) {
      function s(e) {
        return {
          originalPosition: e.originalPosition,
          originalSize: e.originalSize,
          position: e.position,
          size: e.size
        };
      }

      i = i === t ? this.options.resizable : i;
      var n = this,
          a = this.options,
          o = this.uiDialog.css('position'),
          r = 'string' == typeof i ? i : 'n,e,s,w,se,sw,ne,nw';
      this.uiDialog.resizable({
        cancel: '.ui-dialog-content',
        containment: 'document',
        alsoResize: this.element,
        maxWidth: a.maxWidth,
        maxHeight: a.maxHeight,
        minWidth: a.minWidth,
        minHeight: this._minHeight(),
        handles: r,
        start: function start(t, i) {
          e(this).addClass('ui-dialog-resizing'), n._trigger('resizeStart', t, s(i));
        },
        resize: function resize(e, t) {
          n._trigger('resize', e, s(t));
        },
        stop: function stop(t, i) {
          e(this).removeClass('ui-dialog-resizing'), a.height = e(this).height(), a.width = e(this).width(), n._trigger('resizeStop', t, s(i)), e.ui.dialog.overlay.resize();
        }
      }).css('position', o).find('.ui-resizable-se').addClass('ui-icon ui-icon-grip-diagonal-se');
    },
    _minHeight: function _minHeight() {
      var e = this.options;
      return 'auto' === e.height ? e.minHeight : Math.min(e.minHeight, e.height);
    },
    _position: function _position(t) {
      var i,
          s = [],
          n = [0, 0];
      t ? (('string' == typeof t || 'object' == _typeof(t) && '0' in t) && (s = t.split ? t.split(' ') : [t[0], t[1]], 1 === s.length && (s[1] = s[0]), e.each(['left', 'top'], function (e, t) {
        +s[e] === s[e] && (n[e] = s[e], s[e] = t);
      }), t = {
        my: s[0] + (0 > n[0] ? n[0] : '+' + n[0]) + ' ' + s[1] + (0 > n[1] ? n[1] : '+' + n[1]),
        at: s.join(' ')
      }), t = e.extend({}, e.ui.dialog.prototype.options.position, t)) : t = e.ui.dialog.prototype.options.position, i = this.uiDialog.is(':visible'), i || this.uiDialog.show(), this.uiDialog.position(t), i || this.uiDialog.hide();
    },
    _setOptions: function _setOptions(t) {
      var i = this,
          a = {},
          o = !1;
      e.each(t, function (e, t) {
        i._setOption(e, t), e in s && (o = !0), e in n && (a[e] = t);
      }), o && this._size(), this.uiDialog.is(':data(resizable)') && this.uiDialog.resizable('option', a);
    },
    _setOption: function _setOption(t, s) {
      var n,
          a,
          o = this.uiDialog;

      switch (t) {
        case 'buttons':
          this._createButtons(s);

          break;

        case 'closeText':
          this.uiDialogTitlebarCloseText.text('' + s);
          break;

        case 'dialogClass':
          o.removeClass(this.options.dialogClass).addClass(i + s);
          break;

        case 'disabled':
          s ? o.addClass('ui-dialog-disabled') : o.removeClass('ui-dialog-disabled');
          break;

        case 'draggable':
          n = o.is(':data(draggable)'), n && !s && o.draggable('destroy'), !n && s && this._makeDraggable();
          break;

        case 'position':
          this._position(s);

          break;

        case 'resizable':
          a = o.is(':data(resizable)'), a && !s && o.resizable('destroy'), a && 'string' == typeof s && o.resizable('option', 'handles', s), a || s === !1 || this._makeResizable(s);
          break;

        case 'title':
          e('.ui-dialog-title', this.uiDialogTitlebar).html('' + (s || '&#160;'));
      }

      this._super(t, s);
    },
    _size: function _size() {
      var t,
          i,
          s,
          n = this.options,
          a = this.uiDialog.is(':visible');
      this.element.show().css({
        width: 'auto',
        minHeight: 0,
        height: 0
      }), n.minWidth > n.width && (n.width = n.minWidth), t = this.uiDialog.css({
        height: 'auto',
        width: n.width
      }).outerHeight(), i = Math.max(0, n.minHeight - t), 'auto' === n.height ? e.support.minHeight ? this.element.css({
        minHeight: i,
        height: 'auto'
      }) : (this.uiDialog.show(), s = this.element.css('height', 'auto').height(), a || this.uiDialog.hide(), this.element.height(Math.max(s, i))) : this.element.height(Math.max(n.height - t, 0)), this.uiDialog.is(':data(resizable)') && this.uiDialog.resizable('option', 'minHeight', this._minHeight());
    }
  }), e.extend(e.ui.dialog, {
    uuid: 0,
    maxZ: 0,
    getTitleId: function getTitleId(e) {
      var t = e.attr('id');
      return t || (this.uuid += 1, t = this.uuid), 'ui-dialog-title-' + t;
    },
    overlay: function overlay(t) {
      this.$el = e.ui.dialog.overlay.create(t);
    }
  }), e.extend(e.ui.dialog.overlay, {
    instances: [],
    oldInstances: [],
    maxZ: 0,
    events: e.map('focus,mousedown,mouseup,keydown,keypress,click'.split(','), function (e) {
      return e + '.dialog-overlay';
    }).join(' '),
    create: function create(i) {
      0 === this.instances.length && (setTimeout(function () {
        e.ui.dialog.overlay.instances.length && e(document).bind(e.ui.dialog.overlay.events, function (i) {
          return e(i.target).zIndex() < e.ui.dialog.overlay.maxZ ? !1 : t;
        });
      }, 1), e(window).bind('resize.dialog-overlay', e.ui.dialog.overlay.resize));
      var s = this.oldInstances.pop() || e('<div>').addClass('ui-widget-overlay');
      return e(document).bind('keydown.dialog-overlay', function (t) {
        var n = e.ui.dialog.overlay.instances;
        0 !== n.length && n[n.length - 1] === s && i.options.closeOnEscape && !t.isDefaultPrevented() && t.keyCode && t.keyCode === e.ui.keyCode.ESCAPE && (i.close(t), t.preventDefault());
      }), s.appendTo(document.body).css({
        width: this.width(),
        height: this.height()
      }), e.fn.bgiframe && s.bgiframe(), this.instances.push(s), s;
    },
    destroy: function destroy(t) {
      var i = e.inArray(t, this.instances),
          s = 0;
      -1 !== i && this.oldInstances.push(this.instances.splice(i, 1)[0]), 0 === this.instances.length && e([document, window]).unbind('.dialog-overlay'), t.height(0).width(0).remove(), e.each(this.instances, function () {
        s = Math.max(s, this.css('z-index'));
      }), this.maxZ = s;
    },
    height: function height() {
      var t, i;
      return e.ui.ie ? (t = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight), i = Math.max(document.documentElement.offsetHeight, document.body.offsetHeight), i > t ? e(window).height() + 'px' : t + 'px') : e(document).height() + 'px';
    },
    width: function width() {
      var t, i;
      return e.ui.ie ? (t = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth), i = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth), i > t ? e(window).width() + 'px' : t + 'px') : e(document).width() + 'px';
    },
    resize: function resize() {
      var t = e([]);
      e.each(e.ui.dialog.overlay.instances, function () {
        t = t.add(this);
      }), t.css({
        width: 0,
        height: 0
      }).css({
        width: e.ui.dialog.overlay.width(),
        height: e.ui.dialog.overlay.height()
      });
    }
  }), e.extend(e.ui.dialog.overlay.prototype, {
    destroy: function destroy() {
      e.ui.dialog.overlay.destroy(this.$el);
    }
  });
})(jQuery);

(function (e) {
  var t = !1;
  e.widget('ui.menu', {
    version: '1.9.2',
    defaultElement: '<ul>',
    delay: 300,
    options: {
      icons: {
        submenu: 'ui-icon-carat-1-e'
      },
      menus: 'ul',
      position: {
        my: 'left top',
        at: 'right top'
      },
      role: 'menu',
      blur: null,
      focus: null,
      select: null
    },
    _create: function _create() {
      this.activeMenu = this.element, this.element.uniqueId().addClass('ui-menu ui-widget ui-widget-content ui-corner-all').toggleClass('ui-menu-icons', !!this.element.find('.ui-icon').length).attr({
        role: this.options.role,
        tabIndex: 0
      }).bind('click' + this.eventNamespace, e.proxy(function (e) {
        this.options.disabled && e.preventDefault();
      }, this)), this.options.disabled && this.element.addClass('ui-state-disabled').attr('aria-disabled', 'true'), this._on({
        'mousedown .ui-menu-item > a': function mousedownUiMenuItemA(e) {
          e.preventDefault();
        },
        'click .ui-state-disabled > a': function clickUiStateDisabledA(e) {
          e.preventDefault();
        },
        'click .ui-menu-item:has(a)': function clickUiMenuItemHasA(i) {
          var s = e(i.target).closest('.ui-menu-item');
          !t && s.not('.ui-state-disabled').length && (t = !0, this.select(i), s.has('.ui-menu').length ? this.expand(i) : this.element.is(':focus') || (this.element.trigger('focus', [!0]), this.active && 1 === this.active.parents('.ui-menu').length && clearTimeout(this.timer)));
        },
        'mouseenter .ui-menu-item': function mouseenterUiMenuItem(t) {
          var i = e(t.currentTarget);
          i.siblings().children('.ui-state-active').removeClass('ui-state-active'), this.focus(t, i);
        },
        mouseleave: 'collapseAll',
        'mouseleave .ui-menu': 'collapseAll',
        focus: function focus(e, t) {
          var i = this.active || this.element.children('.ui-menu-item').eq(0);
          t || this.focus(e, i);
        },
        blur: function blur(t) {
          this._delay(function () {
            e.contains(this.element[0], this.document[0].activeElement) || this.collapseAll(t);
          });
        },
        keydown: '_keydown'
      }), this.refresh(), this._on(this.document, {
        click: function click(i) {
          e(i.target).closest('.ui-menu').length || this.collapseAll(i), t = !1;
        }
      });
    },
    _destroy: function _destroy() {
      this.element.removeAttr('aria-activedescendant').find('.ui-menu').andSelf().removeClass('ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons').removeAttr('role').removeAttr('tabIndex').removeAttr('aria-labelledby').removeAttr('aria-expanded').removeAttr('aria-hidden').removeAttr('aria-disabled').removeUniqueId().show(), this.element.find('.ui-menu-item').removeClass('ui-menu-item').removeAttr('role').removeAttr('aria-disabled').children('a').removeUniqueId().removeClass('ui-corner-all ui-state-hover').removeAttr('tabIndex').removeAttr('role').removeAttr('aria-haspopup').children().each(function () {
        var t = e(this);
        t.data('ui-menu-submenu-carat') && t.remove();
      }), this.element.find('.ui-menu-divider').removeClass('ui-menu-divider ui-widget-content');
    },
    _keydown: function _keydown(t) {
      function i(e) {
        return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
      }

      var s,
          n,
          a,
          o,
          r,
          h = !0;

      switch (t.keyCode) {
        case e.ui.keyCode.PAGE_UP:
          this.previousPage(t);
          break;

        case e.ui.keyCode.PAGE_DOWN:
          this.nextPage(t);
          break;

        case e.ui.keyCode.HOME:
          this._move('first', 'first', t);

          break;

        case e.ui.keyCode.END:
          this._move('last', 'last', t);

          break;

        case e.ui.keyCode.UP:
          this.previous(t);
          break;

        case e.ui.keyCode.DOWN:
          this.next(t);
          break;

        case e.ui.keyCode.LEFT:
          this.collapse(t);
          break;

        case e.ui.keyCode.RIGHT:
          this.active && !this.active.is('.ui-state-disabled') && this.expand(t);
          break;

        case e.ui.keyCode.ENTER:
        case e.ui.keyCode.SPACE:
          this._activate(t);

          break;

        case e.ui.keyCode.ESCAPE:
          this.collapse(t);
          break;

        default:
          h = !1, n = this.previousFilter || '', a = String.fromCharCode(t.keyCode), o = !1, clearTimeout(this.filterTimer), a === n ? o = !0 : a = n + a, r = RegExp('^' + i(a), 'i'), s = this.activeMenu.children('.ui-menu-item').filter(function () {
            return r.test(e(this).children('a').text());
          }), s = o && -1 !== s.index(this.active.next()) ? this.active.nextAll('.ui-menu-item') : s, s.length || (a = String.fromCharCode(t.keyCode), r = RegExp('^' + i(a), 'i'), s = this.activeMenu.children('.ui-menu-item').filter(function () {
            return r.test(e(this).children('a').text());
          })), s.length ? (this.focus(t, s), s.length > 1 ? (this.previousFilter = a, this.filterTimer = this._delay(function () {
            delete this.previousFilter;
          }, 1e3)) : delete this.previousFilter) : delete this.previousFilter;
      }

      h && t.preventDefault();
    },
    _activate: function _activate(e) {
      this.active.is('.ui-state-disabled') || (this.active.children("a[aria-haspopup='true']").length ? this.expand(e) : this.select(e));
    },
    refresh: function refresh() {
      var t,
          i = this.options.icons.submenu,
          s = this.element.find(this.options.menus);
      s.filter(':not(.ui-menu)').addClass('ui-menu ui-widget ui-widget-content ui-corner-all').hide().attr({
        role: this.options.role,
        'aria-hidden': 'true',
        'aria-expanded': 'false'
      }).each(function () {
        var t = e(this),
            s = t.prev('a'),
            n = e('<span>').addClass('ui-menu-icon ui-icon ' + i).data('ui-menu-submenu-carat', !0);
        s.attr('aria-haspopup', 'true').prepend(n), t.attr('aria-labelledby', s.attr('id'));
      }), t = s.add(this.element), t.children(':not(.ui-menu-item):has(a)').addClass('ui-menu-item').attr('role', 'presentation').children('a').uniqueId().addClass('ui-corner-all').attr({
        tabIndex: -1,
        role: this._itemRole()
      }), t.children(':not(.ui-menu-item)').each(function () {
        var t = e(this);
        /[^\-—–\s]/.test(t.text()) || t.addClass('ui-widget-content ui-menu-divider');
      }), t.children('.ui-state-disabled').attr('aria-disabled', 'true'), this.active && !e.contains(this.element[0], this.active[0]) && this.blur();
    },
    _itemRole: function _itemRole() {
      return {
        menu: 'menuitem',
        listbox: 'option'
      }[this.options.role];
    },
    focus: function focus(e, t) {
      var i, s;
      this.blur(e, e && 'focus' === e.type), this._scrollIntoView(t), this.active = t.first(), s = this.active.children('a').addClass('ui-state-focus'), this.options.role && this.element.attr('aria-activedescendant', s.attr('id')), this.active.parent().closest('.ui-menu-item').children('a:first').addClass('ui-state-active'), e && 'keydown' === e.type ? this._close() : this.timer = this._delay(function () {
        this._close();
      }, this.delay), i = t.children('.ui-menu'), i.length && /^mouse/.test(e.type) && this._startOpening(i), this.activeMenu = t.parent(), this._trigger('focus', e, {
        item: t
      });
    },
    _scrollIntoView: function _scrollIntoView(t) {
      var i, s, n, a, o, r;
      this._hasScroll() && (i = parseFloat(e.css(this.activeMenu[0], 'borderTopWidth')) || 0, s = parseFloat(e.css(this.activeMenu[0], 'paddingTop')) || 0, n = t.offset().top - this.activeMenu.offset().top - i - s, a = this.activeMenu.scrollTop(), o = this.activeMenu.height(), r = t.height(), 0 > n ? this.activeMenu.scrollTop(a + n) : n + r > o && this.activeMenu.scrollTop(a + n - o + r));
    },
    blur: function blur(e, t) {
      t || clearTimeout(this.timer), this.active && (this.active.children('a').removeClass('ui-state-focus'), this.active = null, this._trigger('blur', e, {
        item: this.active
      }));
    },
    _startOpening: function _startOpening(e) {
      clearTimeout(this.timer), 'true' === e.attr('aria-hidden') && (this.timer = this._delay(function () {
        this._close(), this._open(e);
      }, this.delay));
    },
    _open: function _open(t) {
      var i = e.extend({
        of: this.active
      }, this.options.position);
      clearTimeout(this.timer), this.element.find('.ui-menu').not(t.parents('.ui-menu')).hide().attr('aria-hidden', 'true'), t.show().removeAttr('aria-hidden').attr('aria-expanded', 'true').position(i);
    },
    collapseAll: function collapseAll(t, i) {
      clearTimeout(this.timer), this.timer = this._delay(function () {
        var s = i ? this.element : e(t && t.target).closest(this.element.find('.ui-menu'));
        s.length || (s = this.element), this._close(s), this.blur(t), this.activeMenu = s;
      }, this.delay);
    },
    _close: function _close(e) {
      e || (e = this.active ? this.active.parent() : this.element), e.find('.ui-menu').hide().attr('aria-hidden', 'true').attr('aria-expanded', 'false').end().find('a.ui-state-active').removeClass('ui-state-active');
    },
    collapse: function collapse(e) {
      var t = this.active && this.active.parent().closest('.ui-menu-item', this.element);
      t && t.length && (this._close(), this.focus(e, t));
    },
    expand: function expand(e) {
      var t = this.active && this.active.children('.ui-menu ').children('.ui-menu-item').first();
      t && t.length && (this._open(t.parent()), this._delay(function () {
        this.focus(e, t);
      }));
    },
    next: function next(e) {
      this._move('next', 'first', e);
    },
    previous: function previous(e) {
      this._move('prev', 'last', e);
    },
    isFirstItem: function isFirstItem() {
      return this.active && !this.active.prevAll('.ui-menu-item').length;
    },
    isLastItem: function isLastItem() {
      return this.active && !this.active.nextAll('.ui-menu-item').length;
    },
    _move: function _move(e, t, i) {
      var s;
      this.active && (s = 'first' === e || 'last' === e ? this.active['first' === e ? 'prevAll' : 'nextAll']('.ui-menu-item').eq(-1) : this.active[e + 'All']('.ui-menu-item').eq(0)), s && s.length && this.active || (s = this.activeMenu.children('.ui-menu-item')[t]()), this.focus(i, s);
    },
    nextPage: function nextPage(t) {
      var i, s, n;
      return this.active ? (this.isLastItem() || (this._hasScroll() ? (s = this.active.offset().top, n = this.element.height(), this.active.nextAll('.ui-menu-item').each(function () {
        return i = e(this), 0 > i.offset().top - s - n;
      }), this.focus(t, i)) : this.focus(t, this.activeMenu.children('.ui-menu-item')[this.active ? 'last' : 'first']())), undefined) : (this.next(t), undefined);
    },
    previousPage: function previousPage(t) {
      var i, s, n;
      return this.active ? (this.isFirstItem() || (this._hasScroll() ? (s = this.active.offset().top, n = this.element.height(), this.active.prevAll('.ui-menu-item').each(function () {
        return i = e(this), i.offset().top - s + n > 0;
      }), this.focus(t, i)) : this.focus(t, this.activeMenu.children('.ui-menu-item').first())), undefined) : (this.next(t), undefined);
    },
    _hasScroll: function _hasScroll() {
      return this.element.outerHeight() < this.element.prop('scrollHeight');
    },
    select: function select(t) {
      this.active = this.active || e(t.target).closest('.ui-menu-item');
      var i = {
        item: this.active
      };
      this.active.has('.ui-menu').length || this.collapseAll(t, !0), this._trigger('select', t, i);
    }
  });
})(jQuery);

/***/ }),

/***/ "./src/js/main/jquery/lib/jquery.ba-bbq.min.js":
/*!*****************************************************!*\
  !*** ./src/js/main/jquery/lib/jquery.ba-bbq.min.js ***!
  \*****************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es7.symbol.async-iterator */ "./node_modules/core-js/modules/es7.symbol.async-iterator.js");
/* harmony import */ var core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.symbol */ "./node_modules/core-js/modules/es6.symbol.js");
/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.regexp.constructor */ "./node_modules/core-js/modules/es6.regexp.constructor.js");
/* harmony import */ var core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es6.regexp.split */ "./node_modules/core-js/modules/es6.regexp.split.js");
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es6.regexp.match */ "./node_modules/core-js/modules/es6.regexp.match.js");
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es6.regexp.replace */ "./node_modules/core-js/modules/es6.regexp.replace.js");
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_5__);









function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * jQuery BBQ: Back Button & Query Library - v1.2.1 - 2/17/2010
 * http://benalman.com/projects/jquery-bbq-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
(function ($, p) {
  var i,
      m = Array.prototype.slice,
      r = decodeURIComponent,
      a = $.param,
      c,
      l,
      v,
      b = $.bbq = $.bbq || {},
      q,
      u,
      j,
      e = $.event.special,
      d = 'hashchange',
      A = 'querystring',
      D = 'fragment',
      y = 'elemUrlAttr',
      g = 'location',
      k = 'href',
      t = 'src',
      x = /^.*\?|#.*$/g,
      w = /^.*\#/,
      h,
      C = {};

  function E(F) {
    return typeof F === 'string';
  }

  function B(G) {
    var F = m.call(arguments, 1);
    return function () {
      return G.apply(this, F.concat(m.call(arguments)));
    };
  }

  function n(F) {
    return F.replace(/^[^#]*#?(.*)$/, '$1');
  }

  function o(F) {
    return F.replace(/(?:^[^?#]*\?([^#]*).*$)?.*/, '$1');
  }

  function f(H, M, F, I, G) {
    var O, L, K, N, J;

    if (I !== i) {
      K = F.match(H ? /^([^#]*)\#?(.*)$/ : /^([^#?]*)\??([^#]*)(#?.*)/);
      J = K[3] || '';

      if (G === 2 && E(I)) {
        L = I.replace(H ? w : x, '');
      } else {
        N = l(K[2]);
        I = E(I) ? l[H ? D : A](I) : I;
        L = G === 2 ? I : G === 1 ? $.extend({}, I, N) : $.extend({}, N, I);
        L = a(L);

        if (H) {
          L = L.replace(h, r);
        }
      }

      O = K[1] + (H ? '#' : L || !K[1] ? '?' : '') + L + J;
    } else {
      O = M(F !== i ? F : p[g][k]);
    }

    return O;
  }

  a[A] = B(f, 0, o);
  a[D] = c = B(f, 1, n);

  c.noEscape = function (G) {
    G = G || '';
    var F = $.map(G.split(''), encodeURIComponent);
    h = new RegExp(F.join('|'), 'g');
  };

  c.noEscape(',/');

  $.deparam = l = function l(I, F) {
    var H = {},
        G = {
      true: !0,
      false: !1,
      null: null
    };
    $.each(I.replace(/\+/g, ' ').split('&'), function (L, Q) {
      var K = Q.split('='),
          P = r(K[0]),
          J,
          O = H,
          M = 0,
          R = P.split(']['),
          N = R.length - 1;

      if (/\[/.test(R[0]) && /\]$/.test(R[N])) {
        R[N] = R[N].replace(/\]$/, '');
        R = R.shift().split('[').concat(R);
        N = R.length - 1;
      } else {
        N = 0;
      }

      if (K.length === 2) {
        J = r(K[1]);

        if (F) {
          J = J && !isNaN(J) ? +J : J === 'undefined' ? i : G[J] !== i ? G[J] : J;
        }

        if (N) {
          for (; M <= N; M++) {
            P = R[M] === '' ? O.length : R[M];
            O = O[P] = M < N ? O[P] || (R[M + 1] && isNaN(R[M + 1]) ? {} : []) : J;
          }
        } else {
          if ($.isArray(H[P])) {
            H[P].push(J);
          } else {
            if (H[P] !== i) {
              H[P] = [H[P], J];
            } else {
              H[P] = J;
            }
          }
        }
      } else {
        if (P) {
          H[P] = F ? i : '';
        }
      }
    });
    return H;
  };

  function z(H, F, G) {
    if (F === i || typeof F === 'boolean') {
      G = F;
      F = a[H ? D : A]();
    } else {
      F = E(F) ? F.replace(H ? w : x, '') : F;
    }

    return l(F, G);
  }

  l[A] = B(z, 0);
  l[D] = v = B(z, 1);
  $[y] || ($[y] = function (F) {
    return $.extend(C, F);
  })({
    a: k,
    base: k,
    iframe: t,
    img: t,
    input: t,
    form: 'action',
    link: k,
    script: t
  });
  j = $[y];

  function s(I, G, H, F) {
    if (!E(H) && _typeof(H) !== 'object') {
      F = H;
      H = G;
      G = i;
    }

    return this.each(function () {
      var L = $(this),
          J = G || j()[(this.nodeName || '').toLowerCase()] || '',
          K = J && L.attr(J) || '';
      L.attr(J, a[I](K, H, F));
    });
  }

  $.fn[A] = B(s, A);
  $.fn[D] = B(s, D);

  b.pushState = q = function q(I, F) {
    if (E(I) && /^#/.test(I) && F === i) {
      F = 2;
    }

    var H = I !== i,
        G = c(p[g][k], H ? I : {}, H ? F : 2);
    p[g][k] = G + (/#/.test(G) ? '' : '#');
  };

  b.getState = u = function u(F, G) {
    return F === i || typeof F === 'boolean' ? v(F) : v(G)[F];
  };

  b.removeState = function (F) {
    var G = {};

    if (F !== i) {
      G = u();
      $.each($.isArray(F) ? F : arguments, function (I, H) {
        delete G[H];
      });
    }

    q(G, 2);
  };

  e[d] = $.extend(e[d], {
    add: function add(F) {
      var H;

      function G(J) {
        var I = J[D] = c();

        J.getState = function (K, L) {
          return K === i || typeof K === 'boolean' ? l(I, K) : l(I, L)[K];
        };

        H.apply(this, arguments);
      }

      if ($.isFunction(F)) {
        H = F;
        return G;
      } else {
        H = F.handler;
        F.handler = G;
      }
    }
  });
})(jQuery, window);
/*
 * jQuery hashchange event - v1.2 - 2/11/2010
 * http://benalman.com/projects/jquery-hashchange-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */


(function ($, i, b) {
  var j,
      k = $.event.special,
      c = 'location',
      d = 'hashchange',
      l = 'href',
      f = $.browser,
      g = document.documentMode,
      h = f.msie && (g === b || g < 8),
      e = 'on' + d in i && !h;

  function a(m) {
    m = m || i[c][l];
    return m.replace(/^[^#]*#?(.*)$/, '$1');
  }

  $[d + 'Delay'] = 100;
  k[d] = $.extend(k[d], {
    setup: function setup() {
      if (e) {
        return false;
      }

      $(j.start);
    },
    teardown: function teardown() {
      if (e) {
        return false;
      }

      $(j.stop);
    }
  });

  j = function () {
    var m = {},
        r,
        n,
        o,
        q;

    function p() {
      o = q = function q(s) {
        return s;
      };

      if (h) {
        n = $('<iframe src="javascript:0"/>').hide().insertAfter('body')[0].contentWindow;

        q = function q() {
          return a(n.document[c][l]);
        };

        o = function o(u, s) {
          if (u !== s) {
            var t = n.document;
            t.open().close();
            t[c].hash = '#' + u;
          }
        };

        o(a());
      }
    }

    m.start = function () {
      if (r) {
        return;
      }

      var t = a();
      o || p();

      (function s() {
        var v = a(),
            u = q(t);

        if (v !== t) {
          o(t = v, u);
          $(i).trigger(d);
        } else {
          if (u !== t) {
            i[c][l] = i[c][l].replace(/#.*/, '') + '#' + u;
          }
        }

        r = setTimeout(s, $[d + 'Delay']);
      })();
    };

    m.stop = function () {
      if (!n) {
        r && clearTimeout(r);
        r = 0;
      }
    };

    return m;
  }();
})(jQuery, window);

/***/ }),

/***/ "./src/js/main/jquery/lib/jquery.min.js":
/*!**********************************************!*\
  !*** ./src/js/main/jquery/lib/jquery.min.js ***!
  \**********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es7.symbol.async-iterator */ "./node_modules/core-js/modules/es7.symbol.async-iterator.js");
/* harmony import */ var core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.symbol */ "./node_modules/core-js/modules/es6.symbol.js");
/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_string_sub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.string.sub */ "./node_modules/core-js/modules/es6.string.sub.js");
/* harmony import */ var core_js_modules_es6_string_sub__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_sub__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es6.regexp.constructor */ "./node_modules/core-js/modules/es6.regexp.constructor.js");
/* harmony import */ var core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es6.regexp.match */ "./node_modules/core-js/modules/es6.regexp.match.js");
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es6.function.name */ "./node_modules/core-js/modules/es6.function.name.js");
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es6.array.sort */ "./node_modules/core-js/modules/es6.array.sort.js");
/* harmony import */ var core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es6.regexp.to-string */ "./node_modules/core-js/modules/es6.regexp.to-string.js");
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es6.regexp.replace */ "./node_modules/core-js/modules/es6.regexp.replace.js");
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es6.regexp.split */ "./node_modules/core-js/modules/es6.regexp.split.js");
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_10__);














function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*! jQuery v1.8.2 jquery.com | jquery.org/license */
(function (a, b) {
  function G(a) {
    var b = F[a] = {};
    return p.each(a.split(s), function (a, c) {
      b[c] = !0;
    }), b;
  }

  function J(a, c, d) {
    if (d === b && a.nodeType === 1) {
      var e = 'data-' + c.replace(I, '-$1').toLowerCase();
      d = a.getAttribute(e);

      if (typeof d == 'string') {
        try {
          d = d === 'true' ? !0 : d === 'false' ? !1 : d === 'null' ? null : +d + '' === d ? +d : H.test(d) ? p.parseJSON(d) : d;
        } catch (f) {}

        p.data(a, c, d);
      } else d = b;
    }

    return d;
  }

  function K(a) {
    var b;

    for (b in a) {
      if (b === 'data' && p.isEmptyObject(a[b])) continue;
      if (b !== 'toJSON') return !1;
    }

    return !0;
  }

  function ba() {
    return !1;
  }

  function bb() {
    return !0;
  }

  function bh(a) {
    return !a || !a.parentNode || a.parentNode.nodeType === 11;
  }

  function bi(a, b) {
    do {
      a = a[b];
    } while (a && a.nodeType !== 1);

    return a;
  }

  function bj(a, b, c) {
    b = b || 0;
    if (p.isFunction(b)) return p.grep(a, function (a, d) {
      var e = !!b.call(a, d, a);
      return e === c;
    });
    if (b.nodeType) return p.grep(a, function (a, d) {
      return a === b === c;
    });

    if (typeof b == 'string') {
      var d = p.grep(a, function (a) {
        return a.nodeType === 1;
      });
      if (be.test(b)) return p.filter(b, d, !c);
      b = p.filter(b, d);
    }

    return p.grep(a, function (a, d) {
      return p.inArray(a, b) >= 0 === c;
    });
  }

  function bk(a) {
    var b = bl.split('|'),
        c = a.createDocumentFragment();
    if (c.createElement) while (b.length) {
      c.createElement(b.pop());
    }
    return c;
  }

  function bC(a, b) {
    return a.getElementsByTagName(b)[0] || a.appendChild(a.ownerDocument.createElement(b));
  }

  function bD(a, b) {
    if (b.nodeType !== 1 || !p.hasData(a)) return;

    var c,
        d,
        e,
        f = p._data(a),
        g = p._data(b, f),
        h = f.events;

    if (h) {
      delete g.handle, g.events = {};

      for (c in h) {
        for (d = 0, e = h[c].length; d < e; d++) {
          p.event.add(b, c, h[c][d]);
        }
      }
    }

    g.data && (g.data = p.extend({}, g.data));
  }

  function bE(a, b) {
    var c;
    if (b.nodeType !== 1) return;
    b.clearAttributes && b.clearAttributes(), b.mergeAttributes && b.mergeAttributes(a), c = b.nodeName.toLowerCase(), c === 'object' ? (b.parentNode && (b.outerHTML = a.outerHTML), p.support.html5Clone && a.innerHTML && !p.trim(b.innerHTML) && (b.innerHTML = a.innerHTML)) : c === 'input' && bv.test(a.type) ? (b.defaultChecked = b.checked = a.checked, b.value !== a.value && (b.value = a.value)) : c === 'option' ? b.selected = a.defaultSelected : c === 'input' || c === 'textarea' ? b.defaultValue = a.defaultValue : c === 'script' && b.text !== a.text && (b.text = a.text), b.removeAttribute(p.expando);
  }

  function bF(a) {
    return typeof a.getElementsByTagName != 'undefined' ? a.getElementsByTagName('*') : typeof a.querySelectorAll != 'undefined' ? a.querySelectorAll('*') : [];
  }

  function bG(a) {
    bv.test(a.type) && (a.defaultChecked = a.checked);
  }

  function bY(a, b) {
    if (b in a) return b;
    var c = b.charAt(0).toUpperCase() + b.slice(1),
        d = b,
        e = bW.length;

    while (e--) {
      b = bW[e] + c;
      if (b in a) return b;
    }

    return d;
  }

  function bZ(a, b) {
    return a = b || a, p.css(a, 'display') === 'none' || !p.contains(a.ownerDocument, a);
  }

  function b$(a, b) {
    var c,
        d,
        e = [],
        f = 0,
        g = a.length;

    for (; f < g; f++) {
      c = a[f];
      if (!c.style) continue;
      e[f] = p._data(c, 'olddisplay'), b ? (!e[f] && c.style.display === 'none' && (c.style.display = ''), c.style.display === '' && bZ(c) && (e[f] = p._data(c, 'olddisplay', cc(c.nodeName)))) : (d = bH(c, 'display'), !e[f] && d !== 'none' && p._data(c, 'olddisplay', d));
    }

    for (f = 0; f < g; f++) {
      c = a[f];
      if (!c.style) continue;
      if (!b || c.style.display === 'none' || c.style.display === '') c.style.display = b ? e[f] || '' : 'none';
    }

    return a;
  }

  function b_(a, b, c) {
    var d = bP.exec(b);
    return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || 'px') : b;
  }

  function ca(a, b, c, d) {
    var e = c === (d ? 'border' : 'content') ? 4 : b === 'width' ? 1 : 0,
        f = 0;

    for (; e < 4; e += 2) {
      c === 'margin' && (f += p.css(a, c + bV[e], !0)), d ? (c === 'content' && (f -= parseFloat(bH(a, 'padding' + bV[e])) || 0), c !== 'margin' && (f -= parseFloat(bH(a, 'border' + bV[e] + 'Width')) || 0)) : (f += parseFloat(bH(a, 'padding' + bV[e])) || 0, c !== 'padding' && (f += parseFloat(bH(a, 'border' + bV[e] + 'Width')) || 0));
    }

    return f;
  }

  function cb(a, b, c) {
    var d = b === 'width' ? a.offsetWidth : a.offsetHeight,
        e = !0,
        f = p.support.boxSizing && p.css(a, 'boxSizing') === 'border-box';

    if (d <= 0 || d == null) {
      d = bH(a, b);
      if (d < 0 || d == null) d = a.style[b];
      if (bQ.test(d)) return d;
      e = f && (p.support.boxSizingReliable || d === a.style[b]), d = parseFloat(d) || 0;
    }

    return d + ca(a, b, c || (f ? 'border' : 'content'), e) + 'px';
  }

  function cc(a) {
    if (bS[a]) return bS[a];
    var b = p('<' + a + '>').appendTo(e.body),
        c = b.css('display');
    b.remove();

    if (c === 'none' || c === '') {
      bI = e.body.appendChild(bI || p.extend(e.createElement('iframe'), {
        frameBorder: 0,
        width: 0,
        height: 0
      }));
      if (!bJ || !bI.createElement) bJ = (bI.contentWindow || bI.contentDocument).document, bJ.write('<!doctype html><html><body>'), bJ.close();
      b = bJ.body.appendChild(bJ.createElement(a)), c = bH(b, 'display'), e.body.removeChild(bI);
    }

    return bS[a] = c, c;
  }

  function ci(a, b, c, d) {
    var e;
    if (p.isArray(b)) p.each(b, function (b, e) {
      c || ce.test(a) ? d(a, e) : ci(a + '[' + (_typeof(e) == 'object' ? b : '') + ']', e, c, d);
    });else if (!c && p.type(b) === 'object') for (e in b) {
      ci(a + '[' + e + ']', b[e], c, d);
    } else d(a, b);
  }

  function cz(a) {
    return function (b, c) {
      typeof b != 'string' && (c = b, b = '*');
      var d,
          e,
          f,
          g = b.toLowerCase().split(s),
          h = 0,
          i = g.length;
      if (p.isFunction(c)) for (; h < i; h++) {
        d = g[h], f = /^\+/.test(d), f && (d = d.substr(1) || '*'), e = a[d] = a[d] || [], e[f ? 'unshift' : 'push'](c);
      }
    };
  }

  function cA(a, c, d, e, f, g) {
    f = f || c.dataTypes[0], g = g || {}, g[f] = !0;
    var h,
        i = a[f],
        j = 0,
        k = i ? i.length : 0,
        l = a === cv;

    for (; j < k && (l || !h); j++) {
      h = i[j](c, d, e), typeof h == 'string' && (!l || g[h] ? h = b : (c.dataTypes.unshift(h), h = cA(a, c, d, e, h, g)));
    }

    return (l || !h) && !g['*'] && (h = cA(a, c, d, e, '*', g)), h;
  }

  function cB(a, c) {
    var d,
        e,
        f = p.ajaxSettings.flatOptions || {};

    for (d in c) {
      c[d] !== b && ((f[d] ? a : e || (e = {}))[d] = c[d]);
    }

    e && p.extend(!0, a, e);
  }

  function cC(a, c, d) {
    var e,
        f,
        g,
        h,
        i = a.contents,
        j = a.dataTypes,
        k = a.responseFields;

    for (f in k) {
      f in d && (c[k[f]] = d[f]);
    }

    while (j[0] === '*') {
      j.shift(), e === b && (e = a.mimeType || c.getResponseHeader('content-type'));
    }

    if (e) for (f in i) {
      if (i[f] && i[f].test(e)) {
        j.unshift(f);
        break;
      }
    }
    if (j[0] in d) g = j[0];else {
      for (f in d) {
        if (!j[0] || a.converters[f + ' ' + j[0]]) {
          g = f;
          break;
        }

        h || (h = f);
      }

      g = g || h;
    }
    if (g) return g !== j[0] && j.unshift(g), d[g];
  }

  function cD(a, b) {
    var c,
        d,
        e,
        f,
        g = a.dataTypes.slice(),
        h = g[0],
        i = {},
        j = 0;
    a.dataFilter && (b = a.dataFilter(b, a.dataType));
    if (g[1]) for (c in a.converters) {
      i[c.toLowerCase()] = a.converters[c];
    }

    for (; e = g[++j];) {
      if (e !== '*') {
        if (h !== '*' && h !== e) {
          c = i[h + ' ' + e] || i['* ' + e];
          if (!c) for (d in i) {
            f = d.split(' ');

            if (f[1] === e) {
              c = i[h + ' ' + f[0]] || i['* ' + f[0]];

              if (c) {
                c === !0 ? c = i[d] : i[d] !== !0 && (e = f[0], g.splice(j--, 0, e));
                break;
              }
            }
          }
          if (c !== !0) if (c && a['throws']) b = c(b);else try {
            b = c(b);
          } catch (k) {
            return {
              state: 'parsererror',
              error: c ? k : 'No conversion from ' + h + ' to ' + e
            };
          }
        }

        h = e;
      }
    }

    return {
      state: 'success',
      data: b
    };
  }

  function cL() {
    try {
      return new a.XMLHttpRequest();
    } catch (b) {}
  }

  function cM() {
    try {
      return new a.ActiveXObject('Microsoft.XMLHTTP');
    } catch (b) {}
  }

  function cU() {
    return setTimeout(function () {
      cN = b;
    }, 0), cN = p.now();
  }

  function cV(a, b) {
    p.each(b, function (b, c) {
      var d = (cT[b] || []).concat(cT['*']),
          e = 0,
          f = d.length;

      for (; e < f; e++) {
        if (d[e].call(a, b, c)) return;
      }
    });
  }

  function cW(a, b, c) {
    var d,
        e = 0,
        f = 0,
        g = cS.length,
        h = p.Deferred().always(function () {
      delete i.elem;
    }),
        i = function i() {
      var b = cN || cU(),
          c = Math.max(0, j.startTime + j.duration - b),
          d = 1 - (c / j.duration || 0),
          e = 0,
          f = j.tweens.length;

      for (; e < f; e++) {
        j.tweens[e].run(d);
      }

      return h.notifyWith(a, [j, d, c]), d < 1 && f ? c : (h.resolveWith(a, [j]), !1);
    },
        j = h.promise({
      elem: a,
      props: p.extend({}, b),
      opts: p.extend(!0, {
        specialEasing: {}
      }, c),
      originalProperties: b,
      originalOptions: c,
      startTime: cN || cU(),
      duration: c.duration,
      tweens: [],
      createTween: function createTween(b, c, d) {
        var e = p.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);
        return j.tweens.push(e), e;
      },
      stop: function stop(b) {
        var c = 0,
            d = b ? j.tweens.length : 0;

        for (; c < d; c++) {
          j.tweens[c].run(1);
        }

        return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this;
      }
    }),
        k = j.props;

    cX(k, j.opts.specialEasing);

    for (; e < g; e++) {
      d = cS[e].call(j, a, k, j.opts);
      if (d) return d;
    }

    return cV(j, k), p.isFunction(j.opts.start) && j.opts.start.call(a, j), p.fx.timer(p.extend(i, {
      anim: j,
      queue: j.opts.queue,
      elem: a
    })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);
  }

  function cX(a, b) {
    var c, d, e, f, g;

    for (c in a) {
      d = p.camelCase(c), e = b[d], f = a[c], p.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = p.cssHooks[d];

      if (g && 'expand' in g) {
        f = g.expand(f), delete a[d];

        for (c in f) {
          c in a || (a[c] = f[c], b[c] = e);
        }
      } else b[d] = e;
    }
  }

  function cY(a, b, c) {
    var d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l = this,
        m = a.style,
        n = {},
        o = [],
        q = a.nodeType && bZ(a);
    c.queue || (j = p._queueHooks(a, 'fx'), j.unqueued == null && (j.unqueued = 0, k = j.empty.fire, j.empty.fire = function () {
      j.unqueued || k();
    }), j.unqueued++, l.always(function () {
      l.always(function () {
        j.unqueued--, p.queue(a, 'fx').length || j.empty.fire();
      });
    })), a.nodeType === 1 && ('height' in b || 'width' in b) && (c.overflow = [m.overflow, m.overflowX, m.overflowY], p.css(a, 'display') === 'inline' && p.css(a, 'float') === 'none' && (!p.support.inlineBlockNeedsLayout || cc(a.nodeName) === 'inline' ? m.display = 'inline-block' : m.zoom = 1)), c.overflow && (m.overflow = 'hidden', p.support.shrinkWrapBlocks || l.done(function () {
      m.overflow = c.overflow[0], m.overflowX = c.overflow[1], m.overflowY = c.overflow[2];
    }));

    for (d in b) {
      f = b[d];

      if (cP.exec(f)) {
        delete b[d];
        if (f === (q ? 'hide' : 'show')) continue;
        o.push(d);
      }
    }

    g = o.length;

    if (g) {
      h = p._data(a, 'fxshow') || p._data(a, 'fxshow', {}), q ? p(a).show() : l.done(function () {
        p(a).hide();
      }), l.done(function () {
        var b;
        p.removeData(a, 'fxshow', !0);

        for (b in n) {
          p.style(a, b, n[b]);
        }
      });

      for (d = 0; d < g; d++) {
        e = o[d], i = l.createTween(e, q ? h[e] : 0), n[e] = h[e] || p.style(a, e), e in h || (h[e] = i.start, q && (i.end = i.start, i.start = e === 'width' || e === 'height' ? 1 : 0));
      }
    }
  }

  function cZ(a, b, c, d, e) {
    return new cZ.prototype.init(a, b, c, d, e);
  }

  function c$(a, b) {
    var c,
        d = {
      height: a
    },
        e = 0;
    b = b ? 1 : 0;

    for (; e < 4; e += 2 - b) {
      c = bV[e], d['margin' + c] = d['padding' + c] = a;
    }

    return b && (d.opacity = d.width = a), d;
  }

  function da(a) {
    return p.isWindow(a) ? a : a.nodeType === 9 ? a.defaultView || a.parentWindow : !1;
  }

  var c,
      d,
      e = a.document,
      f = a.location,
      g = a.navigator,
      h = a.jQuery,
      i = a.$,
      j = Array.prototype.push,
      k = Array.prototype.slice,
      l = Array.prototype.indexOf,
      m = Object.prototype.toString,
      n = Object.prototype.hasOwnProperty,
      o = String.prototype.trim,
      p = function p(a, b) {
    return new p.fn.init(a, b, c);
  },
      q = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,
      r = /\S/,
      s = /\s+/,
      t = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
      u = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,
      v = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
      w = /^[\],:{}\s]*$/,
      x = /(?:^|:|,)(?:\s*\[)+/g,
      y = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
      z = /"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,
      A = /^-ms-/,
      B = /-([\da-z])/gi,
      C = function C(a, b) {
    return (b + '').toUpperCase();
  },
      D = function D() {
    e.addEventListener ? (e.removeEventListener('DOMContentLoaded', D, !1), p.ready()) : e.readyState === 'complete' && (e.detachEvent('onreadystatechange', D), p.ready());
  },
      E = {};

  p.fn = p.prototype = {
    constructor: p,
    init: function init(a, c, d) {
      var f, g, h, i;
      if (!a) return this;
      if (a.nodeType) return this.context = this[0] = a, this.length = 1, this;

      if (typeof a == 'string') {
        a.charAt(0) === '<' && a.charAt(a.length - 1) === '>' && a.length >= 3 ? f = [null, a, null] : f = u.exec(a);

        if (f && (f[1] || !c)) {
          if (f[1]) return c = c instanceof p ? c[0] : c, i = c && c.nodeType ? c.ownerDocument || c : e, a = p.parseHTML(f[1], i, !0), v.test(f[1]) && p.isPlainObject(c) && this.attr.call(a, c, !0), p.merge(this, a);
          g = e.getElementById(f[2]);

          if (g && g.parentNode) {
            if (g.id !== f[2]) return d.find(a);
            this.length = 1, this[0] = g;
          }

          return this.context = e, this.selector = a, this;
        }

        return !c || c.jquery ? (c || d).find(a) : this.constructor(c).find(a);
      }

      return p.isFunction(a) ? d.ready(a) : (a.selector !== b && (this.selector = a.selector, this.context = a.context), p.makeArray(a, this));
    },
    selector: '',
    jquery: '1.8.2',
    length: 0,
    size: function size() {
      return this.length;
    },
    toArray: function toArray() {
      return k.call(this);
    },
    get: function get(a) {
      return a == null ? this.toArray() : a < 0 ? this[this.length + a] : this[a];
    },
    pushStack: function pushStack(a, b, c) {
      var d = p.merge(this.constructor(), a);
      return d.prevObject = this, d.context = this.context, b === 'find' ? d.selector = this.selector + (this.selector ? ' ' : '') + c : b && (d.selector = this.selector + '.' + b + '(' + c + ')'), d;
    },
    each: function each(a, b) {
      return p.each(this, a, b);
    },
    ready: function ready(a) {
      return p.ready.promise().done(a), this;
    },
    eq: function eq(a) {
      return a = +a, a === -1 ? this.slice(a) : this.slice(a, a + 1);
    },
    first: function first() {
      return this.eq(0);
    },
    last: function last() {
      return this.eq(-1);
    },
    slice: function slice() {
      return this.pushStack(k.apply(this, arguments), 'slice', k.call(arguments).join(','));
    },
    map: function map(a) {
      return this.pushStack(p.map(this, function (b, c) {
        return a.call(b, c, b);
      }));
    },
    end: function end() {
      return this.prevObject || this.constructor(null);
    },
    push: j,
    sort: [].sort,
    splice: [].splice
  }, p.fn.init.prototype = p.fn, p.extend = p.fn.extend = function () {
    var a,
        c,
        d,
        e,
        f,
        g,
        h = arguments[0] || {},
        i = 1,
        j = arguments.length,
        k = !1;
    typeof h == 'boolean' && (k = h, h = arguments[1] || {}, i = 2), _typeof(h) != 'object' && !p.isFunction(h) && (h = {}), j === i && (h = this, --i);

    for (; i < j; i++) {
      if ((a = arguments[i]) != null) for (c in a) {
        d = h[c], e = a[c];
        if (h === e) continue;
        k && e && (p.isPlainObject(e) || (f = p.isArray(e))) ? (f ? (f = !1, g = d && p.isArray(d) ? d : []) : g = d && p.isPlainObject(d) ? d : {}, h[c] = p.extend(k, g, e)) : e !== b && (h[c] = e);
      }
    }

    return h;
  }, p.extend({
    noConflict: function noConflict(b) {
      return a.$ === p && (a.$ = i), b && a.jQuery === p && (a.jQuery = h), p;
    },
    isReady: !1,
    readyWait: 1,
    holdReady: function holdReady(a) {
      a ? p.readyWait++ : p.ready(!0);
    },
    ready: function ready(a) {
      if (a === !0 ? --p.readyWait : p.isReady) return;
      if (!e.body) return setTimeout(p.ready, 1);
      p.isReady = !0;
      if (a !== !0 && --p.readyWait > 0) return;
      d.resolveWith(e, [p]), p.fn.trigger && p(e).trigger('ready').off('ready');
    },
    isFunction: function isFunction(a) {
      return p.type(a) === 'function';
    },
    isArray: Array.isArray || function (a) {
      return p.type(a) === 'array';
    },
    isWindow: function isWindow(a) {
      return a != null && a == a.window;
    },
    isNumeric: function isNumeric(a) {
      return !isNaN(parseFloat(a)) && isFinite(a);
    },
    type: function type(a) {
      return a == null ? String(a) : E[m.call(a)] || 'object';
    },
    isPlainObject: function isPlainObject(a) {
      if (!a || p.type(a) !== 'object' || a.nodeType || p.isWindow(a)) return !1;

      try {
        if (a.constructor && !n.call(a, 'constructor') && !n.call(a.constructor.prototype, 'isPrototypeOf')) return !1;
      } catch (c) {
        return !1;
      }

      var d;

      for (d in a) {
        ;
      }

      return d === b || n.call(a, d);
    },
    isEmptyObject: function isEmptyObject(a) {
      var b;

      for (b in a) {
        return !1;
      }

      return !0;
    },
    error: function error(a) {
      throw new Error(a);
    },
    parseHTML: function parseHTML(a, b, c) {
      var d;
      return !a || typeof a != 'string' ? null : (typeof b == 'boolean' && (c = b, b = 0), b = b || e, (d = v.exec(a)) ? [b.createElement(d[1])] : (d = p.buildFragment([a], b, c ? null : []), p.merge([], (d.cacheable ? p.clone(d.fragment) : d.fragment).childNodes)));
    },
    parseJSON: function parseJSON(b) {
      if (!b || typeof b != 'string') return null;
      b = p.trim(b);
      if (a.JSON && a.JSON.parse) return a.JSON.parse(b);
      if (w.test(b.replace(y, '@').replace(z, ']').replace(x, ''))) return new Function('return ' + b)();
      p.error('Invalid JSON: ' + b);
    },
    parseXML: function parseXML(c) {
      var d, e;
      if (!c || typeof c != 'string') return null;

      try {
        a.DOMParser ? (e = new DOMParser(), d = e.parseFromString(c, 'text/xml')) : (d = new ActiveXObject('Microsoft.XMLDOM'), d.async = 'false', d.loadXML(c));
      } catch (f) {
        d = b;
      }

      return (!d || !d.documentElement || d.getElementsByTagName('parsererror').length) && p.error('Invalid XML: ' + c), d;
    },
    noop: function noop() {},
    globalEval: function globalEval(b) {
      b && r.test(b) && (a.execScript || function (b) {
        a.eval.call(a, b);
      })(b);
    },
    camelCase: function camelCase(a) {
      return a.replace(A, 'ms-').replace(B, C);
    },
    nodeName: function nodeName(a, b) {
      return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
    },
    each: function each(a, c, d) {
      var e,
          f = 0,
          g = a.length,
          h = g === b || p.isFunction(a);

      if (d) {
        if (h) {
          for (e in a) {
            if (c.apply(a[e], d) === !1) break;
          }
        } else for (; f < g;) {
          if (c.apply(a[f++], d) === !1) break;
        }
      } else if (h) {
        for (e in a) {
          if (c.call(a[e], e, a[e]) === !1) break;
        }
      } else for (; f < g;) {
        if (c.call(a[f], f, a[f++]) === !1) break;
      }

      return a;
    },
    trim: o && !o.call('﻿ ') ? function (a) {
      return a == null ? '' : o.call(a);
    } : function (a) {
      return a == null ? '' : (a + '').replace(t, '');
    },
    makeArray: function makeArray(a, b) {
      var c,
          d = b || [];
      return a != null && (c = p.type(a), a.length == null || c === 'string' || c === 'function' || c === 'regexp' || p.isWindow(a) ? j.call(d, a) : p.merge(d, a)), d;
    },
    inArray: function inArray(a, b, c) {
      var d;

      if (b) {
        if (l) return l.call(b, a, c);
        d = b.length, c = c ? c < 0 ? Math.max(0, d + c) : c : 0;

        for (; c < d; c++) {
          if (c in b && b[c] === a) return c;
        }
      }

      return -1;
    },
    merge: function merge(a, c) {
      var d = c.length,
          e = a.length,
          f = 0;
      if (typeof d == 'number') for (; f < d; f++) {
        a[e++] = c[f];
      } else while (c[f] !== b) {
        a[e++] = c[f++];
      }
      return a.length = e, a;
    },
    grep: function grep(a, b, c) {
      var d,
          e = [],
          f = 0,
          g = a.length;
      c = !!c;

      for (; f < g; f++) {
        d = !!b(a[f], f), c !== d && e.push(a[f]);
      }

      return e;
    },
    map: function map(a, c, d) {
      var e,
          f,
          g = [],
          h = 0,
          i = a.length,
          j = a instanceof p || i !== b && typeof i == 'number' && (i > 0 && a[0] && a[i - 1] || i === 0 || p.isArray(a));
      if (j) for (; h < i; h++) {
        e = c(a[h], h, d), e != null && (g[g.length] = e);
      } else for (f in a) {
        e = c(a[f], f, d), e != null && (g[g.length] = e);
      }
      return g.concat.apply([], g);
    },
    guid: 1,
    proxy: function proxy(a, c) {
      var d, e, f;
      return typeof c == 'string' && (d = a[c], c = a, a = d), p.isFunction(a) ? (e = k.call(arguments, 2), f = function f() {
        return a.apply(c, e.concat(k.call(arguments)));
      }, f.guid = a.guid = a.guid || p.guid++, f) : b;
    },
    access: function access(a, c, d, e, f, g, h) {
      var i,
          j = d == null,
          k = 0,
          l = a.length;

      if (d && _typeof(d) == 'object') {
        for (k in d) {
          p.access(a, c, k, d[k], 1, g, e);
        }

        f = 1;
      } else if (e !== b) {
        i = h === b && p.isFunction(e), j && (i ? (i = c, c = function c(a, b, _c) {
          return i.call(p(a), _c);
        }) : (c.call(a, e), c = null));
        if (c) for (; k < l; k++) {
          c(a[k], d, i ? e.call(a[k], k, c(a[k], d)) : e, h);
        }
        f = 1;
      }

      return f ? a : j ? c.call(a) : l ? c(a[0], d) : g;
    },
    now: function now() {
      return new Date().getTime();
    }
  }), p.ready.promise = function (b) {
    if (!d) {
      d = p.Deferred();
      if (e.readyState === 'complete') setTimeout(p.ready, 1);else if (e.addEventListener) e.addEventListener('DOMContentLoaded', D, !1), a.addEventListener('load', p.ready, !1);else {
        e.attachEvent('onreadystatechange', D), a.attachEvent('onload', p.ready);
        var c = !1;

        try {
          c = a.frameElement == null && e.documentElement;
        } catch (f) {}

        c && c.doScroll && function g() {
          if (!p.isReady) {
            try {
              c.doScroll('left');
            } catch (a) {
              return setTimeout(g, 50);
            }

            p.ready();
          }
        }();
      }
    }

    return d.promise(b);
  }, p.each('Boolean Number String Function Array Date RegExp Object'.split(' '), function (a, b) {
    E['[object ' + b + ']'] = b.toLowerCase();
  }), c = p(e);
  var F = {};
  p.Callbacks = function (a) {
    a = typeof a == 'string' ? F[a] || G(a) : p.extend({}, a);

    var c,
        d,
        e,
        f,
        g,
        h,
        i = [],
        j = !a.once && [],
        k = function k(b) {
      c = a.memory && b, d = !0, h = f || 0, f = 0, g = i.length, e = !0;

      for (; i && h < g; h++) {
        if (i[h].apply(b[0], b[1]) === !1 && a.stopOnFalse) {
          c = !1;
          break;
        }
      }

      e = !1, i && (j ? j.length && k(j.shift()) : c ? i = [] : l.disable());
    },
        l = {
      add: function add() {
        if (i) {
          var b = i.length;
          (function d(b) {
            p.each(b, function (b, c) {
              var e = p.type(c);
              e === 'function' && (!a.unique || !l.has(c)) ? i.push(c) : c && c.length && e !== 'string' && d(c);
            });
          })(arguments), e ? g = i.length : c && (f = b, k(c));
        }

        return this;
      },
      remove: function remove() {
        return i && p.each(arguments, function (a, b) {
          var c;

          while ((c = p.inArray(b, i, c)) > -1) {
            i.splice(c, 1), e && (c <= g && g--, c <= h && h--);
          }
        }), this;
      },
      has: function has(a) {
        return p.inArray(a, i) > -1;
      },
      empty: function empty() {
        return i = [], this;
      },
      disable: function disable() {
        return i = j = c = b, this;
      },
      disabled: function disabled() {
        return !i;
      },
      lock: function lock() {
        return j = b, c || l.disable(), this;
      },
      locked: function locked() {
        return !j;
      },
      fireWith: function fireWith(a, b) {
        return b = b || [], b = [a, b.slice ? b.slice() : b], i && (!d || j) && (e ? j.push(b) : k(b)), this;
      },
      fire: function fire() {
        return l.fireWith(this, arguments), this;
      },
      fired: function fired() {
        return !!d;
      }
    };

    return l;
  }, p.extend({
    Deferred: function Deferred(a) {
      var b = [['resolve', 'done', p.Callbacks('once memory'), 'resolved'], ['reject', 'fail', p.Callbacks('once memory'), 'rejected'], ['notify', 'progress', p.Callbacks('memory')]],
          c = 'pending',
          d = {
        state: function state() {
          return c;
        },
        always: function always() {
          return e.done(arguments).fail(arguments), this;
        },
        then: function then() {
          var a = arguments;
          return p.Deferred(function (c) {
            p.each(b, function (b, d) {
              var f = d[0],
                  g = a[b];
              e[d[1]](p.isFunction(g) ? function () {
                var a = g.apply(this, arguments);
                a && p.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f + 'With'](this === e ? c : this, [a]);
              } : c[f]);
            }), a = null;
          }).promise();
        },
        promise: function promise(a) {
          return a != null ? p.extend(a, d) : d;
        }
      },
          e = {};
      return d.pipe = d.then, p.each(b, function (a, f) {
        var g = f[2],
            h = f[3];
        d[f[1]] = g.add, h && g.add(function () {
          c = h;
        }, b[a ^ 1][2].disable, b[2][2].lock), e[f[0]] = g.fire, e[f[0] + 'With'] = g.fireWith;
      }), d.promise(e), a && a.call(e, e), e;
    },
    when: function when(a) {
      var b = 0,
          c = k.call(arguments),
          d = c.length,
          e = d !== 1 || a && p.isFunction(a.promise) ? d : 0,
          f = e === 1 ? a : p.Deferred(),
          g = function g(a, b, c) {
        return function (d) {
          b[a] = this, c[a] = arguments.length > 1 ? k.call(arguments) : d, c === h ? f.notifyWith(b, c) : --e || f.resolveWith(b, c);
        };
      },
          h,
          i,
          j;

      if (d > 1) {
        h = new Array(d), i = new Array(d), j = new Array(d);

        for (; b < d; b++) {
          c[b] && p.isFunction(c[b].promise) ? c[b].promise().done(g(b, j, c)).fail(f.reject).progress(g(b, i, h)) : --e;
        }
      }

      return e || f.resolveWith(j, c), f.promise();
    }
  }), p.support = function () {
    var b,
        c,
        d,
        f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        n = e.createElement('div');
    n.setAttribute('className', 't'), n.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", c = n.getElementsByTagName('*'), d = n.getElementsByTagName('a')[0], d.style.cssText = 'top:1px;float:left;opacity:.5';
    if (!c || !c.length) return {};
    f = e.createElement('select'), g = f.appendChild(e.createElement('option')), h = n.getElementsByTagName('input')[0], b = {
      leadingWhitespace: n.firstChild.nodeType === 3,
      tbody: !n.getElementsByTagName('tbody').length,
      htmlSerialize: !!n.getElementsByTagName('link').length,
      style: /top/.test(d.getAttribute('style')),
      hrefNormalized: d.getAttribute('href') === '/a',
      opacity: /^0.5/.test(d.style.opacity),
      cssFloat: !!d.style.cssFloat,
      checkOn: h.value === 'on',
      optSelected: g.selected,
      getSetAttribute: n.className !== 't',
      enctype: !!e.createElement('form').enctype,
      html5Clone: e.createElement('nav').cloneNode(!0).outerHTML !== '<:nav></:nav>',
      boxModel: e.compatMode === 'CSS1Compat',
      submitBubbles: !0,
      changeBubbles: !0,
      focusinBubbles: !1,
      deleteExpando: !0,
      noCloneEvent: !0,
      inlineBlockNeedsLayout: !1,
      shrinkWrapBlocks: !1,
      reliableMarginRight: !0,
      boxSizingReliable: !0,
      pixelPosition: !1
    }, h.checked = !0, b.noCloneChecked = h.cloneNode(!0).checked, f.disabled = !0, b.optDisabled = !g.disabled;

    try {
      delete n.test;
    } catch (o) {
      b.deleteExpando = !1;
    }

    !n.addEventListener && n.attachEvent && n.fireEvent && (n.attachEvent('onclick', m = function m() {
      b.noCloneEvent = !1;
    }), n.cloneNode(!0).fireEvent('onclick'), n.detachEvent('onclick', m)), h = e.createElement('input'), h.value = 't', h.setAttribute('type', 'radio'), b.radioValue = h.value === 't', h.setAttribute('checked', 'checked'), h.setAttribute('name', 't'), n.appendChild(h), i = e.createDocumentFragment(), i.appendChild(n.lastChild), b.checkClone = i.cloneNode(!0).cloneNode(!0).lastChild.checked, b.appendChecked = h.checked, i.removeChild(h), i.appendChild(n);
    if (n.attachEvent) for (k in {
      submit: !0,
      change: !0,
      focusin: !0
    }) {
      j = 'on' + k, l = j in n, l || (n.setAttribute(j, 'return;'), l = typeof n[j] == 'function'), b[k + 'Bubbles'] = l;
    }
    return p(function () {
      var c,
          d,
          f,
          g,
          h = 'padding:0;margin:0;border:0;display:block;overflow:hidden;',
          i = e.getElementsByTagName('body')[0];
      if (!i) return;
      c = e.createElement('div'), c.style.cssText = 'visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px', i.insertBefore(c, i.firstChild), d = e.createElement('div'), c.appendChild(d), d.innerHTML = '<table><tr><td></td><td>t</td></tr></table>', f = d.getElementsByTagName('td'), f[0].style.cssText = 'padding:0;margin:0;border:0;display:none', l = f[0].offsetHeight === 0, f[0].style.display = '', f[1].style.display = 'none', b.reliableHiddenOffsets = l && f[0].offsetHeight === 0, d.innerHTML = '', d.style.cssText = 'box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;', b.boxSizing = d.offsetWidth === 4, b.doesNotIncludeMarginInBodyOffset = i.offsetTop !== 1, a.getComputedStyle && (b.pixelPosition = (a.getComputedStyle(d, null) || {}).top !== '1%', b.boxSizingReliable = (a.getComputedStyle(d, null) || {
        width: '4px'
      }).width === '4px', g = e.createElement('div'), g.style.cssText = d.style.cssText = h, g.style.marginRight = g.style.width = '0', d.style.width = '1px', d.appendChild(g), b.reliableMarginRight = !parseFloat((a.getComputedStyle(g, null) || {}).marginRight)), typeof d.style.zoom != 'undefined' && (d.innerHTML = '', d.style.cssText = h + 'width:1px;padding:1px;display:inline;zoom:1', b.inlineBlockNeedsLayout = d.offsetWidth === 3, d.style.display = 'block', d.style.overflow = 'visible', d.innerHTML = '<div></div>', d.firstChild.style.width = '5px', b.shrinkWrapBlocks = d.offsetWidth !== 3, c.style.zoom = 1), i.removeChild(c), c = d = f = g = null;
    }), i.removeChild(n), c = d = f = g = h = i = n = null, b;
  }();
  var H = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
      I = /([A-Z])/g;
  p.extend({
    cache: {},
    deletedIds: [],
    uuid: 0,
    expando: 'jQuery' + (p.fn.jquery + Math.random()).replace(/\D/g, ''),
    noData: {
      embed: !0,
      object: 'clsid:D27CDB6E-AE6D-11cf-96B8-444553540000',
      applet: !0
    },
    hasData: function hasData(a) {
      return a = a.nodeType ? p.cache[a[p.expando]] : a[p.expando], !!a && !K(a);
    },
    data: function data(a, c, d, e) {
      if (!p.acceptData(a)) return;
      var f,
          g,
          h = p.expando,
          i = typeof c == 'string',
          j = a.nodeType,
          k = j ? p.cache : a,
          l = j ? a[h] : a[h] && h;
      if ((!l || !k[l] || !e && !k[l].data) && i && d === b) return;
      l || (j ? a[h] = l = p.deletedIds.pop() || p.guid++ : l = h), k[l] || (k[l] = {}, j || (k[l].toJSON = p.noop));
      if (_typeof(c) == 'object' || typeof c == 'function') e ? k[l] = p.extend(k[l], c) : k[l].data = p.extend(k[l].data, c);
      return f = k[l], e || (f.data || (f.data = {}), f = f.data), d !== b && (f[p.camelCase(c)] = d), i ? (g = f[c], g == null && (g = f[p.camelCase(c)])) : g = f, g;
    },
    removeData: function removeData(a, b, c) {
      if (!p.acceptData(a)) return;
      var d,
          e,
          f,
          g = a.nodeType,
          h = g ? p.cache : a,
          i = g ? a[p.expando] : p.expando;
      if (!h[i]) return;

      if (b) {
        d = c ? h[i] : h[i].data;

        if (d) {
          p.isArray(b) || (b in d ? b = [b] : (b = p.camelCase(b), b in d ? b = [b] : b = b.split(' ')));

          for (e = 0, f = b.length; e < f; e++) {
            delete d[b[e]];
          }

          if (!(c ? K : p.isEmptyObject)(d)) return;
        }
      }

      if (!c) {
        delete h[i].data;
        if (!K(h[i])) return;
      }

      g ? p.cleanData([a], !0) : p.support.deleteExpando || h != h.window ? delete h[i] : h[i] = null;
    },
    _data: function _data(a, b, c) {
      return p.data(a, b, c, !0);
    },
    acceptData: function acceptData(a) {
      var b = a.nodeName && p.noData[a.nodeName.toLowerCase()];
      return !b || b !== !0 && a.getAttribute('classid') === b;
    }
  }), p.fn.extend({
    data: function data(a, c) {
      var d,
          e,
          f,
          g,
          h,
          i = this[0],
          j = 0,
          k = null;

      if (a === b) {
        if (this.length) {
          k = p.data(i);

          if (i.nodeType === 1 && !p._data(i, 'parsedAttrs')) {
            f = i.attributes;

            for (h = f.length; j < h; j++) {
              g = f[j].name, g.indexOf('data-') || (g = p.camelCase(g.substring(5)), J(i, g, k[g]));
            }

            p._data(i, 'parsedAttrs', !0);
          }
        }

        return k;
      }

      return _typeof(a) == 'object' ? this.each(function () {
        p.data(this, a);
      }) : (d = a.split('.', 2), d[1] = d[1] ? '.' + d[1] : '', e = d[1] + '!', p.access(this, function (c) {
        if (c === b) return k = this.triggerHandler('getData' + e, [d[0]]), k === b && i && (k = p.data(i, a), k = J(i, a, k)), k === b && d[1] ? this.data(d[0]) : k;
        d[1] = c, this.each(function () {
          var b = p(this);
          b.triggerHandler('setData' + e, d), p.data(this, a, c), b.triggerHandler('changeData' + e, d);
        });
      }, null, c, arguments.length > 1, null, !1));
    },
    removeData: function removeData(a) {
      return this.each(function () {
        p.removeData(this, a);
      });
    }
  }), p.extend({
    queue: function queue(a, b, c) {
      var d;
      if (a) return b = (b || 'fx') + 'queue', d = p._data(a, b), c && (!d || p.isArray(c) ? d = p._data(a, b, p.makeArray(c)) : d.push(c)), d || [];
    },
    dequeue: function dequeue(a, b) {
      b = b || 'fx';

      var c = p.queue(a, b),
          d = c.length,
          e = c.shift(),
          f = p._queueHooks(a, b),
          g = function g() {
        p.dequeue(a, b);
      };

      e === 'inprogress' && (e = c.shift(), d--), e && (b === 'fx' && c.unshift('inprogress'), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
    },
    _queueHooks: function _queueHooks(a, b) {
      var c = b + 'queueHooks';
      return p._data(a, c) || p._data(a, c, {
        empty: p.Callbacks('once memory').add(function () {
          p.removeData(a, b + 'queue', !0), p.removeData(a, c, !0);
        })
      });
    }
  }), p.fn.extend({
    queue: function queue(a, c) {
      var d = 2;
      return typeof a != 'string' && (c = a, a = 'fx', d--), arguments.length < d ? p.queue(this[0], a) : c === b ? this : this.each(function () {
        var b = p.queue(this, a, c);
        p._queueHooks(this, a), a === 'fx' && b[0] !== 'inprogress' && p.dequeue(this, a);
      });
    },
    dequeue: function dequeue(a) {
      return this.each(function () {
        p.dequeue(this, a);
      });
    },
    delay: function delay(a, b) {
      return a = p.fx ? p.fx.speeds[a] || a : a, b = b || 'fx', this.queue(b, function (b, c) {
        var d = setTimeout(b, a);

        c.stop = function () {
          clearTimeout(d);
        };
      });
    },
    clearQueue: function clearQueue(a) {
      return this.queue(a || 'fx', []);
    },
    promise: function promise(a, c) {
      var d,
          e = 1,
          f = p.Deferred(),
          g = this,
          h = this.length,
          i = function i() {
        --e || f.resolveWith(g, [g]);
      };

      typeof a != 'string' && (c = a, a = b), a = a || 'fx';

      while (h--) {
        d = p._data(g[h], a + 'queueHooks'), d && d.empty && (e++, d.empty.add(i));
      }

      return i(), f.promise(c);
    }
  });
  var L,
      M,
      N,
      O = /[\t\r\n]/g,
      P = /\r/g,
      Q = /^(?:button|input)$/i,
      R = /^(?:button|input|object|select|textarea)$/i,
      S = /^a(?:rea|)$/i,
      T = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
      U = p.support.getSetAttribute;
  p.fn.extend({
    attr: function attr(a, b) {
      return p.access(this, p.attr, a, b, arguments.length > 1);
    },
    removeAttr: function removeAttr(a) {
      return this.each(function () {
        p.removeAttr(this, a);
      });
    },
    prop: function prop(a, b) {
      return p.access(this, p.prop, a, b, arguments.length > 1);
    },
    removeProp: function removeProp(a) {
      return a = p.propFix[a] || a, this.each(function () {
        try {
          this[a] = b, delete this[a];
        } catch (c) {}
      });
    },
    addClass: function addClass(a) {
      var b, c, d, e, f, g, h;
      if (p.isFunction(a)) return this.each(function (b) {
        p(this).addClass(a.call(this, b, this.className));
      });

      if (a && typeof a == 'string') {
        b = a.split(s);

        for (c = 0, d = this.length; c < d; c++) {
          e = this[c];
          if (e.nodeType === 1) if (!e.className && b.length === 1) e.className = a;else {
            f = ' ' + e.className + ' ';

            for (g = 0, h = b.length; g < h; g++) {
              f.indexOf(' ' + b[g] + ' ') < 0 && (f += b[g] + ' ');
            }

            e.className = p.trim(f);
          }
        }
      }

      return this;
    },
    removeClass: function removeClass(a) {
      var c, d, e, f, g, h, i;
      if (p.isFunction(a)) return this.each(function (b) {
        p(this).removeClass(a.call(this, b, this.className));
      });

      if (a && typeof a == 'string' || a === b) {
        c = (a || '').split(s);

        for (h = 0, i = this.length; h < i; h++) {
          e = this[h];

          if (e.nodeType === 1 && e.className) {
            d = (' ' + e.className + ' ').replace(O, ' ');

            for (f = 0, g = c.length; f < g; f++) {
              while (d.indexOf(' ' + c[f] + ' ') >= 0) {
                d = d.replace(' ' + c[f] + ' ', ' ');
              }
            }

            e.className = a ? p.trim(d) : '';
          }
        }
      }

      return this;
    },
    toggleClass: function toggleClass(a, b) {
      var c = _typeof(a),
          d = typeof b == 'boolean';

      return p.isFunction(a) ? this.each(function (c) {
        p(this).toggleClass(a.call(this, c, this.className, b), b);
      }) : this.each(function () {
        if (c === 'string') {
          var e,
              f = 0,
              g = p(this),
              h = b,
              i = a.split(s);

          while (e = i[f++]) {
            h = d ? h : !g.hasClass(e), g[h ? 'addClass' : 'removeClass'](e);
          }
        } else if (c === 'undefined' || c === 'boolean') this.className && p._data(this, '__className__', this.className), this.className = this.className || a === !1 ? '' : p._data(this, '__className__') || '';
      });
    },
    hasClass: function hasClass(a) {
      var b = ' ' + a + ' ',
          c = 0,
          d = this.length;

      for (; c < d; c++) {
        if (this[c].nodeType === 1 && (' ' + this[c].className + ' ').replace(O, ' ').indexOf(b) >= 0) return !0;
      }

      return !1;
    },
    val: function val(a) {
      var c,
          d,
          e,
          f = this[0];

      if (!arguments.length) {
        if (f) return c = p.valHooks[f.type] || p.valHooks[f.nodeName.toLowerCase()], c && 'get' in c && (d = c.get(f, 'value')) !== b ? d : (d = f.value, typeof d == 'string' ? d.replace(P, '') : d == null ? '' : d);
        return;
      }

      return e = p.isFunction(a), this.each(function (d) {
        var f,
            g = p(this);
        if (this.nodeType !== 1) return;
        e ? f = a.call(this, d, g.val()) : f = a, f == null ? f = '' : typeof f == 'number' ? f += '' : p.isArray(f) && (f = p.map(f, function (a) {
          return a == null ? '' : a + '';
        })), c = p.valHooks[this.type] || p.valHooks[this.nodeName.toLowerCase()];
        if (!c || !('set' in c) || c.set(this, f, 'value') === b) this.value = f;
      });
    }
  }), p.extend({
    valHooks: {
      option: {
        get: function get(a) {
          var b = a.attributes.value;
          return !b || b.specified ? a.value : a.text;
        }
      },
      select: {
        get: function get(a) {
          var b,
              c,
              d,
              e,
              f = a.selectedIndex,
              g = [],
              h = a.options,
              i = a.type === 'select-one';
          if (f < 0) return null;
          c = i ? f : 0, d = i ? f + 1 : h.length;

          for (; c < d; c++) {
            e = h[c];

            if (e.selected && (p.support.optDisabled ? !e.disabled : e.getAttribute('disabled') === null) && (!e.parentNode.disabled || !p.nodeName(e.parentNode, 'optgroup'))) {
              b = p(e).val();
              if (i) return b;
              g.push(b);
            }
          }

          return i && !g.length && h.length ? p(h[f]).val() : g;
        },
        set: function set(a, b) {
          var c = p.makeArray(b);
          return p(a).find('option').each(function () {
            this.selected = p.inArray(p(this).val(), c) >= 0;
          }), c.length || (a.selectedIndex = -1), c;
        }
      }
    },
    attrFn: {},
    attr: function attr(a, c, d, e) {
      var f,
          g,
          h,
          i = a.nodeType;
      if (!a || i === 3 || i === 8 || i === 2) return;
      if (e && p.isFunction(p.fn[c])) return p(a)[c](d);
      if (typeof a.getAttribute == 'undefined') return p.prop(a, c, d);
      h = i !== 1 || !p.isXMLDoc(a), h && (c = c.toLowerCase(), g = p.attrHooks[c] || (T.test(c) ? M : L));

      if (d !== b) {
        if (d === null) {
          p.removeAttr(a, c);
          return;
        }

        return g && 'set' in g && h && (f = g.set(a, d, c)) !== b ? f : (a.setAttribute(c, d + ''), d);
      }

      return g && 'get' in g && h && (f = g.get(a, c)) !== null ? f : (f = a.getAttribute(c), f === null ? b : f);
    },
    removeAttr: function removeAttr(a, b) {
      var c,
          d,
          e,
          f,
          g = 0;

      if (b && a.nodeType === 1) {
        d = b.split(s);

        for (; g < d.length; g++) {
          e = d[g], e && (c = p.propFix[e] || e, f = T.test(e), f || p.attr(a, e, ''), a.removeAttribute(U ? e : c), f && c in a && (a[c] = !1));
        }
      }
    },
    attrHooks: {
      type: {
        set: function set(a, b) {
          if (Q.test(a.nodeName) && a.parentNode) p.error("type property can't be changed");else if (!p.support.radioValue && b === 'radio' && p.nodeName(a, 'input')) {
            var c = a.value;
            return a.setAttribute('type', b), c && (a.value = c), b;
          }
        }
      },
      value: {
        get: function get(a, b) {
          return L && p.nodeName(a, 'button') ? L.get(a, b) : b in a ? a.value : null;
        },
        set: function set(a, b, c) {
          if (L && p.nodeName(a, 'button')) return L.set(a, b, c);
          a.value = b;
        }
      }
    },
    propFix: {
      tabindex: 'tabIndex',
      readonly: 'readOnly',
      for: 'htmlFor',
      class: 'className',
      maxlength: 'maxLength',
      cellspacing: 'cellSpacing',
      cellpadding: 'cellPadding',
      rowspan: 'rowSpan',
      colspan: 'colSpan',
      usemap: 'useMap',
      frameborder: 'frameBorder',
      contenteditable: 'contentEditable'
    },
    prop: function prop(a, c, d) {
      var e,
          f,
          g,
          h = a.nodeType;
      if (!a || h === 3 || h === 8 || h === 2) return;
      return g = h !== 1 || !p.isXMLDoc(a), g && (c = p.propFix[c] || c, f = p.propHooks[c]), d !== b ? f && 'set' in f && (e = f.set(a, d, c)) !== b ? e : a[c] = d : f && 'get' in f && (e = f.get(a, c)) !== null ? e : a[c];
    },
    propHooks: {
      tabIndex: {
        get: function get(a) {
          var c = a.getAttributeNode('tabindex');
          return c && c.specified ? parseInt(c.value, 10) : R.test(a.nodeName) || S.test(a.nodeName) && a.href ? 0 : b;
        }
      }
    }
  }), M = {
    get: function get(a, c) {
      var d,
          e = p.prop(a, c);
      return e === !0 || typeof e != 'boolean' && (d = a.getAttributeNode(c)) && d.nodeValue !== !1 ? c.toLowerCase() : b;
    },
    set: function set(a, b, c) {
      var d;
      return b === !1 ? p.removeAttr(a, c) : (d = p.propFix[c] || c, d in a && (a[d] = !0), a.setAttribute(c, c.toLowerCase())), c;
    }
  }, U || (N = {
    name: !0,
    id: !0,
    coords: !0
  }, L = p.valHooks.button = {
    get: function get(a, c) {
      var d;
      return d = a.getAttributeNode(c), d && (N[c] ? d.value !== '' : d.specified) ? d.value : b;
    },
    set: function set(a, b, c) {
      var d = a.getAttributeNode(c);
      return d || (d = e.createAttribute(c), a.setAttributeNode(d)), d.value = b + '';
    }
  }, p.each(['width', 'height'], function (a, b) {
    p.attrHooks[b] = p.extend(p.attrHooks[b], {
      set: function set(a, c) {
        if (c === '') return a.setAttribute(b, 'auto'), c;
      }
    });
  }), p.attrHooks.contenteditable = {
    get: L.get,
    set: function set(a, b, c) {
      b === '' && (b = 'false'), L.set(a, b, c);
    }
  }), p.support.hrefNormalized || p.each(['href', 'src', 'width', 'height'], function (a, c) {
    p.attrHooks[c] = p.extend(p.attrHooks[c], {
      get: function get(a) {
        var d = a.getAttribute(c, 2);
        return d === null ? b : d;
      }
    });
  }), p.support.style || (p.attrHooks.style = {
    get: function get(a) {
      return a.style.cssText.toLowerCase() || b;
    },
    set: function set(a, b) {
      return a.style.cssText = b + '';
    }
  }), p.support.optSelected || (p.propHooks.selected = p.extend(p.propHooks.selected, {
    get: function get(a) {
      var b = a.parentNode;
      return b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex), null;
    }
  })), p.support.enctype || (p.propFix.enctype = 'encoding'), p.support.checkOn || p.each(['radio', 'checkbox'], function () {
    p.valHooks[this] = {
      get: function get(a) {
        return a.getAttribute('value') === null ? 'on' : a.value;
      }
    };
  }), p.each(['radio', 'checkbox'], function () {
    p.valHooks[this] = p.extend(p.valHooks[this], {
      set: function set(a, b) {
        if (p.isArray(b)) return a.checked = p.inArray(p(a).val(), b) >= 0;
      }
    });
  });

  var V = /^(?:textarea|input|select)$/i,
      W = /^([^\.]*|)(?:\.(.+)|)$/,
      X = /(?:^|\s)hover(\.\S+|)\b/,
      Y = /^key/,
      Z = /^(?:mouse|contextmenu)|click/,
      $ = /^(?:focusinfocus|focusoutblur)$/,
      _ = function _(a) {
    return p.event.special.hover ? a : a.replace(X, 'mouseenter$1 mouseleave$1');
  };

  p.event = {
    add: function add(a, c, d, e, f) {
      var g, _h, i, j, k, l, m, n, o, q, r;

      if (a.nodeType === 3 || a.nodeType === 8 || !c || !d || !(g = p._data(a))) return;
      d.handler && (o = d, d = o.handler, f = o.selector), d.guid || (d.guid = p.guid++), i = g.events, i || (g.events = i = {}), _h = g.handle, _h || (g.handle = _h = function h(a) {
        return typeof p != 'undefined' && (!a || p.event.triggered !== a.type) ? p.event.dispatch.apply(_h.elem, arguments) : b;
      }, _h.elem = a), c = p.trim(_(c)).split(' ');

      for (j = 0; j < c.length; j++) {
        k = W.exec(c[j]) || [], l = k[1], m = (k[2] || '').split('.').sort(), r = p.event.special[l] || {}, l = (f ? r.delegateType : r.bindType) || l, r = p.event.special[l] || {}, n = p.extend({
          type: l,
          origType: k[1],
          data: e,
          handler: d,
          guid: d.guid,
          selector: f,
          needsContext: f && p.expr.match.needsContext.test(f),
          namespace: m.join('.')
        }, o), q = i[l];

        if (!q) {
          q = i[l] = [], q.delegateCount = 0;
          if (!r.setup || r.setup.call(a, e, m, _h) === !1) a.addEventListener ? a.addEventListener(l, _h, !1) : a.attachEvent && a.attachEvent('on' + l, _h);
        }

        r.add && (r.add.call(a, n), n.handler.guid || (n.handler.guid = d.guid)), f ? q.splice(q.delegateCount++, 0, n) : q.push(n), p.event.global[l] = !0;
      }

      a = null;
    },
    global: {},
    remove: function remove(a, b, c, d, e) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          n,
          o,
          q,
          r = p.hasData(a) && p._data(a);

      if (!r || !(m = r.events)) return;
      b = p.trim(_(b || '')).split(' ');

      for (f = 0; f < b.length; f++) {
        g = W.exec(b[f]) || [], h = i = g[1], j = g[2];

        if (!h) {
          for (h in m) {
            p.event.remove(a, h + b[f], c, d, !0);
          }

          continue;
        }

        n = p.event.special[h] || {}, h = (d ? n.delegateType : n.bindType) || h, o = m[h] || [], k = o.length, j = j ? new RegExp('(^|\\.)' + j.split('.').sort().join('\\.(?:.*\\.|)') + '(\\.|$)') : null;

        for (l = 0; l < o.length; l++) {
          q = o[l], (e || i === q.origType) && (!c || c.guid === q.guid) && (!j || j.test(q.namespace)) && (!d || d === q.selector || d === '**' && q.selector) && (o.splice(l--, 1), q.selector && o.delegateCount--, n.remove && n.remove.call(a, q));
        }

        o.length === 0 && k !== o.length && ((!n.teardown || n.teardown.call(a, j, r.handle) === !1) && p.removeEvent(a, h, r.handle), delete m[h]);
      }

      p.isEmptyObject(m) && (delete r.handle, p.removeData(a, 'events', !0));
    },
    customEvent: {
      getData: !0,
      setData: !0,
      changeData: !0
    },
    trigger: function trigger(c, d, f, g) {
      if (!f || f.nodeType !== 3 && f.nodeType !== 8) {
        var h,
            i,
            j,
            k,
            l,
            m,
            n,
            o,
            q,
            r,
            s = c.type || c,
            t = [];
        if ($.test(s + p.event.triggered)) return;
        s.indexOf('!') >= 0 && (s = s.slice(0, -1), i = !0), s.indexOf('.') >= 0 && (t = s.split('.'), s = t.shift(), t.sort());
        if ((!f || p.event.customEvent[s]) && !p.event.global[s]) return;
        c = _typeof(c) == 'object' ? c[p.expando] ? c : new p.Event(s, c) : new p.Event(s), c.type = s, c.isTrigger = !0, c.exclusive = i, c.namespace = t.join('.'), c.namespace_re = c.namespace ? new RegExp('(^|\\.)' + t.join('\\.(?:.*\\.|)') + '(\\.|$)') : null, m = s.indexOf(':') < 0 ? 'on' + s : '';

        if (!f) {
          h = p.cache;

          for (j in h) {
            h[j].events && h[j].events[s] && p.event.trigger(c, d, h[j].handle.elem, !0);
          }

          return;
        }

        c.result = b, c.target || (c.target = f), d = d != null ? p.makeArray(d) : [], d.unshift(c), n = p.event.special[s] || {};
        if (n.trigger && n.trigger.apply(f, d) === !1) return;
        q = [[f, n.bindType || s]];

        if (!g && !n.noBubble && !p.isWindow(f)) {
          r = n.delegateType || s, k = $.test(r + s) ? f : f.parentNode;

          for (l = f; k; k = k.parentNode) {
            q.push([k, r]), l = k;
          }

          l === (f.ownerDocument || e) && q.push([l.defaultView || l.parentWindow || a, r]);
        }

        for (j = 0; j < q.length && !c.isPropagationStopped(); j++) {
          k = q[j][0], c.type = q[j][1], o = (p._data(k, 'events') || {})[c.type] && p._data(k, 'handle'), o && o.apply(k, d), o = m && k[m], o && p.acceptData(k) && o.apply && o.apply(k, d) === !1 && c.preventDefault();
        }

        return c.type = s, !g && !c.isDefaultPrevented() && (!n._default || n._default.apply(f.ownerDocument, d) === !1) && (s !== 'click' || !p.nodeName(f, 'a')) && p.acceptData(f) && m && f[s] && (s !== 'focus' && s !== 'blur' || c.target.offsetWidth !== 0) && !p.isWindow(f) && (l = f[m], l && (f[m] = null), p.event.triggered = s, f[s](), p.event.triggered = b, l && (f[m] = l)), c.result;
      }

      return;
    },
    dispatch: function dispatch(c) {
      c = p.event.fix(c || a.event);
      var d,
          e,
          f,
          g,
          h,
          i,
          j,
          l,
          m,
          n,
          o = (p._data(this, 'events') || {})[c.type] || [],
          q = o.delegateCount,
          r = k.call(arguments),
          s = !c.exclusive && !c.namespace,
          t = p.event.special[c.type] || {},
          u = [];
      r[0] = c, c.delegateTarget = this;
      if (t.preDispatch && t.preDispatch.call(this, c) === !1) return;
      if (q && (!c.button || c.type !== 'click')) for (f = c.target; f != this; f = f.parentNode || this) {
        if (f.disabled !== !0 || c.type !== 'click') {
          h = {}, j = [];

          for (d = 0; d < q; d++) {
            l = o[d], m = l.selector, h[m] === b && (h[m] = l.needsContext ? p(m, this).index(f) >= 0 : p.find(m, this, null, [f]).length), h[m] && j.push(l);
          }

          j.length && u.push({
            elem: f,
            matches: j
          });
        }
      }
      o.length > q && u.push({
        elem: this,
        matches: o.slice(q)
      });

      for (d = 0; d < u.length && !c.isPropagationStopped(); d++) {
        i = u[d], c.currentTarget = i.elem;

        for (e = 0; e < i.matches.length && !c.isImmediatePropagationStopped(); e++) {
          l = i.matches[e];
          if (s || !c.namespace && !l.namespace || c.namespace_re && c.namespace_re.test(l.namespace)) c.data = l.data, c.handleObj = l, g = ((p.event.special[l.origType] || {}).handle || l.handler).apply(i.elem, r), g !== b && (c.result = g, g === !1 && (c.preventDefault(), c.stopPropagation()));
        }
      }

      return t.postDispatch && t.postDispatch.call(this, c), c.result;
    },
    props: 'attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which'.split(' '),
    fixHooks: {},
    keyHooks: {
      props: 'char charCode key keyCode'.split(' '),
      filter: function filter(a, b) {
        return a.which == null && (a.which = b.charCode != null ? b.charCode : b.keyCode), a;
      }
    },
    mouseHooks: {
      props: 'button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement'.split(' '),
      filter: function filter(a, c) {
        var d,
            f,
            g,
            h = c.button,
            i = c.fromElement;
        return a.pageX == null && c.clientX != null && (d = a.target.ownerDocument || e, f = d.documentElement, g = d.body, a.pageX = c.clientX + (f && f.scrollLeft || g && g.scrollLeft || 0) - (f && f.clientLeft || g && g.clientLeft || 0), a.pageY = c.clientY + (f && f.scrollTop || g && g.scrollTop || 0) - (f && f.clientTop || g && g.clientTop || 0)), !a.relatedTarget && i && (a.relatedTarget = i === a.target ? c.toElement : i), !a.which && h !== b && (a.which = h & 1 ? 1 : h & 2 ? 3 : h & 4 ? 2 : 0), a;
      }
    },
    fix: function fix(a) {
      if (a[p.expando]) return a;
      var b,
          c,
          d = a,
          f = p.event.fixHooks[a.type] || {},
          g = f.props ? this.props.concat(f.props) : this.props;
      a = p.Event(d);

      for (b = g.length; b;) {
        c = g[--b], a[c] = d[c];
      }

      return a.target || (a.target = d.srcElement || e), a.target.nodeType === 3 && (a.target = a.target.parentNode), a.metaKey = !!a.metaKey, f.filter ? f.filter(a, d) : a;
    },
    special: {
      load: {
        noBubble: !0
      },
      focus: {
        delegateType: 'focusin'
      },
      blur: {
        delegateType: 'focusout'
      },
      beforeunload: {
        setup: function setup(a, b, c) {
          p.isWindow(this) && (this.onbeforeunload = c);
        },
        teardown: function teardown(a, b) {
          this.onbeforeunload === b && (this.onbeforeunload = null);
        }
      }
    },
    simulate: function simulate(a, b, c, d) {
      var e = p.extend(new p.Event(), c, {
        type: a,
        isSimulated: !0,
        originalEvent: {}
      });
      d ? p.event.trigger(e, null, b) : p.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();
    }
  }, p.event.handle = p.event.dispatch, p.removeEvent = e.removeEventListener ? function (a, b, c) {
    a.removeEventListener && a.removeEventListener(b, c, !1);
  } : function (a, b, c) {
    var d = 'on' + b;
    a.detachEvent && (typeof a[d] == 'undefined' && (a[d] = null), a.detachEvent(d, c));
  }, p.Event = function (a, b) {
    if (this instanceof p.Event) a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || a.returnValue === !1 || a.getPreventDefault && a.getPreventDefault() ? bb : ba) : this.type = a, b && p.extend(this, b), this.timeStamp = a && a.timeStamp || p.now(), this[p.expando] = !0;else return new p.Event(a, b);
  }, p.Event.prototype = {
    preventDefault: function preventDefault() {
      this.isDefaultPrevented = bb;
      var a = this.originalEvent;
      if (!a) return;
      a.preventDefault ? a.preventDefault() : a.returnValue = !1;
    },
    stopPropagation: function stopPropagation() {
      this.isPropagationStopped = bb;
      var a = this.originalEvent;
      if (!a) return;
      a.stopPropagation && a.stopPropagation(), a.cancelBubble = !0;
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      this.isImmediatePropagationStopped = bb, this.stopPropagation();
    },
    isDefaultPrevented: ba,
    isPropagationStopped: ba,
    isImmediatePropagationStopped: ba
  }, p.each({
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
  }, function (a, b) {
    p.event.special[a] = {
      delegateType: b,
      bindType: b,
      handle: function handle(a) {
        var c,
            d = this,
            e = a.relatedTarget,
            f = a.handleObj,
            g = f.selector;
        if (!e || e !== d && !p.contains(d, e)) a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b;
        return c;
      }
    };
  }), p.support.submitBubbles || (p.event.special.submit = {
    setup: function setup() {
      if (p.nodeName(this, 'form')) return !1;
      p.event.add(this, 'click._submit keypress._submit', function (a) {
        var c = a.target,
            d = p.nodeName(c, 'input') || p.nodeName(c, 'button') ? c.form : b;
        d && !p._data(d, '_submit_attached') && (p.event.add(d, 'submit._submit', function (a) {
          a._submit_bubble = !0;
        }), p._data(d, '_submit_attached', !0));
      });
    },
    postDispatch: function postDispatch(a) {
      a._submit_bubble && (delete a._submit_bubble, this.parentNode && !a.isTrigger && p.event.simulate('submit', this.parentNode, a, !0));
    },
    teardown: function teardown() {
      if (p.nodeName(this, 'form')) return !1;
      p.event.remove(this, '._submit');
    }
  }), p.support.changeBubbles || (p.event.special.change = {
    setup: function setup() {
      if (V.test(this.nodeName)) {
        if (this.type === 'checkbox' || this.type === 'radio') p.event.add(this, 'propertychange._change', function (a) {
          a.originalEvent.propertyName === 'checked' && (this._just_changed = !0);
        }), p.event.add(this, 'click._change', function (a) {
          this._just_changed && !a.isTrigger && (this._just_changed = !1), p.event.simulate('change', this, a, !0);
        });
        return !1;
      }

      p.event.add(this, 'beforeactivate._change', function (a) {
        var b = a.target;
        V.test(b.nodeName) && !p._data(b, '_change_attached') && (p.event.add(b, 'change._change', function (a) {
          this.parentNode && !a.isSimulated && !a.isTrigger && p.event.simulate('change', this.parentNode, a, !0);
        }), p._data(b, '_change_attached', !0));
      });
    },
    handle: function handle(a) {
      var b = a.target;
      if (this !== b || a.isSimulated || a.isTrigger || b.type !== 'radio' && b.type !== 'checkbox') return a.handleObj.handler.apply(this, arguments);
    },
    teardown: function teardown() {
      return p.event.remove(this, '._change'), !V.test(this.nodeName);
    }
  }), p.support.focusinBubbles || p.each({
    focus: 'focusin',
    blur: 'focusout'
  }, function (a, b) {
    var c = 0,
        d = function d(a) {
      p.event.simulate(b, a.target, p.event.fix(a), !0);
    };

    p.event.special[b] = {
      setup: function setup() {
        c++ === 0 && e.addEventListener(a, d, !0);
      },
      teardown: function teardown() {
        --c === 0 && e.removeEventListener(a, d, !0);
      }
    };
  }), p.fn.extend({
    on: function on(a, c, d, e, f) {
      var g, h;

      if (_typeof(a) == 'object') {
        typeof c != 'string' && (d = d || c, c = b);

        for (h in a) {
          this.on(h, c, d, a[h], f);
        }

        return this;
      }

      d == null && e == null ? (e = c, d = c = b) : e == null && (typeof c == 'string' ? (e = d, d = b) : (e = d, d = c, c = b));
      if (e === !1) e = ba;else if (!e) return this;
      return f === 1 && (g = e, e = function e(a) {
        return p().off(a), g.apply(this, arguments);
      }, e.guid = g.guid || (g.guid = p.guid++)), this.each(function () {
        p.event.add(this, a, e, d, c);
      });
    },
    one: function one(a, b, c, d) {
      return this.on(a, b, c, d, 1);
    },
    off: function off(a, c, d) {
      var e, f;
      if (a && a.preventDefault && a.handleObj) return e = a.handleObj, p(a.delegateTarget).off(e.namespace ? e.origType + '.' + e.namespace : e.origType, e.selector, e.handler), this;

      if (_typeof(a) == 'object') {
        for (f in a) {
          this.off(f, c, a[f]);
        }

        return this;
      }

      if (c === !1 || typeof c == 'function') d = c, c = b;
      return d === !1 && (d = ba), this.each(function () {
        p.event.remove(this, a, d, c);
      });
    },
    bind: function bind(a, b, c) {
      return this.on(a, null, b, c);
    },
    unbind: function unbind(a, b) {
      return this.off(a, null, b);
    },
    live: function live(a, b, c) {
      return p(this.context).on(a, this.selector, b, c), this;
    },
    die: function die(a, b) {
      return p(this.context).off(a, this.selector || '**', b), this;
    },
    delegate: function delegate(a, b, c, d) {
      return this.on(b, a, c, d);
    },
    undelegate: function undelegate(a, b, c) {
      return arguments.length === 1 ? this.off(a, '**') : this.off(b, a || '**', c);
    },
    trigger: function trigger(a, b) {
      return this.each(function () {
        p.event.trigger(a, b, this);
      });
    },
    triggerHandler: function triggerHandler(a, b) {
      if (this[0]) return p.event.trigger(a, b, this[0], !0);
    },
    toggle: function toggle(a) {
      var b = arguments,
          c = a.guid || p.guid++,
          d = 0,
          e = function e(c) {
        var e = (p._data(this, 'lastToggle' + a.guid) || 0) % d;
        return p._data(this, 'lastToggle' + a.guid, e + 1), c.preventDefault(), b[e].apply(this, arguments) || !1;
      };

      e.guid = c;

      while (d < b.length) {
        b[d++].guid = c;
      }

      return this.click(e);
    },
    hover: function hover(a, b) {
      return this.mouseenter(a).mouseleave(b || a);
    }
  }), p.each('blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu'.split(' '), function (a, b) {
    p.fn[b] = function (a, c) {
      return c == null && (c = a, a = null), arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
    }, Y.test(b) && (p.event.fixHooks[b] = p.event.keyHooks), Z.test(b) && (p.event.fixHooks[b] = p.event.mouseHooks);
  }), function (a, b) {
    function bc(a, b, c, d) {
      c = c || [], b = b || r;
      var e,
          f,
          i,
          j,
          k = b.nodeType;
      if (!a || typeof a != 'string') return c;
      if (k !== 1 && k !== 9) return [];
      i = g(b);
      if (!i && !d) if (e = P.exec(a)) if (j = e[1]) {
        if (k === 9) {
          f = b.getElementById(j);
          if (!f || !f.parentNode) return c;
          if (f.id === j) return c.push(f), c;
        } else if (b.ownerDocument && (f = b.ownerDocument.getElementById(j)) && h(b, f) && f.id === j) return c.push(f), c;
      } else {
        if (e[2]) return w.apply(c, x.call(b.getElementsByTagName(a), 0)), c;
        if ((j = e[3]) && _ && b.getElementsByClassName) return w.apply(c, x.call(b.getElementsByClassName(j), 0)), c;
      }
      return bp(a.replace(L, '$1'), b, c, d, i);
    }

    function bd(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();
        return c === 'input' && b.type === a;
      };
    }

    function be(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();
        return (c === 'input' || c === 'button') && b.type === a;
      };
    }

    function bf(a) {
      return z(function (b) {
        return b = +b, z(function (c, d) {
          var e,
              f = a([], c.length, b),
              g = f.length;

          while (g--) {
            c[e = f[g]] && (c[e] = !(d[e] = c[e]));
          }
        });
      });
    }

    function bg(a, b, c) {
      if (a === b) return c;
      var d = a.nextSibling;

      while (d) {
        if (d === b) return -1;
        d = d.nextSibling;
      }

      return 1;
    }

    function bh(a, b) {
      var c,
          d,
          f,
          g,
          h,
          i,
          j,
          k = C[o][a];
      if (k) return b ? 0 : k.slice(0);
      h = a, i = [], j = e.preFilter;

      while (h) {
        if (!c || (d = M.exec(h))) d && (h = h.slice(d[0].length)), i.push(f = []);
        c = !1;
        if (d = N.exec(h)) f.push(c = new q(d.shift())), h = h.slice(c.length), c.type = d[0].replace(L, ' ');

        for (g in e.filter) {
          (d = W[g].exec(h)) && (!j[g] || (d = j[g](d, r, !0))) && (f.push(c = new q(d.shift())), h = h.slice(c.length), c.type = g, c.matches = d);
        }

        if (!c) break;
      }

      return b ? h.length : h ? bc.error(a) : C(a, i).slice(0);
    }

    function bi(a, b, d) {
      var e = b.dir,
          f = d && b.dir === 'parentNode',
          g = u++;
      return b.first ? function (b, c, d) {
        while (b = b[e]) {
          if (f || b.nodeType === 1) return a(b, c, d);
        }
      } : function (b, d, h) {
        if (!h) {
          var i,
              j = t + ' ' + g + ' ',
              k = j + c;

          while (b = b[e]) {
            if (f || b.nodeType === 1) {
              if ((i = b[o]) === k) return b.sizset;

              if (typeof i == 'string' && i.indexOf(j) === 0) {
                if (b.sizset) return b;
              } else {
                b[o] = k;
                if (a(b, d, h)) return b.sizset = !0, b;
                b.sizset = !1;
              }
            }
          }
        } else while (b = b[e]) {
          if (f || b.nodeType === 1) if (a(b, d, h)) return b;
        }
      };
    }

    function bj(a) {
      return a.length > 1 ? function (b, c, d) {
        var e = a.length;

        while (e--) {
          if (!a[e](b, c, d)) return !1;
        }

        return !0;
      } : a[0];
    }

    function bk(a, b, c, d, e) {
      var f,
          g = [],
          h = 0,
          i = a.length,
          j = b != null;

      for (; h < i; h++) {
        if (f = a[h]) if (!c || c(f, d, e)) g.push(f), j && b.push(h);
      }

      return g;
    }

    function bl(a, b, c, d, e, f) {
      return d && !d[o] && (d = bl(d)), e && !e[o] && (e = bl(e, f)), z(function (f, g, h, i) {
        if (f && e) return;
        var j,
            k,
            l,
            m = [],
            n = [],
            o = g.length,
            p = f || bo(b || '*', h.nodeType ? [h] : h, [], f),
            q = a && (f || !b) ? bk(p, m, a, h, i) : p,
            r = c ? e || (f ? a : o || d) ? [] : g : q;
        c && c(q, r, h, i);

        if (d) {
          l = bk(r, n), d(l, [], h, i), j = l.length;

          while (j--) {
            if (k = l[j]) r[n[j]] = !(q[n[j]] = k);
          }
        }

        if (f) {
          j = a && r.length;

          while (j--) {
            if (k = r[j]) f[m[j]] = !(g[m[j]] = k);
          }
        } else r = bk(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : w.apply(g, r);
      });
    }

    function bm(a) {
      var b,
          c,
          d,
          f = a.length,
          g = e.relative[a[0].type],
          h = g || e.relative[' '],
          i = g ? 1 : 0,
          j = bi(function (a) {
        return a === b;
      }, h, !0),
          k = bi(function (a) {
        return y.call(b, a) > -1;
      }, h, !0),
          m = [function (a, c, d) {
        return !g && (d || c !== l) || ((b = c).nodeType ? j(a, c, d) : k(a, c, d));
      }];

      for (; i < f; i++) {
        if (c = e.relative[a[i].type]) m = [bi(bj(m), c)];else {
          c = e.filter[a[i].type].apply(null, a[i].matches);

          if (c[o]) {
            d = ++i;

            for (; d < f; d++) {
              if (e.relative[a[d].type]) break;
            }

            return bl(i > 1 && bj(m), i > 1 && a.slice(0, i - 1).join('').replace(L, '$1'), c, i < d && bm(a.slice(i, d)), d < f && bm(a = a.slice(d)), d < f && a.join(''));
          }

          m.push(c);
        }
      }

      return bj(m);
    }

    function bn(a, b) {
      var d = b.length > 0,
          f = a.length > 0,
          g = function g(h, i, j, k, m) {
        var n,
            o,
            p,
            q = [],
            s = 0,
            u = '0',
            x = h && [],
            y = m != null,
            z = l,
            A = h || f && e.find.TAG('*', m && i.parentNode || i),
            B = t += z == null ? 1 : Math.E;
        y && (l = i !== r && i, c = g.el);

        for (; (n = A[u]) != null; u++) {
          if (f && n) {
            for (o = 0; p = a[o]; o++) {
              if (p(n, i, j)) {
                k.push(n);
                break;
              }
            }

            y && (t = B, c = ++g.el);
          }

          d && ((n = !p && n) && s--, h && x.push(n));
        }

        s += u;

        if (d && u !== s) {
          for (o = 0; p = b[o]; o++) {
            p(x, q, i, j);
          }

          if (h) {
            if (s > 0) while (u--) {
              !x[u] && !q[u] && (q[u] = v.call(k));
            }
            q = bk(q);
          }

          w.apply(k, q), y && !h && q.length > 0 && s + b.length > 1 && bc.uniqueSort(k);
        }

        return y && (t = B, l = z), x;
      };

      return g.el = 0, d ? z(g) : g;
    }

    function bo(a, b, c, d) {
      var e = 0,
          f = b.length;

      for (; e < f; e++) {
        bc(a, b[e], c, d);
      }

      return c;
    }

    function bp(a, b, c, d, f) {
      var g,
          h,
          j,
          k,
          l,
          m = bh(a),
          n = m.length;

      if (!d && m.length === 1) {
        h = m[0] = m[0].slice(0);

        if (h.length > 2 && (j = h[0]).type === 'ID' && b.nodeType === 9 && !f && e.relative[h[1].type]) {
          b = e.find.ID(j.matches[0].replace(V, ''), b, f)[0];
          if (!b) return c;
          a = a.slice(h.shift().length);
        }

        for (g = W.POS.test(a) ? -1 : h.length - 1; g >= 0; g--) {
          j = h[g];
          if (e.relative[k = j.type]) break;
          if (l = e.find[k]) if (d = l(j.matches[0].replace(V, ''), R.test(h[0].type) && b.parentNode || b, f)) {
            h.splice(g, 1), a = d.length && h.join('');
            if (!a) return w.apply(c, x.call(d, 0)), c;
            break;
          }
        }
      }

      return i(a, m)(d, b, f, c, R.test(a)), c;
    }

    function bq() {}

    var c,
        d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l,
        m = !0,
        n = 'undefined',
        o = ('sizcache' + Math.random()).replace('.', ''),
        q = String,
        r = a.document,
        s = r.documentElement,
        t = 0,
        u = 0,
        v = [].pop,
        w = [].push,
        x = [].slice,
        y = [].indexOf || function (a) {
      var b = 0,
          c = this.length;

      for (; b < c; b++) {
        if (this[b] === a) return b;
      }

      return -1;
    },
        z = function z(a, b) {
      return a[o] = b == null || b, a;
    },
        A = function A() {
      var a = {},
          b = [];
      return z(function (c, d) {
        return b.push(c) > e.cacheLength && delete a[b.shift()], a[c] = d;
      }, a);
    },
        B = A(),
        C = A(),
        D = A(),
        E = '[\\x20\\t\\r\\n\\f]',
        F = '(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+',
        G = F.replace('w', 'w#'),
        H = '([*^$|!~]?=)',
        I = '\\[' + E + '*(' + F + ')' + E + '*(?:' + H + E + '*(?:([\'"])((?:\\\\.|[^\\\\])*?)\\3|(' + G + ')|)|)' + E + '*\\]',
        J = ':(' + F + ')(?:\\((?:([\'"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:' + I + ')|[^:]|\\\\.)*|.*))\\)|)',
        K = ':(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + E + '*((?:-\\d)?\\d*)' + E + '*\\)|)(?=[^-]|$)',
        L = new RegExp('^' + E + '+|((?:^|[^\\\\])(?:\\\\.)*)' + E + '+$', 'g'),
        M = new RegExp('^' + E + '*,' + E + '*'),
        N = new RegExp('^' + E + '*([\\x20\\t\\r\\n\\f>+~])' + E + '*'),
        O = new RegExp(J),
        P = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,
        Q = /^:not/,
        R = /[\x20\t\r\n\f]*[+~]/,
        S = /:not\($/,
        T = /h\d/i,
        U = /input|select|textarea|button/i,
        V = /\\(?!\\)/g,
        W = {
      ID: new RegExp('^#(' + F + ')'),
      CLASS: new RegExp('^\\.(' + F + ')'),
      NAME: new RegExp('^\\[name=[\'"]?(' + F + ')[\'"]?\\]'),
      TAG: new RegExp('^(' + F.replace('w', 'w*') + ')'),
      ATTR: new RegExp('^' + I),
      PSEUDO: new RegExp('^' + J),
      POS: new RegExp(K, 'i'),
      CHILD: new RegExp('^:(only|nth|first|last)-child(?:\\(' + E + '*(even|odd|(([+-]|)(\\d*)n|)' + E + '*(?:([+-]|)' + E + '*(\\d+)|))' + E + '*\\)|)', 'i'),
      needsContext: new RegExp('^' + E + '*[>+~]|' + K, 'i')
    },
        X = function X(a) {
      var b = r.createElement('div');

      try {
        return a(b);
      } catch (c) {
        return !1;
      } finally {
        b = null;
      }
    },
        Y = X(function (a) {
      return a.appendChild(r.createComment('')), !a.getElementsByTagName('*').length;
    }),
        Z = X(function (a) {
      return a.innerHTML = "<a href='#'></a>", a.firstChild && _typeof(a.firstChild.getAttribute) !== n && a.firstChild.getAttribute('href') === '#';
    }),
        $ = X(function (a) {
      a.innerHTML = '<select></select>';

      var b = _typeof(a.lastChild.getAttribute('multiple'));

      return b !== 'boolean' && b !== 'string';
    }),
        _ = X(function (a) {
      return a.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>", !a.getElementsByClassName || !a.getElementsByClassName('e').length ? !1 : (a.lastChild.className = 'e', a.getElementsByClassName('e').length === 2);
    }),
        ba = X(function (a) {
      a.id = o + 0, a.innerHTML = "<a name='" + o + "'></a><div name='" + o + "'></div>", s.insertBefore(a, s.firstChild);
      var b = r.getElementsByName && r.getElementsByName(o).length === 2 + r.getElementsByName(o + 0).length;
      return d = !r.getElementById(o), s.removeChild(a), b;
    });

    try {
      x.call(s.childNodes, 0)[0].nodeType;
    } catch (bb) {
      x = function x(a) {
        var b,
            c = [];

        for (; b = this[a]; a++) {
          c.push(b);
        }

        return c;
      };
    }

    bc.matches = function (a, b) {
      return bc(a, null, null, b);
    }, bc.matchesSelector = function (a, b) {
      return bc(b, null, null, [a]).length > 0;
    }, f = bc.getText = function (a) {
      var b,
          c = '',
          d = 0,
          e = a.nodeType;

      if (e) {
        if (e === 1 || e === 9 || e === 11) {
          if (typeof a.textContent == 'string') return a.textContent;

          for (a = a.firstChild; a; a = a.nextSibling) {
            c += f(a);
          }
        } else if (e === 3 || e === 4) return a.nodeValue;
      } else for (; b = a[d]; d++) {
        c += f(b);
      }

      return c;
    }, g = bc.isXML = function (a) {
      var b = a && (a.ownerDocument || a).documentElement;
      return b ? b.nodeName !== 'HTML' : !1;
    }, h = bc.contains = s.contains ? function (a, b) {
      var c = a.nodeType === 9 ? a.documentElement : a,
          d = b && b.parentNode;
      return a === d || !!(d && d.nodeType === 1 && c.contains && c.contains(d));
    } : s.compareDocumentPosition ? function (a, b) {
      return b && !!(a.compareDocumentPosition(b) & 16);
    } : function (a, b) {
      while (b = b.parentNode) {
        if (b === a) return !0;
      }

      return !1;
    }, bc.attr = function (a, b) {
      var c,
          d = g(a);
      return d || (b = b.toLowerCase()), (c = e.attrHandle[b]) ? c(a) : d || $ ? a.getAttribute(b) : (c = a.getAttributeNode(b), c ? typeof a[b] == 'boolean' ? a[b] ? b : null : c.specified ? c.value : null : null);
    }, e = bc.selectors = {
      cacheLength: 50,
      createPseudo: z,
      match: W,
      attrHandle: Z ? {} : {
        href: function href(a) {
          return a.getAttribute('href', 2);
        },
        type: function type(a) {
          return a.getAttribute('type');
        }
      },
      find: {
        ID: d ? function (a, b, c) {
          if (_typeof(b.getElementById) !== n && !c) {
            var d = b.getElementById(a);
            return d && d.parentNode ? [d] : [];
          }
        } : function (a, c, d) {
          if (_typeof(c.getElementById) !== n && !d) {
            var e = c.getElementById(a);
            return e ? e.id === a || _typeof(e.getAttributeNode) !== n && e.getAttributeNode('id').value === a ? [e] : b : [];
          }
        },
        TAG: Y ? function (a, b) {
          if (_typeof(b.getElementsByTagName) !== n) return b.getElementsByTagName(a);
        } : function (a, b) {
          var c = b.getElementsByTagName(a);

          if (a === '*') {
            var d,
                e = [],
                f = 0;

            for (; d = c[f]; f++) {
              d.nodeType === 1 && e.push(d);
            }

            return e;
          }

          return c;
        },
        NAME: ba && function (a, b) {
          if (_typeof(b.getElementsByName) !== n) return b.getElementsByName(name);
        },
        CLASS: _ && function (a, b, c) {
          if (_typeof(b.getElementsByClassName) !== n && !c) return b.getElementsByClassName(a);
        }
      },
      relative: {
        '>': {
          dir: 'parentNode',
          first: !0
        },
        ' ': {
          dir: 'parentNode'
        },
        '+': {
          dir: 'previousSibling',
          first: !0
        },
        '~': {
          dir: 'previousSibling'
        }
      },
      preFilter: {
        ATTR: function ATTR(a) {
          return a[1] = a[1].replace(V, ''), a[3] = (a[4] || a[5] || '').replace(V, ''), a[2] === '~=' && (a[3] = ' ' + a[3] + ' '), a.slice(0, 4);
        },
        CHILD: function CHILD(a) {
          return a[1] = a[1].toLowerCase(), a[1] === 'nth' ? (a[2] || bc.error(a[0]), a[3] = +(a[3] ? a[4] + (a[5] || 1) : 2 * (a[2] === 'even' || a[2] === 'odd')), a[4] = +(a[6] + a[7] || a[2] === 'odd')) : a[2] && bc.error(a[0]), a;
        },
        PSEUDO: function PSEUDO(a) {
          var b, c;
          if (W.CHILD.test(a[0])) return null;
          if (a[3]) a[2] = a[3];else if (b = a[4]) O.test(b) && (c = bh(b, !0)) && (c = b.indexOf(')', b.length - c) - b.length) && (b = b.slice(0, c), a[0] = a[0].slice(0, c)), a[2] = b;
          return a.slice(0, 3);
        }
      },
      filter: {
        ID: d ? function (a) {
          return a = a.replace(V, ''), function (b) {
            return b.getAttribute('id') === a;
          };
        } : function (a) {
          return a = a.replace(V, ''), function (b) {
            var c = _typeof(b.getAttributeNode) !== n && b.getAttributeNode('id');
            return c && c.value === a;
          };
        },
        TAG: function TAG(a) {
          return a === '*' ? function () {
            return !0;
          } : (a = a.replace(V, '').toLowerCase(), function (b) {
            return b.nodeName && b.nodeName.toLowerCase() === a;
          });
        },
        CLASS: function CLASS(a) {
          var b = B[o][a];
          return b || (b = B(a, new RegExp('(^|' + E + ')' + a + '(' + E + '|$)'))), function (a) {
            return b.test(a.className || _typeof(a.getAttribute) !== n && a.getAttribute('class') || '');
          };
        },
        ATTR: function ATTR(a, b, c) {
          return function (d, e) {
            var f = bc.attr(d, a);
            return f == null ? b === '!=' : b ? (f += '', b === '=' ? f === c : b === '!=' ? f !== c : b === '^=' ? c && f.indexOf(c) === 0 : b === '*=' ? c && f.indexOf(c) > -1 : b === '$=' ? c && f.substr(f.length - c.length) === c : b === '~=' ? (' ' + f + ' ').indexOf(c) > -1 : b === '|=' ? f === c || f.substr(0, c.length + 1) === c + '-' : !1) : !0;
          };
        },
        CHILD: function CHILD(a, b, c, d) {
          return a === 'nth' ? function (a) {
            var b,
                e,
                f = a.parentNode;
            if (c === 1 && d === 0) return !0;

            if (f) {
              e = 0;

              for (b = f.firstChild; b; b = b.nextSibling) {
                if (b.nodeType === 1) {
                  e++;
                  if (a === b) break;
                }
              }
            }

            return e -= d, e === c || e % c === 0 && e / c >= 0;
          } : function (b) {
            var c = b;

            switch (a) {
              case 'only':
              case 'first':
                while (c = c.previousSibling) {
                  if (c.nodeType === 1) return !1;
                }

                if (a === 'first') return !0;
                c = b;

              case 'last':
                while (c = c.nextSibling) {
                  if (c.nodeType === 1) return !1;
                }

                return !0;
            }
          };
        },
        PSEUDO: function PSEUDO(a, b) {
          var c,
              d = e.pseudos[a] || e.setFilters[a.toLowerCase()] || bc.error('unsupported pseudo: ' + a);
          return d[o] ? d(b) : d.length > 1 ? (c = [a, a, '', b], e.setFilters.hasOwnProperty(a.toLowerCase()) ? z(function (a, c) {
            var e,
                f = d(a, b),
                g = f.length;

            while (g--) {
              e = y.call(a, f[g]), a[e] = !(c[e] = f[g]);
            }
          }) : function (a) {
            return d(a, 0, c);
          }) : d;
        }
      },
      pseudos: {
        not: z(function (a) {
          var b = [],
              c = [],
              d = i(a.replace(L, '$1'));
          return d[o] ? z(function (a, b, c, e) {
            var f,
                g = d(a, null, e, []),
                h = a.length;

            while (h--) {
              if (f = g[h]) a[h] = !(b[h] = f);
            }
          }) : function (a, e, f) {
            return b[0] = a, d(b, null, f, c), !c.pop();
          };
        }),
        has: z(function (a) {
          return function (b) {
            return bc(a, b).length > 0;
          };
        }),
        contains: z(function (a) {
          return function (b) {
            return (b.textContent || b.innerText || f(b)).indexOf(a) > -1;
          };
        }),
        enabled: function enabled(a) {
          return a.disabled === !1;
        },
        disabled: function disabled(a) {
          return a.disabled === !0;
        },
        checked: function checked(a) {
          var b = a.nodeName.toLowerCase();
          return b === 'input' && !!a.checked || b === 'option' && !!a.selected;
        },
        selected: function selected(a) {
          return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;
        },
        parent: function parent(a) {
          return !e.pseudos.empty(a);
        },
        empty: function empty(a) {
          var b;
          a = a.firstChild;

          while (a) {
            if (a.nodeName > '@' || (b = a.nodeType) === 3 || b === 4) return !1;
            a = a.nextSibling;
          }

          return !0;
        },
        header: function header(a) {
          return T.test(a.nodeName);
        },
        text: function text(a) {
          var b, c;
          return a.nodeName.toLowerCase() === 'input' && (b = a.type) === 'text' && ((c = a.getAttribute('type')) == null || c.toLowerCase() === b);
        },
        radio: bd('radio'),
        checkbox: bd('checkbox'),
        file: bd('file'),
        password: bd('password'),
        image: bd('image'),
        submit: be('submit'),
        reset: be('reset'),
        button: function button(a) {
          var b = a.nodeName.toLowerCase();
          return b === 'input' && a.type === 'button' || b === 'button';
        },
        input: function input(a) {
          return U.test(a.nodeName);
        },
        focus: function focus(a) {
          var b = a.ownerDocument;
          return a === b.activeElement && (!b.hasFocus || b.hasFocus()) && (!!a.type || !!a.href);
        },
        active: function active(a) {
          return a === a.ownerDocument.activeElement;
        },
        first: bf(function (a, b, c) {
          return [0];
        }),
        last: bf(function (a, b, c) {
          return [b - 1];
        }),
        eq: bf(function (a, b, c) {
          return [c < 0 ? c + b : c];
        }),
        even: bf(function (a, b, c) {
          for (var d = 0; d < b; d += 2) {
            a.push(d);
          }

          return a;
        }),
        odd: bf(function (a, b, c) {
          for (var d = 1; d < b; d += 2) {
            a.push(d);
          }

          return a;
        }),
        lt: bf(function (a, b, c) {
          for (var d = c < 0 ? c + b : c; --d >= 0;) {
            a.push(d);
          }

          return a;
        }),
        gt: bf(function (a, b, c) {
          for (var d = c < 0 ? c + b : c; ++d < b;) {
            a.push(d);
          }

          return a;
        })
      }
    }, j = s.compareDocumentPosition ? function (a, b) {
      return a === b ? (k = !0, 0) : (!a.compareDocumentPosition || !b.compareDocumentPosition ? a.compareDocumentPosition : a.compareDocumentPosition(b) & 4) ? -1 : 1;
    } : function (a, b) {
      if (a === b) return k = !0, 0;
      if (a.sourceIndex && b.sourceIndex) return a.sourceIndex - b.sourceIndex;
      var c,
          d,
          e = [],
          f = [],
          g = a.parentNode,
          h = b.parentNode,
          i = g;
      if (g === h) return bg(a, b);
      if (!g) return -1;
      if (!h) return 1;

      while (i) {
        e.unshift(i), i = i.parentNode;
      }

      i = h;

      while (i) {
        f.unshift(i), i = i.parentNode;
      }

      c = e.length, d = f.length;

      for (var j = 0; j < c && j < d; j++) {
        if (e[j] !== f[j]) return bg(e[j], f[j]);
      }

      return j === c ? bg(a, f[j], -1) : bg(e[j], b, 1);
    }, [0, 0].sort(j), m = !k, bc.uniqueSort = function (a) {
      var b,
          c = 1;
      k = m, a.sort(j);
      if (k) for (; b = a[c]; c++) {
        b === a[c - 1] && a.splice(c--, 1);
      }
      return a;
    }, bc.error = function (a) {
      throw new Error('Syntax error, unrecognized expression: ' + a);
    }, i = bc.compile = function (a, b) {
      var c,
          d = [],
          e = [],
          f = D[o][a];

      if (!f) {
        b || (b = bh(a)), c = b.length;

        while (c--) {
          f = bm(b[c]), f[o] ? d.push(f) : e.push(f);
        }

        f = D(a, bn(e, d));
      }

      return f;
    }, r.querySelectorAll && function () {
      var a,
          b = bp,
          c = /'|\\/g,
          d = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,
          e = [':focus'],
          f = [':active', ':focus'],
          h = s.matchesSelector || s.mozMatchesSelector || s.webkitMatchesSelector || s.oMatchesSelector || s.msMatchesSelector;
      X(function (a) {
        a.innerHTML = "<select><option selected=''></option></select>", a.querySelectorAll('[selected]').length || e.push('\\[' + E + '*(?:checked|disabled|ismap|multiple|readonly|selected|value)'), a.querySelectorAll(':checked').length || e.push(':checked');
      }), X(function (a) {
        a.innerHTML = "<p test=''></p>", a.querySelectorAll("[test^='']").length && e.push('[*^$]=' + E + '*(?:""|\'\')'), a.innerHTML = "<input type='hidden'/>", a.querySelectorAll(':enabled').length || e.push(':enabled', ':disabled');
      }), e = new RegExp(e.join('|')), bp = function bp(a, d, f, g, h) {
        if (!g && !h && (!e || !e.test(a))) {
          var i,
              j,
              k = !0,
              l = o,
              m = d,
              n = d.nodeType === 9 && a;

          if (d.nodeType === 1 && d.nodeName.toLowerCase() !== 'object') {
            i = bh(a), (k = d.getAttribute('id')) ? l = k.replace(c, '\\$&') : d.setAttribute('id', l), l = "[id='" + l + "'] ", j = i.length;

            while (j--) {
              i[j] = l + i[j].join('');
            }

            m = R.test(a) && d.parentNode || d, n = i.join(',');
          }

          if (n) try {
            return w.apply(f, x.call(m.querySelectorAll(n), 0)), f;
          } catch (p) {} finally {
            k || d.removeAttribute('id');
          }
        }

        return b(a, d, f, g, h);
      }, h && (X(function (b) {
        a = h.call(b, 'div');

        try {
          h.call(b, "[test!='']:sizzle"), f.push('!=', J);
        } catch (c) {}
      }), f = new RegExp(f.join('|')), bc.matchesSelector = function (b, c) {
        c = c.replace(d, "='$1']");
        if (!g(b) && !f.test(c) && (!e || !e.test(c))) try {
          var i = h.call(b, c);
          if (i || a || b.document && b.document.nodeType !== 11) return i;
        } catch (j) {}
        return bc(c, null, null, [b]).length > 0;
      });
    }(), e.pseudos.nth = e.pseudos.eq, e.filters = bq.prototype = e.pseudos, e.setFilters = new bq(), bc.attr = p.attr, p.find = bc, p.expr = bc.selectors, p.expr[':'] = p.expr.pseudos, p.unique = bc.uniqueSort, p.text = bc.getText, p.isXMLDoc = bc.isXML, p.contains = bc.contains;
  }(a);
  var bc = /Until$/,
      bd = /^(?:parents|prev(?:Until|All))/,
      be = /^.[^:#\[\.,]*$/,
      bf = p.expr.match.needsContext,
      bg = {
    children: !0,
    contents: !0,
    next: !0,
    prev: !0
  };
  p.fn.extend({
    find: function find(a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h = this;
      if (typeof a != 'string') return p(a).filter(function () {
        for (b = 0, c = h.length; b < c; b++) {
          if (p.contains(h[b], this)) return !0;
        }
      });
      g = this.pushStack('', 'find', a);

      for (b = 0, c = this.length; b < c; b++) {
        d = g.length, p.find(a, this[b], g);
        if (b > 0) for (e = d; e < g.length; e++) {
          for (f = 0; f < d; f++) {
            if (g[f] === g[e]) {
              g.splice(e--, 1);
              break;
            }
          }
        }
      }

      return g;
    },
    has: function has(a) {
      var b,
          c = p(a, this),
          d = c.length;
      return this.filter(function () {
        for (b = 0; b < d; b++) {
          if (p.contains(this, c[b])) return !0;
        }
      });
    },
    not: function not(a) {
      return this.pushStack(bj(this, a, !1), 'not', a);
    },
    filter: function filter(a) {
      return this.pushStack(bj(this, a, !0), 'filter', a);
    },
    is: function is(a) {
      return !!a && (typeof a == 'string' ? bf.test(a) ? p(a, this.context).index(this[0]) >= 0 : p.filter(a, this).length > 0 : this.filter(a).length > 0);
    },
    closest: function closest(a, b) {
      var c,
          d = 0,
          e = this.length,
          f = [],
          g = bf.test(a) || typeof a != 'string' ? p(a, b || this.context) : 0;

      for (; d < e; d++) {
        c = this[d];

        while (c && c.ownerDocument && c !== b && c.nodeType !== 11) {
          if (g ? g.index(c) > -1 : p.find.matchesSelector(c, a)) {
            f.push(c);
            break;
          }

          c = c.parentNode;
        }
      }

      return f = f.length > 1 ? p.unique(f) : f, this.pushStack(f, 'closest', a);
    },
    index: function index(a) {
      return a ? typeof a == 'string' ? p.inArray(this[0], p(a)) : p.inArray(a.jquery ? a[0] : a, this) : this[0] && this[0].parentNode ? this.prevAll().length : -1;
    },
    add: function add(a, b) {
      var c = typeof a == 'string' ? p(a, b) : p.makeArray(a && a.nodeType ? [a] : a),
          d = p.merge(this.get(), c);
      return this.pushStack(bh(c[0]) || bh(d[0]) ? d : p.unique(d));
    },
    addBack: function addBack(a) {
      return this.add(a == null ? this.prevObject : this.prevObject.filter(a));
    }
  }), p.fn.andSelf = p.fn.addBack, p.each({
    parent: function parent(a) {
      var b = a.parentNode;
      return b && b.nodeType !== 11 ? b : null;
    },
    parents: function parents(a) {
      return p.dir(a, 'parentNode');
    },
    parentsUntil: function parentsUntil(a, b, c) {
      return p.dir(a, 'parentNode', c);
    },
    next: function next(a) {
      return bi(a, 'nextSibling');
    },
    prev: function prev(a) {
      return bi(a, 'previousSibling');
    },
    nextAll: function nextAll(a) {
      return p.dir(a, 'nextSibling');
    },
    prevAll: function prevAll(a) {
      return p.dir(a, 'previousSibling');
    },
    nextUntil: function nextUntil(a, b, c) {
      return p.dir(a, 'nextSibling', c);
    },
    prevUntil: function prevUntil(a, b, c) {
      return p.dir(a, 'previousSibling', c);
    },
    siblings: function siblings(a) {
      return p.sibling((a.parentNode || {}).firstChild, a);
    },
    children: function children(a) {
      return p.sibling(a.firstChild);
    },
    contents: function contents(a) {
      return p.nodeName(a, 'iframe') ? a.contentDocument || a.contentWindow.document : p.merge([], a.childNodes);
    }
  }, function (a, b) {
    p.fn[a] = function (c, d) {
      var e = p.map(this, b, c);
      return bc.test(a) || (d = c), d && typeof d == 'string' && (e = p.filter(d, e)), e = this.length > 1 && !bg[a] ? p.unique(e) : e, this.length > 1 && bd.test(a) && (e = e.reverse()), this.pushStack(e, a, k.call(arguments).join(','));
    };
  }), p.extend({
    filter: function filter(a, b, c) {
      return c && (a = ':not(' + a + ')'), b.length === 1 ? p.find.matchesSelector(b[0], a) ? [b[0]] : [] : p.find.matches(a, b);
    },
    dir: function dir(a, c, d) {
      var e = [],
          f = a[c];

      while (f && f.nodeType !== 9 && (d === b || f.nodeType !== 1 || !p(f).is(d))) {
        f.nodeType === 1 && e.push(f), f = f[c];
      }

      return e;
    },
    sibling: function sibling(a, b) {
      var c = [];

      for (; a; a = a.nextSibling) {
        a.nodeType === 1 && a !== b && c.push(a);
      }

      return c;
    }
  });
  var bl = 'abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video',
      bm = / jQuery\d+="(?:null|\d+)"/g,
      bn = /^\s+/,
      bo = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
      bp = /<([\w:]+)/,
      bq = /<tbody/i,
      br = /<|&#?\w+;/,
      bs = /<(?:script|style|link)/i,
      bt = /<(?:script|object|embed|option|style)/i,
      bu = new RegExp('<(?:' + bl + ')[\\s/>]', 'i'),
      bv = /^(?:checkbox|radio)$/,
      bw = /checked\s*(?:[^=]|=\s*.checked.)/i,
      bx = /\/(java|ecma)script/i,
      by = /^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,
      bz = {
    option: [1, "<select multiple='multiple'>", '</select>'],
    legend: [1, '<fieldset>', '</fieldset>'],
    thead: [1, '<table>', '</table>'],
    tr: [2, '<table><tbody>', '</tbody></table>'],
    td: [3, '<table><tbody><tr>', '</tr></tbody></table>'],
    col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
    area: [1, '<map>', '</map>'],
    _default: [0, '', '']
  },
      bA = bk(e),
      bB = bA.appendChild(e.createElement('div'));
  bz.optgroup = bz.option, bz.tbody = bz.tfoot = bz.colgroup = bz.caption = bz.thead, bz.th = bz.td, p.support.htmlSerialize || (bz._default = [1, 'X<div>', '</div>']), p.fn.extend({
    text: function text(a) {
      return p.access(this, function (a) {
        return a === b ? p.text(this) : this.empty().append((this[0] && this[0].ownerDocument || e).createTextNode(a));
      }, null, a, arguments.length);
    },
    wrapAll: function wrapAll(a) {
      if (p.isFunction(a)) return this.each(function (b) {
        p(this).wrapAll(a.call(this, b));
      });

      if (this[0]) {
        var b = p(a, this[0].ownerDocument).eq(0).clone(!0);
        this[0].parentNode && b.insertBefore(this[0]), b.map(function () {
          var a = this;

          while (a.firstChild && a.firstChild.nodeType === 1) {
            a = a.firstChild;
          }

          return a;
        }).append(this);
      }

      return this;
    },
    wrapInner: function wrapInner(a) {
      return p.isFunction(a) ? this.each(function (b) {
        p(this).wrapInner(a.call(this, b));
      }) : this.each(function () {
        var b = p(this),
            c = b.contents();
        c.length ? c.wrapAll(a) : b.append(a);
      });
    },
    wrap: function wrap(a) {
      var b = p.isFunction(a);
      return this.each(function (c) {
        p(this).wrapAll(b ? a.call(this, c) : a);
      });
    },
    unwrap: function unwrap() {
      return this.parent().each(function () {
        p.nodeName(this, 'body') || p(this).replaceWith(this.childNodes);
      }).end();
    },
    append: function append() {
      return this.domManip(arguments, !0, function (a) {
        (this.nodeType === 1 || this.nodeType === 11) && this.appendChild(a);
      });
    },
    prepend: function prepend() {
      return this.domManip(arguments, !0, function (a) {
        (this.nodeType === 1 || this.nodeType === 11) && this.insertBefore(a, this.firstChild);
      });
    },
    before: function before() {
      if (!bh(this[0])) return this.domManip(arguments, !1, function (a) {
        this.parentNode.insertBefore(a, this);
      });

      if (arguments.length) {
        var a = p.clean(arguments);
        return this.pushStack(p.merge(a, this), 'before', this.selector);
      }
    },
    after: function after() {
      if (!bh(this[0])) return this.domManip(arguments, !1, function (a) {
        this.parentNode.insertBefore(a, this.nextSibling);
      });

      if (arguments.length) {
        var a = p.clean(arguments);
        return this.pushStack(p.merge(this, a), 'after', this.selector);
      }
    },
    remove: function remove(a, b) {
      var c,
          d = 0;

      for (; (c = this[d]) != null; d++) {
        if (!a || p.filter(a, [c]).length) !b && c.nodeType === 1 && (p.cleanData(c.getElementsByTagName('*')), p.cleanData([c])), c.parentNode && c.parentNode.removeChild(c);
      }

      return this;
    },
    empty: function empty() {
      var a,
          b = 0;

      for (; (a = this[b]) != null; b++) {
        a.nodeType === 1 && p.cleanData(a.getElementsByTagName('*'));

        while (a.firstChild) {
          a.removeChild(a.firstChild);
        }
      }

      return this;
    },
    clone: function clone(a, b) {
      return a = a == null ? !1 : a, b = b == null ? a : b, this.map(function () {
        return p.clone(this, a, b);
      });
    },
    html: function html(a) {
      return p.access(this, function (a) {
        var c = this[0] || {},
            d = 0,
            e = this.length;
        if (a === b) return c.nodeType === 1 ? c.innerHTML.replace(bm, '') : b;

        if (typeof a == 'string' && !bs.test(a) && (p.support.htmlSerialize || !bu.test(a)) && (p.support.leadingWhitespace || !bn.test(a)) && !bz[(bp.exec(a) || ['', ''])[1].toLowerCase()]) {
          a = a.replace(bo, '<$1></$2>');

          try {
            for (; d < e; d++) {
              c = this[d] || {}, c.nodeType === 1 && (p.cleanData(c.getElementsByTagName('*')), c.innerHTML = a);
            }

            c = 0;
          } catch (f) {}
        }

        c && this.empty().append(a);
      }, null, a, arguments.length);
    },
    replaceWith: function replaceWith(a) {
      return bh(this[0]) ? this.length ? this.pushStack(p(p.isFunction(a) ? a() : a), 'replaceWith', a) : this : p.isFunction(a) ? this.each(function (b) {
        var c = p(this),
            d = c.html();
        c.replaceWith(a.call(this, b, d));
      }) : (typeof a != 'string' && (a = p(a).detach()), this.each(function () {
        var b = this.nextSibling,
            c = this.parentNode;
        p(this).remove(), b ? p(b).before(a) : p(c).append(a);
      }));
    },
    detach: function detach(a) {
      return this.remove(a, !0);
    },
    domManip: function domManip(a, c, d) {
      a = [].concat.apply([], a);
      var e,
          f,
          g,
          h,
          i = 0,
          j = a[0],
          k = [],
          l = this.length;
      if (!p.support.checkClone && l > 1 && typeof j == 'string' && bw.test(j)) return this.each(function () {
        p(this).domManip(a, c, d);
      });
      if (p.isFunction(j)) return this.each(function (e) {
        var f = p(this);
        a[0] = j.call(this, e, c ? f.html() : b), f.domManip(a, c, d);
      });

      if (this[0]) {
        e = p.buildFragment(a, this, k), g = e.fragment, f = g.firstChild, g.childNodes.length === 1 && (g = f);

        if (f) {
          c = c && p.nodeName(f, 'tr');

          for (h = e.cacheable || l - 1; i < l; i++) {
            d.call(c && p.nodeName(this[i], 'table') ? bC(this[i], 'tbody') : this[i], i === h ? g : p.clone(g, !0, !0));
          }
        }

        g = f = null, k.length && p.each(k, function (a, b) {
          b.src ? p.ajax ? p.ajax({
            url: b.src,
            type: 'GET',
            dataType: 'script',
            async: !1,
            global: !1,
            throws: !0
          }) : p.error('no ajax') : p.globalEval((b.text || b.textContent || b.innerHTML || '').replace(by, '')), b.parentNode && b.parentNode.removeChild(b);
        });
      }

      return this;
    }
  }), p.buildFragment = function (a, c, d) {
    var f,
        g,
        h,
        i = a[0];
    return c = c || e, c = !c.nodeType && c[0] || c, c = c.ownerDocument || c, a.length === 1 && typeof i == 'string' && i.length < 512 && c === e && i.charAt(0) === '<' && !bt.test(i) && (p.support.checkClone || !bw.test(i)) && (p.support.html5Clone || !bu.test(i)) && (g = !0, f = p.fragments[i], h = f !== b), f || (f = c.createDocumentFragment(), p.clean(a, c, f, d), g && (p.fragments[i] = h && f)), {
      fragment: f,
      cacheable: g
    };
  }, p.fragments = {}, p.each({
    appendTo: 'append',
    prependTo: 'prepend',
    insertBefore: 'before',
    insertAfter: 'after',
    replaceAll: 'replaceWith'
  }, function (a, b) {
    p.fn[a] = function (c) {
      var d,
          e = 0,
          f = [],
          g = p(c),
          h = g.length,
          i = this.length === 1 && this[0].parentNode;
      if ((i == null || i && i.nodeType === 11 && i.childNodes.length === 1) && h === 1) return g[b](this[0]), this;

      for (; e < h; e++) {
        d = (e > 0 ? this.clone(!0) : this).get(), p(g[e])[b](d), f = f.concat(d);
      }

      return this.pushStack(f, a, g.selector);
    };
  }), p.extend({
    clone: function clone(a, b, c) {
      var d, e, f, g;
      p.support.html5Clone || p.isXMLDoc(a) || !bu.test('<' + a.nodeName + '>') ? g = a.cloneNode(!0) : (bB.innerHTML = a.outerHTML, bB.removeChild(g = bB.firstChild));

      if ((!p.support.noCloneEvent || !p.support.noCloneChecked) && (a.nodeType === 1 || a.nodeType === 11) && !p.isXMLDoc(a)) {
        bE(a, g), d = bF(a), e = bF(g);

        for (f = 0; d[f]; ++f) {
          e[f] && bE(d[f], e[f]);
        }
      }

      if (b) {
        bD(a, g);

        if (c) {
          d = bF(a), e = bF(g);

          for (f = 0; d[f]; ++f) {
            bD(d[f], e[f]);
          }
        }
      }

      return d = e = null, g;
    },
    clean: function clean(a, b, c, d) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          n,
          o,
          q,
          r,
          s = b === e && bA,
          t = [];
      if (!b || typeof b.createDocumentFragment == 'undefined') b = e;

      for (f = 0; (h = a[f]) != null; f++) {
        typeof h == 'number' && (h += '');
        if (!h) continue;
        if (typeof h == 'string') if (!br.test(h)) h = b.createTextNode(h);else {
          s = s || bk(b), l = b.createElement('div'), s.appendChild(l), h = h.replace(bo, '<$1></$2>'), i = (bp.exec(h) || ['', ''])[1].toLowerCase(), j = bz[i] || bz._default, k = j[0], l.innerHTML = j[1] + h + j[2];

          while (k--) {
            l = l.lastChild;
          }

          if (!p.support.tbody) {
            m = bq.test(h), n = i === 'table' && !m ? l.firstChild && l.firstChild.childNodes : j[1] === '<table>' && !m ? l.childNodes : [];

            for (g = n.length - 1; g >= 0; --g) {
              p.nodeName(n[g], 'tbody') && !n[g].childNodes.length && n[g].parentNode.removeChild(n[g]);
            }
          }

          !p.support.leadingWhitespace && bn.test(h) && l.insertBefore(b.createTextNode(bn.exec(h)[0]), l.firstChild), h = l.childNodes, l.parentNode.removeChild(l);
        }
        h.nodeType ? t.push(h) : p.merge(t, h);
      }

      l && (h = l = s = null);
      if (!p.support.appendChecked) for (f = 0; (h = t[f]) != null; f++) {
        p.nodeName(h, 'input') ? bG(h) : typeof h.getElementsByTagName != 'undefined' && p.grep(h.getElementsByTagName('input'), bG);
      }

      if (c) {
        q = function q(a) {
          if (!a.type || bx.test(a.type)) return d ? d.push(a.parentNode ? a.parentNode.removeChild(a) : a) : c.appendChild(a);
        };

        for (f = 0; (h = t[f]) != null; f++) {
          if (!p.nodeName(h, 'script') || !q(h)) c.appendChild(h), typeof h.getElementsByTagName != 'undefined' && (r = p.grep(p.merge([], h.getElementsByTagName('script')), q), t.splice.apply(t, [f + 1, 0].concat(r)), f += r.length);
        }
      }

      return t;
    },
    cleanData: function cleanData(a, b) {
      var c,
          d,
          e,
          f,
          g = 0,
          h = p.expando,
          i = p.cache,
          j = p.support.deleteExpando,
          k = p.event.special;

      for (; (e = a[g]) != null; g++) {
        if (b || p.acceptData(e)) {
          d = e[h], c = d && i[d];

          if (c) {
            if (c.events) for (f in c.events) {
              k[f] ? p.event.remove(e, f) : p.removeEvent(e, f, c.handle);
            }
            i[d] && (delete i[d], j ? delete e[h] : e.removeAttribute ? e.removeAttribute(h) : e[h] = null, p.deletedIds.push(d));
          }
        }
      }
    }
  }), function () {
    var a, b;
    p.uaMatch = function (a) {
      a = a.toLowerCase();
      var b = /(chrome)[ \/]([\w.]+)/.exec(a) || /(webkit)[ \/]([\w.]+)/.exec(a) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(a) || /(msie) ([\w.]+)/.exec(a) || a.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(a) || [];
      return {
        browser: b[1] || '',
        version: b[2] || '0'
      };
    }, a = p.uaMatch(g.userAgent), b = {}, a.browser && (b[a.browser] = !0, b.version = a.version), b.chrome ? b.webkit = !0 : b.webkit && (b.safari = !0), p.browser = b, p.sub = function () {
      function a(b, c) {
        return new a.fn.init(b, c);
      }

      p.extend(!0, a, this), a.superclass = this, a.fn = a.prototype = this(), a.fn.constructor = a, a.sub = this.sub, a.fn.init = function c(c, d) {
        return d && d instanceof p && !(d instanceof a) && (d = a(d)), p.fn.init.call(this, c, d, b);
      }, a.fn.init.prototype = a.fn;
      var b = a(e);
      return a;
    };
  }();
  var bH,
      bI,
      bJ,
      bK = /alpha\([^)]*\)/i,
      bL = /opacity=([^)]*)/,
      bM = /^(top|right|bottom|left)$/,
      bN = /^(none|table(?!-c[ea]).+)/,
      bO = /^margin/,
      bP = new RegExp('^(' + q + ')(.*)$', 'i'),
      bQ = new RegExp('^(' + q + ')(?!px)[a-z%]+$', 'i'),
      bR = new RegExp('^([-+])=(' + q + ')', 'i'),
      bS = {},
      bT = {
    position: 'absolute',
    visibility: 'hidden',
    display: 'block'
  },
      bU = {
    letterSpacing: 0,
    fontWeight: 400
  },
      bV = ['Top', 'Right', 'Bottom', 'Left'],
      bW = ['Webkit', 'O', 'Moz', 'ms'],
      bX = p.fn.toggle;
  p.fn.extend({
    css: function css(a, c) {
      return p.access(this, function (a, c, d) {
        return d !== b ? p.style(a, c, d) : p.css(a, c);
      }, a, c, arguments.length > 1);
    },
    show: function show() {
      return b$(this, !0);
    },
    hide: function hide() {
      return b$(this);
    },
    toggle: function toggle(a, b) {
      var c = typeof a == 'boolean';
      return p.isFunction(a) && p.isFunction(b) ? bX.apply(this, arguments) : this.each(function () {
        (c ? a : bZ(this)) ? p(this).show() : p(this).hide();
      });
    }
  }), p.extend({
    cssHooks: {
      opacity: {
        get: function get(a, b) {
          if (b) {
            var c = bH(a, 'opacity');
            return c === '' ? '1' : c;
          }
        }
      }
    },
    cssNumber: {
      fillOpacity: !0,
      fontWeight: !0,
      lineHeight: !0,
      opacity: !0,
      orphans: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0
    },
    cssProps: {
      float: p.support.cssFloat ? 'cssFloat' : 'styleFloat'
    },
    style: function style(a, c, d, e) {
      if (!a || a.nodeType === 3 || a.nodeType === 8 || !a.style) return;
      var f,
          g,
          h,
          i = p.camelCase(c),
          j = a.style;
      c = p.cssProps[i] || (p.cssProps[i] = bY(j, i)), h = p.cssHooks[c] || p.cssHooks[i];
      if (d === b) return h && 'get' in h && (f = h.get(a, !1, e)) !== b ? f : j[c];
      g = _typeof(d), g === 'string' && (f = bR.exec(d)) && (d = (f[1] + 1) * f[2] + parseFloat(p.css(a, c)), g = 'number');
      if (d == null || g === 'number' && isNaN(d)) return;
      g === 'number' && !p.cssNumber[i] && (d += 'px');
      if (!h || !('set' in h) || (d = h.set(a, d, e)) !== b) try {
        j[c] = d;
      } catch (k) {}
    },
    css: function css(a, c, d, e) {
      var f,
          g,
          h,
          i = p.camelCase(c);
      return c = p.cssProps[i] || (p.cssProps[i] = bY(a.style, i)), h = p.cssHooks[c] || p.cssHooks[i], h && 'get' in h && (f = h.get(a, !0, e)), f === b && (f = bH(a, c)), f === 'normal' && c in bU && (f = bU[c]), d || e !== b ? (g = parseFloat(f), d || p.isNumeric(g) ? g || 0 : f) : f;
    },
    swap: function swap(a, b, c) {
      var d,
          e,
          f = {};

      for (e in b) {
        f[e] = a.style[e], a.style[e] = b[e];
      }

      d = c.call(a);

      for (e in b) {
        a.style[e] = f[e];
      }

      return d;
    }
  }), a.getComputedStyle ? bH = function bH(b, c) {
    var d,
        e,
        f,
        g,
        h = a.getComputedStyle(b, null),
        i = b.style;
    return h && (d = h[c], d === '' && !p.contains(b.ownerDocument, b) && (d = p.style(b, c)), bQ.test(d) && bO.test(c) && (e = i.width, f = i.minWidth, g = i.maxWidth, i.minWidth = i.maxWidth = i.width = d, d = h.width, i.width = e, i.minWidth = f, i.maxWidth = g)), d;
  } : e.documentElement.currentStyle && (bH = function bH(a, b) {
    var c,
        d,
        e = a.currentStyle && a.currentStyle[b],
        f = a.style;
    return e == null && f && f[b] && (e = f[b]), bQ.test(e) && !bM.test(b) && (c = f.left, d = a.runtimeStyle && a.runtimeStyle.left, d && (a.runtimeStyle.left = a.currentStyle.left), f.left = b === 'fontSize' ? '1em' : e, e = f.pixelLeft + 'px', f.left = c, d && (a.runtimeStyle.left = d)), e === '' ? 'auto' : e;
  }), p.each(['height', 'width'], function (a, b) {
    p.cssHooks[b] = {
      get: function get(a, c, d) {
        if (c) return a.offsetWidth === 0 && bN.test(bH(a, 'display')) ? p.swap(a, bT, function () {
          return cb(a, b, d);
        }) : cb(a, b, d);
      },
      set: function set(a, c, d) {
        return b_(a, c, d ? ca(a, b, d, p.support.boxSizing && p.css(a, 'boxSizing') === 'border-box') : 0);
      }
    };
  }), p.support.opacity || (p.cssHooks.opacity = {
    get: function get(a, b) {
      return bL.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || '') ? 0.01 * parseFloat(RegExp.$1) + '' : b ? '1' : '';
    },
    set: function set(a, b) {
      var c = a.style,
          d = a.currentStyle,
          e = p.isNumeric(b) ? 'alpha(opacity=' + b * 100 + ')' : '',
          f = d && d.filter || c.filter || '';
      c.zoom = 1;

      if (b >= 1 && p.trim(f.replace(bK, '')) === '' && c.removeAttribute) {
        c.removeAttribute('filter');
        if (d && !d.filter) return;
      }

      c.filter = bK.test(f) ? f.replace(bK, e) : f + ' ' + e;
    }
  }), p(function () {
    p.support.reliableMarginRight || (p.cssHooks.marginRight = {
      get: function get(a, b) {
        return p.swap(a, {
          display: 'inline-block'
        }, function () {
          if (b) return bH(a, 'marginRight');
        });
      }
    }), !p.support.pixelPosition && p.fn.position && p.each(['top', 'left'], function (a, b) {
      p.cssHooks[b] = {
        get: function get(a, c) {
          if (c) {
            var d = bH(a, b);
            return bQ.test(d) ? p(a).position()[b] + 'px' : d;
          }
        }
      };
    });
  }), p.expr && p.expr.filters && (p.expr.filters.hidden = function (a) {
    return a.offsetWidth === 0 && a.offsetHeight === 0 || !p.support.reliableHiddenOffsets && (a.style && a.style.display || bH(a, 'display')) === 'none';
  }, p.expr.filters.visible = function (a) {
    return !p.expr.filters.hidden(a);
  }), p.each({
    margin: '',
    padding: '',
    border: 'Width'
  }, function (a, b) {
    p.cssHooks[a + b] = {
      expand: function expand(c) {
        var d,
            e = typeof c == 'string' ? c.split(' ') : [c],
            f = {};

        for (d = 0; d < 4; d++) {
          f[a + bV[d] + b] = e[d] || e[d - 2] || e[0];
        }

        return f;
      }
    }, bO.test(a) || (p.cssHooks[a + b].set = b_);
  });
  var cd = /%20/g,
      ce = /\[\]$/,
      cf = /\r?\n/g,
      cg = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
      ch = /^(?:select|textarea)/i;
  p.fn.extend({
    serialize: function serialize() {
      return p.param(this.serializeArray());
    },
    serializeArray: function serializeArray() {
      return this.map(function () {
        return this.elements ? p.makeArray(this.elements) : this;
      }).filter(function () {
        return this.name && !this.disabled && (this.checked || ch.test(this.nodeName) || cg.test(this.type));
      }).map(function (a, b) {
        var c = p(this).val();
        return c == null ? null : p.isArray(c) ? p.map(c, function (a, c) {
          return {
            name: b.name,
            value: a.replace(cf, '\r\n')
          };
        }) : {
          name: b.name,
          value: c.replace(cf, '\r\n')
        };
      }).get();
    }
  }), p.param = function (a, c) {
    var d,
        e = [],
        f = function f(a, b) {
      b = p.isFunction(b) ? b() : b == null ? '' : b, e[e.length] = encodeURIComponent(a) + '=' + encodeURIComponent(b);
    };

    c === b && (c = p.ajaxSettings && p.ajaxSettings.traditional);
    if (p.isArray(a) || a.jquery && !p.isPlainObject(a)) p.each(a, function () {
      f(this.name, this.value);
    });else for (d in a) {
      ci(d, a[d], c, f);
    }
    return e.join('&').replace(cd, '+');
  };
  var cj,
      ck,
      cl = /#.*$/,
      cm = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm,
      cn = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
      co = /^(?:GET|HEAD)$/,
      cp = /^\/\//,
      cq = /\?/,
      cr = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
      cs = /([?&])_=[^&]*/,
      ct = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,
      cu = p.fn.load,
      cv = {},
      cw = {},
      cx = ['*/'] + ['*'];

  try {
    ck = f.href;
  } catch (cy) {
    ck = e.createElement('a'), ck.href = '', ck = ck.href;
  }

  cj = ct.exec(ck.toLowerCase()) || [], p.fn.load = function (a, c, d) {
    if (typeof a != 'string' && cu) return cu.apply(this, arguments);
    if (!this.length) return this;
    var e,
        f,
        g,
        h = this,
        i = a.indexOf(' ');
    return i >= 0 && (e = a.slice(i, a.length), a = a.slice(0, i)), p.isFunction(c) ? (d = c, c = b) : c && _typeof(c) == 'object' && (f = 'POST'), p.ajax({
      url: a,
      type: f,
      dataType: 'html',
      data: c,
      complete: function complete(a, b) {
        d && h.each(d, g || [a.responseText, b, a]);
      }
    }).done(function (a) {
      g = arguments, h.html(e ? p('<div>').append(a.replace(cr, '')).find(e) : a);
    }), this;
  }, p.each('ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend'.split(' '), function (a, b) {
    p.fn[b] = function (a) {
      return this.on(b, a);
    };
  }), p.each(['get', 'post'], function (a, c) {
    p[c] = function (a, d, e, f) {
      return p.isFunction(d) && (f = f || e, e = d, d = b), p.ajax({
        type: c,
        url: a,
        data: d,
        success: e,
        dataType: f
      });
    };
  }), p.extend({
    getScript: function getScript(a, c) {
      return p.get(a, b, c, 'script');
    },
    getJSON: function getJSON(a, b, c) {
      return p.get(a, b, c, 'json');
    },
    ajaxSetup: function ajaxSetup(a, b) {
      return b ? cB(a, p.ajaxSettings) : (b = a, a = p.ajaxSettings), cB(a, b), a;
    },
    ajaxSettings: {
      url: ck,
      isLocal: cn.test(cj[1]),
      global: !0,
      type: 'GET',
      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
      processData: !0,
      async: !0,
      accepts: {
        xml: 'application/xml, text/xml',
        html: 'text/html',
        text: 'text/plain',
        json: 'application/json, text/javascript',
        '*': cx
      },
      contents: {
        xml: /xml/,
        html: /html/,
        json: /json/
      },
      responseFields: {
        xml: 'responseXML',
        text: 'responseText'
      },
      converters: {
        '* text': a.String,
        'text html': !0,
        'text json': p.parseJSON,
        'text xml': p.parseXML
      },
      flatOptions: {
        context: !0,
        url: !0
      }
    },
    ajaxPrefilter: cz(cv),
    ajaxTransport: cz(cw),
    ajax: function ajax(a, c) {
      function y(a, c, f, i) {
        var k,
            s,
            t,
            u,
            w,
            y = c;
        if (v === 2) return;
        v = 2, h && clearTimeout(h), g = b, e = i || '', x.readyState = a > 0 ? 4 : 0, f && (u = cC(l, x, f));
        if (a >= 200 && a < 300 || a === 304) l.ifModified && (w = x.getResponseHeader('Last-Modified'), w && (p.lastModified[d] = w), w = x.getResponseHeader('Etag'), w && (p.etag[d] = w)), a === 304 ? (y = 'notmodified', k = !0) : (k = cD(l, u), y = k.state, s = k.data, t = k.error, k = !t);else {
          t = y;
          if (!y || a) y = 'error', a < 0 && (a = 0);
        }
        x.status = a, x.statusText = (c || y) + '', k ? o.resolveWith(m, [s, y, x]) : o.rejectWith(m, [x, y, t]), x.statusCode(r), r = b, j && n.trigger('ajax' + (k ? 'Success' : 'Error'), [x, l, k ? s : t]), q.fireWith(m, [x, y]), j && (n.trigger('ajaxComplete', [x, l]), --p.active || p.event.trigger('ajaxStop'));
      }

      _typeof(a) == 'object' && (c = a, a = b), c = c || {};
      var d,
          e,
          f,
          g,
          h,
          i,
          j,
          k,
          l = p.ajaxSetup({}, c),
          m = l.context || l,
          n = m !== l && (m.nodeType || m instanceof p) ? p(m) : p.event,
          o = p.Deferred(),
          q = p.Callbacks('once memory'),
          r = l.statusCode || {},
          t = {},
          u = {},
          v = 0,
          w = 'canceled',
          x = {
        readyState: 0,
        setRequestHeader: function setRequestHeader(a, b) {
          if (!v) {
            var c = a.toLowerCase();
            a = u[c] = u[c] || a, t[a] = b;
          }

          return this;
        },
        getAllResponseHeaders: function getAllResponseHeaders() {
          return v === 2 ? e : null;
        },
        getResponseHeader: function getResponseHeader(a) {
          var c;

          if (v === 2) {
            if (!f) {
              f = {};

              while (c = cm.exec(e)) {
                f[c[1].toLowerCase()] = c[2];
              }
            }

            c = f[a.toLowerCase()];
          }

          return c === b ? null : c;
        },
        overrideMimeType: function overrideMimeType(a) {
          return v || (l.mimeType = a), this;
        },
        abort: function abort(a) {
          return a = a || w, g && g.abort(a), y(0, a), this;
        }
      };
      o.promise(x), x.success = x.done, x.error = x.fail, x.complete = q.add, x.statusCode = function (a) {
        if (a) {
          var b;
          if (v < 2) for (b in a) {
            r[b] = [r[b], a[b]];
          } else b = a[x.status], x.always(b);
        }

        return this;
      }, l.url = ((a || l.url) + '').replace(cl, '').replace(cp, cj[1] + '//'), l.dataTypes = p.trim(l.dataType || '*').toLowerCase().split(s), l.crossDomain == null && (i = ct.exec(l.url.toLowerCase()) || !1, l.crossDomain = i && i.join(':') + (i[3] ? '' : i[1] === 'http:' ? 80 : 443) !== cj.join(':') + (cj[3] ? '' : cj[1] === 'http:' ? 80 : 443)), l.data && l.processData && typeof l.data != 'string' && (l.data = p.param(l.data, l.traditional)), cA(cv, l, c, x);
      if (v === 2) return x;
      j = l.global, l.type = l.type.toUpperCase(), l.hasContent = !co.test(l.type), j && p.active++ === 0 && p.event.trigger('ajaxStart');

      if (!l.hasContent) {
        l.data && (l.url += (cq.test(l.url) ? '&' : '?') + l.data, delete l.data), d = l.url;

        if (l.cache === !1) {
          var z = p.now(),
              A = l.url.replace(cs, '$1_=' + z);
          l.url = A + (A === l.url ? (cq.test(l.url) ? '&' : '?') + '_=' + z : '');
        }
      }

      (l.data && l.hasContent && l.contentType !== !1 || c.contentType) && x.setRequestHeader('Content-Type', l.contentType), l.ifModified && (d = d || l.url, p.lastModified[d] && x.setRequestHeader('If-Modified-Since', p.lastModified[d]), p.etag[d] && x.setRequestHeader('If-None-Match', p.etag[d])), x.setRequestHeader('Accept', l.dataTypes[0] && l.accepts[l.dataTypes[0]] ? l.accepts[l.dataTypes[0]] + (l.dataTypes[0] !== '*' ? ', ' + cx + '; q=0.01' : '') : l.accepts['*']);

      for (k in l.headers) {
        x.setRequestHeader(k, l.headers[k]);
      }

      if (!l.beforeSend || l.beforeSend.call(m, x, l) !== !1 && v !== 2) {
        w = 'abort';

        for (k in {
          success: 1,
          error: 1,
          complete: 1
        }) {
          x[k](l[k]);
        }

        g = cA(cw, l, c, x);
        if (!g) y(-1, 'No Transport');else {
          x.readyState = 1, j && n.trigger('ajaxSend', [x, l]), l.async && l.timeout > 0 && (h = setTimeout(function () {
            x.abort('timeout');
          }, l.timeout));

          try {
            v = 1, g.send(t, y);
          } catch (B) {
            if (v < 2) y(-1, B);else throw B;
          }
        }
        return x;
      }

      return x.abort();
    },
    active: 0,
    lastModified: {},
    etag: {}
  });
  var cE = [],
      cF = /\?/,
      cG = /(=)\?(?=&|$)|\?\?/,
      cH = p.now();
  p.ajaxSetup({
    jsonp: 'callback',
    jsonpCallback: function jsonpCallback() {
      var a = cE.pop() || p.expando + '_' + cH++;
      return this[a] = !0, a;
    }
  }), p.ajaxPrefilter('json jsonp', function (c, d, e) {
    var f,
        g,
        h,
        i = c.data,
        j = c.url,
        k = c.jsonp !== !1,
        l = k && cG.test(j),
        m = k && !l && typeof i == 'string' && !(c.contentType || '').indexOf('application/x-www-form-urlencoded') && cG.test(i);
    if (c.dataTypes[0] === 'jsonp' || l || m) return f = c.jsonpCallback = p.isFunction(c.jsonpCallback) ? c.jsonpCallback() : c.jsonpCallback, g = a[f], l ? c.url = j.replace(cG, '$1' + f) : m ? c.data = i.replace(cG, '$1' + f) : k && (c.url += (cF.test(j) ? '&' : '?') + c.jsonp + '=' + f), c.converters['script json'] = function () {
      return h || p.error(f + ' was not called'), h[0];
    }, c.dataTypes[0] = 'json', a[f] = function () {
      h = arguments;
    }, e.always(function () {
      a[f] = g, c[f] && (c.jsonpCallback = d.jsonpCallback, cE.push(f)), h && p.isFunction(g) && g(h[0]), h = g = b;
    }), 'script';
  }), p.ajaxSetup({
    accepts: {
      script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript'
    },
    contents: {
      script: /javascript|ecmascript/
    },
    converters: {
      'text script': function textScript(a) {
        return p.globalEval(a), a;
      }
    }
  }), p.ajaxPrefilter('script', function (a) {
    a.cache === b && (a.cache = !1), a.crossDomain && (a.type = 'GET', a.global = !1);
  }), p.ajaxTransport('script', function (a) {
    if (a.crossDomain) {
      var c,
          d = e.head || e.getElementsByTagName('head')[0] || e.documentElement;
      return {
        send: function send(f, g) {
          c = e.createElement('script'), c.async = 'async', a.scriptCharset && (c.charset = a.scriptCharset), c.src = a.url, c.onload = c.onreadystatechange = function (a, e) {
            if (e || !c.readyState || /loaded|complete/.test(c.readyState)) c.onload = c.onreadystatechange = null, d && c.parentNode && d.removeChild(c), c = b, e || g(200, 'success');
          }, d.insertBefore(c, d.firstChild);
        },
        abort: function abort() {
          c && c.onload(0, 1);
        }
      };
    }
  });
  var cI,
      cJ = a.ActiveXObject ? function () {
    for (var a in cI) {
      cI[a](0, 1);
    }
  } : !1,
      cK = 0;
  p.ajaxSettings.xhr = a.ActiveXObject ? function () {
    return !this.isLocal && cL() || cM();
  } : cL, function (a) {
    p.extend(p.support, {
      ajax: !!a,
      cors: !!a && 'withCredentials' in a
    });
  }(p.ajaxSettings.xhr()), p.support.ajax && p.ajaxTransport(function (c) {
    if (!c.crossDomain || p.support.cors) {
      var _d;

      return {
        send: function send(e, f) {
          var g,
              h,
              i = c.xhr();
          c.username ? i.open(c.type, c.url, c.async, c.username, c.password) : i.open(c.type, c.url, c.async);
          if (c.xhrFields) for (h in c.xhrFields) {
            i[h] = c.xhrFields[h];
          }
          c.mimeType && i.overrideMimeType && i.overrideMimeType(c.mimeType), !c.crossDomain && !e['X-Requested-With'] && (e['X-Requested-With'] = 'XMLHttpRequest');

          try {
            for (h in e) {
              i.setRequestHeader(h, e[h]);
            }
          } catch (j) {}

          i.send(c.hasContent && c.data || null), _d = function d(a, e) {
            var h, j, k, l, m;

            try {
              if (_d && (e || i.readyState === 4)) {
                _d = b, g && (i.onreadystatechange = p.noop, cJ && delete cI[g]);
                if (e) i.readyState !== 4 && i.abort();else {
                  h = i.status, k = i.getAllResponseHeaders(), l = {}, m = i.responseXML, m && m.documentElement && (l.xml = m);

                  try {
                    l.text = i.responseText;
                  } catch (a) {}

                  try {
                    j = i.statusText;
                  } catch (n) {
                    j = '';
                  }

                  !h && c.isLocal && !c.crossDomain ? h = l.text ? 200 : 404 : h === 1223 && (h = 204);
                }
              }
            } catch (o) {
              e || f(-1, o);
            }

            l && f(h, j, l, k);
          }, c.async ? i.readyState === 4 ? setTimeout(_d, 0) : (g = ++cK, cJ && (cI || (cI = {}, p(a).unload(cJ)), cI[g] = _d), i.onreadystatechange = _d) : _d();
        },
        abort: function abort() {
          _d && _d(0, 1);
        }
      };
    }
  });
  var cN,
      cO,
      cP = /^(?:toggle|show|hide)$/,
      cQ = new RegExp('^(?:([-+])=|)(' + q + ')([a-z%]*)$', 'i'),
      cR = /queueHooks$/,
      cS = [cY],
      cT = {
    '*': [function (a, b) {
      var c,
          d,
          e = this.createTween(a, b),
          f = cQ.exec(b),
          g = e.cur(),
          h = +g || 0,
          i = 1,
          j = 20;

      if (f) {
        c = +f[2], d = f[3] || (p.cssNumber[a] ? '' : 'px');

        if (d !== 'px' && h) {
          h = p.css(e.elem, a, !0) || c || 1;

          do {
            i = i || '.5', h = h / i, p.style(e.elem, a, h + d);
          } while (i !== (i = e.cur() / g) && i !== 1 && --j);
        }

        e.unit = d, e.start = h, e.end = f[1] ? h + (f[1] + 1) * c : c;
      }

      return e;
    }]
  };
  p.Animation = p.extend(cW, {
    tweener: function tweener(a, b) {
      p.isFunction(a) ? (b = a, a = ['*']) : a = a.split(' ');
      var c,
          d = 0,
          e = a.length;

      for (; d < e; d++) {
        c = a[d], cT[c] = cT[c] || [], cT[c].unshift(b);
      }
    },
    prefilter: function prefilter(a, b) {
      b ? cS.unshift(a) : cS.push(a);
    }
  }), p.Tween = cZ, cZ.prototype = {
    constructor: cZ,
    init: function init(a, b, c, d, e, f) {
      this.elem = a, this.prop = c, this.easing = e || 'swing', this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (p.cssNumber[c] ? '' : 'px');
    },
    cur: function cur() {
      var a = cZ.propHooks[this.prop];
      return a && a.get ? a.get(this) : cZ.propHooks._default.get(this);
    },
    run: function run(a) {
      var b,
          c = cZ.propHooks[this.prop];
      return this.options.duration ? this.pos = b = p.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : this.pos = b = a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : cZ.propHooks._default.set(this), this;
    }
  }, cZ.prototype.init.prototype = cZ.prototype, cZ.propHooks = {
    _default: {
      get: function get(a) {
        var b;
        return a.elem[a.prop] == null || !!a.elem.style && a.elem.style[a.prop] != null ? (b = p.css(a.elem, a.prop, !1, ''), !b || b === 'auto' ? 0 : b) : a.elem[a.prop];
      },
      set: function set(a) {
        p.fx.step[a.prop] ? p.fx.step[a.prop](a) : a.elem.style && (a.elem.style[p.cssProps[a.prop]] != null || p.cssHooks[a.prop]) ? p.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now;
      }
    }
  }, cZ.propHooks.scrollTop = cZ.propHooks.scrollLeft = {
    set: function set(a) {
      a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
    }
  }, p.each(['toggle', 'show', 'hide'], function (a, b) {
    var c = p.fn[b];

    p.fn[b] = function (d, e, f) {
      return d == null || typeof d == 'boolean' || !a && p.isFunction(d) && p.isFunction(e) ? c.apply(this, arguments) : this.animate(c$(b, !0), d, e, f);
    };
  }), p.fn.extend({
    fadeTo: function fadeTo(a, b, c, d) {
      return this.filter(bZ).css('opacity', 0).show().end().animate({
        opacity: b
      }, a, c, d);
    },
    animate: function animate(a, b, c, d) {
      var e = p.isEmptyObject(a),
          f = p.speed(b, c, d),
          g = function g() {
        var b = cW(this, p.extend({}, a), f);
        e && b.stop(!0);
      };

      return e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);
    },
    stop: function stop(a, c, d) {
      var e = function e(a) {
        var b = a.stop;
        delete a.stop, b(d);
      };

      return typeof a != 'string' && (d = c, c = a, a = b), c && a !== !1 && this.queue(a || 'fx', []), this.each(function () {
        var b = !0,
            c = a != null && a + 'queueHooks',
            f = p.timers,
            g = p._data(this);

        if (c) g[c] && g[c].stop && e(g[c]);else for (c in g) {
          g[c] && g[c].stop && cR.test(c) && e(g[c]);
        }

        for (c = f.length; c--;) {
          f[c].elem === this && (a == null || f[c].queue === a) && (f[c].anim.stop(d), b = !1, f.splice(c, 1));
        }

        (b || !d) && p.dequeue(this, a);
      });
    }
  }), p.each({
    slideDown: c$('show'),
    slideUp: c$('hide'),
    slideToggle: c$('toggle'),
    fadeIn: {
      opacity: 'show'
    },
    fadeOut: {
      opacity: 'hide'
    },
    fadeToggle: {
      opacity: 'toggle'
    }
  }, function (a, b) {
    p.fn[a] = function (a, c, d) {
      return this.animate(b, a, c, d);
    };
  }), p.speed = function (a, b, c) {
    var d = a && _typeof(a) == 'object' ? p.extend({}, a) : {
      complete: c || !c && b || p.isFunction(a) && a,
      duration: a,
      easing: c && b || b && !p.isFunction(b) && b
    };
    d.duration = p.fx.off ? 0 : typeof d.duration == 'number' ? d.duration : d.duration in p.fx.speeds ? p.fx.speeds[d.duration] : p.fx.speeds._default;
    if (d.queue == null || d.queue === !0) d.queue = 'fx';
    return d.old = d.complete, d.complete = function () {
      p.isFunction(d.old) && d.old.call(this), d.queue && p.dequeue(this, d.queue);
    }, d;
  }, p.easing = {
    linear: function linear(a) {
      return a;
    },
    swing: function swing(a) {
      return 0.5 - Math.cos(a * Math.PI) / 2;
    }
  }, p.timers = [], p.fx = cZ.prototype.init, p.fx.tick = function () {
    var a,
        b = p.timers,
        c = 0;

    for (; c < b.length; c++) {
      a = b[c], !a() && b[c] === a && b.splice(c--, 1);
    }

    b.length || p.fx.stop();
  }, p.fx.timer = function (a) {
    a() && p.timers.push(a) && !cO && (cO = setInterval(p.fx.tick, p.fx.interval));
  }, p.fx.interval = 13, p.fx.stop = function () {
    clearInterval(cO), cO = null;
  }, p.fx.speeds = {
    slow: 600,
    fast: 200,
    _default: 400
  }, p.fx.step = {}, p.expr && p.expr.filters && (p.expr.filters.animated = function (a) {
    return p.grep(p.timers, function (b) {
      return a === b.elem;
    }).length;
  });
  var c_ = /^(?:body|html)$/i;
  p.fn.offset = function (a) {
    if (arguments.length) return a === b ? this : this.each(function (b) {
      p.offset.setOffset(this, a, b);
    });
    var c,
        d,
        e,
        f,
        g,
        h,
        i,
        j = {
      top: 0,
      left: 0
    },
        k = this[0],
        l = k && k.ownerDocument;
    if (!l) return;
    return (d = l.body) === k ? p.offset.bodyOffset(k) : (c = l.documentElement, p.contains(c, k) ? (typeof k.getBoundingClientRect != 'undefined' && (j = k.getBoundingClientRect()), e = da(l), f = c.clientTop || d.clientTop || 0, g = c.clientLeft || d.clientLeft || 0, h = e.pageYOffset || c.scrollTop, i = e.pageXOffset || c.scrollLeft, {
      top: j.top + h - f,
      left: j.left + i - g
    }) : j);
  }, p.offset = {
    bodyOffset: function bodyOffset(a) {
      var b = a.offsetTop,
          c = a.offsetLeft;
      return p.support.doesNotIncludeMarginInBodyOffset && (b += parseFloat(p.css(a, 'marginTop')) || 0, c += parseFloat(p.css(a, 'marginLeft')) || 0), {
        top: b,
        left: c
      };
    },
    setOffset: function setOffset(a, b, c) {
      var d = p.css(a, 'position');
      d === 'static' && (a.style.position = 'relative');
      var e = p(a),
          f = e.offset(),
          g = p.css(a, 'top'),
          h = p.css(a, 'left'),
          i = (d === 'absolute' || d === 'fixed') && p.inArray('auto', [g, h]) > -1,
          j = {},
          k = {},
          l,
          m;
      i ? (k = e.position(), l = k.top, m = k.left) : (l = parseFloat(g) || 0, m = parseFloat(h) || 0), p.isFunction(b) && (b = b.call(a, c, f)), b.top != null && (j.top = b.top - f.top + l), b.left != null && (j.left = b.left - f.left + m), 'using' in b ? b.using.call(a, j) : e.css(j);
    }
  }, p.fn.extend({
    position: function position() {
      if (!this[0]) return;
      var a = this[0],
          b = this.offsetParent(),
          c = this.offset(),
          d = c_.test(b[0].nodeName) ? {
        top: 0,
        left: 0
      } : b.offset();
      return c.top -= parseFloat(p.css(a, 'marginTop')) || 0, c.left -= parseFloat(p.css(a, 'marginLeft')) || 0, d.top += parseFloat(p.css(b[0], 'borderTopWidth')) || 0, d.left += parseFloat(p.css(b[0], 'borderLeftWidth')) || 0, {
        top: c.top - d.top,
        left: c.left - d.left
      };
    },
    offsetParent: function offsetParent() {
      return this.map(function () {
        var a = this.offsetParent || e.body;

        while (a && !c_.test(a.nodeName) && p.css(a, 'position') === 'static') {
          a = a.offsetParent;
        }

        return a || e.body;
      });
    }
  }), p.each({
    scrollLeft: 'pageXOffset',
    scrollTop: 'pageYOffset'
  }, function (a, c) {
    var d = /Y/.test(c);

    p.fn[a] = function (e) {
      return p.access(this, function (a, e, f) {
        var g = da(a);
        if (f === b) return g ? c in g ? g[c] : g.document.documentElement[e] : a[e];
        g ? g.scrollTo(d ? p(g).scrollLeft() : f, d ? f : p(g).scrollTop()) : a[e] = f;
      }, a, e, arguments.length, null);
    };
  }), p.each({
    Height: 'height',
    Width: 'width'
  }, function (a, c) {
    p.each({
      padding: 'inner' + a,
      content: c,
      '': 'outer' + a
    }, function (d, e) {
      p.fn[e] = function (e, f) {
        var g = arguments.length && (d || typeof e != 'boolean'),
            h = d || (e === !0 || f === !0 ? 'margin' : 'border');
        return p.access(this, function (c, d, e) {
          var f;
          return p.isWindow(c) ? c.document.documentElement['client' + a] : c.nodeType === 9 ? (f = c.documentElement, Math.max(c.body['scroll' + a], f['scroll' + a], c.body['offset' + a], f['offset' + a], f['client' + a])) : e === b ? p.css(c, d, e, h) : p.style(c, d, e, h);
        }, c, g ? e : b, g, null);
      };
    });
  }), a.jQuery = a.$ = p, typeof define == 'function' && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js") && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js").jQuery && define('jquery', [], function () {
    return p;
  });
})(window);

/***/ }),

/***/ "./src/js/main/js-error-notifier.js":
/*!******************************************!*\
  !*** ./src/js/main/js-error-notifier.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * creates and adds a function as the default error handler for jQuery ajax operations
 */
module.exports = function () {
  var $ = __webpack_require__(/*! ./jquery */ "./src/js/main/jquery/index.js"),
      webService = '//webapps.city.ac.uk/matrix/services/jQueryError.php',
      notify = function notify(event, jqXHR, ajaxSettings, errorThrown) {
    //insert an "image" which has a web service as the src,
    //the web service sends email to ucs-webteam
    $('<img />', {
      src: webService + '?u=' + escape(document.location.href) + '&s=' + escape(ajaxSettings.url) + '&t=' + ajaxSettings.type + '&e=' + escape(errorThrown),
      style: 'display: none'
    }).appendTo('#footer');
  }; //register this as a global ajax event handler


  $(function () {
    $(document).ajaxError(notify);
  });
};

/***/ }),

/***/ "./src/js/main/main.js":
/*!*****************************!*\
  !*** ./src/js/main/main.js ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.regexp.split */ "./node_modules/core-js/modules/es6.regexp.split.js");
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.regexp.replace */ "./node_modules/core-js/modules/es6.regexp.replace.js");
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_2__);






module.exports = function () {
  var $ = __webpack_require__(/*! ./jquery */ "./src/js/main/jquery/index.js"),
      debug = __webpack_require__(/*! ../utils/debug */ "./src/js/utils/debug.js"),
      customAJAX = __webpack_require__(/*! ./funcs/custom-ajax */ "./src/js/main/funcs/custom-ajax.js"),
      viewportChanged = __webpack_require__(/*! ./funcs/viewport-changed */ "./src/js/main/funcs/viewport-changed.js"),
      createGallery = __webpack_require__(/*! ./funcs/create-gallery */ "./src/js/main/funcs/create-gallery.js"),
      createSlider = __webpack_require__(/*! ./funcs/create-slider */ "./src/js/main/funcs/create-slider.js"),
      getWindowWidth = __webpack_require__(/*! ./funcs/get-window-width */ "./src/js/main/funcs/get-window-width.js"),
      initDropdowns = __webpack_require__(/*! ./funcs/init-dropdowns */ "./src/js/main/funcs/init-dropdowns.js"),
      initDynamicGmap = __webpack_require__(/*! ./funcs/init-dynamic-map */ "./src/js/main/funcs/init-dynamic-map.js"),
      initAzListing = __webpack_require__(/*! ./funcs/az-listing */ "./src/js/main/funcs/az-listing.js"),
      imageAccordion = __webpack_require__(/*! ./funcs/image-accordion */ "./src/js/main/funcs/image-accordion.js"),
      initSeeMore = __webpack_require__(/*! ./funcs/init-see-more */ "./src/js/main/funcs/init-see-more.js"),
      imageCreditation = __webpack_require__(/*! ./funcs/image-creditation */ "./src/js/main/funcs/image-creditation.js"),
      initPlaceholderHallback = __webpack_require__(/*! ./funcs/placeholder-fallback */ "./src/js/main/funcs/placeholder-fallback.js"),
      initImageCarousel = __webpack_require__(/*! ./funcs/init-image-carousel */ "./src/js/main/funcs/init-image-carousel.js"),
      initWhiteCards = __webpack_require__(/*! ./funcs/init-white-cards */ "./src/js/main/funcs/init-white-cards.js"),
      searchAutoComplete = __webpack_require__(/*! ./funcs/search-autocomplete */ "./src/js/main/funcs/search-autocomplete.js"),
      initNewsEventsStrip = __webpack_require__(/*! ./funcs/init-news-events-strip */ "./src/js/main/funcs/init-news-events-strip.js"),
      initCookieNotice = __webpack_require__(/*! ../utils/init-cookie-notice */ "./src/js/utils/init-cookie-notice.js"),
      headerPrimaryNav = __webpack_require__(/*! ./funcs/header-primary-nav */ "./src/js/main/funcs/header-primary-nav.js"),
      headerNavs = __webpack_require__(/*! ./funcs/header-navs */ "./src/js/main/funcs/header-navs.js"),
      footer = __webpack_require__(/*! ./funcs/footer */ "./src/js/main/funcs/footer.js"),
      popupDialog = __webpack_require__(/*! ./funcs/popup-dialog */ "./src/js/main/funcs/popup-dialog.js"),
      scrollTo = __webpack_require__(/*! ../utils/scroll-to */ "./src/js/utils/scroll-to.js"),
      responsiveTables = __webpack_require__(/*! ./funcs/responsive-tables */ "./src/js/main/funcs/responsive-tables.js"),
      cyclicPopup = __webpack_require__(/*! ./funcs/cyclic-popup */ "./src/js/main/funcs/cyclic-popup.js");
  /**
   * The main CITY wrapper object
   * @version $Revision: 6291 $ ($Date: 2012-09-05 16:06:30 +0100 (Wed, 05 Sep 2012) $)
   * @author City Web Team
   */


  var CITY = function (w) {
    'use strict';
    /**
     * The object to hold all loadable scripts, add an object here to allow it's loading in a page
     *
     * Each child object has three properties:
     *   description: a short description of the script
     *           src: the filename of the script
     *       [async]: Whether to load the script asynchronously (assumed false unless given)
     *
     * @var Object
     */

    var scripts = {
      googleMapsApi: {
        description: 'google maps api',
        src: 'https://maps.googleapis.com/maps/api/js?key=AIzaSyBvg6r1x2ZRKPAsceVaKPlg6tO20QiBDpo&sensor=false'
      },
      flowplayer: {
        description: 'include flowplayer for pages with videos',
        src: 'lib/flowplayer/flowplayer-3.2.4.min.js'
      },
      flowplayerEmbed: {
        description: 'Embed code for flowplayer',
        src: 'lib/flowplayer/flowplayer.embed-3.0.3.min.js'
      },
      swfobject: {
        description: 'swfobject for youtube video(s)',
        src: 'lib/swfobject/swfobject.js'
      },
      highcharts: {
        description: 'JQuery charting plugin',
        src: 'lib/jquery/plugins/highcharts/highcharts-4-1-4.js'
      },
      jVectorMap: {
        description: 'jQuery plugin for SVG world map',
        src: 'lib/jquery/plugins/vector-map/jquery.vector-map.min.js'
      },
      worldMap: {
        description: 'map svg',
        src: 'lib/jquery/plugins/vector-map/world-en.js'
      },
      buildingTheVision: {
        description: 'building the vision specific scripts',
        src: 'buildingTheVision.js'
      },
      library: {
        description: 'library site scripts',
        src: 'library.js'
      },
      location: {
        description: 'Computer Room site scripts',
        src: 'location.js'
      }
    },

    /***************************************************************************
     * GLOBAL VARIABLES
     ***************************************************************************/

    /**
     * The location of external scripts (with trailing slash)
     * @var String
     */
    srcPrefix = '//' + document.location.hostname.replace(/www|intranet/, 's1').replace('cass.', '').replace('citysport.org.uk', 'city.ac.uk') + '/cityr/js/',

    /**
     * The version number to prepend to the file name, set in page
     * @var String
     */
    version = w.cityVersion || '123456789.',

    /**
     * Lazyload function, injects a <script> element into the page head
     *
     * now proxies to yepnope
     *
     * @param {Object} jsHandle: The Object from CITY.scripts to load
     * @param {String} callback: The name of the callback to be executed after this script has loaded
     */
    load = function load(jsHandle, callback) {
      //work out full path
      var path = function () {
        var script = scripts[jsHandle];

        if (/^https?:\/\//.test(script.src)) {
          return script.src;
        }

        return srcPrefix + (/plugins|lib/.test(script.src) ? '' : 'modules/') + script.src;
      }();

      yepnope({
        load: path,
        callback: callback
      });
    },
        setVersion = function setVersion(v) {
      version = v;
    },

    /***************************************************************************
     * USEFUL GLOBAL FUNCTIONS
     ***************************************************************************/

    /**
     * Stuff needed on everypage - explore city, login etc.
     */
    initPage = function initPage() {
      var $body = $('body'),
          $form = $body.find('#search, #header__search__form'),
          $searchForm = $body.find(".search-form[data-autocomplete-status!='off']"),
          $searchFormQuery = $searchForm.find('.search-form__query'),
          $query = $form.find('#query'),
          indexForm = $('#fb-queryform'),
          indexQuery = $('#search-query', indexForm),
          searchPageAutoCompleteCollection = $body.attr('id') === 'intranet' ? 'intranet' : 'main-all',
          $galleries = $('#content').find('.gallery'),
          azListings = $('.az-single-page'),
          autoCompleteCollection = $searchForm.attr('data-collection'),
          // navigation
      $primaryNav = $('#primary-nav'),
          $secondaryNav = $('#secondary-nav'),
          $secondaryNavLis = $('#secondary-nav > li'),
          $carouselObj = $('#promo-area'),
          //carousel container
      // UI elements
      $accordions = $body.find('.accordion'),
          $responsiveTabs = $body.find('.responsive-tabs'),
          // misc.
      currentUrl = $primaryNav.data('url') || '',
          modifySecNav = currentUrl.indexOf('/my-country/') < 0; //end initPage vars
      // svg fallback

      if (!Modernizr.svg) {
        $('#header__logo img').attr('src', function () {
          return $(this).attr('src').replace('.svg', '.png');
        });
      }

      headerPrimaryNav();
      headerNavs();
      footer();
      $responsiveTabs.accordionTabs();
      initDropdowns();
      initAzListing(azListings);
      imageAccordion();
      initSeeMore();
      initWhiteCards();
      initNewsEventsStrip();
      createSlider($carouselObj);
      initPlaceholderHallback();
      initImageCarousel();
      initCookieNotice($);
      popupDialog();
      responsiveTables();
      cyclicPopup(); // We need to wait for the DOM to be modified before
      // traversing for Image Credits

      imageCreditation();
      $galleries.each(function () {
        createGallery($(this));
      }); //some helper stuff to style primary navigation

      if (currentUrl.indexOf('//www.city.ac.uk/news') >= 0) {
        $secondaryNav.hide();
      } else if (modifySecNav) {
        // add secondary-nav-siblings to secondary-nav only if we have some
        if ($('ol#secondary-nav > li:last > a').length && $('ol#secondary-nav-siblings').length) {
          // if the link to this page isn't in secondary-nav-siblings, just add the siblings
          if ($('ol#secondary-nav-siblings a').map(function () {
            return this.href;
          }).toArray().indexOf($('ol#secondary-nav > li:last > a')[0].href) === -1) {
            $('ol#secondary-nav').append($('<li>').html($('ol#secondary-nav-siblings')));
          } else {
            // otherwise replace the secondary nav completely
            $('ol#secondary-nav > li:last').empty().append($('ol#secondary-nav-siblings'));
          }
        }

        $('ol#primary-nav li, ol#secondary-nav li').removeClass('selected');
        $('ol#primary-nav a[href="' + currentUrl + '"], ol#secondary-nav a[href="' + currentUrl + '"]').parent('li').addClass('selected');

        if ($primaryNav.find('.current').length === 0 && $secondaryNav.find('.selected').length === 0) {
          //we are on the home page of the section so hide secondary nav and add helper class
          $secondaryNav.hide();
          $primaryNav.addClass('top-level');
        } //hide secondary level if empty


        if ($secondaryNavLis.length === 0) {
          $secondaryNav.hide();
        } else {
          //secondary nav is definitely showing, add some classes to help styling
          //if we have secondary-nav-siblings the prevous li element will be the parent from one level up
          // e.g. http://www.city.ac.uk/arts-social-sciences/journalism/student-work/city-journalism-student-bylines/january-2012/test-level
          $('#secondary-nav-siblings').parent().prev('li').addClass('end'); // When the current page is part of the breadcrumb its previous sibling reguires a class of "selected-join"
          // we only want this to happen on direct children of $secondaryNav
          // e.g http://www.city.ac.uk/arts-social-sciences/journalism/student-work/city-journalism-student-bylines/january-2012

          $secondaryNav.find('> li.selected').prev().addClass('selected-join');

          if ($secondaryNav.find('.selected').length !== 0) {
            //add a class of ".parent" to active element in primary nav so we can un-bold it
            $primaryNav.find('.current').addClass('parent');
          }
        }
      } // initalise any accordions found


      $accordions.accordion({
        heightStyle: 'content',
        collapsible: true,
        active: false,
        animate: false,
        icons: {
          header: 'ui-icon-triangle-1-s',
          headerSelected: 'ui-icon-triangle-1-n'
        },
        activate: function activate(event, ui) {
          scrollTo(ui.newHeader);
        }
      }); //set up autocomplete on search box

      searchAutoComplete($form, $query, searchPageAutoCompleteCollection); //set up autocomplete on search box on main search page

      searchAutoComplete(indexForm, indexQuery, searchPageAutoCompleteCollection); //set up autocomplete on search box on intranet main search page

      searchAutoComplete($searchForm, $searchFormQuery, autoCompleteCollection); // catch any videos that have been manually input

      $("iframe[src*='youtube']").each(function () {
        var $element = $(this),
            vidWidth = $element.outerWidth(),
            $parent = $element.parent(); // don't double wrap an iframe

        if (!$parent.hasClass('embed-container')) {
          // for elastic objects, we need 2 (!) wrappers
          $element.wrap('<div class="embed-wrapper" style="width:' + vidWidth + 'px"><div class="embed-container"></div></div>');
        }
      });
      initDynamicGmap($('#dynamic-gmap')); // hide/show functionality for unit lists (example on subject area pages)

      $('.unit-lists .unit-lists-title').click(function () {
        $(this).parents('.unit-lists').toggleClass('unit-lists-expanded');
      }); //hide/show other amount and pass the correct value on City Future Fund page

      if ($('#future-fund-forms').length === 1 || $('#racing-form').length === 1) {
        $('#cff-regular-donation input[type=radio]').click(function () {
          var parentElement = $(this).parent();
          $('.donate-appeal').show();

          if (parentElement.find('.donation-other-option').is(':checked')) {
            parentElement.find('.donation-other-amount').show().find('input').attr('name', 'regular_amount');
          } else {
            parentElement.find('.donation-other-amount').hide().find('input').attr('name', '').attr('value', '');
          }
        });
        $('#cff-single-donation input[type=radio]').click(function () {
          var parentElement = $(this).parent();

          if (parentElement.find('.donation-other-option').is(':checked')) {
            parentElement.find('.donation-other-amount').show().find('input').attr('name', 'tfa_Amountyouwishtod');
          } else {
            parentElement.find('.donation-other-amount').hide().find('input').attr('name', '').attr('value', '');
          }
        });
      }

      $('.media-ribbon .embed-container').videoPreview({
        showInfo: 0
      });
      $('.widget-content .embed-container').videoPreview();
      $('.international-london .embed-container').videoPreview();
      $('.social-wall .embed-container').videoPreview();
      $('.embed-container.embed-container--default-yt-preview').videoPreview();
    },
        //end initPage
    objectSize = function objectSize(object) {
      var size = 0,
          key;

      for (key in object) {
        if (object.hasOwnProperty(key)) {
          size += 1;
        }
      }

      return size;
    },

    /**
     * Finds any vid images on a page and replaces them with either a YouTube iframe or SWFObject for FMS vids
     * @return: Undefined
     */
    videos = function videos() {
      var $youtubeVids = $('img.youtube'),
          $fmsVids = $('img.fms'),

      /*
           * Replaces an image element with YouTube iFrame
           * @param: {Object} : $el - jQuery object for youTube images to be replaced
           * @retun: {Undefined}
           */
      embedYoutube = function embedYoutube($youtubeVids) {
        $youtubeVids.each(function (i, el) {
          var $el = $(el),
              vidWidth = 500,
              // default width
          vidHeight = 320,
              // default height
          videoID = $el.attr('id').replace('vid_', '');
          $el.replaceWith('<div class="embed-wrapper"><div class="embed-container"><iframe height=' + vidHeight + ' width= ' + vidWidth + ' src="//www.youtube.com/embed/' + videoID + "?rel=0&wmode=transparent\" frameborder='0' allowfullscreen></iframe></div></div>");
        });
      },

      /*
           * Replaces an image element with SWF Object
           * @param: {Object} : $el - jQuery object for all fms images to be replaced
           * @retun: {Undefined}
           */
      embedFms = function embedFms($fmsVids) {
        var splashImages = {
          cassStandard: '//s1.city.ac.uk/i/flowplayer-cass.jpg?v=8105',
          cassRetina: '',
          cityStandard: '//s1.city.ac.uk/i/flowplayer-city.jpg?v=8105',
          cityRentina: ''
        };
        $fmsVids.each(function (i, el) {
          var $el = $(el),
              vidWidth = 687,
              //default width
          vidHeight = 419,
              // default height
          elId = $el.attr('id'),
              vidId = elId.replace('vid_', ''),
              expressInstall = '//s1.city.ac.uk/js/swfobject/expressInstall.swf',
              flashtargetversion = '9.0.28',
              flashvars = null,
              params = {
            allowScriptAccess: 'always',
            allowfullscreen: 'true',
            wmode: 'transparent'
          },
              atts = {
            class: 'vidplayer',
            id: vidId
          },
              splashImage = CITY.isCass ? splashImages.cassStandard : splashImages.cityStandard,
              swfCallBack = function swfCallBack(e) {
            $(e.ref).wrap('<div class="embed-wrapper" style="width:' + vidWidth + 'px"><div class="embed-container"></div></div>');
          }; //if video is included in the course description div of a course N page, width needs to be 419


          if ($el.parents('.course-description').length !== 0) {
            vidWidth = 419;
          } //vids have different sizes depending on the size of the content div and if they are widescreen on square


          if ($el.hasClass('widescreen')) {
            vidHeight = vidWidth * 0.61;
          } else {
            vidWidth = 500;
            vidHeight = 320;
          }

          if (!swfobject.hasFlashPlayerVersion(flashtargetversion)) {
            //explain why there is no video
            $el.after('<p class="notice-message"><i class="fa fa-exclamation-triangle" style="color : #CCCC00"></i> You need to have flash player ' + flashtargetversion + ' or greater installed to see the video.</p>' + '<p><a href="http://get.adobe.com/flashplayer/">Get Flash Player</a></p>');
          } else {
            //config has to be in a string and key and values have to be "quoted" - nightmare
            // construct all the variables to pass to the player -
            // tried to make this a proper json array, didn't work :(
            // IE doesn't like double quotes here so ignore JSHint error
            flashvars = "{'clip': {'provider': 'rtmp'}, 'playlist': [{'url':'" + splashImage + "', 'autoPlay': true}, {'url': '" + vidId.replace('vid_', '') + "/Hi_bandwidth', 'autoPlay': false, 'scaling': 'fit'}], 'plugins': {'rtmp': {'url': '//s1.city.ac.uk/js/flowplayer/flowplayer.rtmp-3.2.3.swf', 'netConnectionUrl': 'rtmp://media.city.ac.uk/flowplayer', 'objectEncoding': '0', 'proxyType': 'none' }, 'controls': {'url': 'flowplayer.controls.swf'} } }"; // initiate the player

            swfobject.embedSWF('//s1.city.ac.uk/js/flowplayer/flowplayer-3.2.6.swf', elId, vidWidth, vidHeight, '9.0.0', expressInstall, {
              config: flashvars
            }, params, false, swfCallBack);
          } //end has flash if

        });
      };

      if ($youtubeVids.length) {
        embedYoutube($youtubeVids);
      }

      if ($fmsVids.length) {
        yepnope({
          load: scripts.swfobject.src,
          callback: function callback() {
            embedFms($fmsVids);
          }
        });
      }
    },
        // end videos

    /**
     * This is our yepnope filter
     *
     * splices in the version string we have set up in setVersion
     * prepends the correct s1 domain, where it hasn't been provided
     *
     * N.B. will fail if we have an s1 top level folder containing
     * dots (see comment below)
     *
     */
    yepnopeFilter = function yepnopeFilter(resource) {
      var loc, lastItem;
      /* If we are loading in an absolute url, don't touch it
           * this is the regex which fails on a top level folder with dots
           *
           * matches:
           * http://www.external.com/scripts/script.js
           * www.external.com/scripts/script.js
           * absolute.with.many.sub.domains.domain.com/scripts/script.js
           * https://absoulte.with.many.sub.domains.domain.com/scripts/script.js
           *
           * doesn't match:
           * modules/test.js
           * lib/subdir/script.js
           * lib/subdir.123/script.js
           *
           * will match when we don't want to:
           * toplevel.with.dots/script.js
           * lib.v2/jquery/script.js
           *
           * I think it's an unlikely issue, but if anyone can tweak the regex
           * to prevent this please do.
           *
           */

      if (/^(https?:\/\/)?([^\/.]+\.)+[^\/]+\//.test(resource.url)) {
        return resource;
      }

      loc = //already contains s1? - don't add prefix
      ((/s1/.test(resource.url) ? '' : srcPrefix) + resource.url). //split for splicing
      split('/'); //splice in version

      lastItem = loc.length - 1;
      loc[lastItem] = version + loc[lastItem];
      resource.url = loc.join('/'); // if on prod and we are loading a module/.js file
      // we want .min.js rather than .js

      if (/s1\.city/.test(resource.url) && !/js\/lib/.test(resource.url)) {
        resource.url = resource.url.replace(/js$/, 'min.js');
      }

      return resource;
    },

    /**
     * Initialisation function, called immediately after CITY declaration below
     */
    init = function init() {
      debug('CITY ready (we are in ' + document.compatMode + ')');
      yepnope.addFilter(yepnopeFilter);
      initPage(); //// library home page opening times

      if ($('#library').length !== 0) {
        yepnope({
          load: 'modules/library/library.js',
          callback: function callback() {
            debug('loaded library datepicker');
          }
        });
      } // the following needs domready


      $(function () {
        // set up any videos on page
        videos(); // mobile browser click delay fix
        //initFastClickt();
      });
    };
    /**
     *  This literal defines what methods to make publicly accessible
     *  outsite CITY
     */


    return {
      init: init,
      load: load,
      debug: debug,
      setVersion: setVersion,
      searchAutoComplete: searchAutoComplete,
      objectSize: objectSize,
      getWindowWidth: getWindowWidth,
      customAJAX: customAJAX,
      imageCreditation: imageCreditation,
      //this will be useful in modules
      s1Server: srcPrefix
    };
  }(window); //end CITY


  window.CITY = CITY;
  return CITY;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/on-resize/bind-mega-events.js":
/*!***************************************************!*\
  !*** ./src/js/main/on-resize/bind-mega-events.js ***!
  \***************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__);




module.exports = function () {
  // we only need this stuff on a desktop sized browser
  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js"),
      $body = $('body'),
      $query = $('#search #query'),
      breakpoints = __webpack_require__(/*! ./breakpoints */ "./src/js/main/on-resize/breakpoints.js"),
      boundDropEvents = false,
      bindMegaDdEvents = function bindMegaDdEvents($megaLinks, $navLis, $drops) {
    if (!boundDropEvents) {
      //attach click, keydown and focus handler
      $megaLinks.on('click keydown focus', function (e) {
        var $target = $(this),
            $li = $target.closest('li'),
            $drop = $li.find('.drop'); // if we have bound the event, but are now on smaller width we don't want to
        // show the mega dropdown

        if (CITY.getWindowWidth(window) < breakpoints.desktop) {
          return;
        } //what type of event was fired?


        if (e.type === 'keydown' && e.keyCode !== 13) {
          //if a keypress event but button hit wasn't enter
          return;
        }

        if (e.type === 'focus') {
          //always kill all drop downs when a megaLink receives focus then drop out of fn
          $navLis.removeClass('active');
          $drops.hide().removeClass('active');
          return;
        } //if we are here then the event is either a click or "enter" keypress
        //remove all active class from all other links


        $navLis.not($li[0]).removeClass('active');
        $drops.not($drop[0]).hide().removeClass('active');
        $li.toggleClass('active');
        $drop.toggleClass('active');
        $drop.show();
        e.preventDefault();
        e.stopPropagation();
      }); // on blur of last mega link (search input query will be focussed), close
      // any open drop down

      $query.on('focus', function () {
        $navLis.removeClass('active');
        $drops.hide().removeClass('active');
      }); //don't propogate clicks inside mega menus

      $drops.on('click', function (e) {
        e.stopPropagation();
      }); //close any open mega menus when page is clicked

      $body.on('click', function () {
        $drops.removeClass('active').hide();
        $navLis.removeClass('active');
      });
      boundDropEvents = true;
    }
  };

  return bindMegaDdEvents;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/on-resize/breakpoints.js":
/*!**********************************************!*\
  !*** ./src/js/main/on-resize/breakpoints.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  thin: 480,
  medium: 768,
  wide: 980
};

/***/ }),

/***/ "./src/js/main/on-resize/index.js":
/*!****************************************!*\
  !*** ./src/js/main/on-resize/index.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__);




module.exports = function () {
  var $ = __webpack_require__(/*! ../jquery */ "./src/js/main/jquery/index.js"),
      viewportChanged = __webpack_require__(/*! ../funcs/viewport-changed */ "./src/js/main/funcs/viewport-changed.js"),
      getWindowWidth = __webpack_require__(/*! ../funcs/get-window-width */ "./src/js/main/funcs/get-window-width.js"),
      bindMegaDdEvents = __webpack_require__(/*! ./bind-mega-events */ "./src/js/main/on-resize/bind-mega-events.js"),
      $window = $(window),
      $body = $('body'),
      $globalNav = $body.find('#global-nav1'),
      $navLis = $globalNav.children('li'),
      $megaLinks = $globalNav.find('.mega'),
      $drops = $globalNav.find('.drop'),
      $responsiveTogglers = $('.responsive-toggler'),
      $togglees = $('.toggle'),
      $utilNav = $('#util-nav'),
      breakpoints = __webpack_require__(/*! ./breakpoints */ "./src/js/main/on-resize/breakpoints.js"),
      onResize = function onResize() {
    if (viewportChanged()) {
      var newWidth = getWindowWidth(window);

      if (newWidth >= breakpoints.wide) {
        //big to small?
        $body.addClass('screen-wide').removeClass('screen-thin screen-medium'); // if this is the first time going to desktop size,
        // we need to bind the event handlers

        bindMegaDdEvents($megaLinks, $navLis, $drops); // close any openers which were open before width change

        $responsiveTogglers.removeClass('active');
        $togglees.removeClass('active');
        $utilNav.removeClass('hidden');
      } else if (newWidth >= breakpoints.medium) {
        //small to big?
        $body.addClass('screen-medium').removeClass('screen-thin screen-wide');
        $utilNav.addClass('hidden');
        $drops.removeClass('active').hide();
        $navLis.removeClass('active');
      } else {
        $body.addClass('screen-thin').removeClass('screen-medium screen-wide');
      }
    }
  },
      init = function init() {
    $window.resize(onResize);
    $window.resize(); // attach click events on mobile navigation togglers

    $responsiveTogglers.on('click', function (e) {
      var $self = $(this),
          $toggle = $self.next('.toggle');
      e.preventDefault();
      $self.toggleClass('active');
      $toggle.toggleClass('active');
    }); // init the global navigation drop downs

    $drops.hide();

    if (getWindowWidth(window) < breakpoints.wide) {
      $utilNav.children('li').clone().appendTo($globalNav);
    }
  };

  return init;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/main/widgets.js":
/*!********************************!*\
  !*** ./src/js/main/widgets.js ***!
  \********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.regexp.split */ "./node_modules/core-js/modules/es6.regexp.split.js");
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1__);





module.exports = function () {
  'use strict';

  var $ = __webpack_require__(/*! ./jquery */ "./src/js/main/jquery/index.js"),
      debug = __webpack_require__(/*! ../utils/debug */ "./src/js/utils/debug.js"),
      createGallery = __webpack_require__(/*! ./funcs/create-gallery */ "./src/js/main/funcs/create-gallery.js"),
      downloadFileTypes = __webpack_require__(/*! ./funcs/download-file-types */ "./src/js/main/funcs/download-file-types.js"),
      viewportChanged = __webpack_require__(/*! ./funcs/viewport-changed */ "./src/js/main/funcs/viewport-changed.js"),

  /**
   * object to hold google maps markers
   */
  googleMapsMarkers = {},

  /**
   * overlay pane for map
   */
  mapOverlayPane = null,

  /**
   *
   * What needs to happen after a bxslider carousel has finished loading:
   * 1. inject controls into @widget. finds default bxslider controls, replace with font awesome icons and append in widget
   * 2. add scrollable class to widget content
   * 3. remove loading spinner
   * @param jQuery widget: a jquery wrapped .widget (needed for widget controls)
   * @param string middleButtonText: what to write on the middle button (defaults to "All") (needed for widget controls)
   * @param string allLink: the "all" middle button href (needed for widget controls)
   */
  afterBxSliderLoaded = function afterBxSliderLoaded(widget, allLink, middleButtonText) {
    var leftWidgetButton = '<i class=" fa fa-caret-left"></i>',
        rightWidgetButton = '<i class=" fa fa-caret-right"></i>',
        // carousel controls
    previousButton = widget.find('.bx-prev'),
        nextButton = widget.find('.bx-next'),
        inputMiddleButtonText = middleButtonText ? middleButtonText : 'All';
    previousButton.empty().append(leftWidgetButton);
    nextButton.empty().append(rightWidgetButton); //add the "all" button between previous and next buttons if it is needed

    if (allLink) {
      previousButton.after('<a href="' + allLink + '" class="bx-all" >' + inputMiddleButtonText + '</a>');
    }

    widget.find('.bx-controls-direction').appendTo(widget);
    widget.children('h2').addClass('controls-direction'); //add class

    widget.find('.widget-content').addClass('scrollable'); //remove widget loading spinner

    widget.removeClass('widget-loading').children('.loading-fa-icon').remove();
  },

  /**
   * news widget
   */
  initNews = function initNews() {
    var newsWidget = $('#news-widget'),
        newsList = newsWidget.find('#news-results'),
        allLink = '//www.city.ac.uk/news',
        showAmount = 3; //reformat the content into column sizes based on determined size, if there are more than showAmount items

    if ($('#news-results > .article').size() > showAmount) {
      //set up sortable
      newsList.wrapChildren({
        childElem: '.article',
        sets: showAmount
      }); //launch bxslider

      newsList.bxSlider({
        auto: false,
        autoControls: false,
        pause: 15000,
        autoHover: true,
        touchEnabled: false,
        pager: false,
        infiniteLoop: false,
        hideControlOnEnd: true,
        adaptiveHeight: true,
        onSliderLoad: function onSliderLoad() {
          afterBxSliderLoaded(newsWidget, allLink);
        }
      });
    } else {
      //remove widget loading spinner, case where the carousel isn't needed
      newsWidget.removeClass('widget-loading').children('.loading-fa-icon').remove();
    }
  },

  /**
   * events widget
   */
  initEvents = function initEvents() {
    var eventsWidget = $('#events-widget'),
        eventsList = $('#events-results'),
        allLink = '//www.city.ac.uk/events',
        showAmount = 3; //click anywhere on event

    $('.vevent', eventsList).click(function () {
      window.location = $(this).find('a').attr('href');
      return false;
    });

    if ($('#events-results > .vevent').size() > showAmount) {
      //sort the children into groups of showAmount
      eventsList.wrapChildren({
        childElem: '.event',
        sets: showAmount
      });
      eventsList.bxSlider({
        auto: false,
        autoControls: false,
        pause: 15000,
        autoHover: true,
        touchEnabled: false,
        pager: false,
        infiniteLoop: false,
        hideControlOnEnd: true,
        adaptiveHeight: true,
        onSliderLoad: function onSliderLoad() {
          afterBxSliderLoaded(eventsWidget, allLink);
        }
      });
    } else {
      //remove widget loading spinner, case where the carousel isn't needed
      eventsWidget.removeClass('widget-loading').children('.loading-fa-icon').remove();
    }
  },
      //end initEvents
  initFlickr = function initFlickr() {
    var $widget = $('#flickr-widget'),
        $slideWrapper = $widget.find('ul'),
        loadedOtherPics,
        bxSliderCallback = function bxSliderCallback() {
      debug('flickr callback...');
      $('.widget-content', $widget).each(function () {
        //find the ul
        var firstdiv = $('ul div:first-child', this),
            //ul = $("ul", this), defined not used
        thisJq = $(this),
            height = firstdiv.height(),
            width = firstdiv.width(); //add classes

        thisJq.addClass('scrollable'); //add css to .widget-content

        thisJq.stop().animate({
          'min-height': height
        });
        thisJq.css('width', width); //remove loading icon when the content is ready

        $widget.removeClass('widget-loading').children('.loading-fa-icon').remove();
      });
      afterBxSliderLoaded($widget);
    }; //attach an event to init the rest of the pics


    $widget.mouseenter(function () {
      //we only want to run this once
      if (loadedOtherPics) {
        return;
      }

      loadedOtherPics = true; //translate all the span.imageurl"s into actual images
      //(saves some rendering time)

      $('a .imageurl', $widget).each(function () {
        var thisJq = $(this),
            text = thisJq.text(),
            imgTag = '<img src="' + text + '" alt="">';
        thisJq.parent().text('').prepend(imgTag);
      });
      $('p .imageurl', $widget).each(function () {
        var thisJq = $(this),
            text = thisJq.text(),
            styleAttr = 'background-image: url(' + text + ');';
        thisJq.parent().attr('style', styleAttr);
        thisJq.remove();
      });
    }); //set up scrollable

    $slideWrapper.bxSlider({
      auto: false,
      autoControls: false,
      pause: 15000,
      autoHover: true,
      touchEnabled: false,
      pager: false,
      infiniteLoop: false,
      hideControlOnEnd: true,
      adaptiveHeight: true,
      minSlides: 1,
      maxSlides: 4,
      slideWidth: 330,
      slideMargin: 0,
      onSliderLoad: function onSliderLoad() {
        bxSliderCallback();
      }
    });
  },
      //end initFlickr

  /**
   * courses widget
   */
  initCourses = function initCourses() {
    var $widget = $('#courses-widget'),
        widgetContent = $widget.find('.widget-content');
    widgetContent.accordion({
      heightStyle: 'content',
      collapsible: true,
      active: false,
      animate: false,
      icons: {
        header: 'ui-icon-triangle-1-s',
        headerSelected: 'ui-icon-triangle-1-n'
      },
      create: function create() {
        afterBxSliderLoaded($widget);
      }
    });
  },
      //end initCourses

  /**
   * testimonials widget
   */
  initTestimonials = function initTestimonials() {
    var $testimonialsWidget = $('#testimonials-widget'),
        widgetContent = $testimonialsWidget.find('.widget-content'),
        testimonialsList = widgetContent.find('ul'),
        bxSliderCallback; //check there is more than 1 testimonials and if so, start the carousel

    if ($('li', testimonialsList).length < 2) {
      debug('Less than 2 testimonials, no need for carousel');
      $testimonialsWidget.removeClass('widget-loading').addClass('widget-one-item').children('.loading-fa-icon').remove();
      return;
    }

    bxSliderCallback = function bxSliderCallback() {
      //add controls
      afterBxSliderLoaded($testimonialsWidget);
      $testimonialsWidget.removeClass('widget-loading').children('.loading-fa-icon').remove();
    }; //initialise bxslider


    testimonialsList.bxSlider({
      auto: false,
      autoControls: false,
      pause: 15000,
      slideMargin: 10,
      autoHover: true,
      touchEnabled: false,
      pager: false,
      infiniteLoop: false,
      hideControlOnEnd: true,
      adaptiveHeight: true,
      onSliderLoad: function onSliderLoad() {
        bxSliderCallback();
      }
    });
  },
      //end initTestimonials

  /**
   * profiles widget
   */
  initProfiles = function initProfiles() {
    var $profilesWidget = $('#profiles-widget'),
        widgetContent = $profilesWidget.find('.widget-content'),
        profilesList = widgetContent.find('ul'),
        bxSliderCallback; //end vars
    //check there is more than 1 testimonials and if so, start the carousel

    if ($('li', profilesList).length < 2) {
      debug('Less than 2 testimonials, no need for carousel');
      $profilesWidget.removeClass('widget-loading').children('.loading-fa-icon').remove();
      return;
    }

    bxSliderCallback = function bxSliderCallback() {
      //add controls
      afterBxSliderLoaded($profilesWidget);
      $profilesWidget.removeClass('widget-loading').children('.loading-fa-icon').remove();
    }; //initialise bxslider


    profilesList.bxSlider({
      auto: false,
      autoControls: false,
      pause: 15000,
      autoHover: true,
      touchEnabled: false,
      pager: false,
      infiniteLoop: false,
      hideControlOnEnd: true,
      adaptiveHeight: true,
      onSliderLoad: function onSliderLoad() {
        bxSliderCallback();
      }
    });
  },
      //end profilesWidgets

  /**
   * spotlight on research widget
   */
  initSpotlightResearch = function initSpotlightResearch() {
    var $spotlightResearchWidget = $('#spotlight-research-widget'),
        widgetContent = $spotlightResearchWidget.find('.widget-content'),
        spotlightResearchList = widgetContent.find('ul'),
        bxSliderCallback; //end vars
    //check there is more than 1 spotlight on research items and if so, start the carousel

    if ($('li', spotlightResearchList).length < 2) {
      debug('Less than 2 spotlight on research, no need for carousel');
      $spotlightResearchWidget.removeClass('widget-loading').addClass('widget-one-item').children('.loading-fa-icon').remove();
      return;
    }

    bxSliderCallback = function bxSliderCallback() {
      //add controls
      afterBxSliderLoaded($spotlightResearchWidget);
      $spotlightResearchWidget.removeClass('widget-loading').children('.loading-fa-icon').remove();
    }; //initialise bxslider


    spotlightResearchList.bxSlider({
      auto: false,
      autoControls: false,
      pause: 15000,
      autoHover: true,
      touchEnabled: false,
      pager: false,
      infiniteLoop: false,
      hideControlOnEnd: true,
      adaptiveHeight: true,
      onSliderLoad: function onSliderLoad() {
        bxSliderCallback();
      }
    });
  },
      //end initSpotlightResearch

  /**
   * RSS widget
   */
  initRss = function initRss() {
    var $widget = $('#rss-widget'),
        widgetContent = $widget.find('.widget-content'),
        items = widgetContent.find('.items'); //end vars

    if (items.children().length > 1) {
      //load up bxslider
      items.bxSlider({
        auto: false,
        autoControls: false,
        pause: 15000,
        autoHover: true,
        touchEnabled: false,
        pager: false,
        infiniteLoop: false,
        hideControlOnEnd: true,
        adaptiveHeight: true,
        onSliderLoad: function onSliderLoad() {
          afterBxSliderLoaded($widget);
        }
      });
    } else {
      //don't load the bxslider carousel , just show widget
      $widget.removeClass('widget-loading').children('.loading-fa-icon').remove();
    }
  },

  /**
   * Call to action widget
   */
  initCallToAction = function initCallToAction() {
    var start_date = $('#start_date').val(),
        end_date = $('#end_date').val(),
        sd = new Date(),
        ed = new Date(),
        cd,
        splitDate = function splitDate(dt, idt) {
      var dateArray = dt.split('/'),
          endofArray = dateArray[2].split(' ');
      idt.setFullYear(endofArray[0]);
      idt.setMonth(dateArray[1] - 1);
      idt.setDate(dateArray[0]);
      return idt;
    };

    sd = splitDate(start_date, sd);
    ed = splitDate(end_date, ed); //current date

    cd = new Date();

    if (ed >= cd && sd <= cd) {
      //Show the on date
      $('#content_on_date').attr('class', 'widget-content cta-widget-show');
      $('#content_out_of_date').attr('class', 'cta-widget-hide');
    } else {
      //Show out of date
      $('#content_out_of_date').attr('class', 'widget-content cta-widget-show');
      $('#content_on_date').attr('class', 'cta-widget-hide');
    }
  },

  /**
   * initiates an image gallery widget
   *
   * @return {object || undefined} returns the galleria jQuery object if
   * successful else undefined - for instance if $gallery is not a jQuery object
   *
   */
  initGallery = function initGallery() {
    var $gallery = $('#gallery-widget .gallery');
    return createGallery($gallery, true);
  },
      initFreeText = function initFreeText() {
    $('div.free-text a').unbind('click').click(function () {});
  },

  /**
   * The master widget initialiser, calls all the other init{map,events...} functions
   */
  initWidgets = function initWidgets() {
    var widgets = {
      events: {
        f: initEvents
      },
      news: {
        f: initNews
      },
      flickr: {
        f: initFlickr
      },
      courses: {
        f: initCourses
      },
      testimonials: {
        f: initTestimonials
      },
      rss: {
        f: initRss
      },
      gallery: {
        f: initGallery
      },
      cta: {
        f: initCallToAction
      },
      freetext: {
        f: initFreeText
      },
      profiles: {
        f: initProfiles
      },
      'spotlight-research': {
        f: initSpotlightResearch
      }
    },
        id; //loop through each widget type and init if present

    for (id in widgets) {
      if (widgets.hasOwnProperty(id)) {
        //bail here if the widget is not present
        if ($('#' + id + '-widget').length === 0) {
          debug('no ' + id + ' widget');
        } else if (typeof widgets[id].f !== 'function') {
          debug("can't find init func of " + id + ' widget');
        } else {
          //run the init
          debug('running init func of ' + id + ' widget');
          widgets[id].f.apply();
        }
      }
    }
  };

  return initWidgets;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/utils/debug.js":
/*!*******************************!*\
  !*** ./src/js/utils/debug.js ***!
  \*******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var core_js_modules_es6_regexp_search__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.regexp.search */ "./node_modules/core-js/modules/es6.regexp.search.js");
/* harmony import */ var core_js_modules_es6_regexp_search__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_search__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.regexp.match */ "./node_modules/core-js/modules/es6.regexp.match.js");
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_1__);





/**
 * Sends a message to the browser console (Gecko, Webkit) or into the <body> (IE)
 * @param {String} message: the message to print out
 */
module.exports = function (message) {
  var debug = function debug(message) {
    if (debug.debugLevel > 0 || location.search.match('debug')) {
      try {
        //for Safari, Chrome, Firefox(w/ firebug)
        w.console.log(message);
      } catch (e) {
        try {
          //for Opera
          opera.postError.apply(opera, message);
        } catch (e1) {}
      }
    }
  };

  debug.debugLevel = 0;
  return debug;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/js/utils/init-cookie-notice.js":
/*!********************************************!*\
  !*** ./src/js/utils/init-cookie-notice.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  var Cookies = __webpack_require__(/*! js-cookie */ "./node_modules/js-cookie/src/js.cookie.js");

  return function ($) {
    if (!Cookies.get('cookienoticeshown')) {
      Cookies.set('cookienoticeshown', '1', {
        expires: 365
      });
      $('.cookie-notice').show();
      $('.cookie-notice__dismiss button').click(function (event) {
        event.preventDefault();
        $('.cookie-notice').fadeOut('fast');
      });
    }
  };
}();

/***/ }),

/***/ "./src/js/utils/scroll-to.js":
/*!***********************************!*\
  !*** ./src/js/utils/scroll-to.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (element) {
  'use strict';

  if (element && !$.isEmptyObject(element.offset())) {
    $('html:not(:animated), body:not(:animated)').animate({
      scrollTop: Math.max(0, element.offset().top - 85)
    }, 'slow');
  }
};

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J4c2xpZGVyL2Rpc3QvanF1ZXJ5LmJ4c2xpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcy1jb29raWUvc3JjL2pzLmNvb2tpZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL2N1c3RvbS1zbGlkZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL2N1c3RvbS1zbGlkZXJzL3Byb2ZpbGVzLWNhcm91c2VsLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL2N1c3RvbS1zbGlkZXJzL3N0YXQtY2Fyb3VzZWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21haW4vZGVmZXJyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21haW4vZnVuY3MvYXotbGlzdGluZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi9mdW5jcy9jcmVhdGUtZ2FsbGVyeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi9mdW5jcy9jcmVhdGUtc2xpZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL2Z1bmNzL2N1c3RvbS1hamF4LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL2Z1bmNzL2N5Y2xpYy1wb3B1cC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi9mdW5jcy9kb3dubG9hZC1maWxlLXR5cGVzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL2Z1bmNzL2Zvb3Rlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi9mdW5jcy9nZXQtd2luZG93LXdpZHRoLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL2Z1bmNzL2hlYWRlci1uYXZzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL2Z1bmNzL2hlYWRlci1wcmltYXJ5LW5hdi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi9mdW5jcy9pbWFnZS1hY2NvcmRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21haW4vZnVuY3MvaW1hZ2UtY3JlZGl0YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21haW4vZnVuY3MvaW5pdC1kcm9wZG93bnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21haW4vZnVuY3MvaW5pdC1keW5hbWljLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi9mdW5jcy9pbml0LWltYWdlLWNhcm91c2VsLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL2Z1bmNzL2luaXQtbmV3cy1ldmVudHMtc3RyaXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21haW4vZnVuY3MvaW5pdC1zZWUtbW9yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi9mdW5jcy9pbml0LXdoaXRlLWNhcmRzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL2Z1bmNzL3BsYWNlaG9sZGVyLWZhbGxiYWNrLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL2Z1bmNzL3BvcHVwLWRpYWxvZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi9mdW5jcy9yZXNwb25zaXZlLXRhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi9mdW5jcy9zZWFyY2gtYXV0b2NvbXBsZXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL2Z1bmNzL3ZpZXdwb3J0LWNoYW5nZWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21haW4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21haW4vanF1ZXJ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL2pxdWVyeS9qcXVlcnkuYWNjb3JkaW9uLXRhYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21haW4vanF1ZXJ5L2pxdWVyeS5jaXR5ZHJvcGRvd24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21haW4vanF1ZXJ5L2pxdWVyeS5pZGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi9qcXVlcnkvanF1ZXJ5Lm11bHRpc2NyaXB0cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi9qcXVlcnkvanF1ZXJ5LnlvdXR1YmVwcmV2aWV3LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL2pxdWVyeS9qcy1wYXRoLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL2pxdWVyeS9saWIvanF1ZXJ5LXVpLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi9qcXVlcnkvbGliL2pxdWVyeS5iYS1iYnEubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL2pxdWVyeS9saWIvanF1ZXJ5Lm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi9qcy1lcnJvci1ub3RpZmllci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi9tYWluLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL29uLXJlc2l6ZS9iaW5kLW1lZ2EtZXZlbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tYWluL29uLXJlc2l6ZS9icmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi9vbi1yZXNpemUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21haW4vd2lkZ2V0cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbHMvZGVidWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3V0aWxzL2luaXQtY29va2llLW5vdGljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbHMvc2Nyb2xsLXRvLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCIkIiwicmVxdWlyZSIsInNsaWRlcnMiLCJjcmVhdGUiLCJkYXRhIiwiJGNhcm91c2VsV3JhcHBlciIsImlkIiwiJGNhcm91c2VsIiwiZmluZCIsInNsaWRlQ291bnQiLCJjaGlsZHJlbiIsImxlbmd0aCIsInJlbW92ZUNsYXNzIiwiYnhTbGlkZXIiLCJvcHRpb25zIiwiaW5pdCIsImkiLCJhdXRvIiwiYXV0b0NvbnRyb2xzIiwiY29udHJvbHMiLCJwYWdlciIsImluZmluaXRlTG9vcCIsInJlc3BvbnNpdmUiLCJzbGlkZVdpZHRoIiwic2xpZGVNYXJnaW4iLCJhZGFwdGl2ZUhlaWdodCIsImhpZGVDb250cm9sT25FbmQiLCJtYXhTbGlkZXMiLCJwcmV2VGV4dCIsIm5leHRUZXh0IiwibiIsIm1pblNsaWRlcyIsIm1vdmVTbGlkZXMiLCJDSVRZX09QVElPTlMiLCJkZWZlciIsImF6TGlzdGluZ3MiLCJlYWNoIiwibWUiLCJsZXR0ZXJzIiwibGV0dGVyR3JvdXBzIiwic2VsZWN0IiwiYW5jaG9yIiwiZmlsdGVyIiwiYWRkQ2xhc3MiLCJuYW1lIiwic3Vic3RyIiwiY2xpY2siLCJlIiwicHJldmVudERlZmF1bHQiLCJodG1sIiwiZW5kIiwiYXR0ciIsImRlYnVnIiwic3RhdGUiLCJxdWV1ZSIsImdhbGxlcnkiLCJyb290IiwicmVwbGFjZSIsImdhbGxlcnlJbm5lciIsImdldEpTT04iLCJoaWRlIiwiY3NzIiwiZGF0YV9zb3VyY2UiLCJnYWxsZXJpYSIsImxvYWRDb21wbGV0ZSIsInJlcXVlc3QiLCJnYWxsZXJpYU9wdGlvbnMiLCJoZWlnaHQiLCJsaWdodGJveCIsImhhc0NsYXNzIiwibWF4U2NhbGVSYXRpbyIsInByZWxvYWQiLCJzaG93SW5mbyIsImltYWdlQ3JvcCIsImV4dGVuZCIsInByZXBlbmQiLCJjbGFzcyIsImJpbmQiLCJfZGF0YSIsImluZGV4IiwiY2FwdGlvbiIsIm1fY2FwdGlvbiIsImdldE11bHRpSnNTY3JpcHRzIiwicHVzaCIsIiRjYXJvdXNlbE9iaiIsImFwcGVuZCIsIm51bVNsaWRlcyIsIiRwcm9tb1dyYXBwZXIiLCJwYXJlbnRzIiwib3ZlcnJpZGVDb250cm9scyIsInRvdWNoRW5hYmxlZCIsInNsaWRlck9wdGlvbnMiLCJhdXRvSG92ZXIiLCJwcmV2ZW50RGVmYXVsdFN3aXBlWCIsInByZXZlbnREZWZhdWx0U3dpcGVZIiwiYnVpbGRQYWdlciIsInN0YXJ0VGV4dCIsInN0b3BUZXh0IiwiY2xlYXJpbmdPcHRpb25zIiwiYXV0b1N0YXJ0IiwiaW5pdFNsaWRlciIsInBhdXNlIiwib25TbGlkZXJMb2FkIiwicmVtb3ZlIiwic2hvdyIsImlucHV0VVJMIiwiaW5wdXREYXRhIiwiaW5wdXRUeXBlIiwicHJvbWlzZSIsImFqYXgiLCJ1cmwiLCJ0eXBlIiwiZG9uZSIsInJlc3BvbnNlRGF0YSIsInN0YXR1cyIsInhociIsImZhaWwiLCJlcnIiLCJjbGlja2VkSXRlbUxpbmsiLCJjbGlja2VkSXRlbSIsImNsb3Nlc3QiLCJwb3B1cEdyb3VwIiwiYWxsUG9wdXBJdGVtcyIsImN1cnJlbnRJbmRleCIsIm5vT2ZQb3B1cEl0ZW1zIiwidmFsdWUiLCJnZXQiLCJnZXRXaWR0aCIsIndpZHRoIiwid2luZG93IiwiZ2V0TmV4dEl0ZW0iLCJyZXZlcnNlIiwibmV4dEl0ZW0iLCJzZXREaWFsb2dCdXR0b25zIiwiYnV0dG9uc1RvU2V0IiwidGV4dCIsImRpYWxvZyIsIm1vZGFsIiwiZHJhZ2dhYmxlIiwicmVzaXphYmxlIiwiY2xvc2UiLCJvcGVuIiwicGFyZW50IiwiZm9jdXMiLCJyZXNpemUiLCJzY3JvbGxUb3AiLCJ3IiwiTWF0aCIsInJvdW5kIiwiJGdsb2JhbE5hdlRvZ2dsZXIiLCIkaGVhZGVyU2VhcmNoIiwiJGhlYWRlclNlYXJjaFRvZ2dsZXIiLCIkZ2xvYmFsTmF2V3JhcHBlciIsIiRnbG9iYWxOYXZEcm9wVG9nZ2xlciIsIiR1dGlsTmF2IiwiJGJvZHkiLCIkY29tcGFjdFdpZHRoIiwiJHN0aWNreUhlYWRlclNjcm9sbFRocmVzaG9sZCIsIiRsYXN0U2Nyb2xsVG9wIiwiJHdpbmRvdyIsImNsb3NlTWVudXMiLCJ0b2dnbGVNb2JpbGVHbG9iYWxNZW51Iiwib3Blbk1lbnUiLCJvcGVuU2VhcmNoIiwib3Blbk5hdiIsInRvZ2dsZUNsYXNzIiwiaW5pdFNraXBMaW5rcyIsInNldFRpbWVvdXQiLCJ1cGRhdGVUYWJOYXZpZ2F0aW9uIiwic2libGluZ3MiLCJyZW1vdmVBdHRyIiwidXBkYXRlU2Nyb2xsRG93biIsIiRuZXdTY3JvbGxUb3AiLCJzY3JvbGwiLCJvbiIsInRoYXQiLCJ0YXJnZXRJc0FjdGl2ZSIsInN0b3BQcm9wYWdhdGlvbiIsImtleXVwIiwia2V5Q29kZSIsInRhcmdldCIsImlzIiwiJG1lbnVXcmFwcGVyIiwiJG1lbnVUb2dnbGUiLCIkbWVudSIsInVwZGF0ZVRvZ2dsZUxpbmsiLCJ0b2dnbGUiLCJpc09wZW4iLCJidWlsZE1lbnUiLCIkYXJpYUxhYmVsIiwiaGlnaGxpZ2h0Q3VycmVudFBhZ2UiLCJwYXRobmFtZSIsImxvY2F0aW9uIiwib3BlbkN1cnJlbnRTdWJtZW51cyIsInByZXYiLCJvcGVuU3VibWVudSIsIiR0b2dnbGUiLCJuZXh0Iiwic2xpZGVEb3duIiwiY2xvc2VTYW1lTGV2ZWxTdWJtZW51cyIsIiRzaWJsaW5nQnJhbmNoZXMiLCJzbGlkZVVwIiwiY2xvc2VTdWJtZW51IiwiJGVuY2xvc2luZ01lbnVJdGVtIiwiaW5pdE1lbnUiLCJzZXRPcGVuIiwic2xpZGVUb2dnbGUiLCJsYWJlbFRhcmdldCIsImJsdXIiLCJjaGFuZ2UiLCJyYWRpb0lucHV0IiwiY2hlY2tlZCIsIiRjcmVkaXRzIiwiJGNyZWRpdEl0ZW1zIiwiJHNjcENyZWRpdHNUaXRsZSIsImNyZWRpdEJ1dHRvbkNsYXNzIiwidG9nZ2xlSW1hZ2VDcmVkaXQiLCJub2RlIiwiZXZlbnQiLCJjb250ZW50V3JhcHBlciIsImxvYWRpbmciLCJmb3JtIiwiaW5wdXRzIiwiZml4UGFnaW5hdGlvbiIsInBhZ2UiLCJzcGxpdCIsInJlbG9hZCIsInJlc3VsdF8zMTQ3MjlfcmVzdWx0X3BhZ2UiLCJjdXJyZW50X3Jlc3VsdF9wYWdlIiwiZml4ZWRQYXJhbXMiLCJwYXJhbXMiLCJ0IiwiRGF0ZSIsImdldFRpbWUiLCJpbnB1dCIsInZhbCIsImFsd2F5cyIsImNpdHlEcm9wZG93biIsIm9uc2VsZWN0Iiwib25Mb2FkIiwiZHluYW1pY01hcCIsImlpaSIsImN1cnJlbnRNYXJrZXIiLCJtYXJrZXIiLCJjZW50ZXJNYXJrZXIiLCJnbWFwIiwibGFiZWxCb3giLCJpbmZvV2luZG93IiwiZ21hcERhdGEiLCJ1c2VyTWFwQ2VudGVyIiwibG9jYXRpb25Sb290Tm9kZSIsImNvbXB1dGVkU2l6ZSIsImdvb2dsZSIsIm1hcHMiLCJTaXplIiwiaW5mb1dpbmRvd09mZlNldCIsImdtYXBDb2xvdXJPcHRpb25zIiwiZmVhdHVyZVR5cGUiLCJzdHlsZXJzIiwic2F0dXJhdGlvbiIsImxpZ2h0bmVzcyIsInZpc2liaWxpdHkiLCJlbGVtZW50VHlwZSIsImF0dGFjaENsaWNrRXZlbnQiLCJtYXAiLCJsYWJlbGVkQm94IiwiZGVzY3JpcHRpb24iLCJhZGRMaXN0ZW5lciIsInNldENvbnRlbnQiLCJzZXRQb3NpdGlvbiIsInBvc2l0aW9uIiwicGFuVG8iLCJwbGFjZUNlbnRlck1hcmtlciIsIk1hcmtlciIsImljb24iLCJ2aXNpYmxlIiwiTGF0TG5nIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJ0aXRsZSIsInNldFpJbmRleCIsInBsYWNlQWxsTWFya2VyIiwibWFya2VycyIsIkluZm9Cb3giLCJjb250ZW50IiwicGFuZSIsImNsb3NlQm94VVJMIiwiZGlzYWJsZUF1dG9QYW4iLCJib3hTdHlsZSIsImRhdGFUeXBlIiwiTWFwIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInNjcm9sbHdoZWVsIiwic3RyZWV0Vmlld0NvbnRyb2wiLCJ6b29tIiwibG9hZE9wdGlvbnMiLCJjZW50ZXIiLCJzdHlsZXMiLCJJbmZvV2luZG93IiwicGl4ZWxPZmZzZXQiLCJhZGREb21MaXN0ZW5lciIsImdldENlbnRlciIsInRyaWdnZXIiLCJzZXRDZW50ZXIiLCJjYXJvdXNlbCIsInNsaWRlcyIsIndyYXBBbGwiLCJ1cGRhdGVBY3RpdmUiLCJzbGlkZUVsZW1lbnQiLCJvbGRJbmRleCIsIm5ld0luZGV4Iiwic2xpZGVyIiwiZmlyc3RTbGlkZU1hcmdpbiIsIm9uU2xpZGVCZWZvcmUiLCJvblNsaWRlQWZ0ZXIiLCJwYXJzZUludCIsInVwZGF0ZSIsIk1vZGVybml6ciIsIm1xIiwicmVsb2FkU2xpZGVyIiwic2NyZWVuV2lkdGgiLCJpbk1kIiwiJHciLCJ1cGRhdGVOZXdzU2xpZGVyIiwiJGhvbWVOZXdzIiwibmV3SW5NZCIsImRlc3Ryb3lTbGlkZXIiLCJ3aWRnZXRzIiwid2lkZ2V0IiwidG9nZ2xlTGFiZWwiLCJzaG93VGV4dCIsImhpZGVUZXh0IiwiaW5pdFdoaXRlQ2FyZHMiLCJib3giLCJidXR0b24iLCJhcHBlbmRUbyIsInZpZGVvUHJldmlldyIsImFsbG93RnVsbHNjcmVlbiIsInBsYWNlaG9sZGVyIiwic3VibWl0IiwiYW5jaG9ycyIsImxpbmsiLCJjdXJyZW50VGFyZ2V0IiwiYnV0dG9ucyIsInRoZXRhYmxlIiwiYXJyYXlEdXBsaWNhdGVaYXBwZXIiLCJteUFycmF5IiwibXlVbmlxdWVBcnJheSIsImVsIiwiaW5BcnJheSIsImNvbGxlY3Rpb24iLCJhdXRvY29tcGxldGUiLCJzb3VyY2UiLCJyZXNwb25zZSIsImZiY29sbGVjdGlvbiIsInBhcnRpYWxfcXVlcnkiLCJ0ZXJtIiwic3VjY2VzcyIsIml0ZW0iLCJsYWJlbCIsIm1pbkxlbmd0aCIsImRlbGF5IiwidWkiLCJjIiwiY2hhbmdlZCIsImRvY0VsIiwiZG9jdW1lbnRFbGVtZW50IiwiY29vbE9mZiIsIm5vdyIsInZhbHVlT2YiLCJ2aWV3cG9ydCIsImRpbWVuc2lvbnMiLCJ0aW1lU3RhbXAiLCJzdG9yZWRSZXN1bHQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIkNJVFkiLCJkZWZlcnJlZCIsImluaXRKc0ZhaWx1cmVOb3RpZmllciIsImluaXRXaWRnZXRzIiwiaW5pdE9uUmVzaXplIiwiaW5pdEN1c3RvbVNsaWRlcnMiLCJqUXVlcnkiLCJzY3JvbGxUbyIsImNvbnRlbnRQYW5lbHMiLCJhY3RpdmF0ZSIsIm1hdGNoIiwibmV3SGVhZGVyIiwiaXNUYWIiLCJhbHJlYWR5U2VsZWN0ZWQiLCJjb250ZW50UGFuZWwiLCJpc0VtcHR5T2JqZWN0Iiwib2Zmc2V0IiwiYW5pbWF0ZSIsInRvcCIsImJicSIsInB1c2hTdGF0ZSIsImtleWRvd24iLCJ3aGljaCIsImdldFN0YXRlIiwiaGFzT3duUHJvcGVydHkiLCJoYXNoIiwiZmlyc3QiLCJmbiIsImFjY29yZGlvblRhYnMiLCJvcHQiLCJwYWdlRHJvcGRvd25zIiwiY2xvc2VQYWdlRHJvcGRvd25zIiwiZXhjZXB0IiwicGFnZURyb3Bkb3duIiwiZHJvcGRvd25zIiwiX29wdCIsImNoYW5nZUxpc3RlbmVycyIsImlzTWVudSIsImRyb3Bkb3duIiwidmFsdWVzIiwic2V0T3B0aW9ucyIsImluaXRpYWxWYWx1ZSIsImluaXRPcHRpb25zIiwib3B0aW9uVmFsdWUiLCJrZXkiLCJpbnZva2VPcHRpb25FeHQiLCJma2V5IiwiYSIsImIiLCJmIiwicmVhZElucHV0VmFsdWUiLCJzZWxlY3RBbmROb3RpZnkiLCJ2IiwiZmlyZU9uU2VsZWN0Iiwic2VsZWN0ZWRLZXkiLCJvcHRpb25zQ29udGFpbmVyIiwiZW1wdHkiLCJzZWxlY3RlZCIsIm8iLCJpc1NlbGVjdGVkIiwiYWRkQ2hhbmdlTGlzdGVuZXIiLCJsaXN0ZW5lciIsInAxIiwicDIiLCJ3cmFwQ2hpbGRyZW4iLCJjaGlsZEVsZW0iLCJ1bmRlZmluZWQiLCJzZXRzIiwid3JhcHBlciIsImVsZW1zIiwiYXJyIiwic2V0IiwiY3JlYXRlRWxlbWVudCIsImpzUGF0aCIsImxpc3QiLCJjYiIsImZvcmNlWGRvbWFpbiIsInBhdGgiLCJmZXRjaCIsImNhY2hlIiwiY3Jvc3NEb21haW4iLCJhY2Nlc3MiLCJ2aWRlb0NvbnRhaW5lcnMiLCJub3QiLCJjb250YWluZXIiLCJpbWdHcm91cCIsImlmcmFtZUlkIiwiY2xpY2thYmxlIiwibG9hZCIsIm1vZGUiLCJzcmMiLCJhdXRvUGxheSIsImlmcmFtZSIsImNhbGxiYWNrIiwiWVQiLCJQbGF5ZXIiLCJldmVudHMiLCJvblJlYWR5IiwicGxheVZpZGVvIiwidW5iaW5kIiwidGVzdCIsIkltYWdlIiwib25sb2FkIiwib25lcnJvciIsInIiLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwicGFyZW50Tm9kZSIsImhyZWYiLCJzIiwiZGlzYWJsZWQiLCJleHByIiwiZmlsdGVycyIsImFuZFNlbGYiLCJ2ZXJzaW9uIiwiQkFDS1NQQUNFIiwiQ09NTUEiLCJERUxFVEUiLCJET1dOIiwiRU5EIiwiRU5URVIiLCJFU0NBUEUiLCJIT01FIiwiTEVGVCIsIk5VTVBBRF9BREQiLCJOVU1QQURfREVDSU1BTCIsIk5VTVBBRF9ESVZJREUiLCJOVU1QQURfRU5URVIiLCJOVU1QQURfTVVMVElQTFkiLCJOVU1QQURfU1VCVFJBQ1QiLCJQQUdFX0RPV04iLCJQQUdFX1VQIiwiUEVSSU9EIiwiUklHSFQiLCJTUEFDRSIsIlRBQiIsIlVQIiwiX2ZvY3VzIiwiY2FsbCIsImFwcGx5IiwiYXJndW1lbnRzIiwic2Nyb2xsUGFyZW50IiwiaWUiLCJlcSIsInpJbmRleCIsImlzTmFOIiwidW5pcXVlSWQiLCJyZW1vdmVVbmlxdWVJZCIsImNyZWF0ZVBzZXVkbyIsImZvY3VzYWJsZSIsInRhYmJhYmxlIiwiYm9keSIsImFwcGVuZENoaWxkIiwib2Zmc2V0SGVpZ2h0Iiwic3R5bGUiLCJtaW5IZWlnaHQiLCJwYWRkaW5nIiwiYm9yZGVyV2lkdGgiLCJzdXBwb3J0Iiwic2VsZWN0c3RhcnQiLCJyZW1vdmVDaGlsZCIsImRpc3BsYXkiLCJvdXRlcldpZHRoIiwianF1ZXJ5IiwicGFyc2VGbG9hdCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIm91dGVySGVpZ2h0IiwicmVtb3ZlRGF0YSIsImNhbWVsQ2FzZSIsImV4ZWMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpZTYiLCJkaXNhYmxlU2VsZWN0aW9uIiwiZW5hYmxlU2VsZWN0aW9uIiwicGx1Z2luIiwiYWRkIiwicHJvdG90eXBlIiwicGx1Z2lucyIsImVsZW1lbnQiLCJub2RlVHlwZSIsImNvbnRhaW5zIiwiaGFzU2Nyb2xsIiwiaXNPdmVyQXhpcyIsImlzT3ZlciIsIkFycmF5Iiwic2xpY2UiLCJjbGVhbkRhdGEiLCJ0cmlnZ2VySGFuZGxlciIsImgiLCJsIiwiV2lkZ2V0IiwiX2NyZWF0ZVdpZGdldCIsIl9wcm90byIsIl9jaGlsZENvbnN0cnVjdG9ycyIsImlzRnVuY3Rpb24iLCJfc3VwZXIiLCJfc3VwZXJBcHBseSIsIndpZGdldEV2ZW50UHJlZml4IiwiY29uc3RydWN0b3IiLCJuYW1lc3BhY2UiLCJ3aWRnZXROYW1lIiwid2lkZ2V0QmFzZUNsYXNzIiwid2lkZ2V0RnVsbE5hbWUiLCJicmlkZ2UiLCJpc1BsYWluT2JqZWN0IiwiY29uY2F0IiwiY2hhckF0IiwicHVzaFN0YWNrIiwiZXJyb3IiLCJvcHRpb24iLCJfaW5pdCIsImRlZmF1bHRFbGVtZW50IiwidXVpZCIsImV2ZW50TmFtZXNwYWNlIiwiX2dldENyZWF0ZU9wdGlvbnMiLCJiaW5kaW5ncyIsImhvdmVyYWJsZSIsIl9vbiIsImRlc3Ryb3kiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJfY3JlYXRlIiwiX3RyaWdnZXIiLCJfZ2V0Q3JlYXRlRXZlbnREYXRhIiwibm9vcCIsIl9kZXN0cm95Iiwic2hpZnQiLCJwb3AiLCJfc2V0T3B0aW9ucyIsIl9zZXRPcHRpb24iLCJlbmFibGUiLCJkaXNhYmxlIiwiZ3VpZCIsInUiLCJkIiwiZGVsZWdhdGUiLCJfb2ZmIiwiam9pbiIsInVuZGVsZWdhdGUiLCJfZGVsYXkiLCJfaG92ZXJhYmxlIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJfZm9jdXNhYmxlIiwiZm9jdXNpbiIsImZvY3Vzb3V0IiwiRXZlbnQiLCJvcmlnaW5hbEV2ZW50IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZWZmZWN0IiwiZHVyYXRpb24iLCJjb21wbGV0ZSIsImVmZmVjdHMiLCJ1aUJhY2tDb21wYXQiLCJlYXNpbmciLCJtZXRhZGF0YSIsIm1vdXNldXAiLCJjYW5jZWwiLCJkaXN0YW5jZSIsIl9tb3VzZUluaXQiLCJfbW91c2VEb3duIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwic3RhcnRlZCIsIl9tb3VzZURlc3Ryb3kiLCJfbW91c2VNb3ZlRGVsZWdhdGUiLCJfbW91c2VVcERlbGVnYXRlIiwiX21vdXNlU3RhcnRlZCIsIl9tb3VzZVVwIiwiX21vdXNlRG93bkV2ZW50IiwiX21vdXNlQ2FwdHVyZSIsIm1vdXNlRGVsYXlNZXQiLCJfbW91c2VEZWxheVRpbWVyIiwiX21vdXNlRGlzdGFuY2VNZXQiLCJfbW91c2VEZWxheU1ldCIsIl9tb3VzZVN0YXJ0IiwiX21vdXNlTW92ZSIsImRvY3VtZW50TW9kZSIsIl9tb3VzZURyYWciLCJfbW91c2VTdG9wIiwibWF4IiwiYWJzIiwicGFnZVgiLCJwYWdlWSIsInAiLCJzY3JvbGxiYXJXaWR0aCIsIm9mZnNldFdpZHRoIiwiZ2V0U2Nyb2xsSW5mbyIsImlzV2luZG93Iiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJnZXRXaXRoaW5JbmZvIiwibGVmdCIsInNjcm9sbExlZnQiLCJvZiIsIm0iLCJnIiwiXyIsIndpdGhpbiIsInkiLCJ4IiwiY29sbGlzaW9uIiwiYXQiLCJrIiwiRCIsIlQiLCJTIiwiTiIsIm15Iiwib2Zmc2V0RnJhY3Rpb25zIiwibWFyZ2luTGVmdCIsIm1hcmdpblRvcCIsInRhcmdldFdpZHRoIiwidGFyZ2V0SGVpZ2h0IiwiZWxlbVdpZHRoIiwiZWxlbUhlaWdodCIsImNvbGxpc2lvblBvc2l0aW9uIiwiY29sbGlzaW9uV2lkdGgiLCJjb2xsaXNpb25IZWlnaHQiLCJlbGVtIiwiYmdpZnJhbWUiLCJ1c2luZyIsImhvcml6b250YWwiLCJ2ZXJ0aWNhbCIsImltcG9ydGFudCIsImZpdCIsImZsaXAiLCJmbGlwZml0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJib3JkZXIiLCJtYXJnaW4iLCJiYWNrZ3JvdW5kIiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsImNzc1RleHQiLCJpbm5lckhUTUwiLCJtb3VzZSIsImFkZENsYXNzZXMiLCJheGlzIiwiY29ubmVjdFRvU29ydGFibGUiLCJjb250YWlubWVudCIsImN1cnNvciIsImN1cnNvckF0IiwiZ3JpZCIsImhhbmRsZSIsImhlbHBlciIsImlmcmFtZUZpeCIsIm9wYWNpdHkiLCJyZWZyZXNoUG9zaXRpb25zIiwicmV2ZXJ0IiwicmV2ZXJ0RHVyYXRpb24iLCJzY29wZSIsInNjcm9sbFNlbnNpdGl2aXR5Iiwic2Nyb2xsU3BlZWQiLCJzbmFwIiwic25hcE1vZGUiLCJzbmFwVG9sZXJhbmNlIiwic3RhY2siLCJfZ2V0SGFuZGxlIiwiX2NyZWF0ZUhlbHBlciIsIl9jYWNoZUhlbHBlclByb3BvcnRpb25zIiwiZGRtYW5hZ2VyIiwiY3VycmVudCIsIl9jYWNoZU1hcmdpbnMiLCJjc3NQb3NpdGlvbiIsInBvc2l0aW9uQWJzIiwibWFyZ2lucyIsIl9nZXRQYXJlbnRPZmZzZXQiLCJyZWxhdGl2ZSIsIl9nZXRSZWxhdGl2ZU9mZnNldCIsIm9yaWdpbmFsUG9zaXRpb24iLCJfZ2VuZXJhdGVQb3NpdGlvbiIsIm9yaWdpbmFsUGFnZVgiLCJvcmlnaW5hbFBhZ2VZIiwiX2FkanVzdE9mZnNldEZyb21IZWxwZXIiLCJfc2V0Q29udGFpbm1lbnQiLCJfY2xlYXIiLCJkcm9wQmVoYXZpb3VyIiwicHJlcGFyZU9mZnNldHMiLCJkcmFnU3RhcnQiLCJfY29udmVydFBvc2l0aW9uVG8iLCJfdWlIYXNoIiwiZHJhZyIsImRyb3AiLCJkcm9wcGVkIiwiZHJhZ1N0b3AiLCJjbG9uZSIsImlzQXJyYXkiLCJoZWxwZXJQcm9wb3J0aW9ucyIsInJpZ2h0IiwiYm90dG9tIiwib2Zmc2V0UGFyZW50IiwidGFnTmFtZSIsInJlbGF0aXZlX2NvbnRhaW5lciIsImNhbmNlbEhlbHBlclJlbW92YWwiLCJzdGFydCIsInNvcnRhYmxlcyIsImluc3RhbmNlIiwic2hvdWxkUmV2ZXJ0Iiwic3RvcCIsIl9oZWxwZXIiLCJjdXJyZW50SXRlbSIsIl9pbnRlcnNlY3RzV2l0aCIsImNvbnRhaW5lckNhY2hlIiwiZnJvbU91dHNpZGUiLCJfY3Vyc29yIiwiX29wYWNpdHkiLCJvdmVyZmxvd09mZnNldCIsInNuYXBFbGVtZW50cyIsIlN0cmluZyIsIml0ZW1zIiwic25hcHBpbmciLCJzbmFwSXRlbSIsInJlbGVhc2UiLCJtYWtlQXJyYXkiLCJzb3J0IiwiX3pJbmRleCIsImFsc29SZXNpemUiLCJhbmltYXRlRHVyYXRpb24iLCJhbmltYXRlRWFzaW5nIiwiYXNwZWN0UmF0aW8iLCJhdXRvSGlkZSIsImdob3N0IiwiaGFuZGxlcyIsIm1heEhlaWdodCIsIm1heFdpZHRoIiwibWluV2lkdGgiLCJfYXNwZWN0UmF0aW8iLCJvcmlnaW5hbEVsZW1lbnQiLCJfcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cyIsIndyYXAiLCJlbGVtZW50SXNXcmFwcGVyIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJvcmlnaW5hbFJlc2l6ZVN0eWxlIiwiX3Byb3BvcnRpb25hbGx5UmVzaXplIiwic2UiLCJzdyIsIm5lIiwibnciLCJ0cmltIiwiX3JlbmRlckF4aXMiLCJfaGFuZGxlcyIsIm1vdXNlb3ZlciIsInJlc2l6aW5nIiwiY2xhc3NOYW1lIiwiaW5zZXJ0QWZ0ZXIiLCJkb2N1bWVudFNjcm9sbCIsIl9yZW5kZXJQcm94eSIsInNpemUiLCJvcmlnaW5hbFNpemUiLCJzaXplRGlmZiIsIm9yaWdpbmFsTW91c2VQb3NpdGlvbiIsIl9wcm9wYWdhdGUiLCJfY2hhbmdlIiwiX3VwZGF0ZVZpcnR1YWxCb3VuZGFyaWVzIiwic2hpZnRLZXkiLCJfdXBkYXRlUmF0aW8iLCJfcmVzcGVjdFNpemUiLCJfdXBkYXRlQ2FjaGUiLCJfdkJvdW5kYXJpZXMiLCJib3JkZXJEaWYiLCJlbGVtZW50T2Zmc2V0Iiwic3RlcCIsImNvbnRhaW5lckVsZW1lbnQiLCJjb250YWluZXJPZmZzZXQiLCJjb250YWluZXJQb3NpdGlvbiIsInBhcmVudERhdGEiLCJjb250YWluZXJTaXplIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwiYWN0aXZlIiwiY29sbGFwc2libGUiLCJoZWFkZXIiLCJoZWlnaHRTdHlsZSIsImljb25zIiwiYWN0aXZlSGVhZGVyIiwiYmVmb3JlQWN0aXZhdGUiLCJhY2NvcmRpb25JZCIsInByZXZTaG93IiwicHJldkhpZGUiLCJoZWFkZXJzIiwiX2ZpbmRBY3RpdmUiLCJfY3JlYXRlSWNvbnMiLCJyZWZyZXNoIiwidGFiSW5kZXgiLCJfc2V0dXBFdmVudHMiLCJwcmVwZW5kVG8iLCJfZGVzdHJveUljb25zIiwicmVtb3ZlQXR0cmlidXRlIiwiX2FjdGl2YXRlIiwiX2tleWRvd24iLCJhbHRLZXkiLCJjdHJsS2V5IiwiX2V2ZW50SGFuZGxlciIsIl9wYW5lbEtleURvd24iLCJvbGRIZWFkZXIiLCJvbGRQYW5lbCIsIm5ld1BhbmVsIiwiX3RvZ2dsZSIsIl9hbmltYXRlIiwiX3RvZ2dsZUNvbXBsZXRlIiwiZG93biIsInByb3AiLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGlvbkZpbHRlciIsImZsb29yIiwiYWNjb3JkaW9uIiwiYXV0b0hlaWdodCIsImNsZWFyU3R5bGUiLCJmaWxsU3BhY2UiLCJfbWVyZ2VIZWlnaHRTdHlsZSIsImhlYWRlclNlbGVjdGVkIiwiY2hhbmdlc3RhcnQiLCJvbGRDb250ZW50IiwibmV3Q29udGVudCIsImFuaW1hdGVkIiwiYXV0b0ZvY3VzIiwic2VhcmNoIiwicGVuZGluZyIsImlzTXVsdGlMaW5lIiwiX2lzTXVsdGlMaW5lIiwidmFsdWVNZXRob2QiLCJpc05ld01lbnUiLCJfbW92ZSIsIl9rZXlFdmVudCIsIm1lbnUiLCJfdmFsdWUiLCJfc2VhcmNoVGltZW91dCIsImtleXByZXNzIiwic2VsZWN0ZWRJdGVtIiwicHJldmlvdXMiLCJjYW5jZWxCbHVyIiwiY2xlYXJUaW1lb3V0Iiwic2VhcmNoaW5nIiwiX2luaXRTb3VyY2UiLCJyb2xlIiwibW91c2Vkb3duIiwib25lIiwibWVudWZvY3VzIiwibGl2ZVJlZ2lvbiIsIm1lbnVzZWxlY3QiLCJhY3RpdmVFbGVtZW50IiwiYmVmb3JldW5sb2FkIiwiYWJvcnQiLCJfc2VhcmNoIiwiY2FuY2VsU2VhcmNoIiwiX3Jlc3BvbnNlIiwiX19yZXNwb25zZSIsIl9ub3JtYWxpemUiLCJfc3VnZ2VzdCIsIl9jbG9zZSIsIl9yZW5kZXJNZW51IiwiX3Jlc2l6ZU1lbnUiLCJfcmVuZGVySXRlbURhdGEiLCJfcmVuZGVySXRlbSIsImlzRmlyc3RJdGVtIiwiaXNMYXN0SXRlbSIsImVzY2FwZVJlZ2V4IiwiUmVnRXhwIiwiZ3JlcCIsIm1lc3NhZ2VzIiwibm9SZXN1bHRzIiwicmVzdWx0cyIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJfZGV0ZXJtaW5lQnV0dG9uVHlwZSIsImhhc1RpdGxlIiwiYnV0dG9uRWxlbWVudCIsIl9yZXNldEJ1dHRvbiIsImxhc3QiLCJEYXRlcGlja2VyIiwiX2N1ckluc3QiLCJfZGlzYWJsZWRJbnB1dHMiLCJfZGF0ZXBpY2tlclNob3dpbmciLCJfaW5EaWFsb2ciLCJfbWFpbkRpdklkIiwiX2lubGluZUNsYXNzIiwiX2FwcGVuZENsYXNzIiwiX3RyaWdnZXJDbGFzcyIsIl9kaWFsb2dDbGFzcyIsIl9kaXNhYmxlQ2xhc3MiLCJfdW5zZWxlY3RhYmxlQ2xhc3MiLCJfY3VycmVudENsYXNzIiwiX2RheU92ZXJDbGFzcyIsInJlZ2lvbmFsIiwiY2xvc2VUZXh0IiwiY3VycmVudFRleHQiLCJtb250aE5hbWVzIiwibW9udGhOYW1lc1Nob3J0IiwiZGF5TmFtZXMiLCJkYXlOYW1lc1Nob3J0IiwiZGF5TmFtZXNNaW4iLCJ3ZWVrSGVhZGVyIiwiZGF0ZUZvcm1hdCIsImZpcnN0RGF5IiwiaXNSVEwiLCJzaG93TW9udGhBZnRlclllYXIiLCJ5ZWFyU3VmZml4IiwiX2RlZmF1bHRzIiwic2hvd09uIiwic2hvd0FuaW0iLCJzaG93T3B0aW9ucyIsImRlZmF1bHREYXRlIiwiYXBwZW5kVGV4dCIsImJ1dHRvblRleHQiLCJidXR0b25JbWFnZSIsImJ1dHRvbkltYWdlT25seSIsImhpZGVJZk5vUHJldk5leHQiLCJuYXZpZ2F0aW9uQXNEYXRlRm9ybWF0IiwiZ290b0N1cnJlbnQiLCJjaGFuZ2VNb250aCIsImNoYW5nZVllYXIiLCJ5ZWFyUmFuZ2UiLCJzaG93T3RoZXJNb250aHMiLCJzZWxlY3RPdGhlck1vbnRocyIsInNob3dXZWVrIiwiY2FsY3VsYXRlV2VlayIsImlzbzg2MDFXZWVrIiwic2hvcnRZZWFyQ3V0b2ZmIiwibWluRGF0ZSIsIm1heERhdGUiLCJiZWZvcmVTaG93RGF5IiwiYmVmb3JlU2hvdyIsIm9uU2VsZWN0Iiwib25DaGFuZ2VNb250aFllYXIiLCJvbkNsb3NlIiwibnVtYmVyT2ZNb250aHMiLCJzaG93Q3VycmVudEF0UG9zIiwic3RlcE1vbnRocyIsInN0ZXBCaWdNb250aHMiLCJhbHRGaWVsZCIsImFsdEZvcm1hdCIsImNvbnN0cmFpbklucHV0Iiwic2hvd0J1dHRvblBhbmVsIiwiYXV0b1NpemUiLCJkcERpdiIsImJpbmRIb3ZlciIsImluZGV4T2YiLCJkYXRlcGlja2VyIiwiX2lzRGlzYWJsZWREYXRlcGlja2VyIiwiaW5zdEFjdGl2ZSIsImlubGluZSIsImV4dGVuZFJlbW92ZSIsIlBST1BfTkFNRSIsImRwdXVpZCIsIm1hcmtlckNsYXNzTmFtZSIsIm1heFJvd3MiLCJsb2ciLCJjb25zb2xlIiwiX3dpZGdldERhdGVwaWNrZXIiLCJzZXREZWZhdWx0cyIsIl9hdHRhY2hEYXRlcGlja2VyIiwic2V0dGluZ3MiLCJpbmxpbmVTZXR0aW5ncyIsImF0dHJOYW1lIiwiYXR0clZhbHVlIiwiZ2V0QXR0cmlidXRlIiwiZXZhbCIsImluc3QiLCJfbmV3SW5zdCIsIl9jb25uZWN0RGF0ZXBpY2tlciIsIl9pbmxpbmVEYXRlcGlja2VyIiwic2VsZWN0ZWREYXkiLCJzZWxlY3RlZE1vbnRoIiwic2VsZWN0ZWRZZWFyIiwiZHJhd01vbnRoIiwiZHJhd1llYXIiLCJfYXR0YWNobWVudHMiLCJfZG9LZXlEb3duIiwiX2RvS2V5UHJlc3MiLCJfZG9LZXlVcCIsIl9nZXQiLCJfYXV0b1NpemUiLCJfZGlzYWJsZURhdGVwaWNrZXIiLCJfc2hvd0RhdGVwaWNrZXIiLCJhbHQiLCJfbGFzdElucHV0IiwiX2hpZGVEYXRlcGlja2VyIiwic2V0TW9udGgiLCJzZXREYXRlIiwiZ2V0RGF5IiwiX2Zvcm1hdERhdGUiLCJfc2V0RGF0ZSIsIl9nZXREZWZhdWx0RGF0ZSIsIl91cGRhdGVEYXRlcGlja2VyIiwiX3VwZGF0ZUFsdGVybmF0ZSIsIl9kaWFsb2dEYXRlcGlja2VyIiwiX2RpYWxvZ0luc3QiLCJfZGlhbG9nSW5wdXQiLCJfcG9zIiwiYmxvY2tVSSIsIl9kZXN0cm95RGF0ZXBpY2tlciIsIl9lbmFibGVEYXRlcGlja2VyIiwiX2dldEluc3QiLCJfb3B0aW9uRGF0ZXBpY2tlciIsIl9nZXREYXRlRGF0ZXBpY2tlciIsIl9nZXRNaW5NYXhEYXRlIiwiX2NoYW5nZURhdGVwaWNrZXIiLCJfcmVmcmVzaERhdGVwaWNrZXIiLCJfc2V0RGF0ZURhdGVwaWNrZXIiLCJfc2V0RGF0ZUZyb21GaWVsZCIsIl9nZXREYXRlIiwiX3NlbGVjdERheSIsIl9hZGp1c3REYXRlIiwibWV0YUtleSIsIl9jbGVhckRhdGUiLCJfZ290b1RvZGF5IiwiX3Bvc3NpYmxlQ2hhcnMiLCJmcm9tQ2hhckNvZGUiLCJjaGFyQ29kZSIsImxhc3RWYWwiLCJwYXJzZURhdGUiLCJfZ2V0Rm9ybWF0Q29uZmlnIiwiX2ZpbmRQb3MiLCJfY2hlY2tPZmZzZXQiLCJfZ2V0Qm9yZGVycyIsIl9nZW5lcmF0ZUhUTUwiLCJfYXR0YWNoSGFuZGxlcnMiLCJfZ2V0TnVtYmVyT2ZNb250aHMiLCJ5ZWFyc2h0bWwiLCJyZXBsYWNlV2l0aCIsInRoaW4iLCJtZWRpdW0iLCJ0aGljayIsIm1pbiIsImhpZGRlbiIsIl90aWR5RGlhbG9nIiwidW5ibG9ja1VJIiwiX2NoZWNrRXh0ZXJuYWxDbGljayIsIl9hZGp1c3RJbnN0RGF0ZSIsImN1cnJlbnREYXkiLCJjdXJyZW50TW9udGgiLCJjdXJyZW50WWVhciIsImdldERhdGUiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwiX25vdGlmeUNoYW5nZSIsIl9zZWxlY3RNb250aFllYXIiLCJzZWxlY3RlZEluZGV4IiwiX3NlbGVjdERhdGUiLCJmb3JtYXREYXRlIiwibm9XZWVrZW5kcyIsInN1YnN0cmluZyIsIl90aWNrc1RvMTk3MCIsIl9nZXREYXlzSW5Nb250aCIsIl9kYXlsaWdodFNhdmluZ0FkanVzdCIsIkFUT00iLCJDT09LSUUiLCJJU09fODYwMSIsIlJGQ184MjIiLCJSRkNfODUwIiwiUkZDXzEwMzYiLCJSRkNfMTEyMyIsIlJGQ18yODIyIiwiUlNTIiwiVElDS1MiLCJUSU1FU1RBTVAiLCJXM0MiLCJnZXRZZWFyIiwiX3Jlc3RyaWN0TWluTWF4IiwiX2RldGVybWluZURhdGUiLCJzZXRIb3VycyIsInNldE1pbnV0ZXMiLCJzZXRTZWNvbmRzIiwic2V0TWlsbGlzZWNvbmRzIiwiZ2V0SG91cnMiLCJ0b2RheSIsInNlbGVjdERheSIsInNlbGVjdE1vbnRoIiwic2VsZWN0WWVhciIsIl9jYW5BZGp1c3RNb250aCIsIl9pc0luUmFuZ2UiLCJNIiwiQyIsIlAiLCJBIiwiSSIsIkgiLCJ6IiwiRiIsIkUiLCJPIiwiVyIsImoiLCJMIiwiX2dlbmVyYXRlTW9udGhZZWFySGVhZGVyIiwiUiIsIlkiLCJCIiwiSiIsIksiLCJfZ2V0Rmlyc3REYXlPZk1vbnRoIiwiViIsImNlaWwiLCJVIiwicSIsIlEiLCJHIiwiWCIsIloiLCJldCIsImluaXRpYWxpemVkIiwiYXV0b09wZW4iLCJjbG9zZU9uRXNjYXBlIiwiZGlhbG9nQ2xhc3MiLCJvcmlnaW5hbFRpdGxlIiwib2xkUG9zaXRpb24iLCJ1aURpYWxvZyIsIm91dGxpbmUiLCJtb3ZlVG9Ub3AiLCJ1aURpYWxvZ1RpdGxlYmFyIiwidWlEaWFsb2dUaXRsZWJhckNsb3NlVGV4dCIsInVpRGlhbG9nQnV0dG9uUGFuZSIsInVpQnV0dG9uU2V0IiwiX21ha2VEcmFnZ2FibGUiLCJfbWFrZVJlc2l6YWJsZSIsIl9jcmVhdGVCdXR0b25zIiwiX2lzT3BlbiIsIm92ZXJsYXkiLCJiZWZvcmUiLCJfaGlkZSIsIm1heFoiLCIkZWwiLCJfc2l6ZSIsIl9wb3NpdGlvbiIsIl9taW5IZWlnaHQiLCJnZXRUaXRsZUlkIiwiaW5zdGFuY2VzIiwib2xkSW5zdGFuY2VzIiwic3BsaWNlIiwic3VibWVudSIsIm1lbnVzIiwiYWN0aXZlTWVudSIsInByb3h5IiwiaGFzIiwiZXhwYW5kIiwidGltZXIiLCJjb2xsYXBzZUFsbCIsInByZXZpb3VzUGFnZSIsIm5leHRQYWdlIiwiY29sbGFwc2UiLCJwcmV2aW91c0ZpbHRlciIsImZpbHRlclRpbWVyIiwibmV4dEFsbCIsIl9pdGVtUm9sZSIsImxpc3Rib3giLCJfc2Nyb2xsSW50b1ZpZXciLCJfc3RhcnRPcGVuaW5nIiwiX2hhc1Njcm9sbCIsIl9vcGVuIiwicHJldkFsbCIsImRlY29kZVVSSUNvbXBvbmVudCIsInBhcmFtIiwic3BlY2lhbCIsIm5vRXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZGVwYXJhbSIsInRydWUiLCJmYWxzZSIsIm51bGwiLCJiYXNlIiwiaW1nIiwic2NyaXB0IiwicmVtb3ZlU3RhdGUiLCJoYW5kbGVyIiwiYnJvd3NlciIsIm1zaWUiLCJzZXR1cCIsInRlYXJkb3duIiwiY29udGVudFdpbmRvdyIsInBhcnNlSlNPTiIsImJhIiwiYmIiLCJiaCIsImJpIiwiYmoiLCJiZSIsImJrIiwiYmwiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiYkMiLCJiRCIsImhhc0RhdGEiLCJiRSIsImNsZWFyQXR0cmlidXRlcyIsIm1lcmdlQXR0cmlidXRlcyIsIm91dGVySFRNTCIsImh0bWw1Q2xvbmUiLCJidiIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGVmYXVsdFZhbHVlIiwiZXhwYW5kbyIsImJGIiwicXVlcnlTZWxlY3RvckFsbCIsImJHIiwiYlkiLCJ0b1VwcGVyQ2FzZSIsImJXIiwiYloiLCJiJCIsImNjIiwiYkgiLCJiXyIsImJQIiwiY2EiLCJiViIsImJveFNpemluZyIsImJRIiwiYm94U2l6aW5nUmVsaWFibGUiLCJiUyIsImJJIiwiZnJhbWVCb3JkZXIiLCJiSiIsImNvbnRlbnREb2N1bWVudCIsIndyaXRlIiwiY2kiLCJjZSIsImN6IiwiY0EiLCJkYXRhVHlwZXMiLCJjdiIsInVuc2hpZnQiLCJjQiIsImFqYXhTZXR0aW5ncyIsImZsYXRPcHRpb25zIiwiY0MiLCJjb250ZW50cyIsInJlc3BvbnNlRmllbGRzIiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJjRCIsImRhdGFGaWx0ZXIiLCJjTCIsIlhNTEh0dHBSZXF1ZXN0IiwiY00iLCJBY3RpdmVYT2JqZWN0IiwiY1UiLCJjTiIsImNWIiwiY1QiLCJjVyIsImNTIiwiRGVmZXJyZWQiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJydW4iLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9wcyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiY3JlYXRlVHdlZW4iLCJUd2VlbiIsInJlamVjdFdpdGgiLCJjWCIsImZ4IiwiYW5pbSIsInByb2dyZXNzIiwiY3NzSG9va3MiLCJjWSIsIl9xdWV1ZUhvb2tzIiwidW5xdWV1ZWQiLCJmaXJlIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJpbmxpbmVCbG9ja05lZWRzTGF5b3V0Iiwic2hyaW5rV3JhcEJsb2NrcyIsImNQIiwiY1oiLCJjJCIsImRhIiwiT2JqZWN0IiwidG9TdHJpbmciLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5IiwicmVhZHlTdGF0ZSIsImRldGFjaEV2ZW50IiwiY29udGV4dCIsInBhcnNlSFRNTCIsIm1lcmdlIiwic2VsZWN0b3IiLCJ0b0FycmF5IiwicHJldk9iamVjdCIsIm5vQ29uZmxpY3QiLCJpc1JlYWR5IiwicmVhZHlXYWl0IiwiaG9sZFJlYWR5Iiwib2ZmIiwiaXNOdW1lcmljIiwiaXNGaW5pdGUiLCJFcnJvciIsImJ1aWxkRnJhZ21lbnQiLCJjYWNoZWFibGUiLCJmcmFnbWVudCIsImNoaWxkTm9kZXMiLCJKU09OIiwicGFyc2UiLCJGdW5jdGlvbiIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiYXN5bmMiLCJsb2FkWE1MIiwiZ2xvYmFsRXZhbCIsImV4ZWNTY3JpcHQiLCJhdHRhY2hFdmVudCIsImZyYW1lRWxlbWVudCIsImRvU2Nyb2xsIiwiQ2FsbGJhY2tzIiwib25jZSIsIm1lbW9yeSIsInN0b3BPbkZhbHNlIiwidW5pcXVlIiwibG9jayIsImxvY2tlZCIsImZpcmVXaXRoIiwiZmlyZWQiLCJ0aGVuIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vdGlmeSIsInBpcGUiLCJ3aGVuIiwic2V0QXR0cmlidXRlIiwibGVhZGluZ1doaXRlc3BhY2UiLCJ0Ym9keSIsImh0bWxTZXJpYWxpemUiLCJocmVmTm9ybWFsaXplZCIsImNzc0Zsb2F0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwiZ2V0U2V0QXR0cmlidXRlIiwiZW5jdHlwZSIsImNsb25lTm9kZSIsImJveE1vZGVsIiwiY29tcGF0TW9kZSIsInN1Ym1pdEJ1YmJsZXMiLCJjaGFuZ2VCdWJibGVzIiwiZm9jdXNpbkJ1YmJsZXMiLCJkZWxldGVFeHBhbmRvIiwibm9DbG9uZUV2ZW50IiwicmVsaWFibGVNYXJnaW5SaWdodCIsInBpeGVsUG9zaXRpb24iLCJub0Nsb25lQ2hlY2tlZCIsIm9wdERpc2FibGVkIiwiZmlyZUV2ZW50IiwicmFkaW9WYWx1ZSIsImxhc3RDaGlsZCIsImNoZWNrQ2xvbmUiLCJhcHBlbmRDaGVja2VkIiwicmVsaWFibGVIaWRkZW5PZmZzZXRzIiwiZG9lc05vdEluY2x1ZGVNYXJnaW5JbkJvZHlPZmZzZXQiLCJvZmZzZXRUb3AiLCJnZXRDb21wdXRlZFN0eWxlIiwiZGVsZXRlZElkcyIsInJhbmRvbSIsIm5vRGF0YSIsImVtYmVkIiwib2JqZWN0IiwiYXBwbGV0IiwiYWNjZXB0RGF0YSIsInRvSlNPTiIsImF0dHJpYnV0ZXMiLCJkZXF1ZXVlIiwic3BlZWRzIiwiY2xlYXJRdWV1ZSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidmFsSG9va3MiLCJzcGVjaWZpZWQiLCJhdHRyRm4iLCJpc1hNTERvYyIsImF0dHJIb29rcyIsInRhYmluZGV4IiwicmVhZG9ubHkiLCJmb3IiLCJtYXhsZW5ndGgiLCJjZWxsc3BhY2luZyIsImNlbGxwYWRkaW5nIiwicm93c3BhbiIsImNvbHNwYW4iLCJ1c2VtYXAiLCJmcmFtZWJvcmRlciIsImNvbnRlbnRlZGl0YWJsZSIsInByb3BIb29rcyIsImdldEF0dHJpYnV0ZU5vZGUiLCJub2RlVmFsdWUiLCJjb29yZHMiLCJjcmVhdGVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOb2RlIiwiaG92ZXIiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwib3JpZ1R5cGUiLCJuZWVkc0NvbnRleHQiLCJkZWxlZ2F0ZUNvdW50IiwiZ2xvYmFsIiwicmVtb3ZlRXZlbnQiLCJjdXN0b21FdmVudCIsImdldERhdGEiLCJzZXREYXRhIiwiY2hhbmdlRGF0YSIsImlzVHJpZ2dlciIsImV4Y2x1c2l2ZSIsIm5hbWVzcGFjZV9yZSIsInJlc3VsdCIsIm5vQnViYmxlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJfZGVmYXVsdCIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJtYXRjaGVzIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJoYW5kbGVPYmoiLCJwb3N0RGlzcGF0Y2giLCJmaXhIb29rcyIsImtleUhvb2tzIiwibW91c2VIb29rcyIsImZyb21FbGVtZW50IiwiY2xpZW50WCIsImNsaWVudExlZnQiLCJjbGllbnRZIiwiY2xpZW50VG9wIiwicmVsYXRlZFRhcmdldCIsInRvRWxlbWVudCIsInNyY0VsZW1lbnQiLCJvbmJlZm9yZXVubG9hZCIsInNpbXVsYXRlIiwiaXNTaW11bGF0ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJnZXRQcmV2ZW50RGVmYXVsdCIsImNhbmNlbEJ1YmJsZSIsIl9zdWJtaXRfYnViYmxlIiwicHJvcGVydHlOYW1lIiwiX2p1c3RfY2hhbmdlZCIsImxpdmUiLCJkaWUiLCJiYyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJicCIsImJkIiwiYmYiLCJiZyIsIm5leHRTaWJsaW5nIiwicHJlRmlsdGVyIiwiZGlyIiwic2l6c2V0IiwiYm8iLCJibSIsImJuIiwiVEFHIiwidW5pcXVlU29ydCIsIklEIiwiUE9TIiwiYnEiLCJjYWNoZUxlbmd0aCIsIkNMQVNTIiwiTkFNRSIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImNyZWF0ZUNvbW1lbnQiLCJnZXRFbGVtZW50c0J5TmFtZSIsIm1hdGNoZXNTZWxlY3RvciIsImdldFRleHQiLCJ0ZXh0Q29udGVudCIsImlzWE1MIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhdHRySGFuZGxlIiwic2VsZWN0b3JzIiwicHJldmlvdXNTaWJsaW5nIiwicHNldWRvcyIsInNldEZpbHRlcnMiLCJpbm5lclRleHQiLCJlbmFibGVkIiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwicmVzZXQiLCJoYXNGb2N1cyIsImV2ZW4iLCJvZGQiLCJsdCIsImd0Iiwic291cmNlSW5kZXgiLCJjb21waWxlIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwibnRoIiwiYWRkQmFjayIsInBhcmVudHNVbnRpbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsInNpYmxpbmciLCJiciIsImJzIiwiYnQiLCJidSIsImJ3IiwiYngiLCJieSIsImJ6IiwibGVnZW5kIiwidGhlYWQiLCJ0ciIsInRkIiwiY29sIiwiYXJlYSIsImJBIiwiYkIiLCJvcHRncm91cCIsInRmb290IiwiY29sZ3JvdXAiLCJ0aCIsImNyZWF0ZVRleHROb2RlIiwid3JhcElubmVyIiwidW53cmFwIiwiZG9tTWFuaXAiLCJjbGVhbiIsImFmdGVyIiwiZGV0YWNoIiwidGhyb3dzIiwiZnJhZ21lbnRzIiwicmVwbGFjZUFsbCIsInVhTWF0Y2giLCJjaHJvbWUiLCJ3ZWJraXQiLCJzYWZhcmkiLCJzdWIiLCJzdXBlcmNsYXNzIiwiYksiLCJiTCIsImJNIiwiYk4iLCJiTyIsImJSIiwiYlQiLCJiVSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiYlgiLCJjc3NOdW1iZXIiLCJmaWxsT3BhY2l0eSIsImxpbmVIZWlnaHQiLCJvcnBoYW5zIiwid2lkb3dzIiwiY3NzUHJvcHMiLCJmbG9hdCIsInN3YXAiLCJjdXJyZW50U3R5bGUiLCJydW50aW1lU3R5bGUiLCJwaXhlbExlZnQiLCIkMSIsImNkIiwiY2YiLCJjZyIsImNoIiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJlbGVtZW50cyIsInRyYWRpdGlvbmFsIiwiY2oiLCJjayIsImNsIiwiY20iLCJjbiIsImNvIiwiY3AiLCJjcSIsImNyIiwiY3MiLCJjdCIsImN1IiwiY3ciLCJjeCIsImN5IiwicmVzcG9uc2VUZXh0IiwiZ2V0U2NyaXB0IiwiYWpheFNldHVwIiwiaXNMb2NhbCIsImNvbnRlbnRUeXBlIiwicHJvY2Vzc0RhdGEiLCJhY2NlcHRzIiwieG1sIiwianNvbiIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiaWZNb2RpZmllZCIsImxhc3RNb2RpZmllZCIsImV0YWciLCJzdGF0dXNUZXh0Iiwic3RhdHVzQ29kZSIsInNldFJlcXVlc3RIZWFkZXIiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJvdmVycmlkZU1pbWVUeXBlIiwiaGFzQ29udGVudCIsImJlZm9yZVNlbmQiLCJ0aW1lb3V0Iiwic2VuZCIsImNFIiwiY0YiLCJjRyIsImNIIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwiaGVhZCIsInNjcmlwdENoYXJzZXQiLCJjaGFyc2V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiY0kiLCJjSiIsImNLIiwiY29ycyIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwicmVzcG9uc2VYTUwiLCJ1bmxvYWQiLCJjTyIsImNRIiwiY1IiLCJjdXIiLCJ1bml0IiwiQW5pbWF0aW9uIiwidHdlZW5lciIsInByZWZpbHRlciIsInBvcyIsImZhZGVUbyIsInNwZWVkIiwidGltZXJzIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJvbGQiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwidGljayIsInNldEludGVydmFsIiwiaW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwic2xvdyIsImZhc3QiLCJjXyIsInNldE9mZnNldCIsImJvZHlPZmZzZXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0TGVmdCIsIkhlaWdodCIsIldpZHRoIiwiZGVmaW5lIiwid2ViU2VydmljZSIsImpxWEhSIiwiZXJyb3JUaHJvd24iLCJlc2NhcGUiLCJhamF4RXJyb3IiLCJjdXN0b21BSkFYIiwidmlld3BvcnRDaGFuZ2VkIiwiY3JlYXRlR2FsbGVyeSIsImNyZWF0ZVNsaWRlciIsImdldFdpbmRvd1dpZHRoIiwiaW5pdERyb3Bkb3ducyIsImluaXREeW5hbWljR21hcCIsImluaXRBekxpc3RpbmciLCJpbWFnZUFjY29yZGlvbiIsImluaXRTZWVNb3JlIiwiaW1hZ2VDcmVkaXRhdGlvbiIsImluaXRQbGFjZWhvbGRlckhhbGxiYWNrIiwiaW5pdEltYWdlQ2Fyb3VzZWwiLCJzZWFyY2hBdXRvQ29tcGxldGUiLCJpbml0TmV3c0V2ZW50c1N0cmlwIiwiaW5pdENvb2tpZU5vdGljZSIsImhlYWRlclByaW1hcnlOYXYiLCJoZWFkZXJOYXZzIiwiZm9vdGVyIiwicG9wdXBEaWFsb2ciLCJyZXNwb25zaXZlVGFibGVzIiwiY3ljbGljUG9wdXAiLCJzY3JpcHRzIiwiZ29vZ2xlTWFwc0FwaSIsImZsb3dwbGF5ZXIiLCJmbG93cGxheWVyRW1iZWQiLCJzd2ZvYmplY3QiLCJoaWdoY2hhcnRzIiwialZlY3Rvck1hcCIsIndvcmxkTWFwIiwiYnVpbGRpbmdUaGVWaXNpb24iLCJsaWJyYXJ5Iiwic3JjUHJlZml4IiwiaG9zdG5hbWUiLCJjaXR5VmVyc2lvbiIsImpzSGFuZGxlIiwieWVwbm9wZSIsInNldFZlcnNpb24iLCJpbml0UGFnZSIsIiRmb3JtIiwiJHNlYXJjaEZvcm0iLCIkc2VhcmNoRm9ybVF1ZXJ5IiwiJHF1ZXJ5IiwiaW5kZXhGb3JtIiwiaW5kZXhRdWVyeSIsInNlYXJjaFBhZ2VBdXRvQ29tcGxldGVDb2xsZWN0aW9uIiwiJGdhbGxlcmllcyIsImF1dG9Db21wbGV0ZUNvbGxlY3Rpb24iLCIkcHJpbWFyeU5hdiIsIiRzZWNvbmRhcnlOYXYiLCIkc2Vjb25kYXJ5TmF2TGlzIiwiJGFjY29yZGlvbnMiLCIkcmVzcG9uc2l2ZVRhYnMiLCJjdXJyZW50VXJsIiwibW9kaWZ5U2VjTmF2Iiwic3ZnIiwiJGVsZW1lbnQiLCJ2aWRXaWR0aCIsIiRwYXJlbnQiLCJwYXJlbnRFbGVtZW50Iiwib2JqZWN0U2l6ZSIsInZpZGVvcyIsIiR5b3V0dWJlVmlkcyIsIiRmbXNWaWRzIiwiZW1iZWRZb3V0dWJlIiwidmlkSGVpZ2h0IiwidmlkZW9JRCIsImVtYmVkRm1zIiwic3BsYXNoSW1hZ2VzIiwiY2Fzc1N0YW5kYXJkIiwiY2Fzc1JldGluYSIsImNpdHlTdGFuZGFyZCIsImNpdHlSZW50aW5hIiwiZWxJZCIsInZpZElkIiwiZXhwcmVzc0luc3RhbGwiLCJmbGFzaHRhcmdldHZlcnNpb24iLCJmbGFzaHZhcnMiLCJhbGxvd1NjcmlwdEFjY2VzcyIsImFsbG93ZnVsbHNjcmVlbiIsIndtb2RlIiwiYXR0cyIsInNwbGFzaEltYWdlIiwiaXNDYXNzIiwic3dmQ2FsbEJhY2siLCJyZWYiLCJoYXNGbGFzaFBsYXllclZlcnNpb24iLCJlbWJlZFNXRiIsImNvbmZpZyIsInllcG5vcGVGaWx0ZXIiLCJyZXNvdXJjZSIsImxvYyIsImxhc3RJdGVtIiwiYWRkRmlsdGVyIiwiczFTZXJ2ZXIiLCJicmVha3BvaW50cyIsImJvdW5kRHJvcEV2ZW50cyIsImJpbmRNZWdhRGRFdmVudHMiLCIkbWVnYUxpbmtzIiwiJG5hdkxpcyIsIiRkcm9wcyIsIiR0YXJnZXQiLCIkbGkiLCIkZHJvcCIsImRlc2t0b3AiLCJ3aWRlIiwiJGdsb2JhbE5hdiIsIiRyZXNwb25zaXZlVG9nZ2xlcnMiLCIkdG9nZ2xlZXMiLCJvblJlc2l6ZSIsIm5ld1dpZHRoIiwiJHNlbGYiLCJkb3dubG9hZEZpbGVUeXBlcyIsImdvb2dsZU1hcHNNYXJrZXJzIiwibWFwT3ZlcmxheVBhbmUiLCJhZnRlckJ4U2xpZGVyTG9hZGVkIiwiYWxsTGluayIsIm1pZGRsZUJ1dHRvblRleHQiLCJsZWZ0V2lkZ2V0QnV0dG9uIiwicmlnaHRXaWRnZXRCdXR0b24iLCJwcmV2aW91c0J1dHRvbiIsIm5leHRCdXR0b24iLCJpbnB1dE1pZGRsZUJ1dHRvblRleHQiLCJpbml0TmV3cyIsIm5ld3NXaWRnZXQiLCJuZXdzTGlzdCIsInNob3dBbW91bnQiLCJpbml0RXZlbnRzIiwiZXZlbnRzV2lkZ2V0IiwiZXZlbnRzTGlzdCIsImluaXRGbGlja3IiLCIkd2lkZ2V0IiwiJHNsaWRlV3JhcHBlciIsImxvYWRlZE90aGVyUGljcyIsImJ4U2xpZGVyQ2FsbGJhY2siLCJmaXJzdGRpdiIsInRoaXNKcSIsImltZ1RhZyIsInN0eWxlQXR0ciIsImluaXRDb3Vyc2VzIiwid2lkZ2V0Q29udGVudCIsImluaXRUZXN0aW1vbmlhbHMiLCIkdGVzdGltb25pYWxzV2lkZ2V0IiwidGVzdGltb25pYWxzTGlzdCIsImluaXRQcm9maWxlcyIsIiRwcm9maWxlc1dpZGdldCIsInByb2ZpbGVzTGlzdCIsImluaXRTcG90bGlnaHRSZXNlYXJjaCIsIiRzcG90bGlnaHRSZXNlYXJjaFdpZGdldCIsInNwb3RsaWdodFJlc2VhcmNoTGlzdCIsImluaXRSc3MiLCJpbml0Q2FsbFRvQWN0aW9uIiwic3RhcnRfZGF0ZSIsImVuZF9kYXRlIiwic2QiLCJlZCIsInNwbGl0RGF0ZSIsImR0IiwiaWR0IiwiZGF0ZUFycmF5IiwiZW5kb2ZBcnJheSIsInNldEZ1bGxZZWFyIiwiaW5pdEdhbGxlcnkiLCIkZ2FsbGVyeSIsImluaXRGcmVlVGV4dCIsIm5ld3MiLCJmbGlja3IiLCJjb3Vyc2VzIiwidGVzdGltb25pYWxzIiwicnNzIiwiY3RhIiwiZnJlZXRleHQiLCJwcm9maWxlcyIsIm1lc3NhZ2UiLCJkZWJ1Z0xldmVsIiwib3BlcmEiLCJwb3N0RXJyb3IiLCJlMSIsIkNvb2tpZXMiLCJleHBpcmVzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrREFBMEMsZ0NBQWdDO0FBQzFFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0VBQXdELGtCQUFrQjtBQUMxRTtBQUNBLHlEQUFpRCxj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O0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsUUFBUTtBQUN4QztBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNB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c0QsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVM4aUIsT0FBVCxFQUFrQjtBQUMvQjs7QUFFQSxNQUFJQSxPQUFPLElBQUksQ0FBQzdpQixDQUFDLENBQUN3WSxhQUFGLENBQWdCcUssT0FBTyxDQUFDcEssTUFBUixFQUFoQixDQUFoQixFQUFtRDtBQUMvQ3pZLEtBQUMsQ0FBQywwQ0FBRCxDQUFELENBQThDMFksT0FBOUMsQ0FDSTtBQUFFelAsZUFBUyxFQUFFRSxJQUFJLENBQUNnZ0IsR0FBTCxDQUFTLENBQVQsRUFBWXRHLE9BQU8sQ0FBQ3BLLE1BQVIsR0FBaUJFLEdBQWpCLEdBQXVCLEVBQW5DO0FBQWIsS0FESixFQUVJLE1BRko7QUFJSDtBQUNKLENBVEQsQyIsImZpbGUiOiJDSVRZX1IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9qcy9tYWluL2luZGV4LmpzXCIpO1xuIiwiLyoqXG4gKiBieFNsaWRlciB2NC4yLjFkXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE3IFN0ZXZlbiBXYW5kZXJza2lcbiAqIFdyaXR0ZW4gd2hpbGUgZHJpbmtpbmcgQmVsZ2lhbiBhbGVzIGFuZCBsaXN0ZW5pbmcgdG8gamF6elxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUKVxuICovXG5cbjsoZnVuY3Rpb24oJCkge1xuXG4gIHZhciBkZWZhdWx0cyA9IHtcblxuICAgIC8vIEdFTkVSQUxcbiAgICBtb2RlOiAnaG9yaXpvbnRhbCcsXG4gICAgc2xpZGVTZWxlY3RvcjogJycsXG4gICAgaW5maW5pdGVMb29wOiB0cnVlLFxuICAgIGhpZGVDb250cm9sT25FbmQ6IGZhbHNlLFxuICAgIHNwZWVkOiA1MDAsXG4gICAgZWFzaW5nOiBudWxsLFxuICAgIHNsaWRlTWFyZ2luOiAwLFxuICAgIHN0YXJ0U2xpZGU6IDAsXG4gICAgcmFuZG9tU3RhcnQ6IGZhbHNlLFxuICAgIGNhcHRpb25zOiBmYWxzZSxcbiAgICB0aWNrZXI6IGZhbHNlLFxuICAgIHRpY2tlckhvdmVyOiBmYWxzZSxcbiAgICBhZGFwdGl2ZUhlaWdodDogZmFsc2UsXG4gICAgYWRhcHRpdmVIZWlnaHRTcGVlZDogNTAwLFxuICAgIHZpZGVvOiBmYWxzZSxcbiAgICB1c2VDU1M6IHRydWUsXG4gICAgcHJlbG9hZEltYWdlczogJ3Zpc2libGUnLFxuICAgIHJlc3BvbnNpdmU6IHRydWUsXG4gICAgc2xpZGVaSW5kZXg6IDUwLFxuICAgIHdyYXBwZXJDbGFzczogJ2J4LXdyYXBwZXInLFxuXG4gICAgLy8gVE9VQ0hcbiAgICB0b3VjaEVuYWJsZWQ6IHRydWUsXG4gICAgc3dpcGVUaHJlc2hvbGQ6IDUwLFxuICAgIG9uZVRvT25lVG91Y2g6IHRydWUsXG4gICAgcHJldmVudERlZmF1bHRTd2lwZVg6IHRydWUsXG4gICAgcHJldmVudERlZmF1bHRTd2lwZVk6IGZhbHNlLFxuXG4gICAgLy8gQUNDRVNTSUJJTElUWVxuICAgIGFyaWFMaXZlOiB0cnVlLFxuICAgIGFyaWFIaWRkZW46IHRydWUsXG5cbiAgICAvLyBLRVlCT0FSRFxuICAgIGtleWJvYXJkRW5hYmxlZDogZmFsc2UsXG5cbiAgICAvLyBQQUdFUlxuICAgIHBhZ2VyOiB0cnVlLFxuICAgIHBhZ2VyVHlwZTogJ2Z1bGwnLFxuICAgIHBhZ2VyU2hvcnRTZXBhcmF0b3I6ICcgLyAnLFxuICAgIHBhZ2VyU2VsZWN0b3I6IG51bGwsXG4gICAgYnVpbGRQYWdlcjogbnVsbCxcbiAgICBwYWdlckN1c3RvbTogbnVsbCxcblxuICAgIC8vIENPTlRST0xTXG4gICAgY29udHJvbHM6IHRydWUsXG4gICAgbmV4dFRleHQ6ICdOZXh0JyxcbiAgICBwcmV2VGV4dDogJ1ByZXYnLFxuICAgIG5leHRTZWxlY3RvcjogbnVsbCxcbiAgICBwcmV2U2VsZWN0b3I6IG51bGwsXG4gICAgYXV0b0NvbnRyb2xzOiBmYWxzZSxcbiAgICBzdGFydFRleHQ6ICdTdGFydCcsXG4gICAgc3RvcFRleHQ6ICdTdG9wJyxcbiAgICBhdXRvQ29udHJvbHNDb21iaW5lOiBmYWxzZSxcbiAgICBhdXRvQ29udHJvbHNTZWxlY3RvcjogbnVsbCxcblxuICAgIC8vIEFVVE9cbiAgICBhdXRvOiBmYWxzZSxcbiAgICBwYXVzZTogNDAwMCxcbiAgICBhdXRvU3RhcnQ6IHRydWUsXG4gICAgYXV0b0RpcmVjdGlvbjogJ25leHQnLFxuICAgIHN0b3BBdXRvT25DbGljazogZmFsc2UsXG4gICAgYXV0b0hvdmVyOiBmYWxzZSxcbiAgICBhdXRvRGVsYXk6IDAsXG4gICAgYXV0b1NsaWRlRm9yT25lUGFnZTogZmFsc2UsXG5cbiAgICAvLyBDQVJPVVNFTFxuICAgIG1pblNsaWRlczogMSxcbiAgICBtYXhTbGlkZXM6IDEsXG4gICAgbW92ZVNsaWRlczogMCxcbiAgICBzbGlkZVdpZHRoOiAwLFxuICAgIHNocmlua0l0ZW1zOiBmYWxzZSxcblxuICAgIC8vIENBTExCQUNLU1xuICAgIG9uU2xpZGVyTG9hZDogZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuICAgIG9uU2xpZGVCZWZvcmU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICBvblNsaWRlQWZ0ZXI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICBvblNsaWRlTmV4dDogZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuICAgIG9uU2xpZGVQcmV2OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0sXG4gICAgb25TbGlkZXJSZXNpemU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcblx0b25BdXRvQ2hhbmdlOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gLy9jYWxscyB3aGVuIGF1dG8gc2xpZGVzIHN0YXJ0cyBhbmQgc3RvcHNcbiAgfTtcblxuICAkLmZuLmJ4U2xpZGVyID0gZnVuY3Rpb24ob3B0aW9ucykge1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0IG11bHRpcGxlIGVsZW1lbnRzXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAkKHRoaXMpLmJ4U2xpZGVyKG9wdGlvbnMpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgYSBuYW1lc3BhY2UgdG8gYmUgdXNlZCB0aHJvdWdob3V0IHRoZSBwbHVnaW5cbiAgICB2YXIgc2xpZGVyID0ge30sXG4gICAgLy8gc2V0IGEgcmVmZXJlbmNlIHRvIG91ciBzbGlkZXIgZWxlbWVudFxuICAgIGVsID0gdGhpcyxcbiAgICAvLyBnZXQgdGhlIG9yaWdpbmFsIHdpbmRvdyBkaW1lbnMgKHRoYW5rcyBhIGxvdCBJRSlcbiAgICB3aW5kb3dXaWR0aCA9ICQod2luZG93KS53aWR0aCgpLFxuICAgIHdpbmRvd0hlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKTtcblxuICAgIC8vIFJldHVybiBpZiBzbGlkZXIgaXMgYWxyZWFkeSBpbml0aWFsaXplZFxuICAgIGlmICgkKGVsKS5kYXRhKCdieFNsaWRlcicpKSB7IHJldHVybjsgfVxuXG4gICAgLyoqXG4gICAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgKiA9IFBSSVZBVEUgRlVOQ1RJT05TXG4gICAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIG5hbWVzcGFjZSBzZXR0aW5ncyB0byBiZSB1c2VkIHRocm91Z2hvdXQgcGx1Z2luXG4gICAgICovXG4gICAgdmFyIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFJldHVybiBpZiBzbGlkZXIgaXMgYWxyZWFkeSBpbml0aWFsaXplZFxuICAgICAgaWYgKCQoZWwpLmRhdGEoJ2J4U2xpZGVyJykpIHsgcmV0dXJuOyB9XG4gICAgICAvLyBtZXJnZSB1c2VyLXN1cHBsaWVkIG9wdGlvbnMgd2l0aCB0aGUgZGVmYXVsdHNcbiAgICAgIHNsaWRlci5zZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgICAvLyBwYXJzZSBzbGlkZVdpZHRoIHNldHRpbmdcbiAgICAgIHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoID0gcGFyc2VJbnQoc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGgpO1xuICAgICAgLy8gc3RvcmUgdGhlIG9yaWdpbmFsIGNoaWxkcmVuXG4gICAgICBzbGlkZXIuY2hpbGRyZW4gPSBlbC5jaGlsZHJlbihzbGlkZXIuc2V0dGluZ3Muc2xpZGVTZWxlY3Rvcik7XG4gICAgICAvLyBjaGVjayBpZiBhY3R1YWwgbnVtYmVyIG9mIHNsaWRlcyBpcyBsZXNzIHRoYW4gbWluU2xpZGVzIC8gbWF4U2xpZGVzXG4gICAgICBpZiAoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCA8IHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXMpIHsgc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcyA9IHNsaWRlci5jaGlsZHJlbi5sZW5ndGg7IH1cbiAgICAgIGlmIChzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIDwgc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcykgeyBzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzID0gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aDsgfVxuICAgICAgLy8gaWYgcmFuZG9tIHN0YXJ0LCBzZXQgdGhlIHN0YXJ0U2xpZGUgc2V0dGluZyB0byByYW5kb20gbnVtYmVyXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnJhbmRvbVN0YXJ0KSB7IHNsaWRlci5zZXR0aW5ncy5zdGFydFNsaWRlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCk7IH1cbiAgICAgIC8vIHN0b3JlIGFjdGl2ZSBzbGlkZSBpbmZvcm1hdGlvblxuICAgICAgc2xpZGVyLmFjdGl2ZSA9IHsgaW5kZXg6IHNsaWRlci5zZXR0aW5ncy5zdGFydFNsaWRlIH07XG4gICAgICAvLyBzdG9yZSBpZiB0aGUgc2xpZGVyIGlzIGluIGNhcm91c2VsIG1vZGUgKGRpc3BsYXlpbmcgLyBtb3ZpbmcgbXVsdGlwbGUgc2xpZGVzKVxuICAgICAgc2xpZGVyLmNhcm91c2VsID0gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcyA+IDEgfHwgc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyA+IDE7XG4gICAgICAvLyBpZiBjYXJvdXNlbCwgZm9yY2UgcHJlbG9hZEltYWdlcyA9ICdhbGwnXG4gICAgICBpZiAoc2xpZGVyLmNhcm91c2VsKSB7IHNsaWRlci5zZXR0aW5ncy5wcmVsb2FkSW1hZ2VzID0gJ2FsbCc7IH1cbiAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgbWluIC8gbWF4IHdpZHRoIHRocmVzaG9sZHMgYmFzZWQgb24gbWluIC8gbWF4IG51bWJlciBvZiBzbGlkZXNcbiAgICAgIC8vIHVzZWQgdG8gc2V0dXAgYW5kIHVwZGF0ZSBjYXJvdXNlbCBzbGlkZXMgZGltZW5zaW9uc1xuICAgICAgc2xpZGVyLm1pblRocmVzaG9sZCA9IChzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzICogc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGgpICsgKChzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzIC0gMSkgKiBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4pO1xuICAgICAgc2xpZGVyLm1heFRocmVzaG9sZCA9IChzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzICogc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGgpICsgKChzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzIC0gMSkgKiBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4pO1xuICAgICAgLy8gc3RvcmUgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHNsaWRlciAoaWYgY3VycmVudGx5IGFuaW1hdGluZywgd29ya2luZyBpcyB0cnVlKVxuICAgICAgc2xpZGVyLndvcmtpbmcgPSBmYWxzZTtcbiAgICAgIC8vIGluaXRpYWxpemUgdGhlIGNvbnRyb2xzIG9iamVjdFxuICAgICAgc2xpZGVyLmNvbnRyb2xzID0ge307XG4gICAgICAvLyBpbml0aWFsaXplIGFuIGF1dG8gaW50ZXJ2YWxcbiAgICAgIHNsaWRlci5pbnRlcnZhbCA9IG51bGw7XG4gICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJvcGVydHkgdG8gdXNlIGZvciB0cmFuc2l0aW9uc1xuICAgICAgc2xpZGVyLmFuaW1Qcm9wID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICd2ZXJ0aWNhbCcgPyAndG9wJyA6ICdsZWZ0JztcbiAgICAgIC8vIGRldGVybWluZSBpZiBoYXJkd2FyZSBhY2NlbGVyYXRpb24gY2FuIGJlIHVzZWRcbiAgICAgIHNsaWRlci51c2luZ0NTUyA9IHNsaWRlci5zZXR0aW5ncy51c2VDU1MgJiYgc2xpZGVyLnNldHRpbmdzLm1vZGUgIT09ICdmYWRlJyAmJiAoZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGNyZWF0ZSBvdXIgdGVzdCBkaXYgZWxlbWVudFxuICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICAgIC8vIGNzcyB0cmFuc2l0aW9uIHByb3BlcnRpZXNcbiAgICAgICAgcHJvcHMgPSBbJ1dlYmtpdFBlcnNwZWN0aXZlJywgJ01velBlcnNwZWN0aXZlJywgJ09QZXJzcGVjdGl2ZScsICdtc1BlcnNwZWN0aXZlJ107XG4gICAgICAgIC8vIHRlc3QgZm9yIGVhY2ggcHJvcGVydHlcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChkaXYuc3R5bGVbcHJvcHNbaV1dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNsaWRlci5jc3NQcmVmaXggPSBwcm9wc1tpXS5yZXBsYWNlKCdQZXJzcGVjdGl2ZScsICcnKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgc2xpZGVyLmFuaW1Qcm9wID0gJy0nICsgc2xpZGVyLmNzc1ByZWZpeCArICctdHJhbnNmb3JtJztcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KCkpO1xuICAgICAgLy8gaWYgdmVydGljYWwgbW9kZSBhbHdheXMgbWFrZSBtYXhTbGlkZXMgYW5kIG1pblNsaWRlcyBlcXVhbFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgPSBzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzOyB9XG4gICAgICAvLyBzYXZlIG9yaWdpbmFsIHN0eWxlIGRhdGFcbiAgICAgIGVsLmRhdGEoJ29yaWdTdHlsZScsIGVsLmF0dHIoJ3N0eWxlJykpO1xuICAgICAgZWwuY2hpbGRyZW4oc2xpZGVyLnNldHRpbmdzLnNsaWRlU2VsZWN0b3IpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICQodGhpcykuZGF0YSgnb3JpZ1N0eWxlJywgJCh0aGlzKS5hdHRyKCdzdHlsZScpKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBwZXJmb3JtIGFsbCBET00gLyBDU1MgbW9kaWZpY2F0aW9uc1xuICAgICAgc2V0dXAoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYWxsIERPTSBhbmQgQ1NTIG1vZGlmaWNhdGlvbnNcbiAgICAgKi9cbiAgICB2YXIgc2V0dXAgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwcmVsb2FkU2VsZWN0b3IgPSBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLnNldHRpbmdzLnN0YXJ0U2xpZGUpOyAvLyBzZXQgdGhlIGRlZmF1bHQgcHJlbG9hZCBzZWxlY3RvciAodmlzaWJsZSlcblxuICAgICAgLy8gd3JhcCBlbCBpbiBhIHdyYXBwZXJcbiAgICAgIGVsLndyYXAoJzxkaXYgY2xhc3M9XCInICsgc2xpZGVyLnNldHRpbmdzLndyYXBwZXJDbGFzcyArICdcIj48ZGl2IGNsYXNzPVwiYngtdmlld3BvcnRcIj48L2Rpdj48L2Rpdj4nKTtcbiAgICAgIC8vIHN0b3JlIGEgbmFtZXNwYWNlIHJlZmVyZW5jZSB0byAuYngtdmlld3BvcnRcbiAgICAgIHNsaWRlci52aWV3cG9ydCA9IGVsLnBhcmVudCgpO1xuXG4gICAgICAvLyBhZGQgYXJpYS1saXZlIGlmIHRoZSBzZXR0aW5nIGlzIGVuYWJsZWQgYW5kIHRpY2tlciBtb2RlIGlzIGRpc2FibGVkXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFyaWFMaXZlICYmICFzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7XG4gICAgICAgIHNsaWRlci52aWV3cG9ydC5hdHRyKCdhcmlhLWxpdmUnLCAncG9saXRlJyk7XG4gICAgICB9XG4gICAgICAvLyBhZGQgYSBsb2FkaW5nIGRpdiB0byBkaXNwbGF5IHdoaWxlIGltYWdlcyBhcmUgbG9hZGluZ1xuICAgICAgc2xpZGVyLmxvYWRlciA9ICQoJzxkaXYgY2xhc3M9XCJieC1sb2FkaW5nXCIgLz4nKTtcbiAgICAgIHNsaWRlci52aWV3cG9ydC5wcmVwZW5kKHNsaWRlci5sb2FkZXIpO1xuICAgICAgLy8gc2V0IGVsIHRvIGEgbWFzc2l2ZSB3aWR0aCwgdG8gaG9sZCBhbnkgbmVlZGVkIHNsaWRlc1xuICAgICAgLy8gYWxzbyBzdHJpcCBhbnkgbWFyZ2luIGFuZCBwYWRkaW5nIGZyb20gZWxcbiAgICAgIGVsLmNzcyh7XG4gICAgICAgIHdpZHRoOiBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gKHNsaWRlci5jaGlsZHJlbi5sZW5ndGggKiAxMDAwICsgMjE1KSArICclJyA6ICdhdXRvJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0pO1xuICAgICAgLy8gaWYgdXNpbmcgQ1NTLCBhZGQgdGhlIGVhc2luZyBwcm9wZXJ0eVxuICAgICAgaWYgKHNsaWRlci51c2luZ0NTUyAmJiBzbGlkZXIuc2V0dGluZ3MuZWFzaW5nKSB7XG4gICAgICAgIGVsLmNzcygnLScgKyBzbGlkZXIuY3NzUHJlZml4ICsgJy10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbicsIHNsaWRlci5zZXR0aW5ncy5lYXNpbmcpO1xuICAgICAgLy8gaWYgbm90IHVzaW5nIENTUyBhbmQgbm8gZWFzaW5nIHZhbHVlIHdhcyBzdXBwbGllZCwgdXNlIHRoZSBkZWZhdWx0IEpTIGFuaW1hdGlvbiBlYXNpbmcgKHN3aW5nKVxuICAgICAgfSBlbHNlIGlmICghc2xpZGVyLnNldHRpbmdzLmVhc2luZykge1xuICAgICAgICBzbGlkZXIuc2V0dGluZ3MuZWFzaW5nID0gJ3N3aW5nJztcbiAgICAgIH1cbiAgICAgIC8vIG1ha2UgbW9kaWZpY2F0aW9ucyB0byB0aGUgdmlld3BvcnQgKC5ieC12aWV3cG9ydClcbiAgICAgIHNsaWRlci52aWV3cG9ydC5jc3Moe1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9KTtcbiAgICAgIHNsaWRlci52aWV3cG9ydC5wYXJlbnQoKS5jc3Moe1xuICAgICAgICBtYXhXaWR0aDogZ2V0Vmlld3BvcnRNYXhXaWR0aCgpXG4gICAgICB9KTtcbiAgICAgIC8vIGFwcGx5IGNzcyB0byBhbGwgc2xpZGVyIGNoaWxkcmVuXG4gICAgICBzbGlkZXIuY2hpbGRyZW4uY3NzKHtcbiAgICAgICAgLy8gdGhlIGZsb2F0IGF0dHJpYnV0ZSBpcyBhIHJlc2VydmVkIHdvcmQgaW4gY29tcHJlc3NvcnMgbGlrZSBZVUkgY29tcHJlc3NvciBhbmQgbmVlZCB0byBiZSBxdW90ZWQgIzQ4XG4gICAgICAgICdmbG9hdCc6IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAnbGVmdCcgOiAnbm9uZScsXG4gICAgICAgIGxpc3RTdHlsZTogJ25vbmUnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSk7XG4gICAgICAvLyBhcHBseSB0aGUgY2FsY3VsYXRlZCB3aWR0aCBhZnRlciB0aGUgZmxvYXQgaXMgYXBwbGllZCB0byBwcmV2ZW50IHNjcm9sbGJhciBpbnRlcmZlcmVuY2VcbiAgICAgIHNsaWRlci5jaGlsZHJlbi5jc3MoJ3dpZHRoJywgZ2V0U2xpZGVXaWR0aCgpKTtcbiAgICAgIC8vIGlmIHNsaWRlTWFyZ2luIGlzIHN1cHBsaWVkLCBhZGQgdGhlIGNzc1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgJiYgc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luID4gMCkgeyBzbGlkZXIuY2hpbGRyZW4uY3NzKCdtYXJnaW5SaWdodCcsIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbik7IH1cbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJyAmJiBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4gPiAwKSB7IHNsaWRlci5jaGlsZHJlbi5jc3MoJ21hcmdpbkJvdHRvbScsIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbik7IH1cbiAgICAgIC8vIGlmIFwiZmFkZVwiIG1vZGUsIGFkZCBwb3NpdGlvbmluZyBhbmQgei1pbmRleCBDU1NcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2ZhZGUnKSB7XG4gICAgICAgIHNsaWRlci5jaGlsZHJlbi5jc3Moe1xuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgIHpJbmRleDogMCxcbiAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHByZXBhcmUgdGhlIHotaW5kZXggb24gdGhlIHNob3dpbmcgZWxlbWVudFxuICAgICAgICBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLnNldHRpbmdzLnN0YXJ0U2xpZGUpLmNzcyh7ekluZGV4OiBzbGlkZXIuc2V0dGluZ3Muc2xpZGVaSW5kZXgsIGRpc3BsYXk6ICdibG9jayd9KTtcbiAgICAgIH1cbiAgICAgIC8vIGNyZWF0ZSBhbiBlbGVtZW50IHRvIGNvbnRhaW4gYWxsIHNsaWRlciBjb250cm9scyAocGFnZXIsIHN0YXJ0IC8gc3RvcCwgZXRjKVxuICAgICAgc2xpZGVyLmNvbnRyb2xzLmVsID0gJCgnPGRpdiBjbGFzcz1cImJ4LWNvbnRyb2xzXCIgLz4nKTtcbiAgICAgIC8vIGlmIGNhcHRpb25zIGFyZSByZXF1ZXN0ZWQsIGFkZCB0aGVtXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmNhcHRpb25zKSB7IGFwcGVuZENhcHRpb25zKCk7IH1cbiAgICAgIC8vIGNoZWNrIGlmIHN0YXJ0U2xpZGUgaXMgbGFzdCBzbGlkZVxuICAgICAgc2xpZGVyLmFjdGl2ZS5sYXN0ID0gc2xpZGVyLnNldHRpbmdzLnN0YXJ0U2xpZGUgPT09IGdldFBhZ2VyUXR5KCkgLSAxO1xuICAgICAgLy8gaWYgdmlkZW8gaXMgdHJ1ZSwgc2V0IHVwIHRoZSBmaXRWaWRzIHBsdWdpblxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy52aWRlbykgeyBlbC5maXRWaWRzKCk7IH1cblx0ICAvL3ByZWxvYWRJbWFnZXNcblx0ICBpZiAoc2xpZGVyLnNldHRpbmdzLnByZWxvYWRJbWFnZXMgPT09ICdub25lJykgeyBcblx0XHQgIHByZWxvYWRTZWxlY3RvciA9IG51bGw7IFxuXHQgIH1cbiAgICAgIGVsc2UgaWYgKHNsaWRlci5zZXR0aW5ncy5wcmVsb2FkSW1hZ2VzID09PSAnYWxsJyB8fCBzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7IFxuXHRcdCAgcHJlbG9hZFNlbGVjdG9yID0gc2xpZGVyLmNoaWxkcmVuOyBcblx0ICB9XG4gICAgICAvLyBvbmx5IGNoZWNrIGZvciBjb250cm9sIGFkZGl0aW9uIGlmIG5vdCBpbiBcInRpY2tlclwiIG1vZGVcbiAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLnRpY2tlcikge1xuICAgICAgICAvLyBpZiBjb250cm9scyBhcmUgcmVxdWVzdGVkLCBhZGQgdGhlbVxuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmNvbnRyb2xzKSB7IGFwcGVuZENvbnRyb2xzKCk7IH1cbiAgICAgICAgLy8gaWYgYXV0byBpcyB0cnVlLCBhbmQgYXV0byBjb250cm9scyBhcmUgcmVxdWVzdGVkLCBhZGQgdGhlbVxuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG8gJiYgc2xpZGVyLnNldHRpbmdzLmF1dG9Db250cm9scykgeyBhcHBlbmRDb250cm9sc0F1dG8oKTsgfVxuICAgICAgICAvLyBpZiBwYWdlciBpcyByZXF1ZXN0ZWQsIGFkZCBpdFxuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnBhZ2VyKSB7IGFwcGVuZFBhZ2VyKCk7IH1cbiAgICAgICAgLy8gaWYgYW55IGNvbnRyb2wgb3B0aW9uIGlzIHJlcXVlc3RlZCwgYWRkIHRoZSBjb250cm9scyB3cmFwcGVyXG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuY29udHJvbHMgfHwgc2xpZGVyLnNldHRpbmdzLmF1dG9Db250cm9scyB8fCBzbGlkZXIuc2V0dGluZ3MucGFnZXIpIHsgc2xpZGVyLnZpZXdwb3J0LmFmdGVyKHNsaWRlci5jb250cm9scy5lbCk7IH1cbiAgICAgIC8vIGlmIHRpY2tlciBtb2RlLCBkbyBub3QgYWxsb3cgYSBwYWdlclxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVyLnNldHRpbmdzLnBhZ2VyID0gZmFsc2U7XG4gICAgICB9XG5cdCAgaWYgKHByZWxvYWRTZWxlY3RvciA9PT0gbnVsbCkge1xuICAgICAgICBzdGFydCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9hZEVsZW1lbnRzKHByZWxvYWRTZWxlY3Rvciwgc3RhcnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgbG9hZEVsZW1lbnRzID0gZnVuY3Rpb24oc2VsZWN0b3IsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgdG90YWwgPSBzZWxlY3Rvci5maW5kKCdpbWc6bm90KFtzcmM9XCJcIl0pLCBpZnJhbWUnKS5sZW5ndGgsXG4gICAgICBjb3VudCA9IDA7XG4gICAgICBpZiAodG90YWwgPT09IDApIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VsZWN0b3IuZmluZCgnaW1nOm5vdChbc3JjPVwiXCJdKSwgaWZyYW1lJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgJCh0aGlzKS5vbmUoJ2xvYWQgZXJyb3InLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoKytjb3VudCA9PT0gdG90YWwpIHsgY2FsbGJhY2soKTsgfVxuICAgICAgICB9KS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICh0aGlzLmNvbXBsZXRlIHx8IHRoaXMuc3JjID09ICcnKSB7ICQodGhpcykudHJpZ2dlcignbG9hZCcpOyB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0IHRoZSBzbGlkZXJcbiAgICAgKi9cbiAgICB2YXIgc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlmIGluZmluaXRlIGxvb3AsIHByZXBhcmUgYWRkaXRpb25hbCBzbGlkZXNcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wICYmIHNsaWRlci5zZXR0aW5ncy5tb2RlICE9PSAnZmFkZScgJiYgIXNsaWRlci5zZXR0aW5ncy50aWNrZXIpIHtcbiAgICAgICAgdmFyIHNsaWNlICAgID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICd2ZXJ0aWNhbCcgPyBzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzIDogc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyxcbiAgICAgICAgc2xpY2VBcHBlbmQgID0gc2xpZGVyLmNoaWxkcmVuLnNsaWNlKDAsIHNsaWNlKS5jbG9uZSh0cnVlKS5hZGRDbGFzcygnYngtY2xvbmUnKSxcbiAgICAgICAgc2xpY2VQcmVwZW5kID0gc2xpZGVyLmNoaWxkcmVuLnNsaWNlKC1zbGljZSkuY2xvbmUodHJ1ZSkuYWRkQ2xhc3MoJ2J4LWNsb25lJyk7XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXJpYUhpZGRlbikge1xuICAgICAgICAgIHNsaWNlQXBwZW5kLmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG4gICAgICAgICAgc2xpY2VQcmVwZW5kLmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWwuYXBwZW5kKHNsaWNlQXBwZW5kKS5wcmVwZW5kKHNsaWNlUHJlcGVuZCk7XG4gICAgICB9XG4gICAgICAvLyByZW1vdmUgdGhlIGxvYWRpbmcgRE9NIGVsZW1lbnRcbiAgICAgIHNsaWRlci5sb2FkZXIucmVtb3ZlKCk7XG4gICAgICAvLyBzZXQgdGhlIGxlZnQgLyB0b3AgcG9zaXRpb24gb2YgXCJlbFwiXG4gICAgICBzZXRTbGlkZVBvc2l0aW9uKCk7XG4gICAgICAvLyBpZiBcInZlcnRpY2FsXCIgbW9kZSwgYWx3YXlzIHVzZSBhZGFwdGl2ZUhlaWdodCB0byBwcmV2ZW50IG9kZCBiZWhhdmlvclxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7IHNsaWRlci5zZXR0aW5ncy5hZGFwdGl2ZUhlaWdodCA9IHRydWU7IH1cbiAgICAgIC8vIHNldCB0aGUgdmlld3BvcnQgaGVpZ2h0XG4gICAgICBzbGlkZXIudmlld3BvcnQuaGVpZ2h0KGdldFZpZXdwb3J0SGVpZ2h0KCkpO1xuICAgICAgLy8gbWFrZSBzdXJlIGV2ZXJ5dGhpbmcgaXMgcG9zaXRpb25lZCBqdXN0IHJpZ2h0IChzYW1lIGFzIGEgd2luZG93IHJlc2l6ZSlcbiAgICAgIGVsLnJlZHJhd1NsaWRlcigpO1xuICAgICAgLy8gb25TbGlkZXJMb2FkIGNhbGxiYWNrXG4gICAgICBzbGlkZXIuc2V0dGluZ3Mub25TbGlkZXJMb2FkLmNhbGwoZWwsIHNsaWRlci5hY3RpdmUuaW5kZXgpO1xuICAgICAgLy8gc2xpZGVyIGhhcyBiZWVuIGZ1bGx5IGluaXRpYWxpemVkXG4gICAgICBzbGlkZXIuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgLy8gYWRkIHRoZSByZXNpemUgY2FsbCB0byB0aGUgd2luZG93XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnJlc3BvbnNpdmUpIHsgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCByZXNpemVXaW5kb3cpOyB9XG4gICAgICAvLyBpZiBhdXRvIGlzIHRydWUgYW5kIGhhcyBtb3JlIHRoYW4gMSBwYWdlLCBzdGFydCB0aGUgc2hvd1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvICYmIHNsaWRlci5zZXR0aW5ncy5hdXRvU3RhcnQgJiYgKGdldFBhZ2VyUXR5KCkgPiAxIHx8IHNsaWRlci5zZXR0aW5ncy5hdXRvU2xpZGVGb3JPbmVQYWdlKSkgeyBpbml0QXV0bygpOyB9XG4gICAgICAvLyBpZiB0aWNrZXIgaXMgdHJ1ZSwgc3RhcnQgdGhlIHRpY2tlclxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy50aWNrZXIpIHsgaW5pdFRpY2tlcigpOyB9XG4gICAgICAvLyBpZiBwYWdlciBpcyByZXF1ZXN0ZWQsIG1ha2UgdGhlIGFwcHJvcHJpYXRlIHBhZ2VyIGxpbmsgYWN0aXZlXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnBhZ2VyKSB7IHVwZGF0ZVBhZ2VyQWN0aXZlKHNsaWRlci5zZXR0aW5ncy5zdGFydFNsaWRlKTsgfVxuICAgICAgLy8gY2hlY2sgZm9yIGFueSB1cGRhdGVzIHRvIHRoZSBjb250cm9scyAobGlrZSBoaWRlQ29udHJvbE9uRW5kIHVwZGF0ZXMpXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmNvbnRyb2xzKSB7IHVwZGF0ZURpcmVjdGlvbkNvbnRyb2xzKCk7IH1cbiAgICAgIC8vIGlmIHRvdWNoRW5hYmxlZCBpcyB0cnVlLCBzZXR1cCB0aGUgdG91Y2ggZXZlbnRzXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnRvdWNoRW5hYmxlZCAmJiAhc2xpZGVyLnNldHRpbmdzLnRpY2tlcikgeyBpbml0VG91Y2goKTsgfVxuICAgICAgLy8gaWYga2V5Ym9hcmRFbmFibGVkIGlzIHRydWUsIHNldHVwIHRoZSBrZXlib2FyZCBldmVudHNcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3Mua2V5Ym9hcmRFbmFibGVkICYmICFzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7XG4gICAgICAgICQoZG9jdW1lbnQpLmtleWRvd24oa2V5UHJlc3MpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjYWxjdWxhdGVkIGhlaWdodCBvZiB0aGUgdmlld3BvcnQsIHVzZWQgdG8gZGV0ZXJtaW5lIGVpdGhlciBhZGFwdGl2ZUhlaWdodCBvciB0aGUgbWF4SGVpZ2h0IHZhbHVlXG4gICAgICovXG4gICAgdmFyIGdldFZpZXdwb3J0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaGVpZ2h0ID0gMDtcbiAgICAgIC8vIGZpcnN0IGRldGVybWluZSB3aGljaCBjaGlsZHJlbiAoc2xpZGVzKSBzaG91bGQgYmUgdXNlZCBpbiBvdXIgaGVpZ2h0IGNhbGN1bGF0aW9uXG4gICAgICB2YXIgY2hpbGRyZW4gPSAkKCk7XG4gICAgICAvLyBpZiBtb2RlIGlzIG5vdCBcInZlcnRpY2FsXCIgYW5kIGFkYXB0aXZlSGVpZ2h0IGlzIGZhbHNlLCBpbmNsdWRlIGFsbCBjaGlsZHJlblxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlICE9PSAndmVydGljYWwnICYmICFzbGlkZXIuc2V0dGluZ3MuYWRhcHRpdmVIZWlnaHQpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBzbGlkZXIuY2hpbGRyZW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiBub3QgY2Fyb3VzZWwsIHJldHVybiB0aGUgc2luZ2xlIGFjdGl2ZSBjaGlsZFxuICAgICAgICBpZiAoIXNsaWRlci5jYXJvdXNlbCkge1xuICAgICAgICAgIGNoaWxkcmVuID0gc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5hY3RpdmUuaW5kZXgpO1xuICAgICAgICAvLyBpZiBjYXJvdXNlbCwgcmV0dXJuIGEgc2xpY2Ugb2YgY2hpbGRyZW5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBnZXQgdGhlIGluZGl2aWR1YWwgc2xpZGUgaW5kZXhcbiAgICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gc2xpZGVyLnNldHRpbmdzLm1vdmVTbGlkZXMgPT09IDEgPyBzbGlkZXIuYWN0aXZlLmluZGV4IDogc2xpZGVyLmFjdGl2ZS5pbmRleCAqIGdldE1vdmVCeSgpO1xuICAgICAgICAgIC8vIGFkZCB0aGUgY3VycmVudCBzbGlkZSB0byB0aGUgY2hpbGRyZW5cbiAgICAgICAgICBjaGlsZHJlbiA9IHNsaWRlci5jaGlsZHJlbi5lcShjdXJyZW50SW5kZXgpO1xuICAgICAgICAgIC8vIGN5Y2xlIHRocm91Z2ggdGhlIHJlbWFpbmluZyBcInNob3dpbmdcIiBzbGlkZXNcbiAgICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgLSAxOyBpKyspIHtcbiAgICAgICAgICAgIC8vIGlmIGxvb3BlZCBiYWNrIHRvIHRoZSBzdGFydFxuICAgICAgICAgICAgaWYgKGN1cnJlbnRJbmRleCArIGkgPj0gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmFkZChzbGlkZXIuY2hpbGRyZW4uZXEoaSAtIDEpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uYWRkKHNsaWRlci5jaGlsZHJlbi5lcShjdXJyZW50SW5kZXggKyBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBpZiBcInZlcnRpY2FsXCIgbW9kZSwgY2FsY3VsYXRlIHRoZSBzdW0gb2YgdGhlIGhlaWdodHMgb2YgdGhlIGNoaWxkcmVuXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgY2hpbGRyZW4uZWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgIGhlaWdodCArPSAkKHRoaXMpLm91dGVySGVpZ2h0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBhZGQgdXNlci1zdXBwbGllZCBtYXJnaW5zXG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4gPiAwKSB7XG4gICAgICAgICAgaGVpZ2h0ICs9IHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbiAqIChzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzIC0gMSk7XG4gICAgICAgIH1cbiAgICAgIC8vIGlmIG5vdCBcInZlcnRpY2FsXCIgbW9kZSwgY2FsY3VsYXRlIHRoZSBtYXggaGVpZ2h0IG9mIHRoZSBjaGlsZHJlblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGVpZ2h0ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkKHRoaXMpLm91dGVySGVpZ2h0KGZhbHNlKTtcbiAgICAgICAgfSkuZ2V0KCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2xpZGVyLnZpZXdwb3J0LmNzcygnYm94LXNpemluZycpID09PSAnYm9yZGVyLWJveCcpIHtcbiAgICAgICAgaGVpZ2h0ICs9IHBhcnNlRmxvYXQoc2xpZGVyLnZpZXdwb3J0LmNzcygncGFkZGluZy10b3AnKSkgKyBwYXJzZUZsb2F0KHNsaWRlci52aWV3cG9ydC5jc3MoJ3BhZGRpbmctYm90dG9tJykpICtcbiAgICAgICAgICAgICAgcGFyc2VGbG9hdChzbGlkZXIudmlld3BvcnQuY3NzKCdib3JkZXItdG9wLXdpZHRoJykpICsgcGFyc2VGbG9hdChzbGlkZXIudmlld3BvcnQuY3NzKCdib3JkZXItYm90dG9tLXdpZHRoJykpO1xuICAgICAgfSBlbHNlIGlmIChzbGlkZXIudmlld3BvcnQuY3NzKCdib3gtc2l6aW5nJykgPT09ICdwYWRkaW5nLWJveCcpIHtcbiAgICAgICAgaGVpZ2h0ICs9IHBhcnNlRmxvYXQoc2xpZGVyLnZpZXdwb3J0LmNzcygncGFkZGluZy10b3AnKSkgKyBwYXJzZUZsb2F0KHNsaWRlci52aWV3cG9ydC5jc3MoJ3BhZGRpbmctYm90dG9tJykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGVpZ2h0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjYWxjdWxhdGVkIHdpZHRoIHRvIGJlIHVzZWQgZm9yIHRoZSBvdXRlciB3cmFwcGVyIC8gdmlld3BvcnRcbiAgICAgKi9cbiAgICB2YXIgZ2V0Vmlld3BvcnRNYXhXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHdpZHRoID0gJzEwMCUnO1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoID4gMCkge1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIHdpZHRoID0gKHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgKiBzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aCkgKyAoKHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgLSAxKSAqIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2lkdGggPSBzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHdpZHRoO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjYWxjdWxhdGVkIHdpZHRoIHRvIGJlIGFwcGxpZWQgdG8gZWFjaCBzbGlkZVxuICAgICAqL1xuICAgIHZhciBnZXRTbGlkZVdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbmV3RWxXaWR0aCA9IHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoLCAvLyBzdGFydCB3aXRoIGFueSB1c2VyLXN1cHBsaWVkIHNsaWRlIHdpZHRoXG4gICAgICB3cmFwV2lkdGggICAgICA9IHNsaWRlci52aWV3cG9ydC53aWR0aCgpOyAgICAvLyBnZXQgdGhlIGN1cnJlbnQgdmlld3BvcnQgd2lkdGhcbiAgICAgIC8vIGlmIHNsaWRlIHdpZHRoIHdhcyBub3Qgc3VwcGxpZWQsIG9yIGlzIGxhcmdlciB0aGFuIHRoZSB2aWV3cG9ydCB1c2UgdGhlIHZpZXdwb3J0IHdpZHRoXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGggPT09IDAgfHxcbiAgICAgICAgKHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoID4gd3JhcFdpZHRoICYmICFzbGlkZXIuY2Fyb3VzZWwpIHx8XG4gICAgICAgIHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7XG4gICAgICAgIG5ld0VsV2lkdGggPSB3cmFwV2lkdGg7XG4gICAgICAvLyBpZiBjYXJvdXNlbCwgdXNlIHRoZSB0aHJlc2hvbGRzIHRvIGRldGVybWluZSB0aGUgd2lkdGhcbiAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyA+IDEgJiYgc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICBpZiAod3JhcFdpZHRoID4gc2xpZGVyLm1heFRocmVzaG9sZCkge1xuICAgICAgICAgIHJldHVybiBuZXdFbFdpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKHdyYXBXaWR0aCA8IHNsaWRlci5taW5UaHJlc2hvbGQpIHtcbiAgICAgICAgICBuZXdFbFdpZHRoID0gKHdyYXBXaWR0aCAtIChzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4gKiAoc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcyAtIDEpKSkgLyBzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzO1xuICAgICAgICB9IGVsc2UgaWYgKHNsaWRlci5zZXR0aW5ncy5zaHJpbmtJdGVtcykge1xuICAgICAgICAgIG5ld0VsV2lkdGggPSBNYXRoLmZsb29yKCh3cmFwV2lkdGggKyBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4pIC8gKE1hdGguY2VpbCgod3JhcFdpZHRoICsgc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luKSAvIChuZXdFbFdpZHRoICsgc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luKSkpIC0gc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld0VsV2lkdGg7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBzbGlkZXMgY3VycmVudGx5IHZpc2libGUgaW4gdGhlIHZpZXdwb3J0IChpbmNsdWRlcyBwYXJ0aWFsbHkgdmlzaWJsZSBzbGlkZXMpXG4gICAgICovXG4gICAgdmFyIGdldE51bWJlclNsaWRlc1Nob3dpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzbGlkZXNTaG93aW5nID0gMSxcbiAgICAgIGNoaWxkV2lkdGggPSBudWxsO1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgJiYgc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGggPiAwKSB7XG4gICAgICAgIC8vIGlmIHZpZXdwb3J0IGlzIHNtYWxsZXIgdGhhbiBtaW5UaHJlc2hvbGQsIHJldHVybiBtaW5TbGlkZXNcbiAgICAgICAgaWYgKHNsaWRlci52aWV3cG9ydC53aWR0aCgpIDwgc2xpZGVyLm1pblRocmVzaG9sZCkge1xuICAgICAgICAgIHNsaWRlc1Nob3dpbmcgPSBzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzO1xuICAgICAgICAvLyBpZiB2aWV3cG9ydCBpcyBsYXJnZXIgdGhhbiBtYXhUaHJlc2hvbGQsIHJldHVybiBtYXhTbGlkZXNcbiAgICAgICAgfSBlbHNlIGlmIChzbGlkZXIudmlld3BvcnQud2lkdGgoKSA+IHNsaWRlci5tYXhUaHJlc2hvbGQpIHtcbiAgICAgICAgICBzbGlkZXNTaG93aW5nID0gc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcztcbiAgICAgICAgLy8gaWYgdmlld3BvcnQgaXMgYmV0d2VlbiBtaW4gLyBtYXggdGhyZXNob2xkcywgZGl2aWRlIHZpZXdwb3J0IHdpZHRoIGJ5IGZpcnN0IGNoaWxkIHdpZHRoXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hpbGRXaWR0aCA9IHNsaWRlci5jaGlsZHJlbi5maXJzdCgpLndpZHRoKCkgKyBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW47XG4gICAgICAgICAgc2xpZGVzU2hvd2luZyA9IE1hdGguZmxvb3IoKHNsaWRlci52aWV3cG9ydC53aWR0aCgpICtcbiAgICAgICAgICAgIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbikgLyBjaGlsZFdpZHRoKSB8fCAxO1xuICAgICAgICB9XG4gICAgICAvLyBpZiBcInZlcnRpY2FsXCIgbW9kZSwgc2xpZGVzIHNob3dpbmcgd2lsbCBhbHdheXMgYmUgbWluU2xpZGVzXG4gICAgICB9IGVsc2UgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7XG4gICAgICAgIHNsaWRlc1Nob3dpbmcgPSBzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNsaWRlc1Nob3dpbmc7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBwYWdlcyAob25lIGZ1bGwgdmlld3BvcnQgb2Ygc2xpZGVzIGlzIG9uZSBcInBhZ2VcIilcbiAgICAgKi9cbiAgICB2YXIgZ2V0UGFnZXJRdHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwYWdlclF0eSA9IDAsXG4gICAgICBicmVha1BvaW50ID0gMCxcbiAgICAgIGNvdW50ZXIgPSAwO1xuICAgICAgLy8gaWYgbW92ZVNsaWRlcyBpcyBzcGVjaWZpZWQgYnkgdGhlIHVzZXJcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW92ZVNsaWRlcyA+IDApIHtcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5pbmZpbml0ZUxvb3ApIHtcbiAgICAgICAgICBwYWdlclF0eSA9IE1hdGguY2VpbChzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC8gZ2V0TW92ZUJ5KCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHdoZW4gYnJlYWtwb2ludCBnb2VzIGFib3ZlIGNoaWxkcmVuIGxlbmd0aCwgY291bnRlciBpcyB0aGUgbnVtYmVyIG9mIHBhZ2VzXG4gICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBnZXROdW1iZXJTbGlkZXNTaG93aW5nKCk7XG4gICAgICAgICAgICBjb3VudGVyICs9IHNsaWRlci5zZXR0aW5ncy5tb3ZlU2xpZGVzIDw9IGdldE51bWJlclNsaWRlc1Nob3dpbmcoKSA/IHNsaWRlci5zZXR0aW5ncy5tb3ZlU2xpZGVzIDogZ2V0TnVtYmVyU2xpZGVzU2hvd2luZygpO1xuICAgICAgICAgIH1cblx0XHQgIHJldHVybiBjb3VudGVyO1xuICAgICAgICB9XG4gICAgICAvLyBpZiBtb3ZlU2xpZGVzIGlzIDAgKGF1dG8pIGRpdmlkZSBjaGlsZHJlbiBsZW5ndGggYnkgc2lkZXMgc2hvd2luZywgdGhlbiByb3VuZCB1cFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnZXJRdHkgPSBNYXRoLmNlaWwoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAvIGdldE51bWJlclNsaWRlc1Nob3dpbmcoKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFnZXJRdHk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBpbmRpdmlkdWFsIHNsaWRlcyBieSB3aGljaCB0byBzaGlmdCB0aGUgc2xpZGVyXG4gICAgICovXG4gICAgdmFyIGdldE1vdmVCeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaWYgbW92ZVNsaWRlcyB3YXMgc2V0IGJ5IHRoZSB1c2VyIGFuZCBtb3ZlU2xpZGVzIGlzIGxlc3MgdGhhbiBudW1iZXIgb2Ygc2xpZGVzIHNob3dpbmdcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW92ZVNsaWRlcyA+IDAgJiYgc2xpZGVyLnNldHRpbmdzLm1vdmVTbGlkZXMgPD0gZ2V0TnVtYmVyU2xpZGVzU2hvd2luZygpKSB7XG4gICAgICAgIHJldHVybiBzbGlkZXIuc2V0dGluZ3MubW92ZVNsaWRlcztcbiAgICAgIH1cbiAgICAgIC8vIGlmIG1vdmVTbGlkZXMgaXMgMCAoYXV0bylcbiAgICAgIHJldHVybiBnZXROdW1iZXJTbGlkZXNTaG93aW5nKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHNsaWRlcidzIChlbCkgbGVmdCBvciB0b3AgcG9zaXRpb25cbiAgICAgKi9cbiAgICB2YXIgc2V0U2xpZGVQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBvc2l0aW9uLCBsYXN0Q2hpbGQsIGxhc3RTaG93aW5nSW5kZXg7XG4gICAgICAvLyBpZiBsYXN0IHNsaWRlLCBub3QgaW5maW5pdGUgbG9vcCwgYW5kIG51bWJlciBvZiBjaGlsZHJlbiBpcyBsYXJnZXIgdGhhbiBzcGVjaWZpZWQgbWF4U2xpZGVzXG4gICAgICBpZiAoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCA+IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgJiYgc2xpZGVyLmFjdGl2ZS5sYXN0ICYmICFzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wKSB7XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgLy8gZ2V0IHRoZSBsYXN0IGNoaWxkJ3MgcG9zaXRpb25cbiAgICAgICAgICBsYXN0Q2hpbGQgPSBzbGlkZXIuY2hpbGRyZW4ubGFzdCgpO1xuICAgICAgICAgIHBvc2l0aW9uID0gbGFzdENoaWxkLnBvc2l0aW9uKCk7XG4gICAgICAgICAgLy8gc2V0IHRoZSBsZWZ0IHBvc2l0aW9uXG4gICAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eSgtKHBvc2l0aW9uLmxlZnQgLSAoc2xpZGVyLnZpZXdwb3J0LndpZHRoKCkgLSBsYXN0Q2hpbGQub3V0ZXJXaWR0aCgpKSksICdyZXNldCcsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgLy8gZ2V0IHRoZSBsYXN0IHNob3dpbmcgaW5kZXgncyBwb3NpdGlvblxuICAgICAgICAgIGxhc3RTaG93aW5nSW5kZXggPSBzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcztcbiAgICAgICAgICBwb3NpdGlvbiA9IHNsaWRlci5jaGlsZHJlbi5lcShsYXN0U2hvd2luZ0luZGV4KS5wb3NpdGlvbigpO1xuICAgICAgICAgIC8vIHNldCB0aGUgdG9wIHBvc2l0aW9uXG4gICAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eSgtcG9zaXRpb24udG9wLCAncmVzZXQnLCAwKTtcbiAgICAgICAgfVxuICAgICAgLy8gaWYgbm90IGxhc3Qgc2xpZGVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGdldCB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IHNob3dpbmcgc2xpZGVcbiAgICAgICAgcG9zaXRpb24gPSBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCAqIGdldE1vdmVCeSgpKS5wb3NpdGlvbigpO1xuICAgICAgICAvLyBjaGVjayBmb3IgbGFzdCBzbGlkZVxuICAgICAgICBpZiAoc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gZ2V0UGFnZXJRdHkoKSAtIDEpIHsgc2xpZGVyLmFjdGl2ZS5sYXN0ID0gdHJ1ZTsgfVxuICAgICAgICAvLyBzZXQgdGhlIHJlc3BlY3RpdmUgcG9zaXRpb25cbiAgICAgICAgaWYgKHBvc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykgeyBzZXRQb3NpdGlvblByb3BlcnR5KC1wb3NpdGlvbi5sZWZ0LCAncmVzZXQnLCAwKTsgfVxuICAgICAgICAgIGVsc2UgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7IHNldFBvc2l0aW9uUHJvcGVydHkoLXBvc2l0aW9uLnRvcCwgJ3Jlc2V0JywgMCk7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBlbCdzIGFuaW1hdGluZyBwcm9wZXJ0eSBwb3NpdGlvbiAod2hpY2ggaW4gdHVybiB3aWxsIHNvbWV0aW1lcyBhbmltYXRlIGVsKS5cbiAgICAgKiBJZiB1c2luZyBDU1MsIHNldHMgdGhlIHRyYW5zZm9ybSBwcm9wZXJ0eS4gSWYgbm90IHVzaW5nIENTUywgc2V0cyB0aGUgdG9wIC8gbGVmdCBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSAoaW50KVxuICAgICAqICAtIHRoZSBhbmltYXRpbmcgcHJvcGVydHkncyB2YWx1ZVxuICAgICAqXG4gICAgICogQHBhcmFtIHR5cGUgKHN0cmluZykgJ3NsaWRlJywgJ3Jlc2V0JywgJ3RpY2tlcidcbiAgICAgKiAgLSB0aGUgdHlwZSBvZiBpbnN0YW5jZSBmb3Igd2hpY2ggdGhlIGZ1bmN0aW9uIGlzIGJlaW5nXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gKGludClcbiAgICAgKiAgLSB0aGUgYW1vdW50IG9mIHRpbWUgKGluIG1zKSB0aGUgdHJhbnNpdGlvbiBzaG91bGQgb2NjdXB5XG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFyYW1zIChhcnJheSkgb3B0aW9uYWxcbiAgICAgKiAgLSBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgY29udGFpbmluZyBhbnkgdmFyaWFibGVzIHRoYXQgbmVlZCB0byBiZSBwYXNzZWQgaW5cbiAgICAgKi9cbiAgICB2YXIgc2V0UG9zaXRpb25Qcm9wZXJ0eSA9IGZ1bmN0aW9uKHZhbHVlLCB0eXBlLCBkdXJhdGlvbiwgcGFyYW1zKSB7XG4gICAgICB2YXIgYW5pbWF0ZU9iaiwgcHJvcFZhbHVlO1xuICAgICAgLy8gdXNlIENTUyB0cmFuc2Zvcm1cbiAgICAgIGlmIChzbGlkZXIudXNpbmdDU1MpIHtcbiAgICAgICAgLy8gZGV0ZXJtaW5lIHRoZSB0cmFuc2xhdGUzZCB2YWx1ZVxuICAgICAgICBwcm9wVmFsdWUgPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJyA/ICd0cmFuc2xhdGUzZCgwLCAnICsgdmFsdWUgKyAncHgsIDApJyA6ICd0cmFuc2xhdGUzZCgnICsgdmFsdWUgKyAncHgsIDAsIDApJztcbiAgICAgICAgLy8gYWRkIHRoZSBDU1MgdHJhbnNpdGlvbi1kdXJhdGlvblxuICAgICAgICBlbC5jc3MoJy0nICsgc2xpZGVyLmNzc1ByZWZpeCArICctdHJhbnNpdGlvbi1kdXJhdGlvbicsIGR1cmF0aW9uIC8gMTAwMCArICdzJyk7XG4gICAgICAgIGlmICh0eXBlID09PSAnc2xpZGUnKSB7XG4gICAgICAgICAgLy8gc2V0IHRoZSBwcm9wZXJ0eSB2YWx1ZVxuICAgICAgICAgIGVsLmNzcyhzbGlkZXIuYW5pbVByb3AsIHByb3BWYWx1ZSk7XG4gICAgICAgICAgaWYgKGR1cmF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICAvLyBhZGQgYSBjYWxsYmFjayBtZXRob2QgLSBleGVjdXRlcyB3aGVuIENTUyB0cmFuc2l0aW9uIGNvbXBsZXRlc1xuICAgICAgICAgICAgZWwub24oJ3RyYW5zaXRpb25lbmQgd2Via2l0VHJhbnNpdGlvbkVuZCBvVHJhbnNpdGlvbkVuZCBNU1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgIC8vbWFrZSBzdXJlIGl0J3MgdGhlIGNvcnJlY3Qgb25lXG4gICAgICAgICAgICAgIGlmICghJChlLnRhcmdldCkuaXMoZWwpKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIGNhbGxiYWNrXG4gICAgICAgICAgICAgIGVsLm9mZigndHJhbnNpdGlvbmVuZCB3ZWJraXRUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kIE1TVHJhbnNpdGlvbkVuZCcpO1xuICAgICAgICAgICAgICB1cGRhdGVBZnRlclNsaWRlVHJhbnNpdGlvbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHsgLy9kdXJhdGlvbiA9IDBcbiAgICAgICAgICAgIHVwZGF0ZUFmdGVyU2xpZGVUcmFuc2l0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdyZXNldCcpIHtcbiAgICAgICAgICBlbC5jc3Moc2xpZGVyLmFuaW1Qcm9wLCBwcm9wVmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd0aWNrZXInKSB7XG4gICAgICAgICAgLy8gbWFrZSB0aGUgdHJhbnNpdGlvbiB1c2UgJ2xpbmVhcidcbiAgICAgICAgICBlbC5jc3MoJy0nICsgc2xpZGVyLmNzc1ByZWZpeCArICctdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24nLCAnbGluZWFyJyk7XG4gICAgICAgICAgZWwuY3NzKHNsaWRlci5hbmltUHJvcCwgcHJvcFZhbHVlKTtcbiAgICAgICAgICBpZiAoZHVyYXRpb24gIT09IDApIHtcbiAgICAgICAgICAgIGVsLm9uKCd0cmFuc2l0aW9uZW5kIHdlYmtpdFRyYW5zaXRpb25FbmQgb1RyYW5zaXRpb25FbmQgTVNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAvL21ha2Ugc3VyZSBpdCdzIHRoZSBjb3JyZWN0IG9uZVxuICAgICAgICAgICAgICBpZiAoISQoZS50YXJnZXQpLmlzKGVsKSkgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgICBlbC5vZmYoJ3RyYW5zaXRpb25lbmQgd2Via2l0VHJhbnNpdGlvbkVuZCBvVHJhbnNpdGlvbkVuZCBNU1RyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgICAgICAgLy8gcmVzZXQgdGhlIHBvc2l0aW9uXG4gICAgICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkocGFyYW1zLnJlc2V0VmFsdWUsICdyZXNldCcsIDApO1xuICAgICAgICAgICAgICAvLyBzdGFydCB0aGUgbG9vcCBhZ2FpblxuICAgICAgICAgICAgICB0aWNrZXJMb29wKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgeyAvL2R1cmF0aW9uID0gMFxuICAgICAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eShwYXJhbXMucmVzZXRWYWx1ZSwgJ3Jlc2V0JywgMCk7XG4gICAgICAgICAgICB0aWNrZXJMb29wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAvLyB1c2UgSlMgYW5pbWF0ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYW5pbWF0ZU9iaiA9IHt9O1xuICAgICAgICBhbmltYXRlT2JqW3NsaWRlci5hbmltUHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzbGlkZScpIHtcbiAgICAgICAgICBlbC5hbmltYXRlKGFuaW1hdGVPYmosIGR1cmF0aW9uLCBzbGlkZXIuc2V0dGluZ3MuZWFzaW5nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHVwZGF0ZUFmdGVyU2xpZGVUcmFuc2l0aW9uKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3Jlc2V0Jykge1xuICAgICAgICAgIGVsLmNzcyhzbGlkZXIuYW5pbVByb3AsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndGlja2VyJykge1xuICAgICAgICAgIGVsLmFuaW1hdGUoYW5pbWF0ZU9iaiwgZHVyYXRpb24sICdsaW5lYXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkocGFyYW1zLnJlc2V0VmFsdWUsICdyZXNldCcsIDApO1xuICAgICAgICAgICAgLy8gcnVuIHRoZSByZWN1cnNpdmUgbG9vcCBhZnRlciBhbmltYXRpb25cbiAgICAgICAgICAgIHRpY2tlckxvb3AoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQb3B1bGF0ZXMgdGhlIHBhZ2VyIHdpdGggcHJvcGVyIGFtb3VudCBvZiBwYWdlc1xuICAgICAqL1xuICAgIHZhciBwb3B1bGF0ZVBhZ2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcGFnZXJIdG1sID0gJycsXG4gICAgICBsaW5rQ29udGVudCA9ICcnLFxuICAgICAgcGFnZXJRdHkgPSBnZXRQYWdlclF0eSgpO1xuICAgICAgLy8gbG9vcCB0aHJvdWdoIGVhY2ggcGFnZXIgaXRlbVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWdlclF0eTsgaSsrKSB7XG4gICAgICAgIGxpbmtDb250ZW50ID0gJyc7XG4gICAgICAgIC8vIGlmIGEgYnVpbGRQYWdlciBmdW5jdGlvbiBpcyBzdXBwbGllZCwgdXNlIGl0IHRvIGdldCBwYWdlciBsaW5rIHZhbHVlLCBlbHNlIHVzZSBpbmRleCArIDFcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5idWlsZFBhZ2VyICYmICQuaXNGdW5jdGlvbihzbGlkZXIuc2V0dGluZ3MuYnVpbGRQYWdlcikgfHwgc2xpZGVyLnNldHRpbmdzLnBhZ2VyQ3VzdG9tKSB7XG4gICAgICAgICAgbGlua0NvbnRlbnQgPSBzbGlkZXIuc2V0dGluZ3MuYnVpbGRQYWdlcihpKTtcbiAgICAgICAgICBzbGlkZXIucGFnZXJFbC5hZGRDbGFzcygnYngtY3VzdG9tLXBhZ2VyJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGlua0NvbnRlbnQgPSBpICsgMTtcbiAgICAgICAgICBzbGlkZXIucGFnZXJFbC5hZGRDbGFzcygnYngtZGVmYXVsdC1wYWdlcicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHZhciBsaW5rQ29udGVudCA9IHNsaWRlci5zZXR0aW5ncy5idWlsZFBhZ2VyICYmICQuaXNGdW5jdGlvbihzbGlkZXIuc2V0dGluZ3MuYnVpbGRQYWdlcikgPyBzbGlkZXIuc2V0dGluZ3MuYnVpbGRQYWdlcihpKSA6IGkgKyAxO1xuICAgICAgICAvLyBhZGQgdGhlIG1hcmt1cCB0byB0aGUgc3RyaW5nXG4gICAgICAgIHBhZ2VySHRtbCArPSAnPGRpdiBjbGFzcz1cImJ4LXBhZ2VyLWl0ZW1cIj48YSBocmVmPVwiXCIgZGF0YS1zbGlkZS1pbmRleD1cIicgKyBpICsgJ1wiIGNsYXNzPVwiYngtcGFnZXItbGlua1wiPicgKyBsaW5rQ29udGVudCArICc8L2E+PC9kaXY+JztcbiAgICAgIH1cbiAgICAgIC8vIHBvcHVsYXRlIHRoZSBwYWdlciBlbGVtZW50IHdpdGggcGFnZXIgbGlua3NcbiAgICAgIHNsaWRlci5wYWdlckVsLmh0bWwocGFnZXJIdG1sKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyB0aGUgcGFnZXIgdG8gdGhlIGNvbnRyb2xzIGVsZW1lbnRcbiAgICAgKi9cbiAgICB2YXIgYXBwZW5kUGFnZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLnBhZ2VyQ3VzdG9tKSB7XG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgcGFnZXIgRE9NIGVsZW1lbnRcbiAgICAgICAgc2xpZGVyLnBhZ2VyRWwgPSAkKCc8ZGl2IGNsYXNzPVwiYngtcGFnZXJcIiAvPicpO1xuICAgICAgICAvLyBpZiBhIHBhZ2VyIHNlbGVjdG9yIHdhcyBzdXBwbGllZCwgcG9wdWxhdGUgaXQgd2l0aCB0aGUgcGFnZXJcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5wYWdlclNlbGVjdG9yKSB7XG4gICAgICAgICAgJChzbGlkZXIuc2V0dGluZ3MucGFnZXJTZWxlY3RvcikuaHRtbChzbGlkZXIucGFnZXJFbCk7XG4gICAgICAgIC8vIGlmIG5vIHBhZ2VyIHNlbGVjdG9yIHdhcyBzdXBwbGllZCwgYWRkIGl0IGFmdGVyIHRoZSB3cmFwcGVyXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmVsLmFkZENsYXNzKCdieC1oYXMtcGFnZXInKS5hcHBlbmQoc2xpZGVyLnBhZ2VyRWwpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHBvcHVsYXRlIHRoZSBwYWdlclxuICAgICAgICBwb3B1bGF0ZVBhZ2VyKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXIucGFnZXJFbCA9ICQoc2xpZGVyLnNldHRpbmdzLnBhZ2VyQ3VzdG9tKTtcbiAgICAgIH1cbiAgICAgIC8vIGFzc2lnbiB0aGUgcGFnZXIgY2xpY2sgYmluZGluZ1xuICAgICAgc2xpZGVyLnBhZ2VyRWwub24oJ2NsaWNrIHRvdWNoZW5kJywgJ2EnLCBjbGlja1BhZ2VyQmluZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgcHJldiAvIG5leHQgY29udHJvbHMgdG8gdGhlIGNvbnRyb2xzIGVsZW1lbnRcbiAgICAgKi9cbiAgICB2YXIgYXBwZW5kQ29udHJvbHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNsaWRlci5jb250cm9scy5uZXh0ID0gJCgnPGEgY2xhc3M9XCJieC1uZXh0XCIgaHJlZj1cIlwiPicgKyBzbGlkZXIuc2V0dGluZ3MubmV4dFRleHQgKyAnPC9hPicpO1xuICAgICAgc2xpZGVyLmNvbnRyb2xzLnByZXYgPSAkKCc8YSBjbGFzcz1cImJ4LXByZXZcIiBocmVmPVwiXCI+JyArIHNsaWRlci5zZXR0aW5ncy5wcmV2VGV4dCArICc8L2E+Jyk7XG4gICAgICAvLyBhZGQgY2xpY2sgYWN0aW9ucyB0byB0aGUgY29udHJvbHNcbiAgICAgIHNsaWRlci5jb250cm9scy5uZXh0Lm9uKCdjbGljayB0b3VjaGVuZCcsIGNsaWNrTmV4dEJpbmQpO1xuICAgICAgc2xpZGVyLmNvbnRyb2xzLnByZXYub24oJ2NsaWNrIHRvdWNoZW5kJywgY2xpY2tQcmV2QmluZCk7XG4gICAgICAvLyBpZiBuZXh0U2VsZWN0b3Igd2FzIHN1cHBsaWVkLCBwb3B1bGF0ZSBpdFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5uZXh0U2VsZWN0b3IpIHtcbiAgICAgICAgJChzbGlkZXIuc2V0dGluZ3MubmV4dFNlbGVjdG9yKS5hcHBlbmQoc2xpZGVyLmNvbnRyb2xzLm5leHQpO1xuICAgICAgfVxuICAgICAgLy8gaWYgcHJldlNlbGVjdG9yIHdhcyBzdXBwbGllZCwgcG9wdWxhdGUgaXRcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MucHJldlNlbGVjdG9yKSB7XG4gICAgICAgICQoc2xpZGVyLnNldHRpbmdzLnByZXZTZWxlY3RvcikuYXBwZW5kKHNsaWRlci5jb250cm9scy5wcmV2KTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIG5vIGN1c3RvbSBzZWxlY3RvcnMgd2VyZSBzdXBwbGllZFxuICAgICAgaWYgKCFzbGlkZXIuc2V0dGluZ3MubmV4dFNlbGVjdG9yICYmICFzbGlkZXIuc2V0dGluZ3MucHJldlNlbGVjdG9yKSB7XG4gICAgICAgIC8vIGFkZCB0aGUgY29udHJvbHMgdG8gdGhlIERPTVxuICAgICAgICBzbGlkZXIuY29udHJvbHMuZGlyZWN0aW9uRWwgPSAkKCc8ZGl2IGNsYXNzPVwiYngtY29udHJvbHMtZGlyZWN0aW9uXCIgLz4nKTtcbiAgICAgICAgLy8gYWRkIHRoZSBjb250cm9sIGVsZW1lbnRzIHRvIHRoZSBkaXJlY3Rpb25FbFxuICAgICAgICBzbGlkZXIuY29udHJvbHMuZGlyZWN0aW9uRWwuYXBwZW5kKHNsaWRlci5jb250cm9scy5wcmV2KS5hcHBlbmQoc2xpZGVyLmNvbnRyb2xzLm5leHQpO1xuICAgICAgICAvLyBzbGlkZXIudmlld3BvcnQuYXBwZW5kKHNsaWRlci5jb250cm9scy5kaXJlY3Rpb25FbCk7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5lbC5hZGRDbGFzcygnYngtaGFzLWNvbnRyb2xzLWRpcmVjdGlvbicpLmFwcGVuZChzbGlkZXIuY29udHJvbHMuZGlyZWN0aW9uRWwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIHN0YXJ0IC8gc3RvcCBhdXRvIGNvbnRyb2xzIHRvIHRoZSBjb250cm9scyBlbGVtZW50XG4gICAgICovXG4gICAgdmFyIGFwcGVuZENvbnRyb2xzQXV0byA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2xpZGVyLmNvbnRyb2xzLnN0YXJ0ID0gJCgnPGRpdiBjbGFzcz1cImJ4LWNvbnRyb2xzLWF1dG8taXRlbVwiPjxhIGNsYXNzPVwiYngtc3RhcnRcIiBocmVmPVwiXCI+JyArIHNsaWRlci5zZXR0aW5ncy5zdGFydFRleHQgKyAnPC9hPjwvZGl2PicpO1xuICAgICAgc2xpZGVyLmNvbnRyb2xzLnN0b3AgPSAkKCc8ZGl2IGNsYXNzPVwiYngtY29udHJvbHMtYXV0by1pdGVtXCI+PGEgY2xhc3M9XCJieC1zdG9wXCIgaHJlZj1cIlwiPicgKyBzbGlkZXIuc2V0dGluZ3Muc3RvcFRleHQgKyAnPC9hPjwvZGl2PicpO1xuICAgICAgLy8gYWRkIHRoZSBjb250cm9scyB0byB0aGUgRE9NXG4gICAgICBzbGlkZXIuY29udHJvbHMuYXV0b0VsID0gJCgnPGRpdiBjbGFzcz1cImJ4LWNvbnRyb2xzLWF1dG9cIiAvPicpO1xuICAgICAgLy8gb24gY2xpY2sgYWN0aW9ucyB0byB0aGUgY29udHJvbHNcbiAgICAgIHNsaWRlci5jb250cm9scy5hdXRvRWwub24oJ2NsaWNrJywgJy5ieC1zdGFydCcsIGNsaWNrU3RhcnRCaW5kKTtcbiAgICAgIHNsaWRlci5jb250cm9scy5hdXRvRWwub24oJ2NsaWNrJywgJy5ieC1zdG9wJywgY2xpY2tTdG9wQmluZCk7XG4gICAgICAvLyBpZiBhdXRvQ29udHJvbHNDb21iaW5lLCBpbnNlcnQgb25seSB0aGUgXCJzdGFydFwiIGNvbnRyb2xcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0NvbnRyb2xzQ29tYmluZSkge1xuICAgICAgICBzbGlkZXIuY29udHJvbHMuYXV0b0VsLmFwcGVuZChzbGlkZXIuY29udHJvbHMuc3RhcnQpO1xuICAgICAgLy8gaWYgYXV0b0NvbnRyb2xzQ29tYmluZSBpcyBmYWxzZSwgaW5zZXJ0IGJvdGggY29udHJvbHNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5hdXRvRWwuYXBwZW5kKHNsaWRlci5jb250cm9scy5zdGFydCkuYXBwZW5kKHNsaWRlci5jb250cm9scy5zdG9wKTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIGF1dG8gY29udHJvbHMgc2VsZWN0b3Igd2FzIHN1cHBsaWVkLCBwb3B1bGF0ZSBpdCB3aXRoIHRoZSBjb250cm9sc1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHNTZWxlY3Rvcikge1xuICAgICAgICAkKHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHNTZWxlY3RvcikuaHRtbChzbGlkZXIuY29udHJvbHMuYXV0b0VsKTtcbiAgICAgIC8vIGlmIGF1dG8gY29udHJvbHMgc2VsZWN0b3Igd2FzIG5vdCBzdXBwbGllZCwgYWRkIGl0IGFmdGVyIHRoZSB3cmFwcGVyXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXIuY29udHJvbHMuZWwuYWRkQ2xhc3MoJ2J4LWhhcy1jb250cm9scy1hdXRvJykuYXBwZW5kKHNsaWRlci5jb250cm9scy5hdXRvRWwpO1xuICAgICAgfVxuICAgICAgLy8gdXBkYXRlIHRoZSBhdXRvIGNvbnRyb2xzXG4gICAgICB1cGRhdGVBdXRvQ29udHJvbHMoc2xpZGVyLnNldHRpbmdzLmF1dG9TdGFydCA/ICdzdG9wJyA6ICdzdGFydCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIGltYWdlIGNhcHRpb25zIHRvIHRoZSBET01cbiAgICAgKi9cbiAgICB2YXIgYXBwZW5kQ2FwdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGN5Y2xlIHRocm91Z2ggZWFjaCBjaGlsZFxuICAgICAgc2xpZGVyLmNoaWxkcmVuLmVhY2goZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgLy8gZ2V0IHRoZSBpbWFnZSB0aXRsZSBhdHRyaWJ1dGVcbiAgICAgICAgdmFyIHRpdGxlID0gJCh0aGlzKS5maW5kKCdpbWc6Zmlyc3QnKS5hdHRyKCd0aXRsZScpO1xuICAgICAgICAvLyBhcHBlbmQgdGhlIGNhcHRpb25cbiAgICAgICAgaWYgKHRpdGxlICE9PSB1bmRlZmluZWQgJiYgKCcnICsgdGl0bGUpLmxlbmd0aCkge1xuICAgICAgICAgICQodGhpcykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwiYngtY2FwdGlvblwiPjxzcGFuPicgKyB0aXRsZSArICc8L3NwYW4+PC9kaXY+Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBuZXh0IGJpbmRpbmdcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIGNsaWNrTmV4dEJpbmQgPSBmdW5jdGlvbihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoc2xpZGVyLmNvbnRyb2xzLmVsLmhhc0NsYXNzKCdkaXNhYmxlZCcpKSB7IHJldHVybjsgfVxuICAgICAgLy8gaWYgYXV0byBzaG93IGlzIHJ1bm5pbmcsIHN0b3AgaXRcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0byAmJiBzbGlkZXIuc2V0dGluZ3Muc3RvcEF1dG9PbkNsaWNrKSB7IGVsLnN0b3BBdXRvKCk7IH1cbiAgICAgIGVsLmdvVG9OZXh0U2xpZGUoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xpY2sgcHJldiBiaW5kaW5nXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSAoZXZlbnQpXG4gICAgICogIC0gRE9NIGV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIHZhciBjbGlja1ByZXZCaW5kID0gZnVuY3Rpb24oZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKHNsaWRlci5jb250cm9scy5lbC5oYXNDbGFzcygnZGlzYWJsZWQnKSkgeyByZXR1cm47IH1cbiAgICAgIC8vIGlmIGF1dG8gc2hvdyBpcyBydW5uaW5nLCBzdG9wIGl0XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG8gJiYgc2xpZGVyLnNldHRpbmdzLnN0b3BBdXRvT25DbGljaykgeyBlbC5zdG9wQXV0bygpOyB9XG4gICAgICBlbC5nb1RvUHJldlNsaWRlKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsaWNrIHN0YXJ0IGJpbmRpbmdcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIGNsaWNrU3RhcnRCaW5kID0gZnVuY3Rpb24oZSkge1xuICAgICAgZWwuc3RhcnRBdXRvKCk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsaWNrIHN0b3AgYmluZGluZ1xuICAgICAqXG4gICAgICogQHBhcmFtIGUgKGV2ZW50KVxuICAgICAqICAtIERPTSBldmVudCBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgY2xpY2tTdG9wQmluZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGVsLnN0b3BBdXRvKCk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsaWNrIHBhZ2VyIGJpbmRpbmdcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIGNsaWNrUGFnZXJCaW5kID0gZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHBhZ2VyTGluaywgcGFnZXJJbmRleDtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmIChzbGlkZXIuY29udHJvbHMuZWwuaGFzQ2xhc3MoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gaWYgYXV0byBzaG93IGlzIHJ1bm5pbmcsIHN0b3AgaXRcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0byAgJiYgc2xpZGVyLnNldHRpbmdzLnN0b3BBdXRvT25DbGljaykgeyBlbC5zdG9wQXV0bygpOyB9XG4gICAgICBwYWdlckxpbmsgPSAkKGUuY3VycmVudFRhcmdldCk7XG4gICAgICBpZiAocGFnZXJMaW5rLmF0dHIoJ2RhdGEtc2xpZGUtaW5kZXgnKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhZ2VySW5kZXggPSBwYXJzZUludChwYWdlckxpbmsuYXR0cignZGF0YS1zbGlkZS1pbmRleCcpKTtcbiAgICAgICAgLy8gaWYgY2xpY2tlZCBwYWdlciBsaW5rIGlzIG5vdCBhY3RpdmUsIGNvbnRpbnVlIHdpdGggdGhlIGdvVG9TbGlkZSBjYWxsXG4gICAgICAgIGlmIChwYWdlckluZGV4ICE9PSBzbGlkZXIuYWN0aXZlLmluZGV4KSB7IGVsLmdvVG9TbGlkZShwYWdlckluZGV4KTsgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBwYWdlciBsaW5rcyB3aXRoIGFuIGFjdGl2ZSBjbGFzc1xuICAgICAqXG4gICAgICogQHBhcmFtIHNsaWRlSW5kZXggKGludClcbiAgICAgKiAgLSBpbmRleCBvZiBzbGlkZSB0byBtYWtlIGFjdGl2ZVxuICAgICAqL1xuICAgIHZhciB1cGRhdGVQYWdlckFjdGl2ZSA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgpIHtcbiAgICAgIC8vIGlmIFwic2hvcnRcIiBwYWdlciB0eXBlXG4gICAgICB2YXIgbGVuID0gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aDsgLy8gbmIgb2YgY2hpbGRyZW5cbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MucGFnZXJUeXBlID09PSAnc2hvcnQnKSB7XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzID4gMSkge1xuICAgICAgICAgIGxlbiA9IE1hdGguY2VpbChzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC8gc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgc2xpZGVyLnBhZ2VyRWwuaHRtbCgoc2xpZGVJbmRleCArIDEpICsgc2xpZGVyLnNldHRpbmdzLnBhZ2VyU2hvcnRTZXBhcmF0b3IgKyBsZW4pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyByZW1vdmUgYWxsIHBhZ2VyIGFjdGl2ZSBjbGFzc2VzXG4gICAgICBzbGlkZXIucGFnZXJFbC5maW5kKCdhJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgLy8gYXBwbHkgdGhlIGFjdGl2ZSBjbGFzcyBmb3IgYWxsIHBhZ2Vyc1xuICAgICAgc2xpZGVyLnBhZ2VyRWwuZWFjaChmdW5jdGlvbihpLCBlbCkgeyAkKGVsKS5maW5kKCdhJykuZXEoc2xpZGVJbmRleCkuYWRkQ2xhc3MoJ2FjdGl2ZScpOyB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgbmVlZGVkIGFjdGlvbnMgYWZ0ZXIgYSBzbGlkZSB0cmFuc2l0aW9uXG4gICAgICovXG4gICAgdmFyIHVwZGF0ZUFmdGVyU2xpZGVUcmFuc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBpZiBpbmZpbml0ZSBsb29wIGlzIHRydWVcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wKSB7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9ICcnO1xuICAgICAgICAvLyBmaXJzdCBzbGlkZVxuICAgICAgICBpZiAoc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gMCkge1xuICAgICAgICAgIC8vIHNldCB0aGUgbmV3IHBvc2l0aW9uXG4gICAgICAgICAgcG9zaXRpb24gPSBzbGlkZXIuY2hpbGRyZW4uZXEoMCkucG9zaXRpb24oKTtcbiAgICAgICAgLy8gY2Fyb3VzZWwsIGxhc3Qgc2xpZGVcbiAgICAgICAgfSBlbHNlIGlmIChzbGlkZXIuYWN0aXZlLmluZGV4ID09PSBnZXRQYWdlclF0eSgpIC0gMSAmJiBzbGlkZXIuY2Fyb3VzZWwpIHtcbiAgICAgICAgICBwb3NpdGlvbiA9IHNsaWRlci5jaGlsZHJlbi5lcSgoZ2V0UGFnZXJRdHkoKSAtIDEpICogZ2V0TW92ZUJ5KCkpLnBvc2l0aW9uKCk7XG4gICAgICAgIC8vIGxhc3Qgc2xpZGVcbiAgICAgICAgfSBlbHNlIGlmIChzbGlkZXIuYWN0aXZlLmluZGV4ID09PSBzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHBvc2l0aW9uID0gc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5jaGlsZHJlbi5sZW5ndGggLSAxKS5wb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbikge1xuICAgICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnKSB7IHNldFBvc2l0aW9uUHJvcGVydHkoLXBvc2l0aW9uLmxlZnQsICdyZXNldCcsIDApOyB9XG4gICAgICAgICAgZWxzZSBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICd2ZXJ0aWNhbCcpIHsgc2V0UG9zaXRpb25Qcm9wZXJ0eSgtcG9zaXRpb24udG9wLCAncmVzZXQnLCAwKTsgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBkZWNsYXJlIHRoYXQgdGhlIHRyYW5zaXRpb24gaXMgY29tcGxldGVcbiAgICAgIHNsaWRlci53b3JraW5nID0gZmFsc2U7XG4gICAgICAvLyBvblNsaWRlQWZ0ZXIgY2FsbGJhY2tcbiAgICAgIHNsaWRlci5zZXR0aW5ncy5vblNsaWRlQWZ0ZXIuY2FsbChlbCwgc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5hY3RpdmUuaW5kZXgpLCBzbGlkZXIub2xkSW5kZXgsIHNsaWRlci5hY3RpdmUuaW5kZXgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBhdXRvIGNvbnRyb2xzIHN0YXRlIChlaXRoZXIgYWN0aXZlLCBvciBjb21iaW5lZCBzd2l0Y2gpXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RhdGUgKHN0cmluZykgXCJzdGFydFwiLCBcInN0b3BcIlxuICAgICAqICAtIHRoZSBuZXcgc3RhdGUgb2YgdGhlIGF1dG8gc2hvd1xuICAgICAqL1xuICAgIHZhciB1cGRhdGVBdXRvQ29udHJvbHMgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgLy8gaWYgYXV0b0NvbnRyb2xzQ29tYmluZSBpcyB0cnVlLCByZXBsYWNlIHRoZSBjdXJyZW50IGNvbnRyb2wgd2l0aCB0aGUgbmV3IHN0YXRlXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG9Db250cm9sc0NvbWJpbmUpIHtcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmF1dG9FbC5odG1sKHNsaWRlci5jb250cm9sc1tzdGF0ZV0pO1xuICAgICAgLy8gaWYgYXV0b0NvbnRyb2xzQ29tYmluZSBpcyBmYWxzZSwgYXBwbHkgdGhlIFwiYWN0aXZlXCIgY2xhc3MgdG8gdGhlIGFwcHJvcHJpYXRlIGNvbnRyb2xcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5hdXRvRWwuZmluZCgnYScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmF1dG9FbC5maW5kKCdhOm5vdCguYngtJyArIHN0YXRlICsgJyknKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGRpcmVjdGlvbiBjb250cm9scyAoY2hlY2tzIGlmIGVpdGhlciBzaG91bGQgYmUgaGlkZGVuKVxuICAgICAqL1xuICAgIHZhciB1cGRhdGVEaXJlY3Rpb25Db250cm9scyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGdldFBhZ2VyUXR5KCkgPT09IDEpIHtcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLnByZXYuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5uZXh0LmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgfSBlbHNlIGlmICghc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCAmJiBzbGlkZXIuc2V0dGluZ3MuaGlkZUNvbnRyb2xPbkVuZCkge1xuICAgICAgICAvLyBpZiBmaXJzdCBzbGlkZVxuICAgICAgICBpZiAoc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gMCkge1xuICAgICAgICAgIHNsaWRlci5jb250cm9scy5wcmV2LmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgIHNsaWRlci5jb250cm9scy5uZXh0LnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAvLyBpZiBsYXN0IHNsaWRlXG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gZ2V0UGFnZXJRdHkoKSAtIDEpIHtcbiAgICAgICAgICBzbGlkZXIuY29udHJvbHMubmV4dC5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICBzbGlkZXIuY29udHJvbHMucHJldi5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgLy8gaWYgYW55IHNsaWRlIGluIHRoZSBtaWRkbGVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzbGlkZXIuY29udHJvbHMucHJldi5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICBzbGlkZXIuY29udHJvbHMubmV4dC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cdC8qIGF1dG8gc3RhcnQgYW5kIHN0b3AgZnVuY3Rpb25zICovXG5cdHZhciB3aW5kb3dGb2N1c0hhbmRsZXIgPSBmdW5jdGlvbigpIHsgZWwuc3RhcnRBdXRvKCk7IH07XG5cdHZhciB3aW5kb3dCbHVySGFuZGxlciA9IGZ1bmN0aW9uKCkgeyBlbC5zdG9wQXV0bygpOyB9O1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhdXRvIHByb2Nlc3NcbiAgICAgKi9cbiAgICB2YXIgaW5pdEF1dG8gPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlmIGF1dG9EZWxheSB3YXMgc3VwcGxpZWQsIGxhdW5jaCB0aGUgYXV0byBzaG93IHVzaW5nIGEgc2V0VGltZW91dCgpIGNhbGxcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0RlbGF5ID4gMCkge1xuICAgICAgICBzZXRUaW1lb3V0KGVsLnN0YXJ0QXV0bywgc2xpZGVyLnNldHRpbmdzLmF1dG9EZWxheSk7XG4gICAgICAvLyBpZiBhdXRvRGVsYXkgd2FzIG5vdCBzdXBwbGllZCwgc3RhcnQgdGhlIGF1dG8gc2hvdyBub3JtYWxseVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuc3RhcnRBdXRvKCk7XG5cbiAgICAgICAgLy9hZGQgZm9jdXMgYW5kIGJsdXIgZXZlbnRzIHRvIGVuc3VyZSBpdHMgcnVubmluZyBpZiB0aW1lb3V0IGdldHMgcGF1c2VkXG4gICAgICAgICQod2luZG93KS5mb2N1cyh3aW5kb3dGb2N1c0hhbmRsZXIpLmJsdXIod2luZG93Qmx1ckhhbmRsZXIpO1xuICAgICAgfVxuICAgICAgLy8gaWYgYXV0b0hvdmVyIGlzIHJlcXVlc3RlZFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvSG92ZXIpIHtcbiAgICAgICAgLy8gb24gZWwgaG92ZXJcbiAgICAgICAgZWwuaG92ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgLy8gaWYgdGhlIGF1dG8gc2hvdyBpcyBjdXJyZW50bHkgcGxheWluZyAoaGFzIGFuIGFjdGl2ZSBpbnRlcnZhbClcbiAgICAgICAgICBpZiAoc2xpZGVyLmludGVydmFsKSB7XG4gICAgICAgICAgICAvLyBzdG9wIHRoZSBhdXRvIHNob3cgYW5kIHBhc3MgdHJ1ZSBhcmd1bWVudCB3aGljaCB3aWxsIHByZXZlbnQgY29udHJvbCB1cGRhdGVcbiAgICAgICAgICAgIGVsLnN0b3BBdXRvKHRydWUpO1xuICAgICAgICAgICAgLy8gY3JlYXRlIGEgbmV3IGF1dG9QYXVzZWQgdmFsdWUgd2hpY2ggd2lsbCBiZSB1c2VkIGJ5IHRoZSByZWxhdGl2ZSBcIm1vdXNlb3V0XCIgZXZlbnRcbiAgICAgICAgICAgIHNsaWRlci5hdXRvUGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIGlmIHRoZSBhdXRvUGF1c2VkIHZhbHVlIHdhcyBjcmVhdGVkIGJlIHRoZSBwcmlvciBcIm1vdXNlb3ZlclwiIGV2ZW50XG4gICAgICAgICAgaWYgKHNsaWRlci5hdXRvUGF1c2VkKSB7XG4gICAgICAgICAgICAvLyBzdGFydCB0aGUgYXV0byBzaG93IGFuZCBwYXNzIHRydWUgYXJndW1lbnQgd2hpY2ggd2lsbCBwcmV2ZW50IGNvbnRyb2wgdXBkYXRlXG4gICAgICAgICAgICBlbC5zdGFydEF1dG8odHJ1ZSk7XG4gICAgICAgICAgICAvLyByZXNldCB0aGUgYXV0b1BhdXNlZCB2YWx1ZVxuICAgICAgICAgICAgc2xpZGVyLmF1dG9QYXVzZWQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSB0aWNrZXIgcHJvY2Vzc1xuICAgICAqL1xuICAgIHZhciBpbml0VGlja2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc3RhcnRQb3NpdGlvbiA9IDAsXG4gICAgICBwb3NpdGlvbiwgdHJhbnNmb3JtLCB2YWx1ZSwgaWR4LCByYXRpbywgcHJvcGVydHksIG5ld1NwZWVkLCB0b3RhbERpbWVucztcbiAgICAgIC8vIGlmIGF1dG9EaXJlY3Rpb24gaXMgXCJuZXh0XCIsIGFwcGVuZCBhIGNsb25lIG9mIHRoZSBlbnRpcmUgc2xpZGVyXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG9EaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICBlbC5hcHBlbmQoc2xpZGVyLmNoaWxkcmVuLmNsb25lKCkuYWRkQ2xhc3MoJ2J4LWNsb25lJykpO1xuICAgICAgLy8gaWYgYXV0b0RpcmVjdGlvbiBpcyBcInByZXZcIiwgcHJlcGVuZCBhIGNsb25lIG9mIHRoZSBlbnRpcmUgc2xpZGVyLCBhbmQgc2V0IHRoZSBsZWZ0IHBvc2l0aW9uXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbC5wcmVwZW5kKHNsaWRlci5jaGlsZHJlbi5jbG9uZSgpLmFkZENsYXNzKCdieC1jbG9uZScpKTtcbiAgICAgICAgcG9zaXRpb24gPSBzbGlkZXIuY2hpbGRyZW4uZmlyc3QoKS5wb3NpdGlvbigpO1xuICAgICAgICBzdGFydFBvc2l0aW9uID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/IC1wb3NpdGlvbi5sZWZ0IDogLXBvc2l0aW9uLnRvcDtcbiAgICAgIH1cbiAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkoc3RhcnRQb3NpdGlvbiwgJ3Jlc2V0JywgMCk7XG4gICAgICAvLyBkbyBub3QgYWxsb3cgY29udHJvbHMgaW4gdGlja2VyIG1vZGVcbiAgICAgIHNsaWRlci5zZXR0aW5ncy5wYWdlciA9IGZhbHNlO1xuICAgICAgc2xpZGVyLnNldHRpbmdzLmNvbnRyb2xzID0gZmFsc2U7XG4gICAgICBzbGlkZXIuc2V0dGluZ3MuYXV0b0NvbnRyb2xzID0gZmFsc2U7XG4gICAgICAvLyBpZiBhdXRvSG92ZXIgaXMgcmVxdWVzdGVkXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnRpY2tlckhvdmVyKSB7XG4gICAgICAgIGlmIChzbGlkZXIudXNpbmdDU1MpIHtcbiAgICAgICAgICBpZHggPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gNCA6IDU7XG4gICAgICAgICAgc2xpZGVyLnZpZXdwb3J0LmhvdmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdHJhbnNmb3JtID0gZWwuY3NzKCctJyArIHNsaWRlci5jc3NQcmVmaXggKyAnLXRyYW5zZm9ybScpO1xuICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHRyYW5zZm9ybS5zcGxpdCgnLCcpW2lkeF0pO1xuICAgICAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eSh2YWx1ZSwgJ3Jlc2V0JywgMCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0b3RhbERpbWVucyA9IDA7XG4gICAgICAgICAgICBzbGlkZXIuY2hpbGRyZW4uZWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICB0b3RhbERpbWVucyArPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gJCh0aGlzKS5vdXRlcldpZHRoKHRydWUpIDogJCh0aGlzKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBzcGVlZCByYXRpbyAodXNlZCB0byBkZXRlcm1pbmUgdGhlIG5ldyBzcGVlZCB0byBmaW5pc2ggdGhlIHBhdXNlZCBhbmltYXRpb24pXG4gICAgICAgICAgICByYXRpbyA9IHNsaWRlci5zZXR0aW5ncy5zcGVlZCAvIHRvdGFsRGltZW5zO1xuICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3BlcnR5IHRvIHVzZVxuICAgICAgICAgICAgcHJvcGVydHkgPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIG5ldyBzcGVlZFxuICAgICAgICAgICAgbmV3U3BlZWQgPSByYXRpbyAqICh0b3RhbERpbWVucyAtIChNYXRoLmFicyhwYXJzZUludCh2YWx1ZSkpKSk7XG4gICAgICAgICAgICB0aWNrZXJMb29wKG5ld1NwZWVkKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBvbiBlbCBob3ZlclxuICAgICAgICAgIHNsaWRlci52aWV3cG9ydC5ob3ZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGVsLnN0b3AoKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgdG90YWwgd2lkdGggb2YgY2hpbGRyZW4gKHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBzcGVlZCByYXRpbylcbiAgICAgICAgICAgIHRvdGFsRGltZW5zID0gMDtcbiAgICAgICAgICAgIHNsaWRlci5jaGlsZHJlbi5lYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICAgIHRvdGFsRGltZW5zICs9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAkKHRoaXMpLm91dGVyV2lkdGgodHJ1ZSkgOiAkKHRoaXMpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIHNwZWVkIHJhdGlvICh1c2VkIHRvIGRldGVybWluZSB0aGUgbmV3IHNwZWVkIHRvIGZpbmlzaCB0aGUgcGF1c2VkIGFuaW1hdGlvbilcbiAgICAgICAgICAgIHJhdGlvID0gc2xpZGVyLnNldHRpbmdzLnNwZWVkIC8gdG90YWxEaW1lbnM7XG4gICAgICAgICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJvcGVydHkgdG8gdXNlXG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgbmV3IHNwZWVkXG4gICAgICAgICAgICBuZXdTcGVlZCA9IHJhdGlvICogKHRvdGFsRGltZW5zIC0gKE1hdGguYWJzKHBhcnNlSW50KGVsLmNzcyhwcm9wZXJ0eSkpKSkpO1xuICAgICAgICAgICAgdGlja2VyTG9vcChuZXdTcGVlZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIHN0YXJ0IHRoZSB0aWNrZXIgbG9vcFxuICAgICAgdGlja2VyTG9vcCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSdW5zIGEgY29udGludW91cyBsb29wLCBuZXdzIHRpY2tlci1zdHlsZVxuICAgICAqL1xuICAgIHZhciB0aWNrZXJMb29wID0gZnVuY3Rpb24ocmVzdW1lU3BlZWQpIHtcbiAgICAgIHZhciBzcGVlZCA9IHJlc3VtZVNwZWVkID8gcmVzdW1lU3BlZWQgOiBzbGlkZXIuc2V0dGluZ3Muc3BlZWQsXG4gICAgICBwb3NpdGlvbiA9IHtsZWZ0OiAwLCB0b3A6IDB9LFxuICAgICAgcmVzZXQgPSB7bGVmdDogMCwgdG9wOiAwfSxcbiAgICAgIGFuaW1hdGVQcm9wZXJ0eSwgcmVzZXRWYWx1ZSwgcGFyYW1zO1xuXG4gICAgICAvLyBpZiBcIm5leHRcIiBhbmltYXRlIGxlZnQgcG9zaXRpb24gdG8gbGFzdCBjaGlsZCwgdGhlbiByZXNldCBsZWZ0IHRvIDBcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0RpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIHBvc2l0aW9uID0gZWwuZmluZCgnLmJ4LWNsb25lJykuZmlyc3QoKS5wb3NpdGlvbigpO1xuICAgICAgLy8gaWYgXCJwcmV2XCIgYW5pbWF0ZSBsZWZ0IHBvc2l0aW9uIHRvIDAsIHRoZW4gcmVzZXQgbGVmdCB0byBmaXJzdCBub24tY2xvbmUgY2hpbGRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc2V0ID0gc2xpZGVyLmNoaWxkcmVuLmZpcnN0KCkucG9zaXRpb24oKTtcbiAgICAgIH1cbiAgICAgIGFuaW1hdGVQcm9wZXJ0eSA9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAtcG9zaXRpb24ubGVmdCA6IC1wb3NpdGlvbi50b3A7XG4gICAgICByZXNldFZhbHVlID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/IC1yZXNldC5sZWZ0IDogLXJlc2V0LnRvcDtcbiAgICAgIHBhcmFtcyA9IHtyZXNldFZhbHVlOiByZXNldFZhbHVlfTtcbiAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkoYW5pbWF0ZVByb3BlcnR5LCAndGlja2VyJywgc3BlZWQsIHBhcmFtcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGVsIGlzIG9uIHNjcmVlblxuICAgICAqL1xuICAgIHZhciBpc09uU2NyZWVuID0gZnVuY3Rpb24oZWwpIHtcbiAgICAgIHZhciB3aW4gPSAkKHdpbmRvdyksXG4gICAgICB2aWV3cG9ydCA9IHtcbiAgICAgICAgdG9wOiB3aW4uc2Nyb2xsVG9wKCksXG4gICAgICAgIGxlZnQ6IHdpbi5zY3JvbGxMZWZ0KClcbiAgICAgIH0sXG4gICAgICBib3VuZHMgPSBlbC5vZmZzZXQoKTtcblxuICAgICAgdmlld3BvcnQucmlnaHQgPSB2aWV3cG9ydC5sZWZ0ICsgd2luLndpZHRoKCk7XG4gICAgICB2aWV3cG9ydC5ib3R0b20gPSB2aWV3cG9ydC50b3AgKyB3aW4uaGVpZ2h0KCk7XG4gICAgICBib3VuZHMucmlnaHQgPSBib3VuZHMubGVmdCArIGVsLm91dGVyV2lkdGgoKTtcbiAgICAgIGJvdW5kcy5ib3R0b20gPSBib3VuZHMudG9wICsgZWwub3V0ZXJIZWlnaHQoKTtcblxuICAgICAgcmV0dXJuICghKHZpZXdwb3J0LnJpZ2h0IDwgYm91bmRzLmxlZnQgfHwgdmlld3BvcnQubGVmdCA+IGJvdW5kcy5yaWdodCB8fCB2aWV3cG9ydC5ib3R0b20gPCBib3VuZHMudG9wIHx8IHZpZXdwb3J0LnRvcCA+IGJvdW5kcy5ib3R0b20pKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMga2V5Ym9hcmQgZXZlbnRzXG4gICAgICovXG4gICAgdmFyIGtleVByZXNzID0gZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIGFjdGl2ZUVsZW1lbnRUYWcgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSxcbiAgICAgIHRhZ0ZpbHRlcnMgPSAnaW5wdXR8dGV4dGFyZWEnLFxuICAgICAgcCA9IG5ldyBSZWdFeHAoYWN0aXZlRWxlbWVudFRhZyxbJ2knXSksXG4gICAgICByZXN1bHQgPSBwLmV4ZWModGFnRmlsdGVycyk7XG5cbiAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCAmJiBpc09uU2NyZWVuKGVsKSkge1xuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAzOSkge1xuICAgICAgICAgIGNsaWNrTmV4dEJpbmQoZSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMzcpIHtcbiAgICAgICAgICBjbGlja1ByZXZCaW5kKGUpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0b3VjaCBldmVudHNcbiAgICAgKi9cbiAgICB2YXIgaW5pdFRvdWNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBpbml0aWFsaXplIG9iamVjdCB0byBjb250YWluIGFsbCB0b3VjaCB2YWx1ZXNcbiAgICAgIHNsaWRlci50b3VjaCA9IHtcbiAgICAgICAgc3RhcnQ6IHt4OiAwLCB5OiAwfSxcbiAgICAgICAgZW5kOiB7eDogMCwgeTogMH1cbiAgICAgIH07XG4gICAgICBzbGlkZXIudmlld3BvcnQub24oJ3RvdWNoc3RhcnQgTVNQb2ludGVyRG93biBwb2ludGVyZG93bicsIG9uVG91Y2hTdGFydCk7XG5cbiAgICAgIC8vZm9yIGJyb3dzZXJzIHRoYXQgaGF2ZSBpbXBsZW1lbnRlZCBwb2ludGVyIGV2ZW50cyBhbmQgZmlyZSBhIGNsaWNrIGFmdGVyXG4gICAgICAvL2V2ZXJ5IHBvaW50ZXJ1cCByZWdhcmRsZXNzIG9mIHdoZXRoZXIgcG9pbnRlcnVwIGlzIG9uIHNhbWUgc2NyZWVuIGxvY2F0aW9uIGFzIHBvaW50ZXJkb3duIG9yIG5vdFxuICAgICAgc2xpZGVyLnZpZXdwb3J0Lm9uKCdjbGljaycsICcuYnhzbGlkZXIgYScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKHNsaWRlci52aWV3cG9ydC5oYXNDbGFzcygnY2xpY2stZGlzYWJsZWQnKSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBzbGlkZXIudmlld3BvcnQucmVtb3ZlQ2xhc3MoJ2NsaWNrLWRpc2FibGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBcInRvdWNoc3RhcnRcIlxuICAgICAqXG4gICAgICogQHBhcmFtIGUgKGV2ZW50KVxuICAgICAqICAtIERPTSBldmVudCBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgb25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgLy8gd2F0Y2ggb25seSBmb3IgbGVmdCBtb3VzZSwgdG91Y2ggY29udGFjdCBhbmQgcGVuIGNvbnRhY3RcbiAgICAgIC8vIHRvdWNoc3RhcnQgZXZlbnQgb2JqZWN0IGRvZXNuYHQgaGF2ZSBidXR0b24gcHJvcGVydHlcbiAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0JyAmJiBlLmJ1dHRvbiAhPT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvL2Rpc2FibGUgc2xpZGVyIGNvbnRyb2xzIHdoaWxlIHVzZXIgaXMgaW50ZXJhY3Rpbmcgd2l0aCBzbGlkZXMgdG8gYXZvaWQgc2xpZGVyIGZyZWV6ZSB0aGF0IGhhcHBlbnMgb24gdG91Y2ggZGV2aWNlcyB3aGVuIGEgc2xpZGUgc3dpcGUgaGFwcGVucyBpbW1lZGlhdGVseSBhZnRlciBpbnRlcmFjdGluZyB3aXRoIHNsaWRlciBjb250cm9sc1xuICAgICAgc2xpZGVyLmNvbnRyb2xzLmVsLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuXG4gICAgICBpZiAoc2xpZGVyLndvcmtpbmcpIHtcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmVsLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcmVjb3JkIHRoZSBvcmlnaW5hbCBwb3NpdGlvbiB3aGVuIHRvdWNoIHN0YXJ0c1xuICAgICAgICBzbGlkZXIudG91Y2gub3JpZ2luYWxQb3MgPSBlbC5wb3NpdGlvbigpO1xuICAgICAgICB2YXIgb3JpZyA9IGUub3JpZ2luYWxFdmVudCxcbiAgICAgICAgdG91Y2hQb2ludHMgPSAodHlwZW9mIG9yaWcuY2hhbmdlZFRvdWNoZXMgIT09ICd1bmRlZmluZWQnKSA/IG9yaWcuY2hhbmdlZFRvdWNoZXMgOiBbb3JpZ107XG5cdFx0dmFyIGNocm9tZVBvaW50ZXJFdmVudHMgPSB0eXBlb2YgUG9pbnRlckV2ZW50ID09PSAnZnVuY3Rpb24nOyBcblx0XHRpZiAoY2hyb21lUG9pbnRlckV2ZW50cykgeyBcblx0XHRcdGlmIChvcmlnLnBvaW50ZXJJZCA9PT0gdW5kZWZpbmVkKSB7IFxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9IFxuXHRcdH1cbiAgICAgICAgLy8gcmVjb3JkIHRoZSBzdGFydGluZyB0b3VjaCB4LCB5IGNvb3JkaW5hdGVzXG4gICAgICAgIHNsaWRlci50b3VjaC5zdGFydC54ID0gdG91Y2hQb2ludHNbMF0ucGFnZVg7XG4gICAgICAgIHNsaWRlci50b3VjaC5zdGFydC55ID0gdG91Y2hQb2ludHNbMF0ucGFnZVk7XG5cbiAgICAgICAgaWYgKHNsaWRlci52aWV3cG9ydC5nZXQoMCkuc2V0UG9pbnRlckNhcHR1cmUpIHtcbiAgICAgICAgICBzbGlkZXIucG9pbnRlcklkID0gb3JpZy5wb2ludGVySWQ7XG4gICAgICAgICAgc2xpZGVyLnZpZXdwb3J0LmdldCgwKS5zZXRQb2ludGVyQ2FwdHVyZShzbGlkZXIucG9pbnRlcklkKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzdG9yZSBvcmlnaW5hbCBldmVudCBkYXRhIGZvciBjbGljayBmaXhhdGlvblxuICAgICAgICBzbGlkZXIub3JpZ2luYWxDbGlja1RhcmdldCA9IG9yaWcub3JpZ2luYWxUYXJnZXQgfHwgb3JpZy50YXJnZXQ7XG4gICAgICAgIHNsaWRlci5vcmlnaW5hbENsaWNrQnV0dG9uID0gb3JpZy5idXR0b247XG4gICAgICAgIHNsaWRlci5vcmlnaW5hbENsaWNrQnV0dG9ucyA9IG9yaWcuYnV0dG9ucztcbiAgICAgICAgc2xpZGVyLm9yaWdpbmFsRXZlbnRUeXBlID0gb3JpZy50eXBlO1xuICAgICAgICAvLyBhdCB0aGlzIG1vbWVudCB3ZSBkb25gdCBrbm93IHdoYXQgaXQgaXMgY2xpY2sgb3Igc3dpcGVcbiAgICAgICAgc2xpZGVyLmhhc01vdmUgPSBmYWxzZTtcbiAgICAgICAgLy8gb24gYSBcInRvdWNobW92ZVwiIGV2ZW50IHRvIHRoZSB2aWV3cG9ydFxuICAgICAgICBzbGlkZXIudmlld3BvcnQub24oJ3RvdWNobW92ZSBNU1BvaW50ZXJNb3ZlIHBvaW50ZXJtb3ZlJywgb25Ub3VjaE1vdmUpO1xuICAgICAgICAvLyBvbiBhIFwidG91Y2hlbmRcIiBldmVudCB0byB0aGUgdmlld3BvcnRcbiAgICAgICAgc2xpZGVyLnZpZXdwb3J0Lm9uKCd0b3VjaGVuZCBNU1BvaW50ZXJVcCBwb2ludGVydXAnLCBvblRvdWNoRW5kKTtcbiAgICAgICAgc2xpZGVyLnZpZXdwb3J0Lm9uKCdNU1BvaW50ZXJDYW5jZWwgcG9pbnRlcmNhbmNlbCcsIG9uUG9pbnRlckNhbmNlbCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhbmNlbCBQb2ludGVyIGZvciBXaW5kb3dzIFBob25lXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSAoZXZlbnQpXG4gICAgICogIC0gRE9NIGV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIHZhciBvblBvaW50ZXJDYW5jZWwgPSBmdW5jdGlvbihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvKiBvblBvaW50ZXJDYW5jZWwgaGFuZGxlciBpcyBuZWVkZWQgdG8gZGVhbCB3aXRoIHNpdHVhdGlvbnMgd2hlbiBhIHRvdWNoZW5kXG4gICAgICBkb2Vzbid0IGZpcmUgYWZ0ZXIgYSB0b3VjaHN0YXJ0ICh0aGlzIGhhcHBlbnMgb24gd2luZG93cyBwaG9uZXMgb25seSkgKi9cbiAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkoc2xpZGVyLnRvdWNoLm9yaWdpbmFsUG9zLmxlZnQsICdyZXNldCcsIDApO1xuXG4gICAgICAvL3JlbW92ZSBoYW5kbGVyc1xuICAgICAgc2xpZGVyLmNvbnRyb2xzLmVsLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgc2xpZGVyLnZpZXdwb3J0Lm9mZignTVNQb2ludGVyQ2FuY2VsIHBvaW50ZXJjYW5jZWwnLCBvblBvaW50ZXJDYW5jZWwpO1xuICAgICAgc2xpZGVyLnZpZXdwb3J0Lm9mZigndG91Y2htb3ZlIE1TUG9pbnRlck1vdmUgcG9pbnRlcm1vdmUnLCBvblRvdWNoTW92ZSk7XG4gICAgICBzbGlkZXIudmlld3BvcnQub2ZmKCd0b3VjaGVuZCBNU1BvaW50ZXJVcCBwb2ludGVydXAnLCBvblRvdWNoRW5kKTtcbiAgICAgIGlmIChzbGlkZXIudmlld3BvcnQuZ2V0KDApLnJlbGVhc2VQb2ludGVyQ2FwdHVyZSkge1xuICAgICAgICBzbGlkZXIudmlld3BvcnQuZ2V0KDApLnJlbGVhc2VQb2ludGVyQ2FwdHVyZShzbGlkZXIucG9pbnRlcklkKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciBmb3IgXCJ0b3VjaG1vdmVcIlxuICAgICAqXG4gICAgICogQHBhcmFtIGUgKGV2ZW50KVxuICAgICAqICAtIERPTSBldmVudCBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgb25Ub3VjaE1vdmUgPSBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgb3JpZyA9IGUub3JpZ2luYWxFdmVudCxcbiAgICAgIHRvdWNoUG9pbnRzID0gKHR5cGVvZiBvcmlnLmNoYW5nZWRUb3VjaGVzICE9PSAndW5kZWZpbmVkJykgPyBvcmlnLmNoYW5nZWRUb3VjaGVzIDogW29yaWddLFxuICAgICAgLy8gaWYgc2Nyb2xsaW5nIG9uIHkgYXhpcywgZG8gbm90IHByZXZlbnQgZGVmYXVsdFxuICAgICAgeE1vdmVtZW50ID0gTWF0aC5hYnModG91Y2hQb2ludHNbMF0ucGFnZVggLSBzbGlkZXIudG91Y2guc3RhcnQueCksXG4gICAgICB5TW92ZW1lbnQgPSBNYXRoLmFicyh0b3VjaFBvaW50c1swXS5wYWdlWSAtIHNsaWRlci50b3VjaC5zdGFydC55KSxcbiAgICAgIHZhbHVlID0gMCxcbiAgICAgIGNoYW5nZSA9IDA7XG4gICAgICAvLyB0aGlzIGlzIHN3aXBlXG4gICAgICBzbGlkZXIuaGFzTW92ZSA9IHRydWU7XG5cbiAgICAgIC8vIHggYXhpcyBzd2lwZVxuICAgICAgaWYgKCh4TW92ZW1lbnQgKiAzKSA+IHlNb3ZlbWVudCAmJiBzbGlkZXIuc2V0dGluZ3MucHJldmVudERlZmF1bHRTd2lwZVgpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8geSBheGlzIHN3aXBlXG4gICAgICB9IGVsc2UgaWYgKCh5TW92ZW1lbnQgKiAzKSA+IHhNb3ZlbWVudCAmJiBzbGlkZXIuc2V0dGluZ3MucHJldmVudERlZmF1bHRTd2lwZVkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNobW92ZScpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgIT09ICdmYWRlJyAmJiBzbGlkZXIuc2V0dGluZ3Mub25lVG9PbmVUb3VjaCkge1xuICAgICAgICAvLyBpZiBob3Jpem9udGFsLCBkcmFnIGFsb25nIHggYXhpc1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIGNoYW5nZSA9IHRvdWNoUG9pbnRzWzBdLnBhZ2VYIC0gc2xpZGVyLnRvdWNoLnN0YXJ0Lng7XG4gICAgICAgICAgdmFsdWUgPSBzbGlkZXIudG91Y2gub3JpZ2luYWxQb3MubGVmdCArIGNoYW5nZTtcbiAgICAgICAgLy8gaWYgdmVydGljYWwsIGRyYWcgYWxvbmcgeSBheGlzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlID0gdG91Y2hQb2ludHNbMF0ucGFnZVkgLSBzbGlkZXIudG91Y2guc3RhcnQueTtcbiAgICAgICAgICB2YWx1ZSA9IHNsaWRlci50b3VjaC5vcmlnaW5hbFBvcy50b3AgKyBjaGFuZ2U7XG4gICAgICAgIH1cbiAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eSh2YWx1ZSwgJ3Jlc2V0JywgMCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXIgZm9yIFwidG91Y2hlbmRcIlxuICAgICAqXG4gICAgICogQHBhcmFtIGUgKGV2ZW50KVxuICAgICAqICAtIERPTSBldmVudCBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgb25Ub3VjaEVuZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHNsaWRlci52aWV3cG9ydC5vZmYoJ3RvdWNobW92ZSBNU1BvaW50ZXJNb3ZlIHBvaW50ZXJtb3ZlJywgb25Ub3VjaE1vdmUpO1xuICAgICAgLy9lbmFibGUgc2xpZGVyIGNvbnRyb2xzIGFzIHNvb24gYXMgdXNlciBzdG9wcyBpbnRlcmFjaW5nIHdpdGggc2xpZGVzXG4gICAgICBzbGlkZXIuY29udHJvbHMuZWwucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICB2YXIgb3JpZyAgICA9IGUub3JpZ2luYWxFdmVudCxcbiAgICAgIHRvdWNoUG9pbnRzID0gKHR5cGVvZiBvcmlnLmNoYW5nZWRUb3VjaGVzICE9PSAndW5kZWZpbmVkJykgPyBvcmlnLmNoYW5nZWRUb3VjaGVzIDogW29yaWddLFxuICAgICAgdmFsdWUgICAgICAgPSAwLFxuICAgICAgZGlzdGFuY2UgICAgPSAwO1xuICAgICAgLy8gcmVjb3JkIGVuZCB4LCB5IHBvc2l0aW9uc1xuICAgICAgc2xpZGVyLnRvdWNoLmVuZC54ID0gdG91Y2hQb2ludHNbMF0ucGFnZVg7XG4gICAgICBzbGlkZXIudG91Y2guZW5kLnkgPSB0b3VjaFBvaW50c1swXS5wYWdlWTtcbiAgICAgIC8vIGlmIGZhZGUgbW9kZSwgY2hlY2sgaWYgYWJzb2x1dGUgeCBkaXN0YW5jZSBjbGVhcnMgdGhlIHRocmVzaG9sZFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnZmFkZScpIHtcbiAgICAgICAgZGlzdGFuY2UgPSBNYXRoLmFicyhzbGlkZXIudG91Y2guc3RhcnQueCAtIHNsaWRlci50b3VjaC5lbmQueCk7XG4gICAgICAgIGlmIChkaXN0YW5jZSA+PSBzbGlkZXIuc2V0dGluZ3Muc3dpcGVUaHJlc2hvbGQpIHtcbiAgICAgICAgICBpZiAoc2xpZGVyLnRvdWNoLnN0YXJ0LnggPiBzbGlkZXIudG91Y2guZW5kLngpIHtcbiAgICAgICAgICAgIGVsLmdvVG9OZXh0U2xpZGUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuZ29Ub1ByZXZTbGlkZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbC5zdG9wQXV0bygpO1xuICAgICAgICB9XG4gICAgICAvLyBub3QgZmFkZSBtb2RlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjYWxjdWxhdGUgZGlzdGFuY2UgYW5kIGVsJ3MgYW5pbWF0ZSBwcm9wZXJ0eVxuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIGRpc3RhbmNlID0gc2xpZGVyLnRvdWNoLmVuZC54IC0gc2xpZGVyLnRvdWNoLnN0YXJ0Lng7XG4gICAgICAgICAgdmFsdWUgPSBzbGlkZXIudG91Y2gub3JpZ2luYWxQb3MubGVmdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaXN0YW5jZSA9IHNsaWRlci50b3VjaC5lbmQueSAtIHNsaWRlci50b3VjaC5zdGFydC55O1xuICAgICAgICAgIHZhbHVlID0gc2xpZGVyLnRvdWNoLm9yaWdpbmFsUG9zLnRvcDtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBub3QgaW5maW5pdGUgbG9vcCBhbmQgZmlyc3QgLyBsYXN0IHNsaWRlLCBkbyBub3QgYXR0ZW1wdCBhIHNsaWRlIHRyYW5zaXRpb25cbiAgICAgICAgaWYgKCFzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wICYmICgoc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gMCAmJiBkaXN0YW5jZSA+IDApIHx8IChzbGlkZXIuYWN0aXZlLmxhc3QgJiYgZGlzdGFuY2UgPCAwKSkpIHtcbiAgICAgICAgICBzZXRQb3NpdGlvblByb3BlcnR5KHZhbHVlLCAncmVzZXQnLCAyMDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGNoZWNrIGlmIGRpc3RhbmNlIGNsZWFycyB0aHJlc2hvbGRcbiAgICAgICAgICBpZiAoTWF0aC5hYnMoZGlzdGFuY2UpID49IHNsaWRlci5zZXR0aW5ncy5zd2lwZVRocmVzaG9sZCkge1xuICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDwgMCkge1xuICAgICAgICAgICAgICBlbC5nb1RvTmV4dFNsaWRlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbC5nb1RvUHJldlNsaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbC5zdG9wQXV0bygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBlbC5hbmltYXRlKHByb3BlcnR5LCAyMDApO1xuICAgICAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eSh2YWx1ZSwgJ3Jlc2V0JywgMjAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNsaWRlci52aWV3cG9ydC5vZmYoJ3RvdWNoZW5kIE1TUG9pbnRlclVwIHBvaW50ZXJ1cCcsIG9uVG91Y2hFbmQpO1xuXG4gICAgICBpZiAoc2xpZGVyLnZpZXdwb3J0LmdldCgwKS5yZWxlYXNlUG9pbnRlckNhcHR1cmUpIHtcbiAgICAgICAgc2xpZGVyLnZpZXdwb3J0LmdldCgwKS5yZWxlYXNlUG9pbnRlckNhcHR1cmUoc2xpZGVyLnBvaW50ZXJJZCk7XG4gICAgICB9XG4gICAgICAvLyBpZiBzbGlkZXIgaGFkIHN3aXBlIHdpdGggbGVmdCBtb3VzZSwgdG91Y2ggY29udGFjdCBhbmQgcGVuIGNvbnRhY3RcbiAgICAgIGlmIChzbGlkZXIuaGFzTW92ZSA9PT0gZmFsc2UgJiYgKHNsaWRlci5vcmlnaW5hbENsaWNrQnV0dG9uID09PSAwIHx8IHNsaWRlci5vcmlnaW5hbEV2ZW50VHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSkge1xuICAgICAgICAvLyB0cmlnZ2VyIGNsaWNrIGV2ZW50IChmaXggZm9yIEZpcmVmb3g1OSBhbmQgUG9pbnRlckV2ZW50IHN0YW5kYXJkIGNvbXBhdGliaWxpdHkpXG4gICAgICAgICQoc2xpZGVyLm9yaWdpbmFsQ2xpY2tUYXJnZXQpLnRyaWdnZXIoe1xuICAgICAgICAgIHR5cGU6ICdjbGljaycsXG4gICAgICAgICAgYnV0dG9uOiBzbGlkZXIub3JpZ2luYWxDbGlja0J1dHRvbixcbiAgICAgICAgICBidXR0b25zOiBzbGlkZXIub3JpZ2luYWxDbGlja0J1dHRvbnNcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFdpbmRvdyByZXNpemUgZXZlbnQgY2FsbGJhY2tcbiAgICAgKi9cbiAgICB2YXIgcmVzaXplV2luZG93ID0gZnVuY3Rpb24oZSkge1xuICAgICAgLy8gZG9uJ3QgZG8gYW55dGhpbmcgaWYgc2xpZGVyIGlzbid0IGluaXRpYWxpemVkLlxuICAgICAgaWYgKCFzbGlkZXIuaW5pdGlhbGl6ZWQpIHsgcmV0dXJuOyB9XG4gICAgICAvLyBEZWxheSBpZiBzbGlkZXIgd29ya2luZy5cbiAgICAgIGlmIChzbGlkZXIud29ya2luZykge1xuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChyZXNpemVXaW5kb3csIDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGdldCB0aGUgbmV3IHdpbmRvdyBkaW1lbnMgKGFnYWluLCB0aGFuayB5b3UgSUUpXG4gICAgICAgIHZhciB3aW5kb3dXaWR0aE5ldyA9ICQod2luZG93KS53aWR0aCgpLFxuICAgICAgICB3aW5kb3dIZWlnaHROZXcgPSAkKHdpbmRvdykuaGVpZ2h0KCk7XG4gICAgICAgIC8vIG1ha2Ugc3VyZSB0aGF0IGl0IGlzIGEgdHJ1ZSB3aW5kb3cgcmVzaXplXG4gICAgICAgIC8vICp3ZSBtdXN0IGNoZWNrIHRoaXMgYmVjYXVzZSBvdXIgZGlub3NhdXIgZnJpZW5kIElFIGZpcmVzIGEgd2luZG93IHJlc2l6ZSBldmVudCB3aGVuIGNlcnRhaW4gRE9NIGVsZW1lbnRzXG4gICAgICAgIC8vIGFyZSByZXNpemVkLiBDYW4geW91IGp1c3QgZGllIGFscmVhZHk/KlxuICAgICAgICBpZiAod2luZG93V2lkdGggIT09IHdpbmRvd1dpZHRoTmV3IHx8IHdpbmRvd0hlaWdodCAhPT0gd2luZG93SGVpZ2h0TmV3KSB7XG4gICAgICAgICAgLy8gc2V0IHRoZSBuZXcgd2luZG93IGRpbWVuc1xuICAgICAgICAgIHdpbmRvd1dpZHRoID0gd2luZG93V2lkdGhOZXc7XG4gICAgICAgICAgd2luZG93SGVpZ2h0ID0gd2luZG93SGVpZ2h0TmV3O1xuICAgICAgICAgIC8vIHVwZGF0ZSBhbGwgZHluYW1pYyBlbGVtZW50c1xuICAgICAgICAgIGVsLnJlZHJhd1NsaWRlcigpO1xuICAgICAgICAgIC8vIENhbGwgdXNlciByZXNpemUgaGFuZGxlclxuICAgICAgICAgIHNsaWRlci5zZXR0aW5ncy5vblNsaWRlclJlc2l6ZS5jYWxsKGVsLCBzbGlkZXIuYWN0aXZlLmluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIGFyaWEtaGlkZGVuPXRydWUgYXR0cmlidXRlIHRvIGVhY2ggZWxlbWVudFxuICAgICAqXG4gICAgICogQHBhcmFtIHN0YXJ0VmlzaWJsZUluZGV4IChpbnQpXG4gICAgICogIC0gdGhlIGZpcnN0IHZpc2libGUgZWxlbWVudCdzIGluZGV4XG4gICAgICovXG4gICAgdmFyIGFwcGx5QXJpYUhpZGRlbkF0dHJpYnV0ZXMgPSBmdW5jdGlvbihzdGFydFZpc2libGVJbmRleCkge1xuICAgICAgdmFyIG51bWJlck9mU2xpZGVzU2hvd2luZyA9IGdldE51bWJlclNsaWRlc1Nob3dpbmcoKTtcbiAgICAgIC8vIG9ubHkgYXBwbHkgYXR0cmlidXRlcyBpZiB0aGUgc2V0dGluZyBpcyBlbmFibGVkIGFuZCBub3QgaW4gdGlja2VyIG1vZGVcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXJpYUhpZGRlbiAmJiAhc2xpZGVyLnNldHRpbmdzLnRpY2tlcikge1xuICAgICAgICAvLyBhZGQgYXJpYS1oaWRkZW49dHJ1ZSB0byBhbGwgZWxlbWVudHNcbiAgICAgICAgc2xpZGVyLmNoaWxkcmVuLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgICAgLy8gZ2V0IHRoZSB2aXNpYmxlIGVsZW1lbnRzIGFuZCBjaGFuZ2UgdG8gYXJpYS1oaWRkZW49ZmFsc2VcbiAgICAgICAgc2xpZGVyLmNoaWxkcmVuLnNsaWNlKHN0YXJ0VmlzaWJsZUluZGV4LCBzdGFydFZpc2libGVJbmRleCArIG51bWJlck9mU2xpZGVzU2hvd2luZykuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbmRleCBhY2NvcmRpbmcgdG8gcHJlc2VudCBwYWdlIHJhbmdlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2xpZGVPbmRleCAoaW50KVxuICAgICAqICAtIHRoZSBkZXNpcmVkIHNsaWRlIGluZGV4XG4gICAgICovXG4gICAgdmFyIHNldFNsaWRlSW5kZXggPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XG4gICAgICBpZiAoc2xpZGVJbmRleCA8IDApIHtcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5pbmZpbml0ZUxvb3ApIHtcbiAgICAgICAgICByZXR1cm4gZ2V0UGFnZXJRdHkoKSAtIDE7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAvL3dlIGRvbid0IGdvIHRvIHVuZGVmaW5lZCBzbGlkZXNcbiAgICAgICAgICByZXR1cm4gc2xpZGVyLmFjdGl2ZS5pbmRleDtcbiAgICAgICAgfVxuICAgICAgLy8gaWYgc2xpZGVJbmRleCBpcyBncmVhdGVyIHRoYW4gY2hpbGRyZW4gbGVuZ3RoLCBzZXQgYWN0aXZlIGluZGV4IHRvIDAgKHRoaXMgaGFwcGVucyBkdXJpbmcgaW5maW5pdGUgbG9vcClcbiAgICAgIH0gZWxzZSBpZiAoc2xpZGVJbmRleCA+PSBnZXRQYWdlclF0eSgpKSB7XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wKSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy93ZSBkb24ndCBtb3ZlIHRvIHVuZGVmaW5lZCBwYWdlc1xuICAgICAgICAgIHJldHVybiBzbGlkZXIuYWN0aXZlLmluZGV4O1xuICAgICAgICB9XG4gICAgICAvLyBzZXQgYWN0aXZlIGluZGV4IHRvIHJlcXVlc3RlZCBzbGlkZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNsaWRlSW5kZXg7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICogPSBQVUJMSUMgRlVOQ1RJT05TXG4gICAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIHNsaWRlIHRyYW5zaXRpb24gdG8gdGhlIHNwZWNpZmllZCBzbGlkZVxuICAgICAqXG4gICAgICogQHBhcmFtIHNsaWRlSW5kZXggKGludClcbiAgICAgKiAgLSB0aGUgZGVzdGluYXRpb24gc2xpZGUncyBpbmRleCAoemVyby1iYXNlZClcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkaXJlY3Rpb24gKHN0cmluZylcbiAgICAgKiAgLSBJTlRFUk5BTCBVU0UgT05MWSAtIHRoZSBkaXJlY3Rpb24gb2YgdHJhdmVsIChcInByZXZcIiAvIFwibmV4dFwiKVxuICAgICAqL1xuICAgIGVsLmdvVG9TbGlkZSA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgsIGRpcmVjdGlvbikge1xuICAgICAgLy8gb25TbGlkZUJlZm9yZSwgb25TbGlkZU5leHQsIG9uU2xpZGVQcmV2IGNhbGxiYWNrc1xuICAgICAgLy8gQWxsb3cgdHJhbnNpdGlvbiBjYW5jZWxpbmcgYmFzZWQgb24gcmV0dXJuZWQgdmFsdWVcbiAgICAgIHZhciBwZXJmb3JtVHJhbnNpdGlvbiA9IHRydWUsXG4gICAgICBtb3ZlQnkgPSAwLFxuICAgICAgcG9zaXRpb24gPSB7bGVmdDogMCwgdG9wOiAwfSxcbiAgICAgIGxhc3RDaGlsZCA9IG51bGwsXG4gICAgICBsYXN0U2hvd2luZ0luZGV4LCBlcSwgdmFsdWUsIHJlcXVlc3RFbDtcbiAgICAgIC8vIHN0b3JlIHRoZSBvbGQgaW5kZXhcbiAgICAgIHNsaWRlci5vbGRJbmRleCA9IHNsaWRlci5hY3RpdmUuaW5kZXg7XG4gICAgICAvL3NldCBuZXcgaW5kZXhcbiAgICAgIHNsaWRlci5hY3RpdmUuaW5kZXggPSBzZXRTbGlkZUluZGV4KHNsaWRlSW5kZXgpO1xuXG4gICAgICAvLyBpZiBwbHVnaW4gaXMgY3VycmVudGx5IGluIG1vdGlvbiwgaWdub3JlIHJlcXVlc3RcbiAgICAgIGlmIChzbGlkZXIud29ya2luZyB8fCBzbGlkZXIuYWN0aXZlLmluZGV4ID09PSBzbGlkZXIub2xkSW5kZXgpIHsgcmV0dXJuOyB9XG4gICAgICAvLyBkZWNsYXJlIHRoYXQgcGx1Z2luIGlzIGluIG1vdGlvblxuICAgICAgc2xpZGVyLndvcmtpbmcgPSB0cnVlO1xuXG4gICAgICBwZXJmb3JtVHJhbnNpdGlvbiA9IHNsaWRlci5zZXR0aW5ncy5vblNsaWRlQmVmb3JlLmNhbGwoZWwsIHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuYWN0aXZlLmluZGV4KSwgc2xpZGVyLm9sZEluZGV4LCBzbGlkZXIuYWN0aXZlLmluZGV4KTtcblxuICAgICAgLy8gSWYgdHJhbnNpdGlvbnMgY2FuY2VsZWQsIHJlc2V0IGFuZCByZXR1cm5cbiAgICAgIGlmICh0eXBlb2YgKHBlcmZvcm1UcmFuc2l0aW9uKSAhPT0gJ3VuZGVmaW5lZCcgJiYgIXBlcmZvcm1UcmFuc2l0aW9uKSB7XG4gICAgICAgIHNsaWRlci5hY3RpdmUuaW5kZXggPSBzbGlkZXIub2xkSW5kZXg7IC8vIHJlc3RvcmUgb2xkIGluZGV4XG4gICAgICAgIHNsaWRlci53b3JraW5nID0gZmFsc2U7IC8vIGlzIG5vdCBpbiBtb3Rpb25cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgLy8gUHJldmVudCBjYW5jZWxpbmcgaW4gZnV0dXJlIGZ1bmN0aW9ucyBvciBsYWNrIHRoZXJlLW9mIGZyb20gbmVnYXRpbmcgcHJldmlvdXMgY29tbWFuZHMgdG8gY2FuY2VsXG4gICAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLm9uU2xpZGVOZXh0LmNhbGwoZWwsIHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuYWN0aXZlLmluZGV4KSwgc2xpZGVyLm9sZEluZGV4LCBzbGlkZXIuYWN0aXZlLmluZGV4KSkge1xuICAgICAgICAgIHBlcmZvcm1UcmFuc2l0aW9uID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgICAgLy8gUHJldmVudCBjYW5jZWxpbmcgaW4gZnV0dXJlIGZ1bmN0aW9ucyBvciBsYWNrIHRoZXJlLW9mIGZyb20gbmVnYXRpbmcgcHJldmlvdXMgY29tbWFuZHMgdG8gY2FuY2VsXG4gICAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLm9uU2xpZGVQcmV2LmNhbGwoZWwsIHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuYWN0aXZlLmluZGV4KSwgc2xpZGVyLm9sZEluZGV4LCBzbGlkZXIuYWN0aXZlLmluZGV4KSkge1xuICAgICAgICAgIHBlcmZvcm1UcmFuc2l0aW9uID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gY2hlY2sgaWYgbGFzdCBzbGlkZVxuICAgICAgc2xpZGVyLmFjdGl2ZS5sYXN0ID0gc2xpZGVyLmFjdGl2ZS5pbmRleCA+PSBnZXRQYWdlclF0eSgpIC0gMTtcbiAgICAgIC8vIHVwZGF0ZSB0aGUgcGFnZXIgd2l0aCBhY3RpdmUgY2xhc3NcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MucGFnZXIgfHwgc2xpZGVyLnNldHRpbmdzLnBhZ2VyQ3VzdG9tKSB7IHVwZGF0ZVBhZ2VyQWN0aXZlKHNsaWRlci5hY3RpdmUuaW5kZXgpOyB9XG4gICAgICAvLyAvLyBjaGVjayBmb3IgZGlyZWN0aW9uIGNvbnRyb2wgdXBkYXRlXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmNvbnRyb2xzKSB7IHVwZGF0ZURpcmVjdGlvbkNvbnRyb2xzKCk7IH1cbiAgICAgIC8vIGlmIHNsaWRlciBpcyBzZXQgdG8gbW9kZTogXCJmYWRlXCJcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2ZhZGUnKSB7XG4gICAgICAgIC8vIGlmIGFkYXB0aXZlSGVpZ2h0IGlzIHRydWUgYW5kIG5leHQgaGVpZ2h0IGlzIGRpZmZlcmVudCBmcm9tIGN1cnJlbnQgaGVpZ2h0LCBhbmltYXRlIHRvIHRoZSBuZXcgaGVpZ2h0XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYWRhcHRpdmVIZWlnaHQgJiYgc2xpZGVyLnZpZXdwb3J0LmhlaWdodCgpICE9PSBnZXRWaWV3cG9ydEhlaWdodCgpKSB7XG4gICAgICAgICAgc2xpZGVyLnZpZXdwb3J0LmFuaW1hdGUoe2hlaWdodDogZ2V0Vmlld3BvcnRIZWlnaHQoKX0sIHNsaWRlci5zZXR0aW5ncy5hZGFwdGl2ZUhlaWdodFNwZWVkKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBmYWRlIG91dCB0aGUgdmlzaWJsZSBjaGlsZCBhbmQgcmVzZXQgaXRzIHotaW5kZXggdmFsdWVcbiAgICAgICAgc2xpZGVyLmNoaWxkcmVuLmZpbHRlcignOnZpc2libGUnKS5mYWRlT3V0KHNsaWRlci5zZXR0aW5ncy5zcGVlZCkuY3NzKHt6SW5kZXg6IDB9KTtcbiAgICAgICAgLy8gZmFkZSBpbiB0aGUgbmV3bHkgcmVxdWVzdGVkIHNsaWRlXG4gICAgICAgIHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuYWN0aXZlLmluZGV4KS5jc3MoJ3pJbmRleCcsIHNsaWRlci5zZXR0aW5ncy5zbGlkZVpJbmRleCArIDEpLmZhZGVJbihzbGlkZXIuc2V0dGluZ3Muc3BlZWQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICQodGhpcykuY3NzKCd6SW5kZXgnLCBzbGlkZXIuc2V0dGluZ3Muc2xpZGVaSW5kZXgpO1xuICAgICAgICAgIHVwZGF0ZUFmdGVyU2xpZGVUcmFuc2l0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgICAgLy8gc2xpZGVyIG1vZGUgaXMgbm90IFwiZmFkZVwiXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiBhZGFwdGl2ZUhlaWdodCBpcyB0cnVlIGFuZCBuZXh0IGhlaWdodCBpcyBkaWZmZXJlbnQgZnJvbSBjdXJyZW50IGhlaWdodCwgYW5pbWF0ZSB0byB0aGUgbmV3IGhlaWdodFxuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFkYXB0aXZlSGVpZ2h0ICYmIHNsaWRlci52aWV3cG9ydC5oZWlnaHQoKSAhPT0gZ2V0Vmlld3BvcnRIZWlnaHQoKSkge1xuICAgICAgICAgIHNsaWRlci52aWV3cG9ydC5hbmltYXRlKHtoZWlnaHQ6IGdldFZpZXdwb3J0SGVpZ2h0KCl9LCBzbGlkZXIuc2V0dGluZ3MuYWRhcHRpdmVIZWlnaHRTcGVlZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgY2Fyb3VzZWwgYW5kIG5vdCBpbmZpbml0ZSBsb29wXG4gICAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCAmJiBzbGlkZXIuY2Fyb3VzZWwgJiYgc2xpZGVyLmFjdGl2ZS5sYXN0KSB7XG4gICAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIC8vIGdldCB0aGUgbGFzdCBjaGlsZCBwb3NpdGlvblxuICAgICAgICAgICAgbGFzdENoaWxkID0gc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5jaGlsZHJlbi5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gbGFzdENoaWxkLnBvc2l0aW9uKCk7XG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBsYXN0IHNsaWRlXG4gICAgICAgICAgICBtb3ZlQnkgPSBzbGlkZXIudmlld3BvcnQud2lkdGgoKSAtIGxhc3RDaGlsZC5vdXRlcldpZHRoKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGdldCBsYXN0IHNob3dpbmcgaW5kZXggcG9zaXRpb25cbiAgICAgICAgICAgIGxhc3RTaG93aW5nSW5kZXggPSBzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcztcbiAgICAgICAgICAgIHBvc2l0aW9uID0gc2xpZGVyLmNoaWxkcmVuLmVxKGxhc3RTaG93aW5nSW5kZXgpLnBvc2l0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGhvcml6b250YWwgY2Fyb3VzZWwsIGdvaW5nIHByZXZpb3VzIHdoaWxlIG9uIGZpcnN0IHNsaWRlIChpbmZpbml0ZUxvb3AgbW9kZSlcbiAgICAgICAgfSBlbHNlIGlmIChzbGlkZXIuY2Fyb3VzZWwgJiYgc2xpZGVyLmFjdGl2ZS5sYXN0ICYmIGRpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgICAgLy8gZ2V0IHRoZSBsYXN0IGNoaWxkIHBvc2l0aW9uXG4gICAgICAgICAgZXEgPSBzbGlkZXIuc2V0dGluZ3MubW92ZVNsaWRlcyA9PT0gMSA/IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgLSBnZXRNb3ZlQnkoKSA6ICgoZ2V0UGFnZXJRdHkoKSAtIDEpICogZ2V0TW92ZUJ5KCkpIC0gKHNsaWRlci5jaGlsZHJlbi5sZW5ndGggLSBzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzKTtcbiAgICAgICAgICBsYXN0Q2hpbGQgPSBlbC5jaGlsZHJlbignLmJ4LWNsb25lJykuZXEoZXEpO1xuICAgICAgICAgIHBvc2l0aW9uID0gbGFzdENoaWxkLnBvc2l0aW9uKCk7XG4gICAgICAgIC8vIGlmIGluZmluaXRlIGxvb3AgYW5kIFwiTmV4dFwiIGlzIGNsaWNrZWQgb24gdGhlIGxhc3Qgc2xpZGVcbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICduZXh0JyAmJiBzbGlkZXIuYWN0aXZlLmluZGV4ID09PSAwKSB7XG4gICAgICAgICAgLy8gZ2V0IHRoZSBsYXN0IGNsb25lIHBvc2l0aW9uXG4gICAgICAgICAgcG9zaXRpb24gPSBlbC5maW5kKCc+IC5ieC1jbG9uZScpLmVxKHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMpLnBvc2l0aW9uKCk7XG4gICAgICAgICAgc2xpZGVyLmFjdGl2ZS5sYXN0ID0gZmFsc2U7XG4gICAgICAgIC8vIG5vcm1hbCBub24temVybyByZXF1ZXN0c1xuICAgICAgICB9IGVsc2UgaWYgKHNsaWRlSW5kZXggPj0gMCkge1xuICAgICAgICAgIC8vcGFyc2VJbnQgaXMgYXBwbGllZCB0byBhbGxvdyBmbG9hdHMgZm9yIHNsaWRlcy9wYWdlXG4gICAgICAgICAgcmVxdWVzdEVsID0gc2xpZGVJbmRleCAqIHBhcnNlSW50KGdldE1vdmVCeSgpKTtcbiAgICAgICAgICBwb3NpdGlvbiA9IHNsaWRlci5jaGlsZHJlbi5lcShyZXF1ZXN0RWwpLnBvc2l0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBJZiB0aGUgcG9zaXRpb24gZG9lc24ndCBleGlzdFxuICAgICAgICAgKiAoZS5nLiBpZiB5b3UgZGVzdHJveSB0aGUgc2xpZGVyIG9uIGEgbmV4dCBjbGljayksXG4gICAgICAgICAqIGl0IGRvZXNuJ3QgdGhyb3cgYW4gZXJyb3IuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodHlwZW9mIChwb3NpdGlvbikgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdmFsdWUgPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gLShwb3NpdGlvbi5sZWZ0IC0gbW92ZUJ5KSA6IC1wb3NpdGlvbi50b3A7XG4gICAgICAgICAgLy8gcGx1Z2luIHZhbHVlcyB0byBiZSBhbmltYXRlZFxuICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkodmFsdWUsICdzbGlkZScsIHNsaWRlci5zZXR0aW5ncy5zcGVlZCk7XG4gICAgICAgIH1cbiAgICAgICAgc2xpZGVyLndvcmtpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXJpYUhpZGRlbikgeyBhcHBseUFyaWFIaWRkZW5BdHRyaWJ1dGVzKHNsaWRlci5hY3RpdmUuaW5kZXggKiBnZXRNb3ZlQnkoKSk7IH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNpdGlvbnMgdG8gdGhlIG5leHQgc2xpZGUgaW4gdGhlIHNob3dcbiAgICAgKi9cbiAgICBlbC5nb1RvTmV4dFNsaWRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBpZiBpbmZpbml0ZUxvb3AgaXMgZmFsc2UgYW5kIGxhc3QgcGFnZSBpcyBzaG93aW5nLCBkaXNyZWdhcmQgY2FsbFxuICAgICAgaWYgKCFzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wICYmIHNsaWRlci5hY3RpdmUubGFzdCkgeyByZXR1cm47IH1cblx0ICBpZiAoc2xpZGVyLndvcmtpbmcgPT09IHRydWUpeyByZXR1cm4gO31cbiAgICAgIHZhciBwYWdlckluZGV4ID0gcGFyc2VJbnQoc2xpZGVyLmFjdGl2ZS5pbmRleCkgKyAxO1xuICAgICAgZWwuZ29Ub1NsaWRlKHBhZ2VySW5kZXgsICduZXh0Jyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zaXRpb25zIHRvIHRoZSBwcmV2IHNsaWRlIGluIHRoZSBzaG93XG4gICAgICovXG4gICAgZWwuZ29Ub1ByZXZTbGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaWYgaW5maW5pdGVMb29wIGlzIGZhbHNlIGFuZCBsYXN0IHBhZ2UgaXMgc2hvd2luZywgZGlzcmVnYXJkIGNhbGxcbiAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCAmJiBzbGlkZXIuYWN0aXZlLmluZGV4ID09PSAwKSB7IHJldHVybjsgfVxuXHQgIGlmIChzbGlkZXIud29ya2luZyA9PT0gdHJ1ZSl7IHJldHVybiA7fVxuICAgICAgdmFyIHBhZ2VySW5kZXggPSBwYXJzZUludChzbGlkZXIuYWN0aXZlLmluZGV4KSAtIDE7XG4gICAgICBlbC5nb1RvU2xpZGUocGFnZXJJbmRleCwgJ3ByZXYnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3RhcnRzIHRoZSBhdXRvIHNob3dcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcmV2ZW50Q29udHJvbFVwZGF0ZSAoYm9vbGVhbilcbiAgICAgKiAgLSBpZiB0cnVlLCBhdXRvIGNvbnRyb2xzIHN0YXRlIHdpbGwgbm90IGJlIHVwZGF0ZWRcbiAgICAgKi9cbiAgICBlbC5zdGFydEF1dG8gPSBmdW5jdGlvbihwcmV2ZW50Q29udHJvbFVwZGF0ZSkge1xuICAgICAgLy8gaWYgYW4gaW50ZXJ2YWwgYWxyZWFkeSBleGlzdHMsIGRpc3JlZ2FyZCBjYWxsXG4gICAgICBpZiAoc2xpZGVyLmludGVydmFsKSB7IHJldHVybjsgfVxuICAgICAgLy8gY3JlYXRlIGFuIGludGVydmFsXG4gICAgICBzbGlkZXIuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgICBlbC5nb1RvTmV4dFNsaWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWwuZ29Ub1ByZXZTbGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9LCBzbGlkZXIuc2V0dGluZ3MucGF1c2UpO1xuXHQgIC8vYWxsYmFjayBmb3Igd2hlbiB0aGUgYXV0byByb3RhdGUgc3RhdHVzIGNoYW5nZXNcblx0ICBzbGlkZXIuc2V0dGluZ3Mub25BdXRvQ2hhbmdlLmNhbGwoZWwsIHRydWUpO1xuICAgICAgLy8gaWYgYXV0byBjb250cm9scyBhcmUgZGlzcGxheWVkIGFuZCBwcmV2ZW50Q29udHJvbFVwZGF0ZSBpcyBub3QgdHJ1ZVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHMgJiYgcHJldmVudENvbnRyb2xVcGRhdGUgIT09IHRydWUpIHsgdXBkYXRlQXV0b0NvbnRyb2xzKCdzdG9wJyk7IH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3RvcHMgdGhlIGF1dG8gc2hvd1xuICAgICAqXG4gICAgICogQHBhcmFtIHByZXZlbnRDb250cm9sVXBkYXRlIChib29sZWFuKVxuICAgICAqICAtIGlmIHRydWUsIGF1dG8gY29udHJvbHMgc3RhdGUgd2lsbCBub3QgYmUgdXBkYXRlZFxuICAgICAqL1xuICAgIGVsLnN0b3BBdXRvID0gZnVuY3Rpb24ocHJldmVudENvbnRyb2xVcGRhdGUpIHtcbiAgICAgIC8vIGlmIHNsaWRlciBpcyBhdXRvIHBhdXNlZCwganVzdCBjbGVhciB0aGF0IHN0YXRlXG4gICAgICBpZiAoc2xpZGVyLmF1dG9QYXVzZWQpIHNsaWRlci5hdXRvUGF1c2VkID0gZmFsc2U7XG4gICAgICAvLyBpZiBubyBpbnRlcnZhbCBleGlzdHMsIGRpc3JlZ2FyZCBjYWxsXG4gICAgICBpZiAoIXNsaWRlci5pbnRlcnZhbCkgeyByZXR1cm47IH1cbiAgICAgIC8vIGNsZWFyIHRoZSBpbnRlcnZhbFxuICAgICAgY2xlYXJJbnRlcnZhbChzbGlkZXIuaW50ZXJ2YWwpO1xuICAgICAgc2xpZGVyLmludGVydmFsID0gbnVsbDtcblx0ICAvL2FsbGJhY2sgZm9yIHdoZW4gdGhlIGF1dG8gcm90YXRlIHN0YXR1cyBjaGFuZ2VzXG5cdCAgc2xpZGVyLnNldHRpbmdzLm9uQXV0b0NoYW5nZS5jYWxsKGVsLCBmYWxzZSk7XG4gICAgICAvLyBpZiBhdXRvIGNvbnRyb2xzIGFyZSBkaXNwbGF5ZWQgYW5kIHByZXZlbnRDb250cm9sVXBkYXRlIGlzIG5vdCB0cnVlXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG9Db250cm9scyAmJiBwcmV2ZW50Q29udHJvbFVwZGF0ZSAhPT0gdHJ1ZSkgeyB1cGRhdGVBdXRvQ29udHJvbHMoJ3N0YXJ0Jyk7IH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjdXJyZW50IHNsaWRlIGluZGV4ICh6ZXJvLWJhc2VkKVxuICAgICAqL1xuICAgIGVsLmdldEN1cnJlbnRTbGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNsaWRlci5hY3RpdmUuaW5kZXg7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY3VycmVudCBzbGlkZSBlbGVtZW50XG4gICAgICovXG4gICAgZWwuZ2V0Q3VycmVudFNsaWRlRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuYWN0aXZlLmluZGV4KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHNsaWRlIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gaW5kZXggKGludClcbiAgICAgKiAgLSBUaGUgaW5kZXggKHplcm8tYmFzZWQpIG9mIHRoZSBlbGVtZW50IHlvdSB3YW50IHJldHVybmVkLlxuICAgICAqL1xuICAgIGVsLmdldFNsaWRlRWxlbWVudCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICByZXR1cm4gc2xpZGVyLmNoaWxkcmVuLmVxKGluZGV4KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBudW1iZXIgb2Ygc2xpZGVzIGluIHNob3dcbiAgICAgKi9cbiAgICBlbC5nZXRTbGlkZUNvdW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHNsaWRlci53b3JraW5nIHZhcmlhYmxlXG4gICAgICovXG4gICAgZWwuaXNXb3JraW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc2xpZGVyLndvcmtpbmc7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBhbGwgZHluYW1pYyBzbGlkZXIgZWxlbWVudHNcbiAgICAgKi9cbiAgICBlbC5yZWRyYXdTbGlkZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIHJlc2l6ZSBhbGwgY2hpbGRyZW4gaW4gcmF0aW8gdG8gbmV3IHNjcmVlbiBzaXplXG4gICAgICBzbGlkZXIuY2hpbGRyZW4uYWRkKGVsLmZpbmQoJy5ieC1jbG9uZScpKS5vdXRlcldpZHRoKGdldFNsaWRlV2lkdGgoKSk7XG4gICAgICAvLyBhZGp1c3QgdGhlIGhlaWdodFxuICAgICAgc2xpZGVyLnZpZXdwb3J0LmNzcygnaGVpZ2h0JywgZ2V0Vmlld3BvcnRIZWlnaHQoKSk7XG4gICAgICAvLyB1cGRhdGUgdGhlIHNsaWRlIHBvc2l0aW9uXG4gICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy50aWNrZXIpIHsgc2V0U2xpZGVQb3NpdGlvbigpOyB9XG4gICAgICAvLyBpZiBhY3RpdmUubGFzdCB3YXMgdHJ1ZSBiZWZvcmUgdGhlIHNjcmVlbiByZXNpemUsIHdlIHdhbnRcbiAgICAgIC8vIHRvIGtlZXAgaXQgbGFzdCBubyBtYXR0ZXIgd2hhdCBzY3JlZW4gc2l6ZSB3ZSBlbmQgb25cbiAgICAgIGlmIChzbGlkZXIuYWN0aXZlLmxhc3QpIHsgc2xpZGVyLmFjdGl2ZS5pbmRleCA9IGdldFBhZ2VyUXR5KCkgLSAxOyB9XG4gICAgICAvLyBpZiB0aGUgYWN0aXZlIGluZGV4IChwYWdlKSBubyBsb25nZXIgZXhpc3RzIGR1ZSB0byB0aGUgcmVzaXplLCBzaW1wbHkgc2V0IHRoZSBpbmRleCBhcyBsYXN0XG4gICAgICBpZiAoc2xpZGVyLmFjdGl2ZS5pbmRleCA+PSBnZXRQYWdlclF0eSgpKSB7IHNsaWRlci5hY3RpdmUubGFzdCA9IHRydWU7IH1cbiAgICAgIC8vIGlmIGEgcGFnZXIgaXMgYmVpbmcgZGlzcGxheWVkIGFuZCBhIGN1c3RvbSBwYWdlciBpcyBub3QgYmVpbmcgdXNlZCwgdXBkYXRlIGl0XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnBhZ2VyICYmICFzbGlkZXIuc2V0dGluZ3MucGFnZXJDdXN0b20pIHtcbiAgICAgICAgcG9wdWxhdGVQYWdlcigpO1xuICAgICAgICB1cGRhdGVQYWdlckFjdGl2ZShzbGlkZXIuYWN0aXZlLmluZGV4KTtcbiAgICAgIH1cbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXJpYUhpZGRlbikgeyBhcHBseUFyaWFIaWRkZW5BdHRyaWJ1dGVzKHNsaWRlci5hY3RpdmUuaW5kZXggKiBnZXRNb3ZlQnkoKSk7IH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveSB0aGUgY3VycmVudCBpbnN0YW5jZSBvZiB0aGUgc2xpZGVyIChyZXZlcnQgZXZlcnl0aGluZyBiYWNrIHRvIG9yaWdpbmFsIHN0YXRlKVxuICAgICAqL1xuICAgIGVsLmRlc3Ryb3lTbGlkZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGRvbid0IGRvIGFueXRoaW5nIGlmIHNsaWRlciBoYXMgYWxyZWFkeSBiZWVuIGRlc3Ryb3llZFxuICAgICAgaWYgKCFzbGlkZXIuaW5pdGlhbGl6ZWQpIHsgcmV0dXJuOyB9XG4gICAgICBzbGlkZXIuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICQoJy5ieC1jbG9uZScsIHRoaXMpLnJlbW92ZSgpO1xuICAgICAgc2xpZGVyLmNoaWxkcmVuLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmRhdGEoJ29yaWdTdHlsZScpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAkKHRoaXMpLmF0dHIoJ3N0eWxlJywgJCh0aGlzKS5kYXRhKCdvcmlnU3R5bGUnKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJCh0aGlzKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICgkKHRoaXMpLmRhdGEoJ29yaWdTdHlsZScpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5hdHRyKCdzdHlsZScsICQodGhpcykuZGF0YSgnb3JpZ1N0eWxlJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCh0aGlzKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICAgfVxuICAgICAgJCh0aGlzKS51bndyYXAoKS51bndyYXAoKTtcbiAgICAgIGlmIChzbGlkZXIuY29udHJvbHMuZWwpIHsgc2xpZGVyLmNvbnRyb2xzLmVsLnJlbW92ZSgpOyB9XG4gICAgICBpZiAoc2xpZGVyLmNvbnRyb2xzLm5leHQpIHsgc2xpZGVyLmNvbnRyb2xzLm5leHQucmVtb3ZlKCk7IH1cbiAgICAgIGlmIChzbGlkZXIuY29udHJvbHMucHJldikgeyBzbGlkZXIuY29udHJvbHMucHJldi5yZW1vdmUoKTsgfVxuICAgICAgaWYgKHNsaWRlci5wYWdlckVsICYmIHNsaWRlci5zZXR0aW5ncy5jb250cm9scyAmJiAhc2xpZGVyLnNldHRpbmdzLnBhZ2VyQ3VzdG9tKSB7IHNsaWRlci5wYWdlckVsLnJlbW92ZSgpOyB9XG4gICAgICAkKCcuYngtY2FwdGlvbicsIHRoaXMpLnJlbW92ZSgpO1xuICAgICAgaWYgKHNsaWRlci5jb250cm9scy5hdXRvRWwpIHsgc2xpZGVyLmNvbnRyb2xzLmF1dG9FbC5yZW1vdmUoKTsgfVxuICAgICAgY2xlYXJJbnRlcnZhbChzbGlkZXIuaW50ZXJ2YWwpO1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5yZXNwb25zaXZlKSB7ICQod2luZG93KS5vZmYoJ3Jlc2l6ZScsIHJlc2l6ZVdpbmRvdyk7IH1cbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3Mua2V5Ym9hcmRFbmFibGVkKSB7ICQoZG9jdW1lbnQpLm9mZigna2V5ZG93bicsIGtleVByZXNzKTsgfVxuICAgICAgLy9yZW1vdmUgc2VsZiByZWZlcmVuY2UgaW4gZGF0YVxuICAgICAgJCh0aGlzKS5yZW1vdmVEYXRhKCdieFNsaWRlcicpO1xuXHQgIC8vIHJlbW92ZSBnbG9iYWwgd2luZG93IGhhbmRsZXJzXG5cdCAgJCh3aW5kb3cpLm9mZignYmx1cicsIHdpbmRvd0JsdXJIYW5kbGVyKS5vZmYoJ2ZvY3VzJywgd2luZG93Rm9jdXNIYW5kbGVyKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVsb2FkIHRoZSBzbGlkZXIgKHJldmVydCBhbGwgRE9NIGNoYW5nZXMsIGFuZCByZS1pbml0aWFsaXplKVxuICAgICAqL1xuICAgIGVsLnJlbG9hZFNsaWRlciA9IGZ1bmN0aW9uKHNldHRpbmdzKSB7XG4gICAgICBpZiAoc2V0dGluZ3MgIT09IHVuZGVmaW5lZCkgeyBvcHRpb25zID0gc2V0dGluZ3M7IH1cbiAgICAgIGVsLmRlc3Ryb3lTbGlkZXIoKTtcbiAgICAgIGluaXQoKTtcbiAgICAgIC8vc3RvcmUgcmVmZXJlbmNlIHRvIHNlbGYgaW4gb3JkZXIgdG8gYWNjZXNzIHB1YmxpYyBmdW5jdGlvbnMgbGF0ZXJcbiAgICAgICQoZWwpLmRhdGEoJ2J4U2xpZGVyJywgdGhpcyk7XG4gICAgfTtcblxuICAgIGluaXQoKTtcblxuICAgICQoZWwpLmRhdGEoJ2J4U2xpZGVyJywgdGhpcyk7XG5cbiAgICAvLyByZXR1cm5zIHRoZSBjdXJyZW50IGpRdWVyeSBvYmplY3RcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxufSkoalF1ZXJ5KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNS43JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG4gIHZhciBmbnMgPSBleGVjKGRlZmluZWQsIFNZTUJPTCwgJydbS0VZXSk7XG4gIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgdmFyIHJ4Zm4gPSBmbnNbMV07XG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pKSB7XG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XG4gIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICB2YXIgUDtcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE4IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTtcbiIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuIiwiLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoKSB7XG4gIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICB9LCAkbWF0Y2hdO1xufSk7XG4iLCIvLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSkge1xuICAvLyAyMS4xLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpXG4gIHJldHVybiBbZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgfSwgJHJlcGxhY2VdO1xufSk7XG4iLCIvLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoKSB7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJHNlYXJjaF07XG59KTtcbiIsIi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xuICB2YXIgX3NwbGl0ID0gJHNwbGl0O1xuICB2YXIgJHB1c2ggPSBbXS5wdXNoO1xuICB2YXIgJFNQTElUID0gJ3NwbGl0JztcbiAgdmFyIExFTkdUSCA9ICdsZW5ndGgnO1xuICB2YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIHZhciBOUENHID0gLygpPz8vLmV4ZWMoJycpWzFdID09PSB1bmRlZmluZWQ7IC8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwXG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiBfc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IDQyOTQ5NjcyOTUgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIHNlcGFyYXRvcjIsIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGgsIGk7XG4gICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgIGlmICghTlBDRykgc2VwYXJhdG9yMiA9IG5ldyBSZWdFeHAoJ14nICsgc2VwYXJhdG9yQ29weS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHNlcGFyYXRvckNvcHkuZXhlYyhzdHJpbmcpKSB7XG4gICAgICAgIC8vIGBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvciBOUENHXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgICAgIGlmICghTlBDRyAmJiBtYXRjaFtMRU5HVEhdID4gMSkgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzW0xFTkdUSF0gLSAyOyBpKyspIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogX3NwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfVxuICAvLyAyMS4xLjMuMTcgU3RyaW5nLnByb3RvdHlwZS5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KVxuICByZXR1cm4gW2Z1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpIDogJHNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgfSwgJHNwbGl0XTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSkpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIi8qIVxuICogSmF2YVNjcmlwdCBDb29raWUgdjIuMi4wXG4gKiBodHRwczovL2dpdGh1Yi5jb20vanMtY29va2llL2pzLWNvb2tpZVxuICpcbiAqIENvcHlyaWdodCAyMDA2LCAyMDE1IEtsYXVzIEhhcnRsICYgRmFnbmVyIEJyYWNrXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqL1xuOyhmdW5jdGlvbiAoZmFjdG9yeSkge1xuXHR2YXIgcmVnaXN0ZXJlZEluTW9kdWxlTG9hZGVyID0gZmFsc2U7XG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoZmFjdG9yeSk7XG5cdFx0cmVnaXN0ZXJlZEluTW9kdWxlTG9hZGVyID0gdHJ1ZTtcblx0fVxuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdFx0cmVnaXN0ZXJlZEluTW9kdWxlTG9hZGVyID0gdHJ1ZTtcblx0fVxuXHRpZiAoIXJlZ2lzdGVyZWRJbk1vZHVsZUxvYWRlcikge1xuXHRcdHZhciBPbGRDb29raWVzID0gd2luZG93LkNvb2tpZXM7XG5cdFx0dmFyIGFwaSA9IHdpbmRvdy5Db29raWVzID0gZmFjdG9yeSgpO1xuXHRcdGFwaS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0d2luZG93LkNvb2tpZXMgPSBPbGRDb29raWVzO1xuXHRcdFx0cmV0dXJuIGFwaTtcblx0XHR9O1xuXHR9XG59KGZ1bmN0aW9uICgpIHtcblx0ZnVuY3Rpb24gZXh0ZW5kICgpIHtcblx0XHR2YXIgaSA9IDA7XG5cdFx0dmFyIHJlc3VsdCA9IHt9O1xuXHRcdGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXR0cmlidXRlcyA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdFx0Zm9yICh2YXIga2V5IGluIGF0dHJpYnV0ZXMpIHtcblx0XHRcdFx0cmVzdWx0W2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRmdW5jdGlvbiBpbml0IChjb252ZXJ0ZXIpIHtcblx0XHRmdW5jdGlvbiBhcGkgKGtleSwgdmFsdWUsIGF0dHJpYnV0ZXMpIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cdFx0XHRpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdyaXRlXG5cblx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRhdHRyaWJ1dGVzID0gZXh0ZW5kKHtcblx0XHRcdFx0XHRwYXRoOiAnLydcblx0XHRcdFx0fSwgYXBpLmRlZmF1bHRzLCBhdHRyaWJ1dGVzKTtcblxuXHRcdFx0XHRpZiAodHlwZW9mIGF0dHJpYnV0ZXMuZXhwaXJlcyA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0XHR2YXIgZXhwaXJlcyA9IG5ldyBEYXRlKCk7XG5cdFx0XHRcdFx0ZXhwaXJlcy5zZXRNaWxsaXNlY29uZHMoZXhwaXJlcy5nZXRNaWxsaXNlY29uZHMoKSArIGF0dHJpYnV0ZXMuZXhwaXJlcyAqIDg2NGUrNSk7XG5cdFx0XHRcdFx0YXR0cmlidXRlcy5leHBpcmVzID0gZXhwaXJlcztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlJ3JlIHVzaW5nIFwiZXhwaXJlc1wiIGJlY2F1c2UgXCJtYXgtYWdlXCIgaXMgbm90IHN1cHBvcnRlZCBieSBJRVxuXHRcdFx0XHRhdHRyaWJ1dGVzLmV4cGlyZXMgPSBhdHRyaWJ1dGVzLmV4cGlyZXMgPyBhdHRyaWJ1dGVzLmV4cGlyZXMudG9VVENTdHJpbmcoKSA6ICcnO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cmVzdWx0ID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuXHRcdFx0XHRcdGlmICgvXltcXHtcXFtdLy50ZXN0KHJlc3VsdCkpIHtcblx0XHRcdFx0XHRcdHZhbHVlID0gcmVzdWx0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblxuXHRcdFx0XHRpZiAoIWNvbnZlcnRlci53cml0ZSkge1xuXHRcdFx0XHRcdHZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh2YWx1ZSkpXG5cdFx0XHRcdFx0XHQucmVwbGFjZSgvJSgyM3wyNHwyNnwyQnwzQXwzQ3wzRXwzRHwyRnwzRnw0MHw1Qnw1RHw1RXw2MHw3Qnw3RHw3QykvZywgZGVjb2RlVVJJQ29tcG9uZW50KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNvbnZlcnRlci53cml0ZSh2YWx1ZSwga2V5KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGtleSA9IGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoa2V5KSk7XG5cdFx0XHRcdGtleSA9IGtleS5yZXBsYWNlKC8lKDIzfDI0fDI2fDJCfDVFfDYwfDdDKS9nLCBkZWNvZGVVUklDb21wb25lbnQpO1xuXHRcdFx0XHRrZXkgPSBrZXkucmVwbGFjZSgvW1xcKFxcKV0vZywgZXNjYXBlKTtcblxuXHRcdFx0XHR2YXIgc3RyaW5naWZpZWRBdHRyaWJ1dGVzID0gJyc7XG5cblx0XHRcdFx0Zm9yICh2YXIgYXR0cmlidXRlTmFtZSBpbiBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRcdFx0aWYgKCFhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdKSB7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c3RyaW5naWZpZWRBdHRyaWJ1dGVzICs9ICc7ICcgKyBhdHRyaWJ1dGVOYW1lO1xuXHRcdFx0XHRcdGlmIChhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdID09PSB0cnVlKSB7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c3RyaW5naWZpZWRBdHRyaWJ1dGVzICs9ICc9JyArIGF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIChkb2N1bWVudC5jb29raWUgPSBrZXkgKyAnPScgKyB2YWx1ZSArIHN0cmluZ2lmaWVkQXR0cmlidXRlcyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlYWRcblxuXHRcdFx0aWYgKCFrZXkpIHtcblx0XHRcdFx0cmVzdWx0ID0ge307XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRvIHByZXZlbnQgdGhlIGZvciBsb29wIGluIHRoZSBmaXJzdCBwbGFjZSBhc3NpZ24gYW4gZW1wdHkgYXJyYXlcblx0XHRcdC8vIGluIGNhc2UgdGhlcmUgYXJlIG5vIGNvb2tpZXMgYXQgYWxsLiBBbHNvIHByZXZlbnRzIG9kZCByZXN1bHQgd2hlblxuXHRcdFx0Ly8gY2FsbGluZyBcImdldCgpXCJcblx0XHRcdHZhciBjb29raWVzID0gZG9jdW1lbnQuY29va2llID8gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7ICcpIDogW107XG5cdFx0XHR2YXIgcmRlY29kZSA9IC8oJVswLTlBLVpdezJ9KSsvZztcblx0XHRcdHZhciBpID0gMDtcblxuXHRcdFx0Zm9yICg7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJ0cyA9IGNvb2tpZXNbaV0uc3BsaXQoJz0nKTtcblx0XHRcdFx0dmFyIGNvb2tpZSA9IHBhcnRzLnNsaWNlKDEpLmpvaW4oJz0nKTtcblxuXHRcdFx0XHRpZiAoIXRoaXMuanNvbiAmJiBjb29raWUuY2hhckF0KDApID09PSAnXCInKSB7XG5cdFx0XHRcdFx0Y29va2llID0gY29va2llLnNsaWNlKDEsIC0xKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0dmFyIG5hbWUgPSBwYXJ0c1swXS5yZXBsYWNlKHJkZWNvZGUsIGRlY29kZVVSSUNvbXBvbmVudCk7XG5cdFx0XHRcdFx0Y29va2llID0gY29udmVydGVyLnJlYWQgP1xuXHRcdFx0XHRcdFx0Y29udmVydGVyLnJlYWQoY29va2llLCBuYW1lKSA6IGNvbnZlcnRlcihjb29raWUsIG5hbWUpIHx8XG5cdFx0XHRcdFx0XHRjb29raWUucmVwbGFjZShyZGVjb2RlLCBkZWNvZGVVUklDb21wb25lbnQpO1xuXG5cdFx0XHRcdFx0aWYgKHRoaXMuanNvbikge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0Y29va2llID0gSlNPTi5wYXJzZShjb29raWUpO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoa2V5ID09PSBuYW1lKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSBjb29raWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIWtleSkge1xuXHRcdFx0XHRcdFx0cmVzdWx0W25hbWVdID0gY29va2llO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cblx0XHRhcGkuc2V0ID0gYXBpO1xuXHRcdGFwaS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRyZXR1cm4gYXBpLmNhbGwoYXBpLCBrZXkpO1xuXHRcdH07XG5cdFx0YXBpLmdldEpTT04gPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gYXBpLmFwcGx5KHtcblx0XHRcdFx0anNvbjogdHJ1ZVxuXHRcdFx0fSwgW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcblx0XHR9O1xuXHRcdGFwaS5kZWZhdWx0cyA9IHt9O1xuXG5cdFx0YXBpLnJlbW92ZSA9IGZ1bmN0aW9uIChrZXksIGF0dHJpYnV0ZXMpIHtcblx0XHRcdGFwaShrZXksICcnLCBleHRlbmQoYXR0cmlidXRlcywge1xuXHRcdFx0XHRleHBpcmVzOiAtMVxuXHRcdFx0fSkpO1xuXHRcdH07XG5cblx0XHRhcGkud2l0aENvbnZlcnRlciA9IGluaXQ7XG5cblx0XHRyZXR1cm4gYXBpO1xuXHR9XG5cblx0cmV0dXJuIGluaXQoZnVuY3Rpb24gKCkge30pO1xufSkpO1xuIiwiLyogZ2xvYmFscyBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyAqL1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgJCA9IHJlcXVpcmUoJy4uL2pxdWVyeScpLFxuICAgICAgICBzbGlkZXJzID0gW3JlcXVpcmUoJy4vcHJvZmlsZXMtY2Fyb3VzZWwnKSwgcmVxdWlyZSgnLi9zdGF0LWNhcm91c2VsJyldLFxuICAgICAgICBjcmVhdGUgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICB2YXIgJGNhcm91c2VsV3JhcHBlciA9ICQoZGF0YS5pZCksXG4gICAgICAgICAgICAgICAgJGNhcm91c2VsID0gJGNhcm91c2VsV3JhcHBlci5maW5kKCcuYnhzbGlkZXInKSxcbiAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID0gJGNhcm91c2VsLmNoaWxkcmVuKCkubGVuZ3RoO1xuXG4gICAgICAgICAgICAkY2Fyb3VzZWxXcmFwcGVyLnJlbW92ZUNsYXNzKCdjYXJvdXNlbC1sb2FkaW5nJyk7XG4gICAgICAgICAgICBpZiAoc2xpZGVDb3VudCA+IDEpIHtcbiAgICAgICAgICAgICAgICAkY2Fyb3VzZWwuYnhTbGlkZXIoZGF0YS5vcHRpb25zKHNsaWRlQ291bnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlKHNsaWRlcnNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgcmV0dXJuIGluaXQ7XG59KSgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaWQ6ICcjcHJvZmlsZXMtY2Fyb3VzZWwnLFxuICAgIG9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXV0bzogZmFsc2UsXG4gICAgICAgICAgICBhdXRvQ29udHJvbHM6IGZhbHNlLFxuICAgICAgICAgICAgY29udHJvbHM6IHRydWUsXG4gICAgICAgICAgICBwYWdlcjogdHJ1ZSxcbiAgICAgICAgICAgIGluZmluaXRlTG9vcDogZmFsc2UsXG4gICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgICAgICAgICAgc2xpZGVXaWR0aDogMzMwLFxuICAgICAgICAgICAgc2xpZGVNYXJnaW46IDAsXG4gICAgICAgICAgICBhZGFwdGl2ZUhlaWdodDogZmFsc2UsXG4gICAgICAgICAgICBoaWRlQ29udHJvbE9uRW5kOiB0cnVlLFxuICAgICAgICAgICAgbWF4U2xpZGVzOiAxLFxuICAgICAgICAgICAgcHJldlRleHQ6ICc8aSBjbGFzcz1cImZhIGZhLWFuZ2xlLWxlZnRcIj48L2k+JyxcbiAgICAgICAgICAgIG5leHRUZXh0OiAnPGkgY2xhc3M9XCJmYSBmYS1hbmdsZS1yaWdodFwiPjwvaT4nLFxuICAgICAgICB9O1xuICAgIH0sXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaWQ6ICcjc3RhdGlzdGljLWNhcm91c2VsJyxcbiAgICBvcHRpb25zOiBmdW5jdGlvbihuKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhdXRvOiBmYWxzZSxcbiAgICAgICAgICAgIGF1dG9Db250cm9sczogZmFsc2UsXG4gICAgICAgICAgICBjb250cm9sczogdHJ1ZSxcbiAgICAgICAgICAgIHBhZ2VyOiBmYWxzZSxcbiAgICAgICAgICAgIGluZmluaXRlTG9vcDogZmFsc2UsXG4gICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgICAgICAgICAgc2xpZGVXaWR0aDogMzAwLFxuICAgICAgICAgICAgc2xpZGVNYXJnaW46IDYwLFxuICAgICAgICAgICAgYWRhcHRpdmVIZWlnaHQ6IHRydWUsXG4gICAgICAgICAgICBoaWRlQ29udHJvbE9uRW5kOiB0cnVlLFxuICAgICAgICAgICAgbWluU2xpZGVzOiAxLFxuICAgICAgICAgICAgbW92ZVNsaWRlczogMSxcbiAgICAgICAgICAgIG1heFNsaWRlczogbiA+PSAzID8gMyA6IDIsXG4gICAgICAgICAgICBwcmV2VGV4dDogJzxpIGNsYXNzPVwiIGZhIGZhLWNhcmV0LWxlZnRcIj48L2k+JyxcbiAgICAgICAgICAgIG5leHRUZXh0OiAnPGkgY2xhc3M9XCIgZmEgZmEtY2FyZXQtcmlnaHRcIj48L2k+JyxcbiAgICAgICAgfTtcbiAgICB9LFxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyICQgPSByZXF1aXJlKCcuLi9tYWluL2pxdWVyeScpO1xuXG4gICAgJChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBDSVRZX09QVElPTlMgIT09ICd1bmRlZmluZWQnICYmIENJVFlfT1BUSU9OUy5kZWZlcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBDSVRZX09QVElPTlMuZGVmZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBDSVRZX09QVElPTlMuZGVmZXJbaV0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciAkID0gcmVxdWlyZSgnLi4vanF1ZXJ5Jyk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oYXpMaXN0aW5ncykge1xuICAgICAgICBhekxpc3RpbmdzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbWUgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgIGxldHRlcnMgPSBtZS5maW5kKCcubGV0dGVyLWxpc3QgYScpLFxuICAgICAgICAgICAgICAgIGxldHRlckdyb3VwcyA9IG1lLmZpbmQoJy5sZXR0ZXItZ3JvdXAnKSxcbiAgICAgICAgICAgICAgICBzZWxlY3QgPSBmdW5jdGlvbihhbmNob3IpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0dGVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcignW2hyZWYhPVwiJyArIGFuY2hvciArICdcIl0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgICBsZXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKCdbaHJlZj1cIicgKyBhbmNob3IgKyAnXCJdJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGFuY2hvci5zdWJzdHIoMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldHRlckdyb3Vwc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoJ1tuYW1lIT1cIicgKyBuYW1lICsgJ1wiXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCd1bnNlbGVjdGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXJHcm91cHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKCdbbmFtZT1cIicgKyBuYW1lICsgJ1wiXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCd1bnNlbGVjdGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXJHcm91cHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3Vuc2VsZWN0ZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxldHRlckdyb3Vwc1xuICAgICAgICAgICAgICAgIC5maW5kKCcuZ28tdXAnKVxuICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0KGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbignc3BhbicpXG4gICAgICAgICAgICAgICAgLmh0bWwoJ1Nob3cgYWxsJylcbiAgICAgICAgICAgICAgICAuZW5kKClcbiAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJ2knKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnZmEtYXJyb3ctY2lyY2xlLW8tdXAnKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnZmEtcmVwbHknKTtcblxuICAgICAgICAgICAgbGV0dGVycy5jbGljayhmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0KCQodGhpcykuYXR0cignaHJlZicpKTtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0pKCk7XG4iLCIvKipcbiAqIENyZWF0ZSBhIGltYWdlIEdhbGxlcnlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBqcXVlcnkgb2JqZWN0IHJlcHJlc2VudGluZyBhIHNpbmdsZSBpbnN0YW5jZSBvZiBhIGdhbGxlcnlcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgZ2FsbGVyeSBpcyBpbiBhIHdpZGdldCwgZmFsc2UgaWYgaW4gbWFpbiBjb250ZW50IGJvZHlcbiAqIEByZXR1cm4ge09iamVjdCB8fCBVbmRlZmluZWR9IHJldHVybnMgdGhlIGdhbGxlcmlhIGpRdWVyeSBvYmplY3QgaWZcbiAqIHN1Y2Nlc3NmdWwgZWxzZSB1bmRlZmluZWQgLSBmb3IgaW5zdGFuY2UgaWYgJGdhbGxlcnkgaXMgbm90IGEgalF1ZXJ5IG9iamVjdFxuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyICQgPSByZXF1aXJlKCcuLi9qcXVlcnknKSxcbiAgICAgICAgZGVidWcgPSByZXF1aXJlKCcuLi8uLi91dGlscy9kZWJ1ZycpLFxuICAgICAgICBzdGF0ZSA9ICdub3QtbG9hZGVkJyxcbiAgICAgICAgcXVldWUgPSBbXSxcbiAgICAgICAgY3JlYXRlID0gZnVuY3Rpb24oZ2FsbGVyeSwgb3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIHJvb3QgPSBnYWxsZXJ5LmF0dHIoJ2lkJykucmVwbGFjZSgnZ2FsbGVyeS0nLCAnJyksXG4gICAgICAgICAgICAgICAgZ2FsbGVyeUlubmVyID0gZ2FsbGVyeS5maW5kKCcuZ2FsbGVyeS1pbm5lcicpO1xuXG4gICAgICAgICAgICAkLmdldEpTT04oJy9hcGlzL2dhbGxlcmllcy9nYWxsZXJpYS1qc29uP3Jvb3Q9JyArIHJvb3QsIGZ1bmN0aW9uKFxuICAgICAgICAgICAgICAgIGRhdGFcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGxvYWRlclxuICAgICAgICAgICAgICAgIGdhbGxlcnkuZmluZCgnc3Bhbi5sb2FkaW5nJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGdhbGxlcnkuY3NzKCdvcGFjaXR5JywgJzEnKTtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmRhdGFfc291cmNlID0gZGF0YTtcbiAgICAgICAgICAgICAgICBnYWxsZXJ5SW5uZXIuZ2FsbGVyaWEob3B0aW9ucyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGdhbGxlcnlJbm5lcjtcbiAgICAgICAgfSxcbiAgICAgICAgbG9hZENvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvL2dldCBpZCBvZiByb290IGZyb20gaWQgb2YgZ2FsbGVyeSBkaXZcbiAgICAgICAgICAgIHN0YXRlID0gJ2xvYWRlZCc7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlKHF1ZXVlW2ldLmdhbGxlcnksIHF1ZXVlW2ldLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVxdWVzdCA9IGZ1bmN0aW9uKGdhbGxlcnkpIHtcbiAgICAgICAgICAgIHZhciBnYWxsZXJ5SW5uZXIgPSBnYWxsZXJ5ICYmIGdhbGxlcnkuZmluZCgnLmdhbGxlcnktaW5uZXInKTtcblxuICAgICAgICAgICAgaWYgKCFnYWxsZXJ5SW5uZXIgfHwgZ2FsbGVyeUlubmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRlYnVnKCdubyBnYWxsZXJ5IGZvdW5kJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBnYWxsZXJpYU9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMC41NjI1LFxuICAgICAgICAgICAgICAgICAgICBsaWdodGJveDogZ2FsbGVyeUlubmVyLmhhc0NsYXNzKCdsaWdodGJveCcpLFxuICAgICAgICAgICAgICAgICAgICBtYXhTY2FsZVJhdGlvOiAxLFxuICAgICAgICAgICAgICAgICAgICBwcmVsb2FkOiAyLFxuICAgICAgICAgICAgICAgICAgICBzaG93SW5mbzogZ2FsbGVyeUlubmVyLmhhc0NsYXNzKCdjYXB0aW9uJyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlQ3JvcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kOiBmdW5jdGlvbigvKiBkZWZpbmVkIGJ1dCBub3QgdXNlZDogb3B0aW9ucyAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCdjaXR5JyA9PT0gZ2FsbGVyeS5hdHRyKCdkYXRhLXRoZW1lJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYWxsZXJ5LnByZXBlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJzxkaXYvPicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnY2ctY2FwdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qbG9hZHN0YXJ0IGlzIHRyaWdnZXJlZCBldmVyeSB0aW1lIGdhbGxlcmlhIGxvYWRzIGFuIGltYWdlKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJpbmQoJ2xvYWRzdGFydCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhW2UuaW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jYXB0aW9uIGlzIHJlZm91bmQgaGVyZSBhcyBpdCBuZWVkcyB0byBiZSBzY29wZWQgdG8gdGhpcyBnYWxsZXJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0aW9uID0gZ2FsbGVyeS5maW5kKCcuY2ctY2FwdGlvbicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLm1fY2FwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwdGlvbi5odG1sKGRhdGEubV9jYXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcHRpb24uaHRtbCgnJm5ic3A7Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlID09PSAnbG9hZGVkJykge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGUoZ2FsbGVyeSwgZ2FsbGVyaWFPcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUgPT09ICdub3QtbG9hZGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAnbG9hZGluZyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLmdldE11bHRpSnNTY3JpcHRzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xpYi9qcXVlcnkvcGx1Z2lucy9nYWxsZXJpYS9nYWxsZXJpYS0xLjQuMi9nYWxsZXJpYS0xLjQuMi5taW4uanMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGliL2pxdWVyeS9wbHVnaW5zL2dhbGxlcmlhL2dhbGxlcmlhLTEuNC4yL3RoZW1lcy9jbGFzc2ljL2dhbGxlcmlhLmNsYXNzaWMuY2l0eS5taW4uanMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZENvbXBsZXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnYWxsZXJ5LnByZXBlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibG9hZGluZ1wiPjxkaXYgY2xhc3M9XCJsb2FkaW5nX19pY29uXCI+PGkgY2xhc3M9XCJmYSBmYS1yZWZyZXNoIGZhLXNwaW5cIj48L2k+PC9kaXY+PC9zcGFuPidcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaCh7IGdhbGxlcnk6IGdhbGxlcnksIG9wdGlvbnM6IGdhbGxlcmlhT3B0aW9ucyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICByZXR1cm4gcmVxdWVzdDtcbn0pKCk7XG4iLCIvKlxuICogc2V0cyB1cCBhIGNhcm91c2VsIG9uIGEgcGFnZVxuICogQHBhcmFtIGNhcm91c2VsT2JqIDogT2JqZWN0XG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgJCA9IHJlcXVpcmUoJy4uL2pxdWVyeScpLFxuICAgICAgICBkZWJ1ZyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2RlYnVnJyk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oJGNhcm91c2VsT2JqKSB7XG4gICAgICAgIGlmICgkY2Fyb3VzZWxPYmoubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAkY2Fyb3VzZWxPYmouYXBwZW5kKCQoJyNtYWluLWNhcm91c2VsLXNsaWRlcycpLmh0bWwoKSk7XG5cbiAgICAgICAgICAgIHZhciBudW1TbGlkZXMgPSAkY2Fyb3VzZWxPYmouY2hpbGRyZW4oKS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgJHByb21vV3JhcHBlciA9ICRjYXJvdXNlbE9iai5wYXJlbnRzKCcjcHJvbW8td3JhcHBlcicpLFxuICAgICAgICAgICAgICAgIG92ZXJyaWRlQ29udHJvbHMgPVxuICAgICAgICAgICAgICAgICAgICBudW1TbGlkZXMgPiAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHt9XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG86IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0NvbnRyb2xzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoRW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy8gb3B0aW9ucyBmb3IgdGhlIGhvbWUgY2Fyb3VzZWxcbiAgICAgICAgICAgICAgICBzbGlkZXJPcHRpb25zID1cbiAgICAgICAgICAgICAgICAgICAgJHByb21vV3JhcHBlci5hdHRyKCdkYXRhLWNhcm91c2VsLXR5cGUnKSAhPT0gJ2hvbWUnXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHt9XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Ib3ZlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0U3dpcGVYOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHRTd2lwZVk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRQYWdlcjogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJmYSBmYS1jaXJjbGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+PHNwYW4gY2xhc3M9XCJzci1vbmx5XCI+R28gdG8gc2xpZGUgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpbmRleCArIDEpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydFRleHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiYmcgZmEgZmEtY2lyY2xlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPjxzcGFuIGNsYXNzPVwiaWMgZmEgZmEtcGxheVwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cInNyLW9ubHlcIj5QbGF5IHNsaWRlczwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcFRleHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiYmcgZmEgZmEtY2lyY2xlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPjxzcGFuIGNsYXNzPVwiaWMgZmEgZmEtcGF1c2VcIj48L3NwYW4+PHNwYW4gY2xhc3M9XCJzci1vbmx5XCI+U3RvcCBzbGlkZXM8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZUZXh0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImJnIGZhIGZhLWNpcmNsZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cImljIGZhIGZhLWNoZXZyb24tbGVmdFwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cInNyLW9ubHlcIj5QcmV2aW91cyBzbGlkZTwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFRleHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiYmcgZmEgZmEtY2lyY2xlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPjxzcGFuIGNsYXNzPVwiaWMgZmEgZmEtY2hldnJvbi1yaWdodFwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cInNyLW9ubHlcIj5OZXh0IHNsaWRlPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2xlYXJpbmdPcHRpb25zID1cbiAgICAgICAgICAgICAgICAgICAgJHByb21vV3JhcHBlci5hdHRyKCdkYXRhLWNhcm91c2VsLXR5cGUnKSAhPT0gJ2NsZWFyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db250cm9sczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvU3RhcnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGluaXRTbGlkZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db250cm9sczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXVzZTogMTUwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0hvdmVyOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoRW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHRTd2lwZVg6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0U3dpcGVZOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydFRleHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInZpc3VhbGx5aGlkZGVuXCI+U3RhcnQgc2xpZGVyPC9zcGFuPjxzcGFuIGNsYXNzPVwiZmEgZmEtcGxheVwiPjwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BUZXh0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJ2aXN1YWxseWhpZGRlblwiPlBhdXNlIHNsaWRlcjwvc3Bhbj48c3BhbiBjbGFzcz1cImZhIGZhLXBhdXNlXCI+PC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFRleHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInZpc3VhbGx5aGlkZGVuXCI+TmV4dCBzbGlkZTwvc3Bhbj48c3BhbiBjbGFzcz1cImZhIGZhLWNhcmV0LXJpZ2h0XCI+PC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldlRleHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInZpc3VhbGx5aGlkZGVuXCI+UHJldmlvdXMgc2xpZGU8L3NwYW4+PHNwYW4gY2xhc3M9XCJmYSBmYS1jYXJldC1sZWZ0XCI+PC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRhcHRpdmVIZWlnaHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25TbGlkZXJMb2FkOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudW1TbGlkZXMgPCAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcHJvbW9XcmFwcGVyLmFkZENsYXNzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwcm9tby13cmFwcGVyLS1zaW5nbGUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXJPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcnJpZGVDb250cm9scyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyaW5nT3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICRwcm9tb1dyYXBwZXIucmVtb3ZlQ2xhc3MoJ2Nhcm91c2VsLWxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgJHByb21vV3JhcHBlci5maW5kKCcubG9hZGluZy1mYS1pY29uJykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICRwcm9tb1dyYXBwZXIuZmluZCgnLmJ4c2xpZGVyJykuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAkY2Fyb3VzZWxPYmouYnhTbGlkZXIob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICRwcm9tb1dyYXBwZXIuZmluZCgnLmJ4LWNvbnRyb2xzJykuc2hvdygpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vc2V0IHVwIHNsaWRlclxuICAgICAgICAgICAgaWYgKG51bVNsaWRlcyA+IDApIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcbiAgICAgICAgICAgICAgICAgICAgJ21vcmUgdGhhbiAwIHNsaWRlcywgbmVlZCBjYXJvdXNlbC4gTnVtU2xpZGVzID0nICsgbnVtU2xpZGVzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpbml0U2xpZGVyKCRjYXJvdXNlbE9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTtcbiIsIi8qKlxuICogQ3VzdG9tIEFKQVggTWV0aG9kXG4gKlxuICogLy8gU3VjY2Vzc1xuICogY3VzdG9tQUpBWCgnLy93d3cuY2l0eS5hYy51ay9mYi9zZWFyY2guaHRtbCcsIHsnc29tZWtleSc6ICdzb21ldmFsdWUnfSlcbiAqIC5kb25lKFxuICogICAgIGZ1bmN0aW9uKGRhdGEpKSB7XG4gKiAgICAgICAgIGRvU29tZXRoaW5nKCk7XG4gKiAgICAgfVxuICogKTtcbiAqXG4gKiAvLyBGYWlsdXJlXG4gKiBjdXN0b21BSkFYKCcvL3d3dy5jaXR5LmFjLnVrL2ZiL3NlYXJjaC5odG1sJywgeydzb21la2V5JzogJ3NvbWV2YWx1ZSd9KVxuICogLmZhaWwoXG4gKiAgICAgZnVuY3Rpb24oeGhyLCBzdGF0dXMsIGVycikpIHtcbiAqICAgICAgICAgY29uc29sZS5sb2coc3RhdHVzLCBlcnIpO1xuICogICAgIH1cbiAqICk7XG4gKlxuICogLy8gU3VjY2VzcyBvciBGYWlsdXJlXG4gKiBjdXN0b21BSkFYKCcvL3d3dy5jaXR5LmFjLnVrL2ZiL3NlYXJjaC5odG1sJywgeydzb21la2V5JzogJ3NvbWV2YWx1ZSd9KVxuICogLnRoZW4oXG4gKiAgICAgZnVuY3Rpb24oZGF0YSkpIHtcbiAqICAgICAgICAgZG9Tb21ldGhpbmcoKTtcbiAqICAgICB9LFxuICogICAgIGZ1bmN0aW9uKHhociwgc3RhdHVzLCBlcnIpIHtcbiAqICAgICAgICAgY29uc29sZS5sb2coc3RhdHVzLCBlcnIpO1xuICogICAgIH1cbiAqICk7XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciAkID0gcmVxdWlyZSgnLi4vanF1ZXJ5Jyk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oaW5wdXRVUkwsIGlucHV0RGF0YSwgaW5wdXRUeXBlKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogaW5wdXRVUkwsXG4gICAgICAgICAgICBkYXRhOiBpbnB1dERhdGEsXG4gICAgICAgICAgICB0eXBlOiBpbnB1dFR5cGUgPyBpbnB1dFR5cGUgOiAnZ2V0JyxcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uKHJlc3BvbnNlRGF0YSwgc3RhdHVzLCB4aHIpIHtcbiAgICAgICAgICAgICAgICAvLyBQcmUtZGV0ZXJtaW5lZCBMb2dpYyBmb3IgU3VjY2Vzc1xuICAgICAgICAgICAgICAgIC8vICh0aGlzIHdpbGwgcnVuIGJlZm9yZSBhbnkgYC5kb25lKClgIG9yIGAuZmFpbCgpYCB3aGVyZSBgY3VzdG9tQUpBWCgpYCBpcyBjYWxsZWQpXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ1N1Y2Nlc3MnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmFpbChmdW5jdGlvbih4aHIsIHN0YXR1cywgZXJyKSB7XG4gICAgICAgICAgICAgICAgLy8gUHJlLWRldGVybWluZWQgTG9naWMgZm9yIEZhaWx1cmVcbiAgICAgICAgICAgICAgICAvLyAodGhpcyB3aWxsIHJ1biBiZWZvcmUgYW55IGAuZG9uZSgpYCBvciBgLmZhaWwoKWAgd2hlcmUgYGN1c3RvbUFKQVgoKWAgaXMgY2FsbGVkKVxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdGYWlsdXJlJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfTtcbn0pKCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgJCA9IHJlcXVpcmUoJy4uL2pxdWVyeScpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAkKCcuY3ljbGljLXBvcHVwLWl0ZW1fX3RpdGxlJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY2xpY2tlZEl0ZW1MaW5rID0gJCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBjbGlja2VkSXRlbSA9ICQodGhpcykuY2xvc2VzdCgnLmN5Y2xpYy1wb3B1cC1pdGVtJyk7XG4gICAgICAgICAgICB2YXIgcG9wdXBHcm91cCA9IGNsaWNrZWRJdGVtTGluay5jbG9zZXN0KCcuY3ljbGljLXBvcHVwLWdyb3VwJyk7XG4gICAgICAgICAgICB2YXIgYWxsUG9wdXBJdGVtcyA9IHBvcHVwR3JvdXAuY2hpbGRyZW4oJy5jeWNsaWMtcG9wdXAtaXRlbScpO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IDA7XG4gICAgICAgICAgICB2YXIgbm9PZlBvcHVwSXRlbXMgPSBhbGxQb3B1cEl0ZW1zLmxlbmd0aDtcblxuICAgICAgICAgICAgYWxsUG9wdXBJdGVtcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmdldCgwKSA9PT0gY2xpY2tlZEl0ZW0uZ2V0KDApKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRXaWR0aCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSAkKHdpbmRvdykud2lkdGgoKSAqIDAuOTtcblxuICAgICAgICAgICAgICAgIGlmICh3aWR0aCA+IDUwMCkge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IDUwMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpZHRoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXROZXh0SXRlbShyZXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJldmVyc2UgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PSBub09mUG9wdXBJdGVtcyAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEluZGV4ID0gbm9PZlBvcHVwSXRlbXMgLSAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEluZGV4LS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbmV4dEl0ZW0gPSBhbGxQb3B1cEl0ZW1zLmdldChjdXJyZW50SW5kZXgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0SXRlbTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0RGlhbG9nQnV0dG9ucygpIHtcbiAgICAgICAgICAgICAgICBpZiAobm9PZlBvcHVwSXRlbXMgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidXR0b25zVG9TZXQgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1BSRVZJT1VTJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuaHRtbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoZ2V0TmV4dEl0ZW0odHJ1ZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5jeWNsaWMtcG9wdXAtaXRlbV9fZGV0YWlsJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaHRtbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ05FWFQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5odG1sKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChnZXROZXh0SXRlbShmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5jeWNsaWMtcG9wdXAtaXRlbV9fZGV0YWlsJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaHRtbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgICAgICAgICAgJCgnLnVpLWRpYWxvZy1jb250ZW50JykuZGlhbG9nKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ29wdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnYnV0dG9ucycsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zVG9TZXRcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICQoJzxkaXY+PC9kaXY+JykuZGlhbG9nKHtcbiAgICAgICAgICAgICAgICBtb2RhbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlc2l6YWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgd2lkdGg6IGdldFdpZHRoKCksXG5cbiAgICAgICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuZGlhbG9nKCdkZXN0cm95Jyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcudWktZGlhbG9nJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnY3ljbGljLXBvcHVwJyk7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuaHRtbChcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrZWRJdGVtLmZpbmQoJy5jeWNsaWMtcG9wdXAtaXRlbV9fZGV0YWlsJykuaHRtbCgpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHNldERpYWxvZ0J1dHRvbnMoKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgb3BlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub09mUG9wdXBJdGVtcyA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucGFyZW50KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnYnV0dG9uOm50aC1jaGlsZCgyKScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy51aS1kaWFsb2ctdGl0bGViYXItY2xvc2UnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICQoJy51aS1kaWFsb2ctY29udGVudCcpLmRpYWxvZygnb3B0aW9uJywgJ3Bvc2l0aW9uJywgJ2NlbnRlcicpO1xuICAgICAgICAgICAgICAgICQoJy51aS1kaWFsb2ctY29udGVudCcpLmRpYWxvZygnb3B0aW9uJywgJ3dpZHRoJywgZ2V0V2lkdGgoKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJCgnLnVpLXdpZGdldC1vdmVybGF5JykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJCgnZGl2OnVpLWRpYWxvZzp2aXNpYmxlJykuZGlhbG9nKCdjbG9zZScpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0pKCk7XG4iLCIvKipcbiAqIHVzZWQgZm9yIGRldGVjdGluZyBkb3dubG9hZCBmaWxldHlwZXMgYnkgZXh0ZW5zaW9uXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBbXG4gICAgJ2RvYycsXG4gICAgJ2RvY3gnLFxuICAgICd4bHMnLFxuICAgICd4bHN4JyxcbiAgICAncHB0JyxcbiAgICAncHB0eCcsXG4gICAgJ3BwcycsXG4gICAgJ3Bwc3gnLFxuICAgICdwZGYnLFxuICAgICdqcGcnLFxuICAgICdwbmcnLFxuICAgICdnaWYnLFxuICAgICd6aXAnLFxuICAgICd0eHQnLFxuICAgICdydGYnLFxuICAgICdtcDMnLFxuXTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkKCcubGluay0tZ290bycpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCgnaHRtbCxib2R5Jykuc2Nyb2xsVG9wKDApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGluaXQoKTtcbn07XG4iLCIvKipcbiAqIGdldHMgd2luZG93IHdpZHRoXG4gKiBAcGFyYW06IHtPYmplY3R9IC0gd2luZG93IG9iamVjdFxuICogQHJldHVybjoge051bWJlcn0gLSB3aW5kb3cgd2lkdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyICQgPSByZXF1aXJlKCcuLi9qcXVlcnknKTtcblxuICAgIHJldHVybiBmdW5jdGlvbih3KSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKCQodykud2lkdGgoKSk7XG4gICAgfTtcbn0pKCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciAkZ2xvYmFsTmF2VG9nZ2xlciA9ICQoJy5nbG9iYWwtbmF2X190b2dnbGUnKSxcbiAgICAgICAgJGhlYWRlclNlYXJjaCA9ICQoJy5oZWFkZXJfX3NlYXJjaCcpLFxuICAgICAgICAkaGVhZGVyU2VhcmNoVG9nZ2xlciA9ICQoJy5oZWFkZXJfX3NlYXJjaF9fdG9nZ2xlJyksXG4gICAgICAgICRnbG9iYWxOYXZXcmFwcGVyID0gJCgnLmdsb2JhbC1uYXZfX3dyYXBwZXInKSxcbiAgICAgICAgJGdsb2JhbE5hdkRyb3BUb2dnbGVyID0gJCgnLmdsb2JhbC1uYXZfX21lbnUtaXRlbV9fdG9nZ2xlJyksXG4gICAgICAgICR1dGlsTmF2ID0gJCgnLmhlYWRlcl9fdXRpbF9fYXVkaWVuY2VfX2J1dHRvbi1saW5rJyksXG4gICAgICAgICRib2R5ID0gJCgnYm9keScpLFxuICAgICAgICAkY29tcGFjdFdpZHRoID0gNzQ4LFxuICAgICAgICAkc3RpY2t5SGVhZGVyU2Nyb2xsVGhyZXNob2xkID0gNzAsXG4gICAgICAgICRsYXN0U2Nyb2xsVG9wID0gMCxcbiAgICAgICAgJHdpbmRvdyA9ICQod2luZG93KSxcbiAgICAgICAgY2xvc2VNZW51cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCgnLmhlYWRlcl9fdXRpbF9faXRlbS0tYWN0aXZlJykucmVtb3ZlQ2xhc3MoXG4gICAgICAgICAgICAgICAgJ2hlYWRlcl9fdXRpbF9faXRlbS0tYWN0aXZlJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICQoJy5nbG9iYWwtbmF2X19tZW51LWl0ZW0tLWFjdGl2ZScpLnJlbW92ZUNsYXNzKFxuICAgICAgICAgICAgICAgICdnbG9iYWwtbmF2X19tZW51LWl0ZW0tLWFjdGl2ZSdcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICAkZ2xvYmFsTmF2RHJvcFRvZ2dsZXIuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgICAgICAgICAgJHV0aWxOYXYuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgICAgICB9LFxuICAgICAgICB0b2dnbGVNb2JpbGVHbG9iYWxNZW51ID0gZnVuY3Rpb24ob3Blbk1lbnUpIHtcbiAgICAgICAgICAgIHZhciBvcGVuU2VhcmNoID1cbiAgICAgICAgICAgICAgICBvcGVuTWVudSA9PT0gJ3NlYXJjaCcgJiZcbiAgICAgICAgICAgICAgICAhJGhlYWRlclNlYXJjaC5oYXNDbGFzcygnaGVhZGVyX19zZWFyY2gtLWFjdGl2ZScpO1xuICAgICAgICAgICAgdmFyIG9wZW5OYXYgPVxuICAgICAgICAgICAgICAgIG9wZW5NZW51ID09PSAnbmF2JyAmJlxuICAgICAgICAgICAgICAgICEkZ2xvYmFsTmF2V3JhcHBlci5oYXNDbGFzcygnZ2xvYmFsLW5hdl9fd3JhcHBlci0tYWN0aXZlJyk7XG5cbiAgICAgICAgICAgICRnbG9iYWxOYXZXcmFwcGVyLnRvZ2dsZUNsYXNzKFxuICAgICAgICAgICAgICAgICdnbG9iYWwtbmF2X193cmFwcGVyLS1hY3RpdmUnLFxuICAgICAgICAgICAgICAgIG9wZW5OYXZcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICAkZ2xvYmFsTmF2VG9nZ2xlci5hdHRyKCdhcmlhLWV4cGFuZGVkJywgb3Blbk5hdiA/ICd0cnVlJyA6ICdmYWxzZScpO1xuXG4gICAgICAgICAgICAkaGVhZGVyU2VhcmNoLnRvZ2dsZUNsYXNzKCdoZWFkZXJfX3NlYXJjaC0tYWN0aXZlJywgb3BlblNlYXJjaCk7XG4gICAgICAgICAgICAkaGVhZGVyU2VhcmNoVG9nZ2xlci5hdHRyKFxuICAgICAgICAgICAgICAgICdhcmlhLWV4cGFuZGVkJyxcbiAgICAgICAgICAgICAgICBvcGVuU2VhcmNoID8gJ3RydWUnIDogJ2ZhbHNlJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgaW5pdFNraXBMaW5rcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCgnI3NraXAtdG8tcXVlcnknKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVNb2JpbGVHbG9iYWxNZW51KCdzZWFyY2gnKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnI3F1ZXJ5JykuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9LCAyNSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQoJyNza2lwLXRvLWFjY2Vzc2liaWxpdHknKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkKCcjYWNjZXNzaWJpbGl0eScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfSwgMjUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZVRhYk5hdmlnYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICgkd2luZG93LndpZHRoKCkgPiAkY29tcGFjdFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgJCgnLmdsb2JhbC1uYXZfX21lbnUtaXRlbV9fbGluaycpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuc2libGluZ3MoJy5nbG9iYWwtbmF2X19tZW51LWl0ZW1fX3RvZ2dsZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cigndGFiaW5kZXgnLCAtMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCgnLmdsb2JhbC1uYXZfX21lbnUtaXRlbV9fbGluaycpLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZVNjcm9sbERvd24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciAkbmV3U2Nyb2xsVG9wID0gJCh0aGlzKS5zY3JvbGxUb3AoKTtcbiAgICAgICAgICAgICRib2R5LnRvZ2dsZUNsYXNzKFxuICAgICAgICAgICAgICAgICdzY3JvbGwtZG93bicsXG4gICAgICAgICAgICAgICAgJG5ld1Njcm9sbFRvcCA+ICRzdGlja3lIZWFkZXJTY3JvbGxUaHJlc2hvbGQgJiZcbiAgICAgICAgICAgICAgICAgICAgJG5ld1Njcm9sbFRvcCA8ICRsYXN0U2Nyb2xsVG9wXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgJGxhc3RTY3JvbGxUb3AgPSAkbmV3U2Nyb2xsVG9wO1xuICAgICAgICB9LFxuICAgICAgICBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbml0U2tpcExpbmtzKCk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVXBkYXRlIGNsYXNzbmFtZSBkZXBlbmRpbmcgb24gc2Nyb2xsIHBvc2l0aW9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICR3aW5kb3cuc2Nyb2xsKHVwZGF0ZVNjcm9sbERvd24pO1xuICAgICAgICAgICAgdXBkYXRlU2Nyb2xsRG93bigpO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdpdGggSlMgZW5hYmxlZCwgbGlua3MgZ29pbmcgdG8gb3RoZXIgcGFnZXMgc2hvdWxkIG5vdCBiZSByZWFjaGFibGUgdGhyb3VnaCB0aGUgdGFiIGtleSxcbiAgICAgICAgICAgICAqIGFzIG9wcG9zZWQgdG8gdG9nZ2xlIGxpbmtzIC0gZXhjZXB0IHdoZW4gbWVudSBpcyBpbiBjb21wYWN0IHZpZXcuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICR3aW5kb3cucmVzaXplKHVwZGF0ZVRhYk5hdmlnYXRpb24pO1xuICAgICAgICAgICAgdXBkYXRlVGFiTmF2aWdhdGlvbigpO1xuXG4gICAgICAgICAgICBjbG9zZU1lbnVzKCk7XG5cbiAgICAgICAgICAgICR1dGlsTmF2Lm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IHRoYXQucGFyZW50KCdsaScpLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRJc0FjdGl2ZSA9IHBhcmVudC5oYXNDbGFzcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICdoZWFkZXJfX3V0aWxfX2l0ZW0tLWFjdGl2ZSdcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGNsb3NlTWVudXMoKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRhcmdldElzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDbGFzcygnaGVhZGVyX191dGlsX19pdGVtLS1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJGJvZHkuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY2xvc2VNZW51cygpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTm90IHBlcmZlY3QgYXMgaXQgcmVsaWVzIG9uIGtleXVwIGluc3RlYWQgb2Yga2V5ZG93blxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAkYm9keS5rZXl1cChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBlLmtleUNvZGUgPT09IDkgJiZcbiAgICAgICAgICAgICAgICAgICAgJChcbiAgICAgICAgICAgICAgICAgICAgICAgICcuaGVhZGVyX191dGlsX19pdGVtLS1hY3RpdmUsLmdsb2JhbC1uYXZfX21lbnUtaXRlbS0tYWN0aXZlJ1xuICAgICAgICAgICAgICAgICAgICApLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgISQoZS50YXJnZXQpLmlzKFxuICAgICAgICAgICAgICAgICAgICAgICAgJy5oZWFkZXJfX3V0aWxfX2l0ZW0tLWFjdGl2ZSwuaGVhZGVyX191dGlsX19pdGVtLS1hY3RpdmUgKiwgLmdsb2JhbC1uYXZfX21lbnUtaXRlbS0tYWN0aXZlLCAuZ2xvYmFsLW5hdl9fbWVudS1pdGVtLS1hY3RpdmUgKidcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBjbG9zZU1lbnVzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRnbG9iYWxOYXZEcm9wVG9nZ2xlci5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSB0aGF0LnBhcmVudHMoJy5nbG9iYWwtbmF2X19tZW51LWl0ZW0nKSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0SXNBY3RpdmUgPSBwYXJlbnQuaGFzQ2xhc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZ2xvYmFsLW5hdl9fbWVudS1pdGVtLS1hY3RpdmUnXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBjbG9zZU1lbnVzKCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0YXJnZXRJc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuYWRkQ2xhc3MoJ2dsb2JhbC1uYXZfX21lbnUtaXRlbS0tYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRvZ2dsZU1vYmlsZUdsb2JhbE1lbnUoJ25vbmUnKTtcbiAgICAgICAgICAgICRnbG9iYWxOYXZUb2dnbGVyLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlTW9iaWxlR2xvYmFsTWVudSgnbmF2Jyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJGhlYWRlclNlYXJjaFRvZ2dsZXIub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0b2dnbGVNb2JpbGVHbG9iYWxNZW51KCdzZWFyY2gnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgcmV0dXJuIGluaXQoKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciAkbWVudVdyYXBwZXIgPSAkKCcucHJpbWFyeS1tZW51LXdyYXBwZXInKSxcbiAgICAgICAgJG1lbnVUb2dnbGUgPSAkKCcucHJpbWFyeS1tZW51LXRvZ2dsZScpLFxuICAgICAgICAkbWVudSA9ICQoJy5wcmltYXJ5LW1lbnUnKSxcbiAgICAgICAgdXBkYXRlVG9nZ2xlTGluayA9IGZ1bmN0aW9uKHRvZ2dsZSwgaXNPcGVuKSB7XG4gICAgICAgICAgICB0b2dnbGUudG9nZ2xlQ2xhc3MoJ3ByaW1hcnktbWVudV9faXRlbS10b2dnbGUtLW9wZW4nLCBpc09wZW4pO1xuICAgICAgICAgICAgdG9nZ2xlLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4gPyAndHJ1ZScgOiAnZmFsc2UnKTtcbiAgICAgICAgfSxcbiAgICAgICAgYnVpbGRNZW51ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkbWVudVxuICAgICAgICAgICAgICAgIC5maW5kKCdsaTpoYXModWwpJylcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3ByaW1hcnktbWVudV9faXRlbS0tYnJhbmNoJylcbiAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJy5wcmltYXJ5LW1lbnVfX2l0ZW0taW50ZXJpb3InKVxuICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICRhcmlhTGFiZWwgPVxuICAgICAgICAgICAgICAgICAgICAgICAgJ3Nob3cgb3IgaGlkZSBpdGVtcyB1bmRlciAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnLnByaW1hcnktbWVudV9faXRlbS10ZXh0JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFwcGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiPGEgY2xhc3M9J3ByaW1hcnktbWVudV9faXRlbS10b2dnbGUnIGhyZWY9JyMnIGFyaWEtbGFiZWw9J1wiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXJpYUxhYmVsICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIic+PC9hPlwiXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRtZW51VG9nZ2xlLmF0dHIoXG4gICAgICAgICAgICAgICAgJ2FyaWEtbGFiZWwnLFxuICAgICAgICAgICAgICAgICRtZW51VG9nZ2xlLmZpbmQoJy5wcmltYXJ5LW1lbnUtdG9nZ2xlX19zZWN0aW9uLW5hbWUnKS50ZXh0KCkgK1xuICAgICAgICAgICAgICAgICAgICAnIG1lbnUnXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBoaWdobGlnaHRDdXJyZW50UGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHBhdGhuYW1lID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoJy9fbm9jYWNoZScsICcnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCcvX3JlY2FjaGUnLCAnJyk7XG4gICAgICAgICAgICAkKFxuICAgICAgICAgICAgICAgIFwiLnByaW1hcnktbWVudSAucHJpbWFyeS1tZW51X19pdGVtLWxpbmtbaHJlZiQ9J1wiICtcbiAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICBcIiddXCJcbiAgICAgICAgICAgICkuYWRkQ2xhc3MoJ3ByaW1hcnktbWVudV9faXRlbS1saW5rLS1zZWxlY3RlZCcpO1xuICAgICAgICB9LFxuICAgICAgICBvcGVuQ3VycmVudFN1Ym1lbnVzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkbWVudS5maW5kKCcucHJpbWFyeS1tZW51X19zdWJtZW51JykuZWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCcucHJpbWFyeS1tZW51X19pdGVtLWxpbmstLXNlbGVjdGVkJykubGVuZ3RoID5cbiAgICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVG9nZ2xlTGluayhcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKCcucHJpbWFyeS1tZW51X19pdGVtLXRvZ2dsZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVUb2dnbGVMaW5rKFxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJy5wcmltYXJ5LW1lbnVfX2l0ZW0tdG9nZ2xlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBvcGVuU3VibWVudSA9IGZ1bmN0aW9uKCR0b2dnbGUpIHtcbiAgICAgICAgICAgIHVwZGF0ZVRvZ2dsZUxpbmsoJHRvZ2dsZSwgdHJ1ZSk7XG4gICAgICAgICAgICAkdG9nZ2xlXG4gICAgICAgICAgICAgICAgLnBhcmVudCgnLnByaW1hcnktbWVudV9faXRlbS1pbnRlcmlvcicpXG4gICAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAgIC5zbGlkZURvd24oJ2Zhc3QnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VTYW1lTGV2ZWxTdWJtZW51cygkdG9nZ2xlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2VTYW1lTGV2ZWxTdWJtZW51cyA9IGZ1bmN0aW9uKCR0b2dnbGUpIHtcbiAgICAgICAgICAgIHZhciAkc2libGluZ0JyYW5jaGVzID0gJHRvZ2dsZVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcucHJpbWFyeS1tZW51X19pdGVtLS1icmFuY2gnKVxuICAgICAgICAgICAgICAgIC5zaWJsaW5ncygnLnByaW1hcnktbWVudV9faXRlbS0tYnJhbmNoJyk7XG5cbiAgICAgICAgICAgICQuZWFjaCgkc2libGluZ0JyYW5jaGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCcucHJpbWFyeS1tZW51X19pdGVtLWxpbmstLXNlbGVjdGVkJykubGVuZ3RoIDw9XG4gICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVG9nZ2xlTGluayhcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnLnByaW1hcnktbWVudV9faXRlbS10b2dnbGUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCcucHJpbWFyeS1tZW51X19zdWJtZW51JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGlkZVVwKCdtZWRpdW0nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2VTdWJtZW51ID0gZnVuY3Rpb24oJHRvZ2dsZSkge1xuICAgICAgICAgICAgdmFyICRlbmNsb3NpbmdNZW51SXRlbSA9ICR0b2dnbGUuY2xvc2VzdChcbiAgICAgICAgICAgICAgICAnLnByaW1hcnktbWVudV9faXRlbS0tYnJhbmNoJ1xuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICRlbmNsb3NpbmdNZW51SXRlbS5maW5kKCcucHJpbWFyeS1tZW51X19pdGVtLWxpbmstLXNlbGVjdGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZVRvZ2dsZUxpbmsoJHRvZ2dsZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICR0b2dnbGVcbiAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgnLnByaW1hcnktbWVudV9faXRlbS1pbnRlcmlvcicpXG4gICAgICAgICAgICAgICAgICAgIC5uZXh0KClcbiAgICAgICAgICAgICAgICAgICAgLnNsaWRlVXAoJ2Zhc3QnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlVG9nZ2xlTGluayhcbiAgICAgICAgICAgICAgICAgICAgJGVuY2xvc2luZ01lbnVJdGVtLmZpbmQoJy5wcmltYXJ5LW1lbnVfX2l0ZW0tdG9nZ2xlJyksXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAkZW5jbG9zaW5nTWVudUl0ZW1cbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5wcmltYXJ5LW1lbnVfX3N1Ym1lbnUnKVxuICAgICAgICAgICAgICAgICAgICAuc2xpZGVVcCgnZmFzdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpbml0TWVudSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYnVpbGRNZW51KCk7XG4gICAgICAgICAgICBoaWdobGlnaHRDdXJyZW50UGFnZSgpO1xuXG4gICAgICAgICAgICAkbWVudVRvZ2dsZS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRtZW51LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgICAgICAgICAgICAgICAgb3BlbkN1cnJlbnRTdWJtZW51cygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBzZXRPcGVuID0gISRtZW51VG9nZ2xlLmhhc0NsYXNzKFxuICAgICAgICAgICAgICAgICAgICAncHJpbWFyeS1tZW51LXRvZ2dsZS0tb3BlbidcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgJG1lbnVUb2dnbGUudG9nZ2xlQ2xhc3MoJ3ByaW1hcnktbWVudS10b2dnbGUtLW9wZW4nLCBzZXRPcGVuKTtcbiAgICAgICAgICAgICAgICAkbWVudVRvZ2dsZS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgc2V0T3BlbiA/ICd0cnVlJyA6ICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgJG1lbnUuc2xpZGVUb2dnbGUoJ2Zhc3QnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJCgnLnByaW1hcnktbWVudV9faXRlbS10b2dnbGUnKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygncHJpbWFyeS1tZW51X19pdGVtLXRvZ2dsZS0tb3BlbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb3NlU3VibWVudSgkKHRoaXMpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvcGVuU3VibWVudSgkKHRoaXMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICByZXR1cm4gaW5pdE1lbnUoKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgJCA9IHJlcXVpcmUoJy4uL2pxdWVyeScpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAkKCcuaW1hZ2UtYWNjb3JkaW9uIGxhYmVsJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbGFiZWxUYXJnZXQgPSAkKHRoaXMpLmF0dHIoJ2ZvcicpO1xuICAgICAgICAgICAgJCgnIycgKyBsYWJlbFRhcmdldCkuYmx1cigpO1xuICAgICAgICAgICAgJCgnIycgKyBsYWJlbFRhcmdldCkuZm9jdXMoKTtcbiAgICAgICAgfSk7XG4gICAgICAgICQoJy5pbWFnZS1hY2NvcmRpb24gaW5wdXRbdHlwZT1cInJhZGlvXCJdJykuY2hhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHJhZGlvSW5wdXQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgJCgnLmltYWdlLWFjY29yZGlvbiBpbnB1dFt0eXBlPVwicmFkaW9cIl0nKS5yZW1vdmVDbGFzcygnY2hlY2tlZCcpO1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIHJhZGlvSW5wdXQuYWRkQ2xhc3MoJ2NoZWNrZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbn0pKCk7XG4iLCIvKipcbiAqIFRvZ2dsZSBWaXNpYmlsaXR5IG9mIEltYWdlIENyZWRpdCBDb21wb25lbnRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyICQgPSByZXF1aXJlKCcuLi9qcXVlcnknKTtcblxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyICRjcmVkaXRzID0gJCgnLmltYWdlLWNyZWRpdCcpLFxuICAgICAgICAgICAgJGNyZWRpdEl0ZW1zID0gJCgnLmNyZWRpdHMtaXRlbXMnKSxcbiAgICAgICAgICAgICRzY3BDcmVkaXRzVGl0bGUgPSAkKCcuY3JlZGl0cy10aXRsZScpLFxuICAgICAgICAgICAgY3JlZGl0QnV0dG9uQ2xhc3MgPSAnLmltYWdlLWNyZWRpdF9fYnV0dG9uJyxcbiAgICAgICAgICAgIHRvZ2dsZUltYWdlQ3JlZGl0ID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuYXR0cignYXJpYS1wcmVzc2VkJykgPT09ICd0cnVlJyA/ICdmYWxzZScgOiAndHJ1ZSc7XG4gICAgICAgICAgICAgICAgbm9kZS5hdHRyKCdhcmlhLXByZXNzZWQnLCBzdGF0ZSk7XG4gICAgICAgICAgICAgICAgbm9kZS5wYXJlbnQoKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgc3RhdGUpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAkY3JlZGl0cy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh0aGlzKVxuICAgICAgICAgICAgICAgIC5maW5kKGNyZWRpdEJ1dHRvbkNsYXNzKVxuICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVJbWFnZUNyZWRpdCgkKHRoaXMpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjcENyZWRpdHNUaXRsZS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQodGhpcylcbiAgICAgICAgICAgICAgICAudG9nZ2xlQ2xhc3MoJ2NyZWRpdHMtdGl0bGUtLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgLm5leHQoJy5jcmVkaXRzLWl0ZW1zJylcbiAgICAgICAgICAgICAgICAudG9nZ2xlQ2xhc3MoJ3NyLW9ubHknKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0pKCk7XG4iLCIvKipcbiAqIEluaXRpYWxpc2UgRHJvcGRvd25zXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciAkID0gcmVxdWlyZSgnLi4vanF1ZXJ5Jyk7XG4gICAgdmFyIGNvbnRlbnRXcmFwcGVyID0gJCgnLmNpdHktaGVhbHRoX19jb250YWluZXInKTtcbiAgICB2YXIgbG9hZGluZyA9ICQoJy5jaXR5LWhlYWx0aF9fbG9hZGluZycpO1xuICAgIHZhciBmb3JtID0gJCgnLmNpdHktaGVhbHRoX19mb3JtJyk7XG4gICAgdmFyIGlucHV0cyA9IGZvcm0uZmluZCgnaW5wdXQnKTtcblxuICAgIHZhciBmaXhQYWdpbmF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICQoJy5jaXR5LWhlYWx0aF9fcGFnaW5hdGlvbi0tYWxsIGEnKS5jbGljayhmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB2YXIgcGFnZSA9ICQodGhpcylcbiAgICAgICAgICAgICAgICAuYXR0cignaHJlZicpXG4gICAgICAgICAgICAgICAgLnNwbGl0KCdyZXN1bHRfMzE0NzI5X3Jlc3VsdF9wYWdlPScpWzFdO1xuICAgICAgICAgICAgcmVsb2FkKHtcbiAgICAgICAgICAgICAgICByZXN1bHRfMzE0NzI5X3Jlc3VsdF9wYWdlOiBwYWdlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAkKCcuY2l0eS1oZWFsdGhfX3BhZ2luYXRpb24tLWZpbHRlcmVkIGEnKS5jbGljayhmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB2YXIgcGFnZSA9ICQodGhpcylcbiAgICAgICAgICAgICAgICAuYXR0cignaHJlZicpXG4gICAgICAgICAgICAgICAgLnNwbGl0KCdjdXJyZW50X3Jlc3VsdF9wYWdlPScpWzFdXG4gICAgICAgICAgICAgICAgLnNwbGl0KCcmJylbMF07XG4gICAgICAgICAgICByZWxvYWQoe1xuICAgICAgICAgICAgICAgIGN1cnJlbnRfcmVzdWx0X3BhZ2U6IHBhZ2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciByZWxvYWQgPSBmdW5jdGlvbihmaXhlZFBhcmFtcykge1xuICAgICAgICB2YXIgcGFyYW1zID0gJC5leHRlbmQoeyB0OiBuZXcgRGF0ZSgpLmdldFRpbWUoKSB9LCBmaXhlZFBhcmFtcyk7XG5cbiAgICAgICAgaW5wdXRzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBpbnB1dC5hdHRyKCduYW1lJyk7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBpbnB1dC52YWwoKTtcblxuICAgICAgICAgICAgaWYgKG5hbWUgJiYgbmFtZS5sZW5ndGggPiAwICYmIHZhbHVlICYmIHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBwYXJhbXNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29udGVudFdyYXBwZXIuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgbG9hZGluZy5jc3MoJ2Rpc3BsYXknLCAnaW5saW5lLWJsb2NrJyk7XG5cbiAgICAgICAgJC5nZXQoXG4gICAgICAgICAgICAnLy93d3cuY2l0eS5hYy51ay9hcGkvY2l0eS1oZWFsdGgtY291cnNlcy9fbm9jYWNoZScsXG4gICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgICBmdW5jdGlvbihkYXRhKSB7fVxuICAgICAgICApXG4gICAgICAgICAgICAuZG9uZShmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgY29udGVudFdyYXBwZXIuaHRtbChkYXRhKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWx3YXlzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50V3JhcHBlci5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcbiAgICAgICAgICAgICAgICBsb2FkaW5nLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgICAgICAgICAgZml4UGFnaW5hdGlvbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgJCgnLmNpdHktaGVhbHRoX19mb3JtIC5kcm9wZG93bi1zZWxlY3QnKS5jaXR5RHJvcGRvd24oe1xuICAgICAgICAgICAgb25zZWxlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJlbG9hZCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGZpeFBhZ2luYXRpb24oKTtcbiAgICB9O1xufSkoKTtcbiIsIi8qKlxuICogY3JlYXRlcyBkeW5hbWljIGdvb2dsZSBtYXBzXG4gKiBAcmV0dXJuOiBVbmRlZmluZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyICQgPSByZXF1aXJlKCcuLi9qcXVlcnknKSxcbiAgICAgICAgb25Mb2FkID0gZnVuY3Rpb24oZHluYW1pY01hcCkge1xuICAgICAgICAgICAgdmFyIGlpaSxcbiAgICAgICAgICAgICAgICBjdXJyZW50TWFya2VyLFxuICAgICAgICAgICAgICAgIG1hcmtlcixcbiAgICAgICAgICAgICAgICBjZW50ZXJNYXJrZXIsXG4gICAgICAgICAgICAgICAgZ21hcCxcbiAgICAgICAgICAgICAgICBsYWJlbEJveCxcbiAgICAgICAgICAgICAgICBpbmZvV2luZG93LFxuICAgICAgICAgICAgICAgIGdtYXBEYXRhLFxuICAgICAgICAgICAgICAgIHVzZXJNYXBDZW50ZXIsXG4gICAgICAgICAgICAgICAgbG9jYXRpb25Sb290Tm9kZSA9IGR5bmFtaWNNYXAuYXR0cignZGF0YS1sb2NhdGlvbnMtbm9kZScpLFxuICAgICAgICAgICAgICAgIGNvbXB1dGVkU2l6ZSA9IG5ldyBnb29nbGUubWFwcy5TaXplKDM2LCA0MyksXG4gICAgICAgICAgICAgICAgaW5mb1dpbmRvd09mZlNldCA9IG5ldyBnb29nbGUubWFwcy5TaXplKDAsIC0zMCksXG4gICAgICAgICAgICAgICAgZ21hcENvbG91ck9wdGlvbnMgPSBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVUeXBlOiAnbGFuZHNjYXBlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlcnM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdHVyYXRpb246IC02MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHRuZXNzOiA2NSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogJ29uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZVR5cGU6ICdwb2knLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVyczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F0dXJhdGlvbjogLTQwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWdodG5lc3M6IDQwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiAnc2ltcGxpZmllZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVUeXBlOiAncm9hZC5oaWdod2F5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlcnM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdHVyYXRpb246IC04MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHRuZXNzOiA0MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogJ3NpbXBsaWZpZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlVHlwZTogJ3JvYWQuYXJ0ZXJpYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVyczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F0dXJhdGlvbjogLTYwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWdodG5lc3M6IDQwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiAnb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlVHlwZTogJ3JvYWQubG9jYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVyczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F0dXJhdGlvbjogLTYwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWdodG5lc3M6IDQwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiAnb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlVHlwZTogJ3RyYW5zaXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVyczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F0dXJhdGlvbjogLTYwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWdodG5lc3M6IDQwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiAnc2ltcGxpZmllZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVUeXBlOiAnYWRtaW5pc3RyYXRpdmUucHJvdmluY2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVyczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogJ29mZicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVUeXBlOiAnd2F0ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFR5cGU6ICdsYWJlbHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVyczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogJ29uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHRuZXNzOiAtMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdHVyYXRpb246IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlVHlwZTogJ3dhdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRUeXBlOiAnZ2VvbWV0cnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVyczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHRuZXNzOiAtMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdHVyYXRpb246IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlVHlwZTogJ3RyYW5zaXQuc3RhdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZXJzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXR1cmF0aW9uOiAzMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHRuZXNzOiAtMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6ICdvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBhdHRhY2hDbGlja0V2ZW50ID0gZnVuY3Rpb24oXG4gICAgICAgICAgICAgICAgICAgIG1hcCxcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbGVkQm94LFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAvLyBvbiBjbGljayBvbiBhIG1hcmtlciwgc2V0IHRoZSBjb250ZW50IG9mIGluZm93aW5kb3cgYW5kIG9wZW4gaXRcbiAgICAgICAgICAgICAgICAgICAgLy9hbHNvIGNlbnRlciB0aGUgbWFwIG9uIHRoYXQgbWFya2VyXG4gICAgICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvV2luZG93LnNldENvbnRlbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwibWFya2VyLWRlc2NyaXB0aW9uXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvdy5zZXRQb3NpdGlvbihtYXJrZXIucG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvdy5vcGVuKG1hcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAucGFuVG8obWFya2VyLnBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwbGFjZUNlbnRlck1hcmtlciA9IGZ1bmN0aW9uKG1hcCwgbWFya2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBtYXJrZXIgZm9yIHRoZSBjZW50ZXIgb2YgdGhlIG1hcFxuICAgICAgICAgICAgICAgICAgICBjZW50ZXJNYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG1hcmtlci5pY29uLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlci5sYXRpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXIubG9uZ2l0dWRlXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG1hcmtlci5uYW1lLFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBjZW50ZXJNYXJrZXIuc2V0WkluZGV4KDE4MCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJNYXJrZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvdy5zZXRDb250ZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJtYXJrZXItdGl0bGVcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlck1hcmtlci50aXRsZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9zcGFuPjxzcGFuIGNsYXNzPVwibWFya2VyLWRlc2NyaXB0aW9uXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXIuZGVzY3JpcHRpb24gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvV2luZG93LnNldFBvc2l0aW9uKGNlbnRlck1hcmtlci5wb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvdy5vcGVuKG1hcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwbGFjZUFsbE1hcmtlciA9IGZ1bmN0aW9uKG1hcmtlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpaWkgPSAwOyBpaWkgPCBtYXJrZXJzLmxlbmd0aDsgaWlpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRNYXJrZXIgPSBtYXJrZXJzW2lpaV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlZmluZSBhIG5ldyBtYXJrZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBjdXJyZW50TWFya2VyLmljb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXA6IGdtYXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE1hcmtlci5sYXRpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE1hcmtlci5sb25naXR1ZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBjdXJyZW50TWFya2VyLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGEgbGFiZWwgZm9yIGVhY2ggbWFya2VyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB1c2VzIGdvb2dsZSBtYXAgcGx1Z2luXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbEJveCA9IG5ldyBJbmZvQm94KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBtYXJrZXIudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IG1hcmtlci5wb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYW5lOiAnbWFwUGFuZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VCb3hVUkw6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVBdXRvUGFuOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveFN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbEJveC5vcGVuKGdtYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNoQ2xpY2tFdmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbWFwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbEJveCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TWFya2VyLmRlc2NyaXB0aW9uICsgJyZuYnNwOydcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBjYWxsIHRoZSBnb29nbGUgbWFwcyBsb2NhdGlvbiBhcGkgaW4gbWF0cml4IHRvIGdldCB0aGUgZGF0YSBvbiB0aGUgbWFya2VycyBhbmQgdGhlIGluaXRpYWwgbWFwIHBhcmFtZXRlcnNcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOlxuICAgICAgICAgICAgICAgICAgICAnLy93d3cuY2l0eS5hYy51ay9hcGkvZ29vZ2xlLW1hcC1sb2NhdGlvbnM/cm9vdD0nICtcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb25Sb290Tm9kZSxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgfSkuZG9uZShmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbWFwIGFuZCBtYXJrZXJzIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgZ21hcERhdGEgPSBkYXRhO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgbWFwXG4gICAgICAgICAgICAgICAgICAgIGdtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2R5bmFtaWMtZ21hcCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbHdoZWVsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlZXRWaWV3Q29udHJvbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgem9vbTogZ21hcERhdGEubG9hZE9wdGlvbnMuem9vbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXI6IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdtYXBEYXRhLmxvYWRPcHRpb25zLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbWFwRGF0YS5sb2FkT3B0aW9ucy5sb25naXR1ZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlczogZ21hcENvbG91ck9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgbmV3IGluZm8gd2luZG93XG4gICAgICAgICAgICAgICAgICAgIGluZm9XaW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaXhlbE9mZnNldDogaW5mb1dpbmRvd09mZlNldCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIGFsbCB0aGUgbWFya2VycyBleGNlcHQgdGhlIGNlbnRyYWwgb25lXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBhIGxhYmVsIHRvIGVhY2ggb2YgdGhlbVxuICAgICAgICAgICAgICAgICAgICBwbGFjZUFsbE1hcmtlcihnbWFwRGF0YS5tYXJrZXJzKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgYSBtYXJrZXIgZm9yIHRoZSBjZW50ZXIgb2YgdGhlIG1hcFxuICAgICAgICAgICAgICAgICAgICBwbGFjZUNlbnRlck1hcmtlcihnbWFwLCBnbWFwRGF0YS5jZW50ZXJNYXJrZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uIHJlc2l6aW5nIHRoZSBtYXAsIG1ha2Ugc3VyZSB3ZSBrZWVwIHRoZSBjdXJyZW50IGNlbnRlciBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGREb21MaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdyZXNpemUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlck1hcENlbnRlciA9IGdtYXAuZ2V0Q2VudGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihnbWFwLCAncmVzaXplJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ21hcC5zZXRDZW50ZXIodXNlck1hcENlbnRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oZHluYW1pY01hcCkge1xuICAgICAgICBpZiAoZHluYW1pY01hcC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAkLmdldE11bHRpSnNTY3JpcHRzKFxuICAgICAgICAgICAgICAgIFsnbGliL2dvb2dsZS9tYXAvaW5mb2JveC1wYWNrZWQtMS4xLjkuanMnXSxcbiAgICAgICAgICAgICAgICBvbkxvYWQuYmluZChudWxsLCBkeW5hbWljTWFwKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG59KSgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyICQgPSByZXF1aXJlKCcuLi9qcXVlcnknKTtcblxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgJCgnLmltYWdlLWNhcm91c2VsJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjYXJvdXNlbCA9ICQodGhpcyk7XG4gICAgICAgICAgICB2YXIgc2xpZGVzID0gY2Fyb3VzZWwuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgIHNsaWRlc1xuICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdkYXRhLWluZGV4JywgaSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAud3JhcEFsbCgnPGRpdj48L2Rpdj4nKTtcblxuICAgICAgICAgICAgdmFyIHVwZGF0ZUFjdGl2ZSA9IGZ1bmN0aW9uKHNsaWRlRWxlbWVudCwgb2xkSW5kZXgsIG5ld0luZGV4KSB7XG4gICAgICAgICAgICAgICAgY2Fyb3VzZWxcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5pbWFnZS1jYXJvdXNlX19pdGVtLS1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2ltYWdlLWNhcm91c2VfX2l0ZW0tLWFjdGl2ZScpO1xuICAgICAgICAgICAgICAgIGNhcm91c2VsXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKCcuaW1hZ2UtY2Fyb3VzZV9faXRlbVtkYXRhLWluZGV4PVwiJyArIG5ld0luZGV4ICsgJ1wiXScpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnaW1hZ2UtY2Fyb3VzZV9faXRlbS0tYWN0aXZlJyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgc2xpZGVyID0gbnVsbDtcblxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgY29udHJvbHM6IHRydWUsXG4gICAgICAgICAgICAgICAgdG91Y2hFbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0U3dpcGVYOiB0cnVlLFxuICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0U3dpcGVZOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuZXh0VGV4dDpcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuPjxzcGFuIGNsYXNzPVwic3Itb25seVwiPkdvIHRvIG5leHQgc2xpZGU8L3NwYW4+PHNwYW4gY2xhc3M9XCJmYSBmYS1jaGV2cm9uLXJpZ2h0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPjwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgIHByZXZUZXh0OlxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4+PHNwYW4gY2xhc3M9XCJzci1vbmx5XCI+R28gdG8gcHJldmlvdXMgc2xpZGU8L3NwYW4+PHNwYW4gY2xhc3M9XCJmYSBmYS1jaGV2cm9uLWxlZnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+PC9zcGFuPicsXG4gICAgICAgICAgICAgICAgcGFnZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1vdmVTbGlkZXM6IDEsXG4gICAgICAgICAgICAgICAgc2xpZGVXaWR0aDogMCxcbiAgICAgICAgICAgICAgICBmaXJzdFNsaWRlTWFyZ2luOiAwLFxuICAgICAgICAgICAgICAgIG9uU2xpZGVCZWZvcmU6IHVwZGF0ZUFjdGl2ZSxcbiAgICAgICAgICAgICAgICBvblNsaWRlQWZ0ZXI6IHVwZGF0ZUFjdGl2ZSxcbiAgICAgICAgICAgICAgICBvblNsaWRlckxvYWQ6IGZ1bmN0aW9uKGN1cnJlbnRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBjYXJvdXNlbC5maW5kKCcuYngtY29udHJvbHMgYScpLmF0dHIoJ3JvbGUnLCAnYnV0dG9uJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2Fyb3VzZWwuZmluZCgnLmltYWdlLWNhcm91c2VfX2l0ZW0nKS5jc3MoJ3dpZHRoJylcbiAgICAgICAgICAgICAgICAgICAgICAgICkgIT09IG9wdGlvbnMuc2xpZGVXaWR0aFxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQodXBkYXRlLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcm91c2VsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcuaW1hZ2UtY2Fyb3VzZV9faXRlbVtkYXRhLWluZGV4PVwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXggK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiXSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdpbWFnZS1jYXJvdXNlX19pdGVtLS1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcm91c2VsLmZpbmQoJy5pbWFnZS1jYXJvdXNlX19pdGVtJykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWFyZ2luLWxlZnQnOiBvcHRpb25zLmZpcnN0U2xpZGVNYXJnaW4gKyAncHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYXJnaW4tcmlnaHQnOiAtb3B0aW9ucy5maXJzdFNsaWRlTWFyZ2luICsgJ3B4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciB1cGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBjYXJvdXNlbC53aWR0aCgpO1xuICAgICAgICAgICAgICAgIGlmIChNb2Rlcm5penIubXEoJyhtaW4td2lkdGg6IDYwMHB4KScpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMubWF4U2xpZGVzID0gMjtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zbGlkZVdpZHRoID0gTWF0aC5yb3VuZCgwLjUgKiAoMjAgKyB3aWR0aCkpO1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmZpcnN0U2xpZGVNYXJnaW4gPSAwLjI1ICogd2lkdGggLSA1O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMubWF4U2xpZGVzID0gMTtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zbGlkZVdpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmlyc3RTbGlkZU1hcmdpbiA9IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXIgPSBjYXJvdXNlbC5jaGlsZHJlbigpLmJ4U2xpZGVyKG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlci5yZWxvYWRTbGlkZXIob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZSh1cGRhdGUpO1xuICAgICAgICB9KTtcbiAgICB9O1xufSkoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciAkID0gcmVxdWlyZSgnLi4vanF1ZXJ5JyksXG4gICAgICAgIHNjcmVlbldpZHRoID0gLTEsXG4gICAgICAgIGluTWQgPSB0cnVlLFxuICAgICAgICBzbGlkZXIgPSBudWxsLFxuICAgICAgICAkdyA9ICQod2luZG93KSxcbiAgICAgICAgdXBkYXRlTmV3c1NsaWRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyICRob21lTmV3cyA9ICQoJy5uZXdzLWV2ZW50cy1zdHJpcF9fbmV3cycpLFxuICAgICAgICAgICAgICAgIHdpZHRoID0gTWF0aC5yb3VuZCgkdy53aWR0aCgpKTtcblxuICAgICAgICAgICAgaWYgKHdpZHRoICE9PSBzY3JlZW5XaWR0aCkge1xuICAgICAgICAgICAgICAgIHNjcmVlbldpZHRoID0gd2lkdGg7XG5cbiAgICAgICAgICAgICAgICB2YXIgbmV3SW5NZCA9IHNjcmVlbldpZHRoID49IDg1MDtcbiAgICAgICAgICAgICAgICBpZiAobmV3SW5NZCAhPT0gaW5NZCkge1xuICAgICAgICAgICAgICAgICAgICBpbk1kID0gbmV3SW5NZDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5NZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLmRlc3Ryb3lTbGlkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGhvbWVOZXdzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygncm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3N0eWxlJywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnY29sLXhzLTI0IGNvbC1tZC04JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNzcygnd2lkdGgnLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXIgPSAkaG9tZU5ld3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3JvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2NvbC14cy0yNCBjb2wtbWQtOCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVuZCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmJ4U2xpZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0hvdmVyOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3VjaEVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0U3dpcGVYOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdFN3aXBlWTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db250cm9sczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2VGV4dDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8aSBjbGFzcz1cImJnIGZhIGZhLWNpcmNsZVwiPjwvaT48aSBjbGFzcz1cImljIGZhIGZhLWNoZXZyb24tbGVmdFwiPjwvaT4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0VGV4dDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8aSBjbGFzcz1cImJnIGZhIGZhLWNpcmNsZVwiPjwvaT48aSBjbGFzcz1cImljIGZhIGZhLWNoZXZyb24tcmlnaHRcIj48L2k+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgJHcucmVzaXplKHVwZGF0ZU5ld3NTbGlkZXIpO1xuICAgICAgICB1cGRhdGVOZXdzU2xpZGVyKCk7XG4gICAgfTtcbn0pKCk7XG4iLCIvKipcbiAqIEluaXQgc2VlIG1vcmUgd2lkZ2V0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciAkID0gcmVxdWlyZSgnLi4vanF1ZXJ5Jyk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB3aWRnZXRzID0gJCgnLnNlZS1tb3JlJyk7XG5cbiAgICAgICAgd2lkZ2V0cy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHdpZGdldCA9ICQodGhpcyk7XG4gICAgICAgICAgICB2YXIgdG9nZ2xlID0gd2lkZ2V0LmZpbmQoJy5zZWUtbW9yZV9fdG9nZ2xlJyk7XG4gICAgICAgICAgICB2YXIgdG9nZ2xlTGFiZWwgPSB0b2dnbGUuZmluZCgnLnNlZS1tb3JlX190b2dnbGVfX2xhYmVsJyk7XG4gICAgICAgICAgICBpZiAodG9nZ2xlTGFiZWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdG9nZ2xlTGFiZWwgPSB0b2dnbGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gd2lkZ2V0LmZpbmQoJy5zZWUtbW9yZV9fY29udGVudCcpO1xuICAgICAgICAgICAgdmFyIHNob3dUZXh0ID0gdG9nZ2xlLmh0bWwoKTtcbiAgICAgICAgICAgIHZhciBoaWRlVGV4dCA9IHRvZ2dsZS5hdHRyKCdkYXRhLWhpZGUtdGV4dCcpIHx8ICdIaWRlJztcbiAgICAgICAgICAgIHRvZ2dsZS5jbGljayhmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGlmICh3aWRnZXQuaGFzQ2xhc3MoJ3NlZS1tb3JlLS1hY3RpdmUnKSkge1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVMYWJlbC5odG1sKHNob3dUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgd2lkZ2V0LnJlbW92ZUNsYXNzKCdzZWUtbW9yZS0tYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuc2xpZGVVcCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZGdldC5hZGRDbGFzcygnc2VlLW1vcmUtLWFjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVMYWJlbC5odG1sKGhpZGVUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudC5zbGlkZURvd24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0pKCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgaW5pdFdoaXRlQ2FyZHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpIDwgNjAwKSB7XG4gICAgICAgICAgICAkKCcud2hpdGUtY2FyZCcpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJveCA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBib3guZmluZCgnLndoaXRlLWNhcmRfX2NvbnRlbnQnKTtcblxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50LmhlaWdodCgpID4gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuYWRkQ2xhc3MoJ3doaXRlLWNhcmRfX2NvbnRlbnQtLXJlYWQtbW9yZScpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnV0dG9uID0gJChcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwid2hpdGUtY2FyZF9fcmVhZC1tb3JlXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ3aGl0ZS1jYXJkX19yZWFkLW1vcmVfX2JnXCI+PC9kaXY+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxhICBocmVmPVwiI1wiPjxzcGFuPnJlYWQgbW9yZTwvc3Bhbj48L2E+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LnJlbW92ZUNsYXNzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2hpdGUtY2FyZF9fY29udGVudC0tcmVhZC1tb3JlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oYm94KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgICQoJy53aGl0ZS1jYXJkIC5lbWJlZC1jb250YWluZXInKS52aWRlb1ByZXZpZXcoe1xuICAgICAgICAgICAgYWxsb3dGdWxsc2NyZWVuOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGluaXRXaGl0ZUNhcmRzO1xufSkoKTtcbiIsIi8vIGZhbGxiYWNrIGZvciBicm93c2VycyB0aGF0IGRvbid0IHVuZGVyc3RhbmQgcGxhY2Vob2xkZXIgYXR0cmlidXRlXG5cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciAkID0gcmVxdWlyZSgnLi4vanF1ZXJ5JyksXG4gICAgICAgIE1vZGVybml6ciA9IHdpbmRvdy5Nb2Rlcm5penI7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChNb2Rlcm5penIgJiYgIU1vZGVybml6ci5pbnB1dC5wbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgdmFyIGlucHV0cyA9ICQoJ1twbGFjZWhvbGRlcl0nKTtcblxuICAgICAgICAgICAgaW5wdXRzXG4gICAgICAgICAgICAgICAgLmZvY3VzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQudmFsKCkgPT09IGlucHV0LmF0dHIoJ3BsYWNlaG9sZGVyJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbCgnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5yZW1vdmVDbGFzcygncGxhY2Vob2xkZXInKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmJsdXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbCgpID09PSAnJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQudmFsKCkgPT09IGlucHV0LmF0dHIoJ3BsYWNlaG9sZGVyJylcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5hZGRDbGFzcygncGxhY2Vob2xkZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbChpbnB1dC5hdHRyKCdwbGFjZWhvbGRlcicpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmJsdXIoKTtcblxuICAgICAgICAgICAgaW5wdXRzLnBhcmVudHMoJ2Zvcm0nKS5zdWJtaXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnW3BsYWNlaG9sZGVyXScpXG4gICAgICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC52YWwoKSA9PT0gaW5wdXQuYXR0cigncGxhY2Vob2xkZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbCgnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTtcbiIsIi8qKlxuICogSW5pdCBzZWUgcG9wdXBcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyICQgPSByZXF1aXJlKCcuLi9qcXVlcnknKTtcblxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFuY2hvcnMgPSAkKCdhW2RhdGEtcG9wdXAtZGlhbG9nXScpO1xuXG4gICAgICAgIGFuY2hvcnMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhbmNob3IgPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICBhbmNob3IuY2xpY2soZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB2YXIgbGluayA9ICQoZS5jdXJyZW50VGFyZ2V0KS5hdHRyKCdocmVmJyk7XG5cbiAgICAgICAgICAgICAgICAkKCcjJyArIGFuY2hvci5hdHRyKCdkYXRhLXBvcHVwLWRpYWxvZycpKS5kaWFsb2coe1xuICAgICAgICAgICAgICAgICAgICBtb2RhbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGFuY2hvci5hdHRyKCd0aXRsZScpLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogODAwLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcmVzaXphYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uczogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdDYW5jZWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5kaWFsb2coJ2Nsb3NlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0FjY2VwdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBsaW5rO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmRpYWxvZygnY2xvc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xufSkoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciAkID0gcmVxdWlyZSgnLi4vanF1ZXJ5Jyk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICQoJy5yZXNwb25zaXZlLXRhYmxlJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGV0YWJsZSA9ICQodGhpcyk7XG4gICAgICAgICAgICB0aGV0YWJsZS5maW5kKCd0Ym9keSB0ZCcpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKFxuICAgICAgICAgICAgICAgICAgICAnZGF0YS10aCcsXG4gICAgICAgICAgICAgICAgICAgIHRoZXRhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmluZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGhlYWQgdGg6bnRoLWNoaWxkKCcgKyAoJCh0aGlzKS5pbmRleCgpICsgMSkgKyAnKSdcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG59KSgpO1xuIiwiLyoqXG4gKiBhZGRzIGF1dG9jb21wbGV0ZSBmdW5jdGlvbmFsaXR5IHRvIHRoZSBtYWluIHNlYXJjaCBiYXIsIHVzaW5nIGpRdWVyeSBVSVxuICogQHBhcmFtOiB7T2JqZWN0fSBmb3JtIC0galF1ZXJ5IG9iamVjdCBmb3IgZm9ybSB0byBydW4gYXV0b1N1Z2dlc3Qgb25cbiAqIEBwYXJhbToge09iamVjdH0gaW5wdXQgLSBqUXVlcnkgb2JqZWN0IGZvciBpbnB1dCBlbGVtZW50cyB0byBydW4gYXV0b1N1Z2dlc3Qgb25cbiAqIEBwYXJhbToge1N0cmluZ30gY29sbGVjdGlvbiAtIHRoZSBuYW1lIG9mIHRoZSBGdW5uZWxiYWNrIGNvbGxlY3Rpb24gdG8gcXVlcnlcbiAqIEByZXR1bjoge1VuZGVmaW5lZH1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyICQgPSByZXF1aXJlKCcuLi9qcXVlcnknKSxcbiAgICAgICAgYXJyYXlEdXBsaWNhdGVaYXBwZXIgPSBmdW5jdGlvbihteUFycmF5KSB7XG4gICAgICAgICAgICB2YXIgbXlVbmlxdWVBcnJheSA9IFtdO1xuICAgICAgICAgICAgJC5lYWNoKG15QXJyYXksIGZ1bmN0aW9uKGksIGVsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQuaW5BcnJheShlbCwgbXlVbmlxdWVBcnJheSkgPT09IC0xKSBteVVuaXF1ZUFycmF5LnB1c2goZWwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbXlVbmlxdWVBcnJheTtcbiAgICAgICAgfTtcblxuICAgIHJldHVybiBmdW5jdGlvbihmb3JtLCBpbnB1dCwgY29sbGVjdGlvbikge1xuICAgICAgICBpbnB1dC5hdXRvY29tcGxldGUoe1xuICAgICAgICAgICAgc291cmNlOiBmdW5jdGlvbihyZXF1ZXN0LCByZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZhciBmYmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uIHx8ICdtYWluLWFsbCc7XG4gICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOlxuICAgICAgICAgICAgICAgICAgICAgICAgJy9mYi9zdWdnZXN0Lmpzb24/Y29sbGVjdGlvbj0nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZiY29sbGVjdGlvbiArXG4gICAgICAgICAgICAgICAgICAgICAgICAnJmZtdD1qc29uJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydGlhbF9xdWVyeTogcmVxdWVzdC50ZXJtLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gYXJyYXlEdXBsaWNhdGVaYXBwZXIoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLm1hcChkYXRhLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTsgLy9lbmQgJC5hamF4XG4gICAgICAgICAgICB9LCAvL2VuZCBzb3VyY2UgZnVuY3Rpb25cblxuICAgICAgICAgICAgbWluTGVuZ3RoOiAyLFxuICAgICAgICAgICAgZGVsYXk6IDIwLFxuXG4gICAgICAgICAgICAvL3doZW4geW91IGhhdmUgc2VsZWN0ZWQgc29tZXRoaW5nXG4gICAgICAgICAgICBzZWxlY3Q6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICAgICAgICAgIC8vY2xvc2UgdGhlIGRyb3AgZG93blxuICAgICAgICAgICAgICAgIC8vbmVlZCB0byBjcmVhdGUgYSBkdW1teSBhc3NpZ25tZW50LCB0byBwbGVhc2UganNsaW50XG4gICAgICAgICAgICAgICAgLy9jbG9zZSBpcyBzdGlsbCBwZXJmb3JtZWRcbiAgICAgICAgICAgICAgICB2YXIgYyA9IHRoaXMuY2xvc2U7XG4gICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgb24gY2xpY2sgdGhlIHNlbGVjdGVkIHZhbHVlIHJlcGxhY2VzIHRoZSB0eXBlIHZhbHVlXG4gICAgICAgICAgICAgICAgJCh0aGlzKS52YWwodWkuaXRlbS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgZm9ybS5zdWJtaXQoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vc2hvdyB0aGUgZHJvcCBkb3duXG4gICAgICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygndWktY29ybmVyLWFsbCcpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygndWktY29ybmVyLXRvcCcpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy9jbG9zZSB0aGUgZHJvcCBkb3duXG4gICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3VpLWNvcm5lci10b3AnKVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3VpLWNvcm5lci1hbGwnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG59KSgpO1xuIiwiLyoqXG4gKiByZXR1cm5zIHRydWUgaWYgdGhlIHZpZXdwb3J0IHNpemUgaGFzIGNoYW5nZWQgLVxuICogdXNlZnVsIGluIHJlc3BvbnNpdmUgbGF5b3V0LCBzZWVcbiAqIHNub29rLmNhL2FyY2hpdmVzL2phdmFzY3JpcHQvaWU2X2ZpcmVzX29ucmVzaXplXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKHcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkZWJ1ZyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2RlYnVnJyksXG4gICAgICAgICAgICBjaGFuZ2VkID0gZmFsc2UsXG4gICAgICAgICAgICBkb2NFbCA9IHcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICAgICAgY29vbE9mZiA9IDIwLCAvL2Z1cnRoZXIgY2FsbHMgd2l0aGluIHRoaXMgd2luZG93IGdldFxuICAgICAgICAgICAgLy90aGUgc2FtZSByZXR1cm4gdmFsdWVcbiAgICAgICAgICAgIG5vdyA9IERhdGUubm93XG4gICAgICAgICAgICAgICAgPyBEYXRlLm5vdygpXG4gICAgICAgICAgICAgICAgOiAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCkudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgICAgfSkoKTtcblxuICAgICAgICAvL3NldCB1cCBhIGhvbGRlciBvYmplY3QgKGlmIGl0IGRvZXNuJ3QgZXhpc3QpXG4gICAgICAgIHcudmlld3BvcnQgPSB3LnZpZXdwb3J0IHx8IHt9O1xuXG4gICAgICAgIC8vdGhlc2UgbmVlZCB6ZXJvaW5nIGJlZm9yZSB3ZSBiZWdpbiAoaWYgbm90IGFscmVhZHkgc2V0KVxuICAgICAgICB3LnZpZXdwb3J0LmRpbWVuc2lvbnMgPSB3LnZpZXdwb3J0LmRpbWVuc2lvbnMgfHwge1xuICAgICAgICAgICAgaGVpZ2h0OiBudWxsLFxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXG4gICAgICAgIH07XG5cbiAgICAgICAgLy9uZWVkIHRvIGhhbmRsZSB0aGUgc2l0dWF0aW9uIHdoZXJlIG1hbnkgY2FsbHMgdG8gdGhpc1xuICAgICAgICAvL2Z1bmN0aW9uIGhhcHBlbiBpbiBxdWljayBzdWNjZXNzaW9uXG4gICAgICAgIGlmICh3LnZpZXdwb3J0LnRpbWVTdGFtcCAmJiBub3cgLSB3LnZpZXdwb3J0LnRpbWVTdGFtcCA8IGNvb2xPZmYpIHtcbiAgICAgICAgICAgIGRlYnVnKCd3aXRoaW4gd2luZG93LCByZXR1cm5pbmcgJyArIHcudmlld3BvcnQuc3RvcmVkUmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybiB3LnZpZXdwb3J0LnN0b3JlZFJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vc3RvcmUgdGhlIHRpbWUgb2YgdGhpcyBjYWxsXG4gICAgICAgIHcudmlld3BvcnQudGltZVN0YW1wID0gbm93O1xuXG4gICAgICAgIC8vaGF2ZSB3ZSBjaGFuZ2VkIHZpZXdwb3J0IHNpemU/XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHcudmlld3BvcnQuZGltZW5zaW9ucy53aWR0aCAhPT0gZG9jRWwuY2xpZW50V2lkdGggfHxcbiAgICAgICAgICAgIHcudmlld3BvcnQuZGltZW5zaW9ucy5oZWlnaHQgIT09IGRvY0VsLmNsaWVudEhlaWdodFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9zdG9yZSBuZXcgZGltZW5zaW9uc1xuICAgICAgICB3LnZpZXdwb3J0LmRpbWVuc2lvbnMuaGVpZ2h0ID0gZG9jRWwuY2xpZW50SGVpZ2h0O1xuICAgICAgICB3LnZpZXdwb3J0LmRpbWVuc2lvbnMud2lkdGggPSBkb2NFbC5jbGllbnRXaWR0aDtcblxuICAgICAgICAvL3N0b3JlIHRoaXMgcmVzdWx0IGluIGNhc2Ugb2YgYSByZS1jYWxsIHdpdGhpbiBjb29sT2ZmXG4gICAgICAgIHcudmlld3BvcnQuc3RvcmVkUmVzdWx0ID0gY2hhbmdlZDtcblxuICAgICAgICBkZWJ1Zygndmlld3BvcnQgY2hhbmdlZDogJyArIGNoYW5nZWQpO1xuXG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH07XG59KSh3aW5kb3cpO1xuIiwidmFyIENJVFkgPSByZXF1aXJlKCcuL21haW4nKSxcbiAgICBkZWZlcnJlZCA9IHJlcXVpcmUoJy4vZGVmZXJyZWQnKSxcbiAgICBpbml0SnNGYWlsdXJlTm90aWZpZXIgPSByZXF1aXJlKCcuL2pzLWVycm9yLW5vdGlmaWVyJyksXG4gICAgaW5pdFdpZGdldHMgPSByZXF1aXJlKCcuL3dpZGdldHMnKSxcbiAgICBpbml0T25SZXNpemUgPSByZXF1aXJlKCcuL29uLXJlc2l6ZScpLFxuICAgIGluaXRDdXN0b21TbGlkZXJzID0gcmVxdWlyZSgnLi9jdXN0b20tc2xpZGVycycpO1xuXG5DSVRZLmluaXQoKTtcbmluaXRKc0ZhaWx1cmVOb3RpZmllcigpO1xuZGVmZXJyZWQoKTtcbmluaXRPblJlc2l6ZSgpO1xuaW5pdFdpZGdldHMoKTtcbmluaXRDdXN0b21TbGlkZXJzKCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgICByZXF1aXJlKCcuL2xpYi9qcXVlcnkubWluJyk7XG4gICAgcmVxdWlyZSgnLi9saWIvanF1ZXJ5LXVpLm1pbicpO1xuICAgIHJlcXVpcmUoJy4vbGliL2pxdWVyeS5iYS1iYnEubWluJyk7XG4gICAgcmVxdWlyZSgnYnhzbGlkZXIvZGlzdC9qcXVlcnkuYnhzbGlkZXIuanMnKTtcblxuICAgIHJlcXVpcmUoJy4vanF1ZXJ5LmlkaXplJykod2luZG93LmpRdWVyeSk7XG4gICAgcmVxdWlyZSgnLi9qcXVlcnkuY2l0eWRyb3Bkb3duJykod2luZG93LmpRdWVyeSk7XG4gICAgcmVxdWlyZSgnLi9qcXVlcnkuYWNjb3JkaW9uLXRhYnMnKSh3aW5kb3cualF1ZXJ5KTtcbiAgICByZXF1aXJlKCcuL2pxdWVyeS55b3V0dWJlcHJldmlldycpKHdpbmRvdy5qUXVlcnkpO1xuICAgIHJlcXVpcmUoJy4vanF1ZXJ5Lm11bHRpc2NyaXB0cycpKHdpbmRvdy5qUXVlcnkpO1xuXG4gICAgcmV0dXJuIHdpbmRvdy5qUXVlcnk7XG59KSgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigkKSB7XG4gICAgdmFyIHNjcm9sbFRvID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvc2Nyb2xsLXRvJyksXG4gICAgICAgIGluaXQgPSBmdW5jdGlvbih3aWRnZXRzKSB7XG4gICAgICAgICAgICB2YXIgdyA9ICQod2luZG93KSxcbiAgICAgICAgICAgICAgICBtYXAgPSB7fTtcblxuICAgICAgICAgICAgd2lkZ2V0cy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB3aWRnZXQgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50UGFuZWxzID0gd2lkZ2V0LmZpbmQoJz5kaXYgPi5jb250ZW50LXBhbmVsJyksXG4gICAgICAgICAgICAgICAgICAgIGlkID0gd2lkZ2V0LmF0dHIoJ2lkJykgfHwgJ3RhYicsXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2YXRlID0gZnVuY3Rpb24oYW5jaG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSAoYW5jaG9yLmF0dHIoJ2hyZWYnKSB8fCAnJykubWF0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9eIyguKykkL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SGVhZGVyID0gYW5jaG9yLnBhcmVudCgnaDInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNUYWIgPSBhbmNob3IucGFyZW50KCdsaScpLmxlbmd0aCA+IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFscmVhZHlTZWxlY3RlZCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhaXNUYWIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcudGFiLXBhbmVsJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaGFzQ2xhc3MoJ3NlbGVjdGVkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRQYW5lbCA9IGFuY2hvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy50YWItcGFuZWwnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5wYW5lbC1jb250ZW50Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXNbaWRdID0gYWxyZWFkeVNlbGVjdGVkID8gbnVsbCA6IG1hdGNoWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdCh3aWRnZXQsIHBhcmFtc1tpZF0gfHwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkLmlzRW1wdHlPYmplY3QobmV3SGVhZGVyLm9mZnNldCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2h0bWw6bm90KDphbmltYXRlZCksIGJvZHk6bm90KDphbmltYXRlZCknXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkuYW5pbWF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc2Nyb2xsVG9wOiBuZXdIZWFkZXIub2Zmc2V0KCkudG9wIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2xvdydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50UGFuZWxzLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9yLnBhcmVudCgpLmhhc0NsYXNzKCdhY2NvcmRpb24tdG9vZ2xlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFBhbmVsLmF0dHIoJ3RhYmluZGV4JywgJzAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFBhbmVsLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5iYnEucHVzaFN0YXRlKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkKCdhW2hyZWZePVwiIycgKyBpZCArICc9XCJdJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuY2hvciA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGFuY2hvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdocmVmJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWF0Y2goLyMoW2EtekEtWjAtOV0rKT1bYS16QS1aMC05XSsvKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvci5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wOiAkKCcjJyArIGlkKS5vZmZzZXQoKS50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIwMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbWFwW2lkXSA9IHdpZGdldDtcblxuICAgICAgICAgICAgICAgIHdpZGdldFxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnPnVsIGEsID4udGFiLXBhbmVsID4uYWNjb3JkaW9uLXRvb2dsZSBhJylcbiAgICAgICAgICAgICAgICAgICAgLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2YXRlKCQodGhpcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAua2V5ZG93bihmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS53aGljaCA9PT0gMzcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJ2EnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT09IDM5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wYXJlbnQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKCdhJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB3Lm9uKCdoYXNoY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9ICQuYmJxLmdldFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaWQgaW4gbWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXAuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3QobWFwW2lkXSwgcGFyYW1zW2lkXSB8fCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdy50cmlnZ2VyKCdoYXNoY2hhbmdlJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNlbGVjdCA9IGZ1bmN0aW9uKHdpZGdldCwgaWQpIHtcbiAgICAgICAgICAgIHdpZGdldC5maW5kKCc+LnRhYi1wYW5lbC5kZWZhdWx0JykucmVtb3ZlQ2xhc3MoJ2RlZmF1bHQnKTtcbiAgICAgICAgICAgIHdpZGdldFxuICAgICAgICAgICAgICAgIC5maW5kKCc+dWwgLnNlbGVjdGVkLCA+LnRhYi1wYW5lbC5zZWxlY3RlZCcpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuXG4gICAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGFzaCA9ICcjJyArIGlkO1xuXG4gICAgICAgICAgICAgICAgd2lkZ2V0LmZpbmQoJz51bCBhW2hyZWY9XCInICsgaGFzaCArICdcIl0nKS5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB3aWRnZXQuZmluZChoYXNoKS5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2lkZ2V0XG4gICAgICAgICAgICAgICAgICAgIC5maW5kKCc+dWwgbGknKVxuICAgICAgICAgICAgICAgICAgICAuZmlyc3QoKVxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnYScpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB3aWRnZXRcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJz4udGFiLXBhbmVsJylcbiAgICAgICAgICAgICAgICAgICAgLmZpcnN0KClcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdkZWZhdWx0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAkLmZuLmFjY29yZGlvblRhYnMgPSBmdW5jdGlvbihvcHQpIHtcbiAgICAgICAgaW5pdCh0aGlzLCBvcHQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oJCkge1xuICAgIHZhciBwYWdlRHJvcGRvd25zID0gW107XG4gICAgdmFyIGNsb3NlUGFnZURyb3Bkb3ducyA9IGZ1bmN0aW9uKGV4Y2VwdCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhZ2VEcm9wZG93bnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBhZ2VEcm9wZG93bnNbaV0uZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFnZURyb3Bkb3duID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICFleGNlcHQgfHxcbiAgICAgICAgICAgICAgICAgICAgZXhjZXB0Lmxlbmd0aCAhPSAxIHx8XG4gICAgICAgICAgICAgICAgICAgIHBhZ2VEcm9wZG93bi5nZXQoMCkgIT0gZXhjZXB0LmdldCgwKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBwYWdlRHJvcGRvd24ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgICQoJ2JvZHknKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgY2xvc2VQYWdlRHJvcGRvd25zKG51bGwpO1xuICAgIH0pO1xuXG4gICAgdmFyIGluaXQgPSBmdW5jdGlvbihkcm9wZG93bnMsIG9wdCkge1xuICAgICAgICB2YXIgX29wdCA9ICQuZXh0ZW5kKHsgY2hhbmdlTGlzdGVuZXJzOiBbXSwgaXNNZW51OiBmYWxzZSB9LCBvcHQpO1xuXG4gICAgICAgIHBhZ2VEcm9wZG93bnMucHVzaChkcm9wZG93bnMpO1xuXG4gICAgICAgIGRyb3Bkb3ducy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGRyb3Bkb3duID0gJCh0aGlzKTtcbiAgICAgICAgICAgIGRyb3Bkb3duLmRhdGEoJ2Ryb3Bkb3duLW9wdGlvbnMnLCBfb3B0KTtcblxuICAgICAgICAgICAgZHJvcGRvd24uZmluZCgnYS5kaXNwbGF5JykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZHJvcGRvd24udG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIGNsb3NlUGFnZURyb3Bkb3ducyhkcm9wZG93bik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChvcHQgJiYgb3B0LnZhbHVlcykge1xuICAgICAgICAgICAgICAgIHNldE9wdGlvbnMoZHJvcGRvd24sIG9wdC52YWx1ZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0ICYmIG9wdC5pbml0aWFsVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3QoZHJvcGRvd24sIG9wdC5pbml0aWFsVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5pdE9wdGlvbnMoZHJvcGRvd24sIHRydWUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIG9wdGlvblZhbHVlID0gZnVuY3Rpb24oZHJvcGRvd24sIGtleSkge1xuICAgICAgICB2YXIgb3B0ID0gZHJvcGRvd24uZGF0YSgnZHJvcGRvd24tb3B0aW9ucycpO1xuICAgICAgICByZXR1cm4gb3B0ID8gb3B0W2tleV0gOiBudWxsO1xuICAgIH07XG5cbiAgICB2YXIgaW52b2tlT3B0aW9uRXh0ID0gZnVuY3Rpb24oZHJvcGRvd24sIGZrZXksIGEsIGIsIGMpIHtcbiAgICAgICAgdmFyIGYgPSBvcHRpb25WYWx1ZShkcm9wZG93biwgZmtleSk7XG4gICAgICAgIGlmIChmKSB7XG4gICAgICAgICAgICBmKGEsIGIsIGMpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBpbml0T3B0aW9ucyA9IGZ1bmN0aW9uKGRyb3Bkb3duLCByZWFkSW5wdXRWYWx1ZSkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGRyb3Bkb3duLmZpbmQoJy5vcHRpb25zID4gYScpO1xuICAgICAgICBkcm9wZG93bi50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCBvcHRpb25zLmxlbmd0aCA8IDIpO1xuICAgICAgICBpZiAoIWRyb3Bkb3duLmRhdGEoJ2Ryb3Bkb3duLW9wdGlvbnMnKS5pc01lbnUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0QW5kTm90aWZ5KGRyb3Bkb3duLCAkKHRoaXMpLmF0dHIoJ2RhdGEtdmFsdWUnKSk7XG4gICAgICAgICAgICAgICAgY2xvc2VQYWdlRHJvcGRvd25zKGRyb3Bkb3duKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHJlYWRJbnB1dFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHYgPSBkcm9wZG93bi5maW5kKCdpbnB1dDpoaWRkZW4nKS52YWwoKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdChkcm9wZG93biwgdik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBmaXJlT25TZWxlY3QgPSBmdW5jdGlvbihkcm9wZG93bikge1xuICAgICAgICB2YXIgb3B0ID0gZHJvcGRvd24uZGF0YSgnZHJvcGRvd24tb3B0aW9ucycpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdC5jaGFuZ2VMaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG9wdC5jaGFuZ2VMaXN0ZW5lcnNbaV0oKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgc2VsZWN0QW5kTm90aWZ5ID0gZnVuY3Rpb24oZHJvcGRvd24sIHZhbHVlKSB7XG4gICAgICAgIHNlbGVjdChkcm9wZG93biwgdmFsdWUpO1xuICAgICAgICBmaXJlT25TZWxlY3QoZHJvcGRvd24pO1xuICAgICAgICBpbnZva2VPcHRpb25FeHQoZHJvcGRvd24sICdvbnNlbGVjdCcsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgdmFyIHNlbGVjdCA9IGZ1bmN0aW9uKGRyb3Bkb3duLCB2YWx1ZSkge1xuICAgICAgICB2YXIgbGluayA9IGRyb3Bkb3duLmZpbmQoJ2FbZGF0YS12YWx1ZT1cIicgKyB2YWx1ZSArICdcIl0nKTtcbiAgICAgICAgZHJvcGRvd24uZmluZCgnYS5kaXNwbGF5IHNwYW4nKS5odG1sKGxpbmsuaHRtbCgpKTtcbiAgICAgICAgbGluay5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAgICAgZHJvcGRvd24uZmluZCgnYVtkYXRhLXZhbHVlIT1cIicgKyB2YWx1ZSArICdcIl0nKS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAgICAgZHJvcGRvd24ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICBkcm9wZG93bi5maW5kKCdpbnB1dDpoaWRkZW4nKS52YWwodmFsdWUpO1xuICAgIH07XG5cbiAgICB2YXIgc2V0T3B0aW9ucyA9IGZ1bmN0aW9uKGRyb3Bkb3duLCBvcHRpb25zLCBzZWxlY3RlZEtleSkge1xuICAgICAgICB2YXIgb3B0aW9uc0NvbnRhaW5lciA9IGRyb3Bkb3duLmZpbmQoJy5vcHRpb25zJyk7XG4gICAgICAgIG9wdGlvbnNDb250YWluZXIuZW1wdHkoKTtcbiAgICAgICAgdmFyIHNlbGVjdGVkID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbyA9IG9wdGlvbnNbaV07XG4gICAgICAgICAgICB2YXIgaXNTZWxlY3RlZCA9IG9bMF0gPT0gc2VsZWN0ZWRLZXk7XG4gICAgICAgICAgICBpZiAoaXNTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gbztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJCgnPGEgaHJlZj1cIiNcIj48L2E+JylcbiAgICAgICAgICAgICAgICAuYXR0cignZGF0YS12YWx1ZScsIG9bMF0pXG4gICAgICAgICAgICAgICAgLmh0bWwob1sxXSlcbiAgICAgICAgICAgICAgICAudG9nZ2xlQ2xhc3MoJ3NlbGVjdGVkJywgaXNTZWxlY3RlZClcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8ob3B0aW9uc0NvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIGRyb3Bkb3duLmZpbmQoJ2EuZGlzcGxheSBzcGFuJykuaHRtbChzZWxlY3RlZFsxXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpbml0T3B0aW9ucyhkcm9wZG93biwgZmFsc2UpO1xuICAgIH07XG5cbiAgICB2YXIgdmFsdWUgPSBmdW5jdGlvbihkcm9wZG93bikge1xuICAgICAgICByZXR1cm4gZHJvcGRvd24uZmluZCgnLm9wdGlvbnMgYS5zZWxlY3RlZCcpLmF0dHIoJ2RhdGEtdmFsdWUnKTtcbiAgICB9O1xuXG4gICAgdmFyIGFkZENoYW5nZUxpc3RlbmVyID0gZnVuY3Rpb24oZHJvcGRvd25zLCBsaXN0ZW5lcikge1xuICAgICAgICBkcm9wZG93bnMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkcm9wZG93biA9ICQodGhpcyk7XG4gICAgICAgICAgICB2YXIgb3B0ID0gZHJvcGRvd24uZGF0YSgnZHJvcGRvd24tb3B0aW9ucycpO1xuICAgICAgICAgICAgb3B0LmNoYW5nZUxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgICAgIGRyb3Bkb3duLmRhdGEoJ2Ryb3Bkb3duLW9wdGlvbnMnLCBvcHQpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJC5mbi5jaXR5RHJvcGRvd24gPSBmdW5jdGlvbihvcHQsIHAxLCBwMikge1xuICAgICAgICBpZiAodHlwZW9mIG9wdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHN3aXRjaCAob3B0KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGlzYWJsZSc6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2VuYWJsZSc6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdCh0aGlzLCBwMSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NldE9wdGlvbnMnOlxuICAgICAgICAgICAgICAgICAgICBzZXRPcHRpb25zKHRoaXMsIHAxLCBwMik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3ZhbHVlJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlKHRoaXMpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NoYW5nZSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhZGRDaGFuZ2VMaXN0ZW5lcih0aGlzLCBwMSk7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbml0KHRoaXMsIG9wdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbn07XG4iLCIvKlxuICogalF1ZXJ5IHBsdWdpbiB0byB3cmFwIGVsZW1lbnRzXG4gKlxuICogaHR0cDovL2pzYmluLmNvbS9pZGl6ZVxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCQpIHtcbiAgICAkLmZuLndyYXBDaGlsZHJlbiA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNoaWxkRWxlbTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHNldHM6IDEsXG4gICAgICAgICAgICAgICAgd3JhcHBlcjogJ2RpdicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0aW9ucyB8fCB7fVxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmNoaWxkRWxlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1zID0gJCh0aGlzKS5jaGlsZHJlbihvcHRpb25zLmNoaWxkRWxlbSk7XG4gICAgICAgICAgICAgICAgdmFyIGFyciA9IFtdO1xuXG4gICAgICAgICAgICAgICAgZWxlbXMuZWFjaChmdW5jdGlvbihpLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBhcnIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIChpICsgMSkgJSBvcHRpb25zLnNldHMgPT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPT09IGVsZW1zLmxlbmd0aCAtIDFcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2V0ID0gJChhcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXQud3JhcEFsbChkb2N1bWVudC5jcmVhdGVFbGVtZW50KG9wdGlvbnMud3JhcHBlcikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuIiwiLyoqXG4gKiBmcm9tOlxuICogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMTgwMzIxNS9ob3ctdG8taW5jbHVkZS1tdWx0aXBsZS1qcy1maWxlcy11c2luZy1qcXVlcnktZ2V0c2NyaXB0LW1ldGhvZFxuICogKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oJCkge1xuICAgIHZhciBqc1BhdGggPSByZXF1aXJlKCcuL2pzLXBhdGgnKTtcblxuICAgICQuZ2V0TXVsdGlKc1NjcmlwdHMgPSBmdW5jdGlvbihsaXN0LCBjYiwgZm9yY2VYZG9tYWluKSB7XG4gICAgICAgIHZhciBwYXRoID0ganNQYXRoKCksXG4gICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgIGZldGNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPCBsaXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBwYXRoICsgbGlzdFtpKytdLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdzY3JpcHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmV0Y2gsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjcm9zc0RvbWFpbjogZm9yY2VYZG9tYWluIHx8IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgZmV0Y2goKTtcbiAgICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oJCkge1xuICAgIHZhciBhY2Nlc3MgPSBmYWxzZSxcbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKHZpZGVvQ29udGFpbmVycywgb3B0KSB7XG4gICAgICAgICAgICB2aWRlb0NvbnRhaW5lcnMubm90KCdbZGF0YS12aWRlby1pZC1yZWFkeV0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtdmlkZW8taWQtcmVhZHknLCAxKSxcbiAgICAgICAgICAgICAgICAgICAgaW1nR3JvdXAgPSBjb250YWluZXIuZmluZCgnLnlvdXR1YmUtcHJldmlldycpLFxuICAgICAgICAgICAgICAgICAgICBpZnJhbWVJZCA9IGNvbnRhaW5lci5hdHRyKCdkYXRhLXZpZGVvLWlmcmFtZS1pZCcpLFxuICAgICAgICAgICAgICAgICAgICBhbmNob3IgPSBpbWdHcm91cC5jaGlsZHJlbignYScpLFxuICAgICAgICAgICAgICAgICAgICBjbGlja2FibGUgPSBhbmNob3IubGVuZ3RoID4gMCA/IGFuY2hvciA6IGltZ0dyb3VwLFxuICAgICAgICAgICAgICAgICAgICBsb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbW9kZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VzcyA9PSAneW91a3UnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hdHRyKCdkYXRhLXlvdWt1LWlkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3lvdWt1J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAneW91dHViZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kZSA9PT0gJ3lvdXR1YmUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYXR0cignZGF0YS12aWRlby1pZCcpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJz9yZWw9MCZhdXRvcGxheT0xJndtb2RlPXRyYW5zcGFyZW50JmNvbnRyb2xzPScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHQuY29udHJvbHMgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJnNob3dpbmZvPScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHQuc2hvd0luZm87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdC5hdXRvUGxheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmMgKz0gJyZlbmFibGVqc2FwaT0xJnZlcnNpb249Myc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaHR0cDovL3BsYXllci55b3VrdS5jb20vZW1iZWQvJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hdHRyKCdkYXRhLXlvdWt1LWlkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdC5hdXRvUGxheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmMgKz0gJyZhdXRvcGxheT0xJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZnJhbWUgPSAkKCc8aWZyYW1lPjwvaWZyYW1lPicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2lkJywgaWZyYW1lSWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyYycsIHNyYylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZnJhbWVib3JkZXInLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHQuYWxsb3dGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWZyYW1lLmF0dHIoJ2FsbG93ZnVsbHNjcmVlbicsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWZyYW1lLmFwcGVuZFRvKGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0LmNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZSA9PT0gJ3lvdXR1YmUnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmF1dG9QbGF5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIFlUICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFlULlBsYXllcihpZnJhbWVJZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVhZHk6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnBsYXlWaWRlbygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmcmFtZS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY2xpY2thYmxlLmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlLnVuYmluZCgpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjY2VzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0ID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VzcyA9ICd5b3V0dWJlJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVzdC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzID0gJ3lvdWt1JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVzdC5zcmMgPSAnaHR0cDovL3lvdXR1YmUuY29tL2Zhdmljb24uaWNvJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAkLmZuLnZpZGVvUHJldmlldyA9IGZ1bmN0aW9uKG9wdCkge1xuICAgICAgICBpbml0KFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICQuZXh0ZW5kKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYXV0b1BsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGFsbG93RnVsbHNjcmVlbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzOiAyLFxuICAgICAgICAgICAgICAgICAgICBzaG93SW5mbzogMSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9wdFxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhdGggPSBudWxsO1xuICAgICQoJ3NjcmlwdFtzcmNdJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNyYyA9ICQodGhpcykuYXR0cignc3JjJyksXG4gICAgICAgICAgICBtYXRjaCA9IHNyYy5tYXRjaChcbiAgICAgICAgICAgICAgICAvKC4rXFwvKShbMC05XStcXC4pP0NJVFlfUlxcLihtaW5cXC4pP2pzKFxcP3Y9WzAtOV0rKT8kL1xuICAgICAgICAgICAgKTtcblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHBhdGggPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBhdGg7XG59O1xuIiwiLyohIGpRdWVyeSBVSSAtIHYxLjkuMiAtIDIwMTYtMDYtMTdcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqIEluY2x1ZGVzOiBqcXVlcnkudWkuY29yZS5qcywganF1ZXJ5LnVpLndpZGdldC5qcywganF1ZXJ5LnVpLm1vdXNlLmpzLCBqcXVlcnkudWkucG9zaXRpb24uanMsIGpxdWVyeS51aS5kcmFnZ2FibGUuanMsIGpxdWVyeS51aS5yZXNpemFibGUuanMsIGpxdWVyeS51aS5hY2NvcmRpb24uanMsIGpxdWVyeS51aS5hdXRvY29tcGxldGUuanMsIGpxdWVyeS51aS5idXR0b24uanMsIGpxdWVyeS51aS5kYXRlcGlja2VyLmpzLCBqcXVlcnkudWkuZGlhbG9nLmpzLCBqcXVlcnkudWkubWVudS5qc1xuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnM7IExpY2Vuc2VkIE1JVCAqL1xuXG4oZnVuY3Rpb24oZSwgdCkge1xuICAgIGZ1bmN0aW9uIGkodCwgaSkge1xuICAgICAgICB2YXIgbixcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBvLFxuICAgICAgICAgICAgciA9IHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuICdhcmVhJyA9PT0gclxuICAgICAgICAgICAgPyAoKG4gPSB0LnBhcmVudE5vZGUpLFxuICAgICAgICAgICAgICAoYSA9IG4ubmFtZSksXG4gICAgICAgICAgICAgIHQuaHJlZiAmJiBhICYmICdtYXAnID09PSBuLm5vZGVOYW1lLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgID8gKChvID0gZSgnaW1nW3VzZW1hcD0jJyArIGEgKyAnXScpWzBdKSwgISFvICYmIHMobykpXG4gICAgICAgICAgICAgICAgICA6ICExKVxuICAgICAgICAgICAgOiAoL2lucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0Ly50ZXN0KHIpXG4gICAgICAgICAgICAgICAgICA/ICF0LmRpc2FibGVkXG4gICAgICAgICAgICAgICAgICA6ICdhJyA9PT0gclxuICAgICAgICAgICAgICAgICAgICAgID8gdC5ocmVmIHx8IGlcbiAgICAgICAgICAgICAgICAgICAgICA6IGkpICYmIHModCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHModCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgZS5leHByLmZpbHRlcnMudmlzaWJsZSh0KSAmJlxuICAgICAgICAgICAgIWUodClcbiAgICAgICAgICAgICAgICAucGFyZW50cygpXG4gICAgICAgICAgICAgICAgLmFuZFNlbGYoKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlkZGVuJyA9PT0gZS5jc3ModGhpcywgJ3Zpc2liaWxpdHknKTtcbiAgICAgICAgICAgICAgICB9KS5sZW5ndGhcbiAgICAgICAgKTtcbiAgICB9XG4gICAgdmFyIG4gPSAwLFxuICAgICAgICBhID0gL151aS1pZC1cXGQrJC87XG4gICAgKGUudWkgPSBlLnVpIHx8IHt9KSxcbiAgICAgICAgZS51aS52ZXJzaW9uIHx8XG4gICAgICAgICAgICAoZS5leHRlbmQoZS51aSwge1xuICAgICAgICAgICAgICAgIHZlcnNpb246ICcxLjkuMicsXG4gICAgICAgICAgICAgICAga2V5Q29kZToge1xuICAgICAgICAgICAgICAgICAgICBCQUNLU1BBQ0U6IDgsXG4gICAgICAgICAgICAgICAgICAgIENPTU1BOiAxODgsXG4gICAgICAgICAgICAgICAgICAgIERFTEVURTogNDYsXG4gICAgICAgICAgICAgICAgICAgIERPV046IDQwLFxuICAgICAgICAgICAgICAgICAgICBFTkQ6IDM1LFxuICAgICAgICAgICAgICAgICAgICBFTlRFUjogMTMsXG4gICAgICAgICAgICAgICAgICAgIEVTQ0FQRTogMjcsXG4gICAgICAgICAgICAgICAgICAgIEhPTUU6IDM2LFxuICAgICAgICAgICAgICAgICAgICBMRUZUOiAzNyxcbiAgICAgICAgICAgICAgICAgICAgTlVNUEFEX0FERDogMTA3LFxuICAgICAgICAgICAgICAgICAgICBOVU1QQURfREVDSU1BTDogMTEwLFxuICAgICAgICAgICAgICAgICAgICBOVU1QQURfRElWSURFOiAxMTEsXG4gICAgICAgICAgICAgICAgICAgIE5VTVBBRF9FTlRFUjogMTA4LFxuICAgICAgICAgICAgICAgICAgICBOVU1QQURfTVVMVElQTFk6IDEwNixcbiAgICAgICAgICAgICAgICAgICAgTlVNUEFEX1NVQlRSQUNUOiAxMDksXG4gICAgICAgICAgICAgICAgICAgIFBBR0VfRE9XTjogMzQsXG4gICAgICAgICAgICAgICAgICAgIFBBR0VfVVA6IDMzLFxuICAgICAgICAgICAgICAgICAgICBQRVJJT0Q6IDE5MCxcbiAgICAgICAgICAgICAgICAgICAgUklHSFQ6IDM5LFxuICAgICAgICAgICAgICAgICAgICBTUEFDRTogMzIsXG4gICAgICAgICAgICAgICAgICAgIFRBQjogOSxcbiAgICAgICAgICAgICAgICAgICAgVVA6IDM4LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGUuZm4uZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBfZm9jdXM6IGUuZm4uZm9jdXMsXG4gICAgICAgICAgICAgICAgZm9jdXM6IGZ1bmN0aW9uKHQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdudW1iZXInID09IHR5cGVvZiB0XG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZShzKS5mb2N1cygpLCBpICYmIGkuY2FsbChzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9mb2N1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsUGFyZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAodCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUudWkuaWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyhzdGF0aWN8cmVsYXRpdmUpLy50ZXN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jc3MoJ3Bvc2l0aW9uJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvYWJzb2x1dGUvLnRlc3QodGhpcy5jc3MoJ3Bvc2l0aW9uJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5wYXJlbnRzKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyhyZWxhdGl2ZXxhYnNvbHV0ZXxmaXhlZCkvLnRlc3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY3NzKHRoaXMsICdwb3NpdGlvbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8oYXV0b3xzY3JvbGwpLy50ZXN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmNzcyh0aGlzLCAnb3ZlcmZsb3cnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmNzcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdy15J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmNzcyh0aGlzLCAnb3ZlcmZsb3cteCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVxKDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5wYXJlbnRzKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKGF1dG98c2Nyb2xsKS8udGVzdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmNzcyh0aGlzLCAnb3ZlcmZsb3cnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY3NzKHRoaXMsICdvdmVyZmxvdy15JykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmNzcyh0aGlzLCAnb3ZlcmZsb3cteCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZXEoMCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgL2ZpeGVkLy50ZXN0KHRoaXMuY3NzKCdwb3NpdGlvbicpKSB8fCAhdC5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGUoZG9jdW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IHQpIHJldHVybiB0aGlzLmNzcygnekluZGV4JywgaSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMsIG4sIGEgPSBlKHRoaXNbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEubGVuZ3RoICYmIGFbMF0gIT09IGRvY3VtZW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgocyA9IGEuY3NzKCdwb3NpdGlvbicpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCdhYnNvbHV0ZScgPT09IHMgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZWxhdGl2ZScgPT09IHMgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmaXhlZCcgPT09IHMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKG4gPSBwYXJzZUludChhLmNzcygnekluZGV4JyksIDEwKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhaXNOYU4obikgJiYgMCAhPT0gbikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gYS5wYXJlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1bmlxdWVJZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlkIHx8ICh0aGlzLmlkID0gJ3VpLWlkLScgKyArK24pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlbW92ZVVuaXF1ZUlkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEudGVzdCh0aGlzLmlkKSAmJiBlKHRoaXMpLnJlbW92ZUF0dHIoJ2lkJyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGUuZXh0ZW5kKGUuZXhwclsnOiddLCB7XG4gICAgICAgICAgICAgICAgZGF0YTogZS5leHByLmNyZWF0ZVBzZXVkb1xuICAgICAgICAgICAgICAgICAgICA/IGUuZXhwci5jcmVhdGVQc2V1ZG8oZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhZS5kYXRhKGksIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIDogZnVuY3Rpb24odCwgaSwgcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gISFlLmRhdGEodCwgc1szXSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmb2N1c2FibGU6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkodCwgIWlzTmFOKGUuYXR0cih0LCAndGFiaW5kZXgnKSkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGFiYmFibGU6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBlLmF0dHIodCwgJ3RhYmluZGV4JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gaXNOYU4ocyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAobiB8fCBzID49IDApICYmIGkodCwgIW4pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBkb2N1bWVudC5ib2R5LFxuICAgICAgICAgICAgICAgICAgICBpID0gdC5hcHBlbmRDaGlsZCgoaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKSk7XG4gICAgICAgICAgICAgICAgaS5vZmZzZXRIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGUuZXh0ZW5kKGkuc3R5bGUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodDogJzEwMHB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAwLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgKGUuc3VwcG9ydC5taW5IZWlnaHQgPSAxMDAgPT09IGkub2Zmc2V0SGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgKGUuc3VwcG9ydC5zZWxlY3RzdGFydCA9ICdvbnNlbGVjdHN0YXJ0JyBpbiBpKSxcbiAgICAgICAgICAgICAgICAgICAgKHQucmVtb3ZlQ2hpbGQoaSkuc3R5bGUuZGlzcGxheSA9ICdub25lJyk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGUoJzxhPicpLm91dGVyV2lkdGgoMSkuanF1ZXJ5IHx8XG4gICAgICAgICAgICAgICAgZS5lYWNoKFsnV2lkdGgnLCAnSGVpZ2h0J10sIGZ1bmN0aW9uKGksIHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbih0LCBpLCBzLCBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuZWFjaChhLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkgLT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQoZS5jc3ModCwgJ3BhZGRpbmcnICsgdGhpcykpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaSAtPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5jc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVyJyArIHRoaXMgKyAnV2lkdGgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkgLT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY3NzKHQsICdtYXJnaW4nICsgdGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB8fCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV2lkdGgnID09PSBzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gWydMZWZ0JywgJ1JpZ2h0J11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBbJ1RvcCcsICdCb3R0b20nXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBzLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICByID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyV2lkdGg6IGUuZm4uaW5uZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbm5lckhlaWdodDogZS5mbi5pbm5lckhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRlcldpZHRoOiBlLmZuLm91dGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0ZXJIZWlnaHQ6IGUuZm4ub3V0ZXJIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAoZS5mblsnaW5uZXInICsgc10gPSBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSA9PT0gdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gclsnaW5uZXInICsgc10uY2FsbCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUodGhpcykuY3NzKG8sIG4odGhpcywgaSkgKyAncHgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLmZuWydvdXRlcicgKyBzXSA9IGZ1bmN0aW9uKHQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ251bWJlcicgIT0gdHlwZW9mIHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyByWydvdXRlcicgKyBzXS5jYWxsKHRoaXMsIHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlKHRoaXMpLmNzcyhvLCBuKHRoaXMsIHQsICEwLCBpKSArICdweCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBlKCc8YT4nKVxuICAgICAgICAgICAgICAgIC5kYXRhKCdhLWInLCAnYScpXG4gICAgICAgICAgICAgICAgLnJlbW92ZURhdGEoJ2EtYicpXG4gICAgICAgICAgICAgICAgLmRhdGEoJ2EtYicpICYmXG4gICAgICAgICAgICAgICAgKGUuZm4ucmVtb3ZlRGF0YSA9IChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdC5jYWxsKHRoaXMsIGUuY2FtZWxDYXNlKGkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pKGUuZm4ucmVtb3ZlRGF0YSkpLFxuICAgICAgICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0ID1cbiAgICAgICAgICAgICAgICAgICAgL21zaWUgKFtcXHcuXSspLy5leGVjKG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgW107XG4gICAgICAgICAgICAgICAgKGUudWkuaWUgPSB0Lmxlbmd0aCA/ICEwIDogITEpLFxuICAgICAgICAgICAgICAgICAgICAoZS51aS5pZTYgPSA2ID09PSBwYXJzZUZsb2F0KHRbMV0sIDEwKSk7XG4gICAgICAgICAgICB9KSgpLFxuICAgICAgICAgICAgZS5mbi5leHRlbmQoe1xuICAgICAgICAgICAgICAgIGRpc2FibGVTZWxlY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5iaW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgKGUuc3VwcG9ydC5zZWxlY3RzdGFydCA/ICdzZWxlY3RzdGFydCcgOiAnbW91c2Vkb3duJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcudWktZGlzYWJsZVNlbGVjdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW5hYmxlU2VsZWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudW5iaW5kKCcudWktZGlzYWJsZVNlbGVjdGlvbicpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGUuZXh0ZW5kKGUudWksIHtcbiAgICAgICAgICAgICAgICBwbHVnaW46IHtcbiAgICAgICAgICAgICAgICAgICAgYWRkOiBmdW5jdGlvbih0LCBpLCBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gZS51aVt0XS5wcm90b3R5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG4gaW4gcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYS5wbHVnaW5zW25dID0gYS5wbHVnaW5zW25dIHx8IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5wbHVnaW5zW25dLnB1c2goW2ksIHNbbl1dKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2FsbDogZnVuY3Rpb24oZSwgdCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IGUucGx1Z2luc1t0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5lbGVtZW50WzBdLnBhcmVudE5vZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMSAhPT0gZS5lbGVtZW50WzBdLnBhcmVudE5vZGUubm9kZVR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHMgPSAwOyBuLmxlbmd0aCA+IHM7IHMrKylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5vcHRpb25zW25bc11bMF1dICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuW3NdWzFdLmFwcGx5KGUuZWxlbWVudCwgaSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb250YWluczogZS5jb250YWlucyxcbiAgICAgICAgICAgICAgICBoYXNTY3JvbGw6IGZ1bmN0aW9uKHQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCdoaWRkZW4nID09PSBlKHQpLmNzcygnb3ZlcmZsb3cnKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IGkgJiYgJ2xlZnQnID09PSBpID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gITE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0W3NdID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgPyAhMFxuICAgICAgICAgICAgICAgICAgICAgICAgOiAoKHRbc10gPSAxKSwgKG4gPSB0W3NdID4gMCksICh0W3NdID0gMCksIG4pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaXNPdmVyQXhpczogZnVuY3Rpb24oZSwgdCwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSA+IHQgJiYgdCArIGkgPiBlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaXNPdmVyOiBmdW5jdGlvbih0LCBpLCBzLCBuLCBhLCBvKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnVpLmlzT3ZlckF4aXModCwgcywgYSkgJiYgZS51aS5pc092ZXJBeGlzKGksIG4sIG8pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSk7XG59KShqUXVlcnkpO1xuKGZ1bmN0aW9uKGUsIHQpIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UsXG4gICAgICAgIG4gPSBlLmNsZWFuRGF0YTtcbiAgICAoZS5jbGVhbkRhdGEgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIGksIHMgPSAwOyBudWxsICE9IChpID0gdFtzXSk7IHMrKylcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZShpKS50cmlnZ2VySGFuZGxlcigncmVtb3ZlJyk7XG4gICAgICAgICAgICB9IGNhdGNoIChhKSB7fVxuICAgICAgICBuKHQpO1xuICAgIH0pLFxuICAgICAgICAoZS53aWRnZXQgPSBmdW5jdGlvbihpLCBzLCBuKSB7XG4gICAgICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgICAgaCxcbiAgICAgICAgICAgICAgICBsID0gaS5zcGxpdCgnLicpWzBdO1xuICAgICAgICAgICAgKGkgPSBpLnNwbGl0KCcuJylbMV0pLFxuICAgICAgICAgICAgICAgIChhID0gbCArICctJyArIGkpLFxuICAgICAgICAgICAgICAgIG4gfHwgKChuID0gcyksIChzID0gZS5XaWRnZXQpKSxcbiAgICAgICAgICAgICAgICAoZS5leHByWyc6J11bYS50b0xvd2VyQ2FzZSgpXSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhZS5kYXRhKHQsIGEpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIChlW2xdID0gZVtsXSB8fCB7fSksXG4gICAgICAgICAgICAgICAgKG8gPSBlW2xdW2ldKSxcbiAgICAgICAgICAgICAgICAociA9IGVbbF1baV0gPSBmdW5jdGlvbihlLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVXaWRnZXRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKGFyZ3VtZW50cy5sZW5ndGggJiYgdGhpcy5fY3JlYXRlV2lkZ2V0KGUsIGkpLCB0KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXcgcihlLCBpKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBlLmV4dGVuZChyLCBvLCB7XG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb246IG4udmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgX3Byb3RvOiBlLmV4dGVuZCh7fSwgbiksXG4gICAgICAgICAgICAgICAgICAgIF9jaGlsZENvbnN0cnVjdG9yczogW10sXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgKGggPSBuZXcgcygpKSxcbiAgICAgICAgICAgICAgICAoaC5vcHRpb25zID0gZS53aWRnZXQuZXh0ZW5kKHt9LCBoLm9wdGlvbnMpKSxcbiAgICAgICAgICAgICAgICBlLmVhY2gobiwgZnVuY3Rpb24odCwgaSkge1xuICAgICAgICAgICAgICAgICAgICBlLmlzRnVuY3Rpb24oaSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChuW3RdID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5wcm90b3R5cGVbdF0uYXBwbHkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5wcm90b3R5cGVbdF0uYXBwbHkodGhpcywgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSB0aGlzLl9zdXBlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSB0aGlzLl9zdXBlckFwcGx5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuX3N1cGVyID0gZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5fc3VwZXJBcHBseSA9IG4pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHQgPSBpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuX3N1cGVyID0gcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5fc3VwZXJBcHBseSA9IGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSgpKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAoci5wcm90b3R5cGUgPSBlLndpZGdldC5leHRlbmQoXG4gICAgICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgICAgIHsgd2lkZ2V0RXZlbnRQcmVmaXg6IG8gPyBoLndpZGdldEV2ZW50UHJlZml4IDogaSB9LFxuICAgICAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcjogcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZGdldE5hbWU6IGksXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWRnZXRCYXNlQ2xhc3M6IGEsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWRnZXRGdWxsTmFtZTogYSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgIG9cbiAgICAgICAgICAgICAgICAgICAgPyAoZS5lYWNoKG8uX2NoaWxkQ29uc3RydWN0b3JzLCBmdW5jdGlvbih0LCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gaS5wcm90b3R5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGUud2lkZ2V0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5uYW1lc3BhY2UgKyAnLicgKyBzLndpZGdldE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5fcHJvdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgby5fY2hpbGRDb25zdHJ1Y3RvcnMpXG4gICAgICAgICAgICAgICAgICAgIDogcy5fY2hpbGRDb25zdHJ1Y3RvcnMucHVzaChyKSxcbiAgICAgICAgICAgICAgICBlLndpZGdldC5icmlkZ2UoaSwgcik7XG4gICAgICAgIH0pLFxuICAgICAgICAoZS53aWRnZXQuZXh0ZW5kID0gZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICB2YXIgbiwgYSwgbyA9IHMuY2FsbChhcmd1bWVudHMsIDEpLCByID0gMCwgaCA9IG8ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGggPiByO1xuICAgICAgICAgICAgICAgIHIrK1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGZvciAobiBpbiBvW3JdKVxuICAgICAgICAgICAgICAgICAgICAoYSA9IG9bcl1bbl0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgb1tyXS5oYXNPd25Qcm9wZXJ0eShuKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgIT09IHQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaVtuXSA9IGUuaXNQbGFpbk9iamVjdChhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGUuaXNQbGFpbk9iamVjdChpW25dKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlLndpZGdldC5leHRlbmQoe30sIGlbbl0sIGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUud2lkZ2V0LmV4dGVuZCh7fSwgYSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhKTtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9KSxcbiAgICAgICAgKGUud2lkZ2V0LmJyaWRnZSA9IGZ1bmN0aW9uKGksIG4pIHtcbiAgICAgICAgICAgIHZhciBhID0gbi5wcm90b3R5cGUud2lkZ2V0RnVsbE5hbWUgfHwgaTtcbiAgICAgICAgICAgIGUuZm5baV0gPSBmdW5jdGlvbihvKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSAnc3RyaW5nJyA9PSB0eXBlb2YgbyxcbiAgICAgICAgICAgICAgICAgICAgaCA9IHMuY2FsbChhcmd1bWVudHMsIDEpLFxuICAgICAgICAgICAgICAgICAgICBsID0gdGhpcztcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAobyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAhciAmJiBoLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZS53aWRnZXQuZXh0ZW5kLmFwcGx5KG51bGwsIFtvXS5jb25jYXQoaCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBvKSxcbiAgICAgICAgICAgICAgICAgICAgclxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gZS5kYXRhKHRoaXMsIGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGUuaXNGdW5jdGlvbihuW29dKSAmJiAnXycgIT09IG8uY2hhckF0KDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKChzID0gbltvXS5hcHBseShuLCBoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyAhPT0gbiAmJiBzICE9PSB0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKChsID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyAmJiBzLmpxdWVyeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBsLnB1c2hTdGFjayhzLmdldCgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibm8gc3VjaCBtZXRob2QgJ1wiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCInIGZvciBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgd2lkZ2V0IGluc3RhbmNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Nhbm5vdCBjYWxsIG1ldGhvZHMgb24gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIHByaW9yIHRvIGluaXRpYWxpemF0aW9uOyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhdHRlbXB0ZWQgdG8gY2FsbCBtZXRob2QgJ1wiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiJ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGUuZGF0YSh0aGlzLCBhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHQub3B0aW9uKG8gfHwge30pLl9pbml0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUuZGF0YSh0aGlzLCBhLCBuZXcgbihvLCB0aGlzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAoZS5XaWRnZXQgPSBmdW5jdGlvbigpIHt9KSxcbiAgICAgICAgKGUuV2lkZ2V0Ll9jaGlsZENvbnN0cnVjdG9ycyA9IFtdKSxcbiAgICAgICAgKGUuV2lkZ2V0LnByb3RvdHlwZSA9IHtcbiAgICAgICAgICAgIHdpZGdldE5hbWU6ICd3aWRnZXQnLFxuICAgICAgICAgICAgd2lkZ2V0RXZlbnRQcmVmaXg6ICcnLFxuICAgICAgICAgICAgZGVmYXVsdEVsZW1lbnQ6ICc8ZGl2PicsXG4gICAgICAgICAgICBvcHRpb25zOiB7IGRpc2FibGVkOiAhMSwgY3JlYXRlOiBudWxsIH0sXG4gICAgICAgICAgICBfY3JlYXRlV2lkZ2V0OiBmdW5jdGlvbih0LCBzKSB7XG4gICAgICAgICAgICAgICAgKHMgPSBlKHMgfHwgdGhpcy5kZWZhdWx0RWxlbWVudCB8fCB0aGlzKVswXSksXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmVsZW1lbnQgPSBlKHMpKSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMudXVpZCA9IGkrKyksXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmV2ZW50TmFtZXNwYWNlID0gJy4nICsgdGhpcy53aWRnZXROYW1lICsgdGhpcy51dWlkKSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMub3B0aW9ucyA9IGUud2lkZ2V0LmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0Q3JlYXRlT3B0aW9ucygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuYmluZGluZ3MgPSBlKCkpLFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5ob3ZlcmFibGUgPSBlKCkpLFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5mb2N1c2FibGUgPSBlKCkpLFxuICAgICAgICAgICAgICAgICAgICBzICE9PSB0aGlzICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5kYXRhKHMsIHRoaXMud2lkZ2V0TmFtZSwgdGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmRhdGEocywgdGhpcy53aWRnZXRGdWxsTmFtZSwgdGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbighMCwgdGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0ID09PSBzICYmIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmRvY3VtZW50ID0gZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnN0eWxlID8gcy5vd25lckRvY3VtZW50IDogcy5kb2N1bWVudCB8fCBzXG4gICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLndpbmRvdyA9IGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudFswXS5kZWZhdWx0VmlldyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50WzBdLnBhcmVudFdpbmRvd1xuICAgICAgICAgICAgICAgICAgICAgICAgKSkpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGUoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignY3JlYXRlJywgbnVsbCwgdGhpcy5fZ2V0Q3JlYXRlRXZlbnREYXRhKCkpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbml0KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2dldENyZWF0ZU9wdGlvbnM6IGUubm9vcCxcbiAgICAgICAgICAgIF9nZXRDcmVhdGVFdmVudERhdGE6IGUubm9vcCxcbiAgICAgICAgICAgIF9jcmVhdGU6IGUubm9vcCxcbiAgICAgICAgICAgIF9pbml0OiBlLm5vb3AsXG4gICAgICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95KCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLnVuYmluZCh0aGlzLmV2ZW50TmFtZXNwYWNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZURhdGEodGhpcy53aWRnZXROYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZURhdGEodGhpcy53aWRnZXRGdWxsTmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVEYXRhKGUuY2FtZWxDYXNlKHRoaXMud2lkZ2V0RnVsbE5hbWUpKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53aWRnZXQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnVuYmluZCh0aGlzLmV2ZW50TmFtZXNwYWNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2lkZ2V0RnVsbE5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLWRpc2FibGVkICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndWktc3RhdGUtZGlzYWJsZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJpbmRpbmdzLnVuYmluZCh0aGlzLmV2ZW50TmFtZXNwYWNlKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3ZlcmFibGUucmVtb3ZlQ2xhc3MoJ3VpLXN0YXRlLWhvdmVyJyksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNhYmxlLnJlbW92ZUNsYXNzKCd1aS1zdGF0ZS1mb2N1cycpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9kZXN0cm95OiBlLm5vb3AsXG4gICAgICAgICAgICB3aWRnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0aW9uOiBmdW5jdGlvbihpLCBzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICAgIHIgPSBpO1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBhcmd1bWVudHMubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS53aWRnZXQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgaSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgKChyID0ge30pLFxuICAgICAgICAgICAgICAgICAgICAgICAgKG4gPSBpLnNwbGl0KCcuJykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGkgPSBuLnNoaWZ0KCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbi5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gcltpXSA9IGUud2lkZ2V0LmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zW2ldKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5sZW5ndGggLSAxID4gbztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvKytcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYVtuW29dXSA9IGFbbltvXV0gfHwge30pLCAoYSA9IGFbbltvXV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgoaSA9IG4ucG9wKCkpLCBzID09PSB0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYVtpXSA9PT0gdCA/IG51bGwgOiBhW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgYVtpXSA9IHM7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocyA9PT0gdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW2ldID09PSB0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMub3B0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJbaV0gPSBzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NldE9wdGlvbnMociksIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldE9wdGlvbnM6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgICAgICBmb3IgKHQgaW4gZSkgdGhpcy5fc2V0T3B0aW9uKHQsIGVbdF0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zZXRPcHRpb246IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5vcHRpb25zW2VdID0gdCksXG4gICAgICAgICAgICAgICAgICAgICdkaXNhYmxlZCcgPT09IGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLndpZGdldCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndpZGdldEZ1bGxOYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICctZGlzYWJsZWQgdWktc3RhdGUtZGlzYWJsZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhIXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCB0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJhYmxlLnJlbW92ZUNsYXNzKCd1aS1zdGF0ZS1ob3ZlcicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c2FibGUucmVtb3ZlQ2xhc3MoJ3VpLXN0YXRlLWZvY3VzJykpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZXRPcHRpb24oJ2Rpc2FibGVkJywgITEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZXRPcHRpb24oJ2Rpc2FibGVkJywgITApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9vbjogZnVuY3Rpb24oaSwgcywgbikge1xuICAgICAgICAgICAgICAgIHZhciBhLFxuICAgICAgICAgICAgICAgICAgICBvID0gdGhpcztcbiAgICAgICAgICAgICAgICAnYm9vbGVhbicgIT0gdHlwZW9mIGkgJiYgKChuID0gcyksIChzID0gaSksIChpID0gITEpKSxcbiAgICAgICAgICAgICAgICAgICAgblxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKHMgPSBhID0gZShzKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmJpbmRpbmdzID0gdGhpcy5iaW5kaW5ncy5hZGQocykpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAoKG4gPSBzKSwgKHMgPSB0aGlzLmVsZW1lbnQpLCAoYSA9IHRoaXMud2lkZ2V0KCkpKSxcbiAgICAgICAgICAgICAgICAgICAgZS5lYWNoKG4sIGZ1bmN0aW9uKG4sIHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGgoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG8ub3B0aW9ucy5kaXNhYmxlZCAhPT0gITAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFlKHRoaXMpLmhhc0NsYXNzKCd1aS1zdGF0ZS1kaXNhYmxlZCcpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICgnc3RyaW5nJyA9PSB0eXBlb2YgciA/IG9bcl0gOiByKS5hcHBseShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAnc3RyaW5nJyAhPSB0eXBlb2YgciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoLmd1aWQgPSByLmd1aWQgPSByLmd1aWQgfHwgaC5ndWlkIHx8IGUuZ3VpZCsrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0gbi5tYXRjaCgvXihcXHcrKVxccyooLiopJC8pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBsWzFdICsgby5ldmVudE5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gbFsyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgPyBhLmRlbGVnYXRlKGQsIHUsIGgpIDogcy5iaW5kKHUsIGgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb2ZmOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgICAgKHQgPVxuICAgICAgICAgICAgICAgICAgICAodCB8fCAnJykuc3BsaXQoJyAnKS5qb2luKHRoaXMuZXZlbnROYW1lc3BhY2UgKyAnICcpICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudE5hbWVzcGFjZSksXG4gICAgICAgICAgICAgICAgICAgIGUudW5iaW5kKHQpLnVuZGVsZWdhdGUodCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2RlbGF5OiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaSgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgnc3RyaW5nJyA9PSB0eXBlb2YgZSA/IHNbZV0gOiBlKS5hcHBseShcbiAgICAgICAgICAgICAgICAgICAgICAgIHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHMgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGksIHQgfHwgMCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2hvdmVyYWJsZTogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICh0aGlzLmhvdmVyYWJsZSA9IHRoaXMuaG92ZXJhYmxlLmFkZCh0KSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uKHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlZW50ZXI6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlKHQuY3VycmVudFRhcmdldCkuYWRkQ2xhc3MoJ3VpLXN0YXRlLWhvdmVyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VsZWF2ZTogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUodC5jdXJyZW50VGFyZ2V0KS5yZW1vdmVDbGFzcygndWktc3RhdGUtaG92ZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9mb2N1c2FibGU6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAodGhpcy5mb2N1c2FibGUgPSB0aGlzLmZvY3VzYWJsZS5hZGQodCkpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbih0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1c2luOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZSh0LmN1cnJlbnRUYXJnZXQpLmFkZENsYXNzKCd1aS1zdGF0ZS1mb2N1cycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvY3Vzb3V0OiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZSh0LmN1cnJlbnRUYXJnZXQpLnJlbW92ZUNsYXNzKCd1aS1zdGF0ZS1mb2N1cycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3RyaWdnZXI6IGZ1bmN0aW9uKHQsIGksIHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbixcbiAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IHRoaXMub3B0aW9uc1t0XTtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICgocyA9IHMgfHwge30pLFxuICAgICAgICAgICAgICAgICAgICAoaSA9IGUuRXZlbnQoaSkpLFxuICAgICAgICAgICAgICAgICAgICAoaS50eXBlID0gKHQgPT09IHRoaXMud2lkZ2V0RXZlbnRQcmVmaXhcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdFxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLndpZGdldEV2ZW50UHJlZml4ICsgdFxuICAgICAgICAgICAgICAgICAgICApLnRvTG93ZXJDYXNlKCkpLFxuICAgICAgICAgICAgICAgICAgICAoaS50YXJnZXQgPSB0aGlzLmVsZW1lbnRbMF0pLFxuICAgICAgICAgICAgICAgICAgICAoYSA9IGkub3JpZ2luYWxFdmVudCkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKG4gaW4gYSkgbiBpbiBpIHx8IChpW25dID0gYVtuXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnRyaWdnZXIoaSwgcyksXG4gICAgICAgICAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5pc0Z1bmN0aW9uKG8pICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgby5hcHBseSh0aGlzLmVsZW1lbnRbMF0sIFtpXS5jb25jYXQocykpID09PSAhMSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuaXNEZWZhdWx0UHJldmVudGVkKClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgZS5lYWNoKHsgc2hvdzogJ2ZhZGVJbicsIGhpZGU6ICdmYWRlT3V0JyB9LCBmdW5jdGlvbih0LCBpKSB7XG4gICAgICAgICAgICBlLldpZGdldC5wcm90b3R5cGVbJ18nICsgdF0gPSBmdW5jdGlvbihzLCBuLCBhKSB7XG4gICAgICAgICAgICAgICAgJ3N0cmluZycgPT0gdHlwZW9mIG4gJiYgKG4gPSB7IGVmZmVjdDogbiB9KTtcbiAgICAgICAgICAgICAgICB2YXIgbyxcbiAgICAgICAgICAgICAgICAgICAgciA9IG5cbiAgICAgICAgICAgICAgICAgICAgICAgID8gbiA9PT0gITAgfHwgJ251bWJlcicgPT0gdHlwZW9mIG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG4uZWZmZWN0IHx8IGlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdDtcbiAgICAgICAgICAgICAgICAobiA9IG4gfHwge30pLFxuICAgICAgICAgICAgICAgICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgbiAmJiAobiA9IHsgZHVyYXRpb246IG4gfSksXG4gICAgICAgICAgICAgICAgICAgIChvID0gIWUuaXNFbXB0eU9iamVjdChuKSksXG4gICAgICAgICAgICAgICAgICAgIChuLmNvbXBsZXRlID0gYSksXG4gICAgICAgICAgICAgICAgICAgIG4uZGVsYXkgJiYgcy5kZWxheShuLmRlbGF5KSxcbiAgICAgICAgICAgICAgICAgICAgbyAmJlxuICAgICAgICAgICAgICAgICAgICBlLmVmZmVjdHMgJiZcbiAgICAgICAgICAgICAgICAgICAgKGUuZWZmZWN0cy5lZmZlY3Rbcl0gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLnVpQmFja0NvbXBhdCAhPT0gITEgJiYgZS5lZmZlY3RzW3JdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc1t0XShuKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiByICE9PSB0ICYmIHNbcl1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHNbcl0obi5kdXJhdGlvbiwgbi5lYXNpbmcsIGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBzLnF1ZXVlKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlKHRoaXMpW3RdKCksIGEgJiYgYS5jYWxsKHNbMF0pLCBpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICBlLnVpQmFja0NvbXBhdCAhPT0gITEgJiZcbiAgICAgICAgICAgIChlLldpZGdldC5wcm90b3R5cGUuX2dldENyZWF0ZU9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBlLm1ldGFkYXRhICYmXG4gICAgICAgICAgICAgICAgICAgIGUubWV0YWRhdGEuZ2V0KHRoaXMuZWxlbWVudFswXSlbdGhpcy53aWRnZXROYW1lXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbn0pKGpRdWVyeSk7XG4oZnVuY3Rpb24oZSkge1xuICAgIHZhciB0ID0gITE7XG4gICAgZShkb2N1bWVudCkubW91c2V1cChmdW5jdGlvbigpIHtcbiAgICAgICAgdCA9ICExO1xuICAgIH0pLFxuICAgICAgICBlLndpZGdldCgndWkubW91c2UnLCB7XG4gICAgICAgICAgICB2ZXJzaW9uOiAnMS45LjInLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGNhbmNlbDogJ2lucHV0LHRleHRhcmVhLGJ1dHRvbixzZWxlY3Qsb3B0aW9uJyxcbiAgICAgICAgICAgICAgICBkaXN0YW5jZTogMSxcbiAgICAgICAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfbW91c2VJbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIC5iaW5kKCdtb3VzZWRvd24uJyArIHRoaXMud2lkZ2V0TmFtZSwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuX21vdXNlRG93bihlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmJpbmQoJ2NsaWNrLicgKyB0aGlzLndpZGdldE5hbWUsIGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMCA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmRhdGEoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LndpZGdldE5hbWUgKyAnLnByZXZlbnRDbGlja0V2ZW50J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChlLnJlbW92ZURhdGEoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC53aWRnZXROYW1lICsgJy5wcmV2ZW50Q2xpY2tFdmVudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgITEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5zdGFydGVkID0gITEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9tb3VzZURlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC51bmJpbmQoJy4nICsgdGhpcy53aWRnZXROYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW91c2VNb3ZlRGVsZWdhdGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGUoZG9jdW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnVuYmluZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21vdXNlbW92ZS4nICsgdGhpcy53aWRnZXROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudW5iaW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbW91c2V1cC4nICsgdGhpcy53aWRnZXROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3VzZVVwRGVsZWdhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9tb3VzZURvd246IGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW91c2VTdGFydGVkICYmIHRoaXMuX21vdXNlVXAoaSksXG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5fbW91c2VEb3duRXZlbnQgPSBpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IDEgPT09IGkud2hpY2gsXG4gICAgICAgICAgICAgICAgICAgICAgICBhID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3RyaW5nJyA9PSB0eXBlb2YgdGhpcy5vcHRpb25zLmNhbmNlbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkudGFyZ2V0Lm5vZGVOYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZShpLnRhcmdldCkuY2xvc2VzdCh0aGlzLm9wdGlvbnMuY2FuY2VsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogITE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuICYmICFhICYmIHRoaXMuX21vdXNlQ2FwdHVyZShpKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKHRoaXMubW91c2VEZWxheU1ldCA9ICF0aGlzLm9wdGlvbnMuZGVsYXkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdXNlRGVsYXlNZXQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLl9tb3VzZURlbGF5VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMubW91c2VEZWxheU1ldCA9ICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5vcHRpb25zLmRlbGF5KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdXNlRGlzdGFuY2VNZXQoaSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW91c2VEZWxheU1ldChpKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKHRoaXMuX21vdXNlU3RhcnRlZCA9IHRoaXMuX21vdXNlU3RhcnQoaSkgIT09ICExKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIXRoaXMuX21vdXNlU3RhcnRlZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKGkucHJldmVudERlZmF1bHQoKSwgITApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICghMCA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuZGF0YShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndpZGdldE5hbWUgKyAnLnByZXZlbnRDbGlja0V2ZW50J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5yZW1vdmVEYXRhKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2lkZ2V0TmFtZSArICcucHJldmVudENsaWNrRXZlbnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5fbW91c2VNb3ZlRGVsZWdhdGUgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5fbW91c2VNb3ZlKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuX21vdXNlVXBEZWxlZ2F0ZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLl9tb3VzZVVwKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZShkb2N1bWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5iaW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtb3VzZW1vdmUuJyArIHRoaXMud2lkZ2V0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmJpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21vdXNldXAuJyArIHRoaXMud2lkZ2V0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3VzZVVwRGVsZWdhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkucHJldmVudERlZmF1bHQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHQgPSAhMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICEwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogITA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9tb3VzZU1vdmU6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWUudWkuaWUgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID49IDkgfHwgdC5idXR0b25cbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLl9tb3VzZVN0YXJ0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKHRoaXMuX21vdXNlRHJhZyh0KSwgdC5wcmV2ZW50RGVmYXVsdCgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAodGhpcy5fbW91c2VEaXN0YW5jZU1ldCh0KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW91c2VEZWxheU1ldCh0KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCh0aGlzLl9tb3VzZVN0YXJ0ZWQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdXNlU3RhcnQodGhpcy5fbW91c2VEb3duRXZlbnQsIHQpICE9PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICExKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdXNlU3RhcnRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5fbW91c2VEcmFnKHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9tb3VzZVVwKHQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIXRoaXMuX21vdXNlU3RhcnRlZClcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9tb3VzZVVwKHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9tb3VzZVVwOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgZShkb2N1bWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC51bmJpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21vdXNlbW92ZS4nICsgdGhpcy53aWRnZXROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdXNlTW92ZURlbGVnYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAudW5iaW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtb3VzZXVwLicgKyB0aGlzLndpZGdldE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW91c2VVcERlbGVnYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3VzZVN0YXJ0ZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICgodGhpcy5fbW91c2VTdGFydGVkID0gITEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC50YXJnZXQgPT09IHRoaXMuX21vdXNlRG93bkV2ZW50LnRhcmdldCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuZGF0YShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2lkZ2V0TmFtZSArICcucHJldmVudENsaWNrRXZlbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3VzZVN0b3AodCkpLFxuICAgICAgICAgICAgICAgICAgICAhMVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX21vdXNlRGlzdGFuY2VNZXQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguYWJzKHRoaXMuX21vdXNlRG93bkV2ZW50LnBhZ2VYIC0gZS5wYWdlWCksXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyh0aGlzLl9tb3VzZURvd25FdmVudC5wYWdlWSAtIGUucGFnZVkpXG4gICAgICAgICAgICAgICAgICAgICkgPj0gdGhpcy5vcHRpb25zLmRpc3RhbmNlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfbW91c2VEZWxheU1ldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubW91c2VEZWxheU1ldDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfbW91c2VTdGFydDogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgICAgIF9tb3VzZURyYWc6IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgICBfbW91c2VTdG9wOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgX21vdXNlQ2FwdHVyZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG59KShqUXVlcnkpO1xuKGZ1bmN0aW9uKGUsIHQpIHtcbiAgICBmdW5jdGlvbiBpKGUsIHQsIGkpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHBhcnNlSW50KGVbMF0sIDEwKSAqIChjLnRlc3QoZVswXSkgPyB0IC8gMTAwIDogMSksXG4gICAgICAgICAgICBwYXJzZUludChlWzFdLCAxMCkgKiAoYy50ZXN0KGVbMV0pID8gaSAvIDEwMCA6IDEpLFxuICAgICAgICBdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzKHQsIGkpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGUuY3NzKHQsIGkpLCAxMCkgfHwgMDtcbiAgICB9XG4gICAgZS51aSA9IGUudWkgfHwge307XG4gICAgdmFyIG4sXG4gICAgICAgIGEgPSBNYXRoLm1heCxcbiAgICAgICAgbyA9IE1hdGguYWJzLFxuICAgICAgICByID0gTWF0aC5yb3VuZCxcbiAgICAgICAgaCA9IC9sZWZ0fGNlbnRlcnxyaWdodC8sXG4gICAgICAgIGwgPSAvdG9wfGNlbnRlcnxib3R0b20vLFxuICAgICAgICB1ID0gL1tcXCtcXC1dXFxkKyU/LyxcbiAgICAgICAgZCA9IC9eXFx3Ky8sXG4gICAgICAgIGMgPSAvJSQvLFxuICAgICAgICBwID0gZS5mbi5wb3NpdGlvbjtcbiAgICAoZS5wb3NpdGlvbiA9IHtcbiAgICAgICAgc2Nyb2xsYmFyV2lkdGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKG4gIT09IHQpIHJldHVybiBuO1xuICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgcyxcbiAgICAgICAgICAgICAgICBhID0gZShcbiAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IHN0eWxlPSdkaXNwbGF5OmJsb2NrO3dpZHRoOjUwcHg7aGVpZ2h0OjUwcHg7b3ZlcmZsb3c6aGlkZGVuOyc+PGRpdiBzdHlsZT0naGVpZ2h0OjEwMHB4O3dpZHRoOmF1dG87Jz48L2Rpdj48L2Rpdj5cIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgbyA9IGEuY2hpbGRyZW4oKVswXTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgZSgnYm9keScpLmFwcGVuZChhKSxcbiAgICAgICAgICAgICAgICAoaSA9IG8ub2Zmc2V0V2lkdGgpLFxuICAgICAgICAgICAgICAgIGEuY3NzKCdvdmVyZmxvdycsICdzY3JvbGwnKSxcbiAgICAgICAgICAgICAgICAocyA9IG8ub2Zmc2V0V2lkdGgpLFxuICAgICAgICAgICAgICAgIGkgPT09IHMgJiYgKHMgPSBhWzBdLmNsaWVudFdpZHRoKSxcbiAgICAgICAgICAgICAgICBhLnJlbW92ZSgpLFxuICAgICAgICAgICAgICAgIChuID0gaSAtIHMpXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBnZXRTY3JvbGxJbmZvOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgaSA9IHQuaXNXaW5kb3cgPyAnJyA6IHQuZWxlbWVudC5jc3MoJ292ZXJmbG93LXgnKSxcbiAgICAgICAgICAgICAgICBzID0gdC5pc1dpbmRvdyA/ICcnIDogdC5lbGVtZW50LmNzcygnb3ZlcmZsb3cteScpLFxuICAgICAgICAgICAgICAgIG4gPVxuICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsJyA9PT0gaSB8fFxuICAgICAgICAgICAgICAgICAgICAoJ2F1dG8nID09PSBpICYmIHQud2lkdGggPCB0LmVsZW1lbnRbMF0uc2Nyb2xsV2lkdGgpLFxuICAgICAgICAgICAgICAgIGEgPVxuICAgICAgICAgICAgICAgICAgICAnc2Nyb2xsJyA9PT0gcyB8fFxuICAgICAgICAgICAgICAgICAgICAoJ2F1dG8nID09PSBzICYmIHQuaGVpZ2h0IDwgdC5lbGVtZW50WzBdLnNjcm9sbEhlaWdodCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBuID8gZS5wb3NpdGlvbi5zY3JvbGxiYXJXaWR0aCgpIDogMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGEgPyBlLnBvc2l0aW9uLnNjcm9sbGJhcldpZHRoKCkgOiAwLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0V2l0aGluSW5mbzogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIGkgPSBlKHQgfHwgd2luZG93KSxcbiAgICAgICAgICAgICAgICBzID0gZS5pc1dpbmRvdyhpWzBdKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZWxlbWVudDogaSxcbiAgICAgICAgICAgICAgICBpc1dpbmRvdzogcyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IGkub2Zmc2V0KCkgfHwgeyBsZWZ0OiAwLCB0b3A6IDAgfSxcbiAgICAgICAgICAgICAgICBzY3JvbGxMZWZ0OiBpLnNjcm9sbExlZnQoKSxcbiAgICAgICAgICAgICAgICBzY3JvbGxUb3A6IGkuc2Nyb2xsVG9wKCksXG4gICAgICAgICAgICAgICAgd2lkdGg6IHMgPyBpLndpZHRoKCkgOiBpLm91dGVyV2lkdGgoKSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHMgPyBpLmhlaWdodCgpIDogaS5vdXRlckhlaWdodCgpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9KSxcbiAgICAgICAgKGUuZm4ucG9zaXRpb24gPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBpZiAoIXQgfHwgIXQub2YpIHJldHVybiBwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB0ID0gZS5leHRlbmQoe30sIHQpO1xuICAgICAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICAgICAgYyxcbiAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgIG0sXG4gICAgICAgICAgICAgICAgZyxcbiAgICAgICAgICAgICAgICB2ID0gZSh0Lm9mKSxcbiAgICAgICAgICAgICAgICBfID0gZS5wb3NpdGlvbi5nZXRXaXRoaW5JbmZvKHQud2l0aGluKSxcbiAgICAgICAgICAgICAgICBiID0gZS5wb3NpdGlvbi5nZXRTY3JvbGxJbmZvKF8pLFxuICAgICAgICAgICAgICAgIHkgPSB2WzBdLFxuICAgICAgICAgICAgICAgIHggPSAodC5jb2xsaXNpb24gfHwgJ2ZsaXAnKS5zcGxpdCgnICcpLFxuICAgICAgICAgICAgICAgIHcgPSB7fTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgOSA9PT0geS5ub2RlVHlwZVxuICAgICAgICAgICAgICAgICAgICA/ICgoYyA9IHYud2lkdGgoKSksXG4gICAgICAgICAgICAgICAgICAgICAgKGYgPSB2LmhlaWdodCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAobSA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0pKVxuICAgICAgICAgICAgICAgICAgICA6IGUuaXNXaW5kb3coeSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKChjID0gdi53aWR0aCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGYgPSB2LmhlaWdodCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKG0gPSB7IHRvcDogdi5zY3JvbGxUb3AoKSwgbGVmdDogdi5zY3JvbGxMZWZ0KCkgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHkucHJldmVudERlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICgodC5hdCA9ICdsZWZ0IHRvcCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMgPSBmID0gMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobSA9IHsgdG9wOiB5LnBhZ2VZLCBsZWZ0OiB5LnBhZ2VYIH0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKChjID0gdi5vdXRlcldpZHRoKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGYgPSB2Lm91dGVySGVpZ2h0KCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0gPSB2Lm9mZnNldCgpKSksXG4gICAgICAgICAgICAgICAgKGcgPSBlLmV4dGVuZCh7fSwgbSkpLFxuICAgICAgICAgICAgICAgIGUuZWFjaChbJ215JywgJ2F0J10sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gKHRbdGhpc10gfHwgJycpLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICAgICAgICAgIDEgPT09IHMubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAocyA9IGgudGVzdChzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcy5jb25jYXQoWydjZW50ZXInXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGwudGVzdChzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFsnY2VudGVyJ10uY29uY2F0KHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogWydjZW50ZXInLCAnY2VudGVyJ10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHNbMF0gPSBoLnRlc3Qoc1swXSkgPyBzWzBdIDogJ2NlbnRlcicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHNbMV0gPSBsLnRlc3Qoc1sxXSkgPyBzWzFdIDogJ2NlbnRlcicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGUgPSB1LmV4ZWMoc1swXSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGkgPSB1LmV4ZWMoc1sxXSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHdbdGhpc10gPSBbZSA/IGVbMF0gOiAwLCBpID8gaVswXSA6IDBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0W3RoaXNdID0gW2QuZXhlYyhzWzBdKVswXSwgZC5leGVjKHNbMV0pWzBdXSk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgMSA9PT0geC5sZW5ndGggJiYgKHhbMV0gPSB4WzBdKSxcbiAgICAgICAgICAgICAgICAncmlnaHQnID09PSB0LmF0WzBdXG4gICAgICAgICAgICAgICAgICAgID8gKGcubGVmdCArPSBjKVxuICAgICAgICAgICAgICAgICAgICA6ICdjZW50ZXInID09PSB0LmF0WzBdICYmIChnLmxlZnQgKz0gYyAvIDIpLFxuICAgICAgICAgICAgICAgICdib3R0b20nID09PSB0LmF0WzFdXG4gICAgICAgICAgICAgICAgICAgID8gKGcudG9wICs9IGYpXG4gICAgICAgICAgICAgICAgICAgIDogJ2NlbnRlcicgPT09IHQuYXRbMV0gJiYgKGcudG9wICs9IGYgLyAyKSxcbiAgICAgICAgICAgICAgICAobiA9IGkody5hdCwgYywgZikpLFxuICAgICAgICAgICAgICAgIChnLmxlZnQgKz0gblswXSksXG4gICAgICAgICAgICAgICAgKGcudG9wICs9IG5bMV0pLFxuICAgICAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdSA9IGUodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gdS5vdXRlcldpZHRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBwID0gdS5vdXRlckhlaWdodCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IHModGhpcywgJ21hcmdpbkxlZnQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBzKHRoaXMsICdtYXJnaW5Ub3AnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEQgPSBkICsgeSArIHModGhpcywgJ21hcmdpblJpZ2h0JykgKyBiLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgVCA9IHAgKyBrICsgcyh0aGlzLCAnbWFyZ2luQm90dG9tJykgKyBiLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFMgPSBlLmV4dGVuZCh7fSwgZyksXG4gICAgICAgICAgICAgICAgICAgICAgICBOID0gaSh3Lm15LCB1Lm91dGVyV2lkdGgoKSwgdS5vdXRlckhlaWdodCgpKTtcbiAgICAgICAgICAgICAgICAgICAgJ3JpZ2h0JyA9PT0gdC5teVswXVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoUy5sZWZ0IC09IGQpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICdjZW50ZXInID09PSB0Lm15WzBdICYmIChTLmxlZnQgLT0gZCAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2JvdHRvbScgPT09IHQubXlbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChTLnRvcCAtPSBwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ2NlbnRlcicgPT09IHQubXlbMV0gJiYgKFMudG9wIC09IHAgLyAyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChTLmxlZnQgKz0gTlswXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoUy50b3AgKz0gTlsxXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN1cHBvcnQub2Zmc2V0RnJhY3Rpb25zIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChTLmxlZnQgPSByKFMubGVmdCkpLCAoUy50b3AgPSByKFMudG9wKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGggPSB7IG1hcmdpbkxlZnQ6IHksIG1hcmdpblRvcDogayB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZWFjaChbJ2xlZnQnLCAndG9wJ10sIGZ1bmN0aW9uKGksIHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnVpLnBvc2l0aW9uW3hbaV1dICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUudWkucG9zaXRpb25beFtpXV1bc10oUywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0V2lkdGg6IGMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRIZWlnaHQ6IGYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtV2lkdGg6IGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtSGVpZ2h0OiBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9uUG9zaXRpb246IGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25XaWR0aDogRCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvbkhlaWdodDogVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogW25bMF0gKyBOWzBdLCBuWzFdICsgTlsxXV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBteTogdC5teSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0OiB0LmF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aGluOiBfLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbTogdSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZm4uYmdpZnJhbWUgJiYgdS5iZ2lmcmFtZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC51c2luZyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IG0ubGVmdCAtIFMubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBpICsgYyAtIGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gbS50b3AgLSBTLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBuICsgZiAtIHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBtLmxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogbS50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IFMubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBTLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAgPiBzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdsZWZ0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JpZ2h0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWw6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAgPiByXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICd0b3AnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG4gPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnYm90dG9tJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ21pZGRsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID4gYyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA+IG8oaSArIHMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaC5ob3Jpem9udGFsID0gJ2NlbnRlcicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA+IGYgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID4gbyhuICsgcikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaC52ZXJ0aWNhbCA9ICdtaWRkbGUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoLmltcG9ydGFudCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYShvKGkpLCBvKHMpKSA+IGEobyhuKSwgbyhyKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnaG9yaXpvbnRhbCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAndmVydGljYWwnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQudXNpbmcuY2FsbCh0aGlzLCBlLCBoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHUub2Zmc2V0KGUuZXh0ZW5kKFMsIHsgdXNpbmc6IGwgfSkpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9KSxcbiAgICAgICAgKGUudWkucG9zaXRpb24gPSB7XG4gICAgICAgICAgICBmaXQ6IHtcbiAgICAgICAgICAgICAgICBsZWZ0OiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHQud2l0aGluLFxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHMuaXNXaW5kb3cgPyBzLnNjcm9sbExlZnQgOiBzLm9mZnNldC5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHMud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gZS5sZWZ0IC0gdC5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5MZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgaCA9IG4gLSByLFxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHIgKyB0LmNvbGxpc2lvbldpZHRoIC0gbyAtIG47XG4gICAgICAgICAgICAgICAgICAgIHQuY29sbGlzaW9uV2lkdGggPiBvXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGggPiAwICYmIDAgPj0gbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKChpID0gZS5sZWZ0ICsgaCArIHQuY29sbGlzaW9uV2lkdGggLSBvIC0gbiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZS5sZWZ0ICs9IGggLSBpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IChlLmxlZnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPiAwICYmIDAgPj0gaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBoID4gbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBuICsgbyAtIHQuY29sbGlzaW9uV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbilcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaCA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChlLmxlZnQgKz0gaClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGwgPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKGUubGVmdCAtPSBsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IChlLmxlZnQgPSBhKGUubGVmdCAtIHIsIGUubGVmdCkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9wOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHQud2l0aGluLFxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHMuaXNXaW5kb3cgPyBzLnNjcm9sbFRvcCA6IHMub2Zmc2V0LnRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB0LndpdGhpbi5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gZS50b3AgLSB0LmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpblRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGggPSBuIC0gcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSByICsgdC5jb2xsaXNpb25IZWlnaHQgLSBvIC0gbjtcbiAgICAgICAgICAgICAgICAgICAgdC5jb2xsaXNpb25IZWlnaHQgPiBvXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGggPiAwICYmIDAgPj0gbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKChpID0gZS50b3AgKyBoICsgdC5jb2xsaXNpb25IZWlnaHQgLSBvIC0gbiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZS50b3AgKz0gaCAtIGkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKGUudG9wID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID4gMCAmJiAwID49IGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaCA+IGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbiArIG8gLSB0LmNvbGxpc2lvbkhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBuKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBoID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKGUudG9wICs9IGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChlLnRvcCAtPSBsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IChlLnRvcCA9IGEoZS50b3AgLSByLCBlLnRvcCkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmxpcDoge1xuICAgICAgICAgICAgICAgIGxlZnQ6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHQud2l0aGluLFxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IG4ub2Zmc2V0LmxlZnQgKyBuLnNjcm9sbExlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gbi53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGggPSBuLmlzV2luZG93ID8gbi5zY3JvbGxMZWZ0IDogbi5vZmZzZXQubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBlLmxlZnQgLSB0LmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpbkxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB1ID0gbCAtIGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gbCArIHQuY29sbGlzaW9uV2lkdGggLSByIC0gaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsZWZ0JyA9PT0gdC5teVswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IC10LmVsZW1XaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdyaWdodCcgPT09IHQubXlbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdC5lbGVtV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsZWZ0JyA9PT0gdC5hdFswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHQudGFyZ2V0V2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAncmlnaHQnID09PSB0LmF0WzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IC10LnRhcmdldFdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBmID0gLTIgKiB0Lm9mZnNldFswXTtcbiAgICAgICAgICAgICAgICAgICAgMCA+IHVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKChpID0gZS5sZWZ0ICsgYyArIHAgKyBmICsgdC5jb2xsaXNpb25XaWR0aCAtIHIgLSBhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKDAgPiBpIHx8IG8odSkgPiBpKSAmJiAoZS5sZWZ0ICs9IGMgKyBwICsgZikpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGQgPiAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgocyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmxlZnQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5MZWZ0ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAocyA+IDAgfHwgZCA+IG8ocykpICYmIChlLmxlZnQgKz0gYyArIHAgKyBmKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b3A6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHQud2l0aGluLFxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IG4ub2Zmc2V0LnRvcCArIG4uc2Nyb2xsVG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgciA9IG4uaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgaCA9IG4uaXNXaW5kb3cgPyBuLnNjcm9sbFRvcCA6IG4ub2Zmc2V0LnRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBlLnRvcCAtIHQuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luVG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgdSA9IGwgLSBoLFxuICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGwgKyB0LmNvbGxpc2lvbkhlaWdodCAtIHIgLSBoLFxuICAgICAgICAgICAgICAgICAgICAgICAgYyA9ICd0b3AnID09PSB0Lm15WzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcCA9IGNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IC10LmVsZW1IZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdib3R0b20nID09PSB0Lm15WzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdC5lbGVtSGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGYgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0b3AnID09PSB0LmF0WzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdC50YXJnZXRIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnYm90dG9tJyA9PT0gdC5hdFsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAtdC50YXJnZXRIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG0gPSAtMiAqIHQub2Zmc2V0WzFdO1xuICAgICAgICAgICAgICAgICAgICAwID4gdVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKHMgPSBlLnRvcCArIHAgKyBmICsgbSArIHQuY29sbGlzaW9uSGVpZ2h0IC0gciAtIGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlLnRvcCArIHAgKyBmICsgbSA+IHUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwID4gcyB8fCBvKHUpID4gcykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlLnRvcCArPSBwICsgZiArIG0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBkID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKGkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS50b3AgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5Ub3AgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGUudG9wICsgcCArIGYgKyBtID4gZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkgPiAwIHx8IGQgPiBvKGkpKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUudG9wICs9IHAgKyBmICsgbSkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmxpcGZpdDoge1xuICAgICAgICAgICAgICAgIGxlZnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBlLnVpLnBvc2l0aW9uLmZsaXAubGVmdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZS51aS5wb3NpdGlvbi5maXQubGVmdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgZS51aS5wb3NpdGlvbi5mbGlwLnRvcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZS51aS5wb3NpdGlvbi5maXQudG9wLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdCxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIHMsXG4gICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgIG8gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdLFxuICAgICAgICAgICAgICAgIHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChvID8gJ2RpdicgOiAnYm9keScpKSxcbiAgICAgICAgICAgICAgICAocyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMCxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbyAmJlxuICAgICAgICAgICAgICAgICAgICBlLmV4dGVuZChzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICctMTAwMHB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJy0xMDAwcHgnLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvciAoYSBpbiBzKSB0LnN0eWxlW2FdID0gc1thXTtcbiAgICAgICAgICAgIHQuYXBwZW5kQ2hpbGQociksXG4gICAgICAgICAgICAgICAgKGkgPSBvIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCksXG4gICAgICAgICAgICAgICAgaS5pbnNlcnRCZWZvcmUodCwgaS5maXJzdENoaWxkKSxcbiAgICAgICAgICAgICAgICAoci5zdHlsZS5jc3NUZXh0ID0gJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDogMTAuNzQzMjIyMnB4OycpLFxuICAgICAgICAgICAgICAgIChuID0gZShyKS5vZmZzZXQoKS5sZWZ0KSxcbiAgICAgICAgICAgICAgICAoZS5zdXBwb3J0Lm9mZnNldEZyYWN0aW9ucyA9IG4gPiAxMCAmJiAxMSA+IG4pLFxuICAgICAgICAgICAgICAgICh0LmlubmVySFRNTCA9ICcnKSxcbiAgICAgICAgICAgICAgICBpLnJlbW92ZUNoaWxkKHQpO1xuICAgICAgICB9KSgpLFxuICAgICAgICBlLnVpQmFja0NvbXBhdCAhPT0gITEgJiZcbiAgICAgICAgICAgIChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBlLmZuLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgIGUuZm4ucG9zaXRpb24gPSBmdW5jdGlvbihzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcyB8fCAhcy5vZmZzZXQpIHJldHVybiBpLmNhbGwodGhpcywgcyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gcy5vZmZzZXQuc3BsaXQoJyAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBzLmF0LnNwbGl0KCcgJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAxID09PSBuLmxlbmd0aCAmJiAoblsxXSA9IG5bMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgL15cXGQvLnRlc3QoblswXSkgJiYgKG5bMF0gPSAnKycgKyBuWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC9eXFxkLy50ZXN0KG5bMV0pICYmIChuWzFdID0gJysnICsgblsxXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAxID09PSBhLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgvbGVmdHxjZW50ZXJ8cmlnaHQvLnRlc3QoYVswXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoYVsxXSA9ICdjZW50ZXInKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgoYVsxXSA9IGFbMF0pLCAoYVswXSA9ICdjZW50ZXInKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaS5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5leHRlbmQocywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdDogYVswXSArIG5bMF0gKyAnICcgKyBhWzFdICsgblsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKGpRdWVyeSk7XG59KShqUXVlcnkpO1xuKGZ1bmN0aW9uKGUpIHtcbiAgICBlLndpZGdldCgndWkuZHJhZ2dhYmxlJywgZS51aS5tb3VzZSwge1xuICAgICAgICB2ZXJzaW9uOiAnMS45LjInLFxuICAgICAgICB3aWRnZXRFdmVudFByZWZpeDogJ2RyYWcnLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBhZGRDbGFzc2VzOiAhMCxcbiAgICAgICAgICAgIGFwcGVuZFRvOiAncGFyZW50JyxcbiAgICAgICAgICAgIGF4aXM6ICExLFxuICAgICAgICAgICAgY29ubmVjdFRvU29ydGFibGU6ICExLFxuICAgICAgICAgICAgY29udGFpbm1lbnQ6ICExLFxuICAgICAgICAgICAgY3Vyc29yOiAnYXV0bycsXG4gICAgICAgICAgICBjdXJzb3JBdDogITEsXG4gICAgICAgICAgICBncmlkOiAhMSxcbiAgICAgICAgICAgIGhhbmRsZTogITEsXG4gICAgICAgICAgICBoZWxwZXI6ICdvcmlnaW5hbCcsXG4gICAgICAgICAgICBpZnJhbWVGaXg6ICExLFxuICAgICAgICAgICAgb3BhY2l0eTogITEsXG4gICAgICAgICAgICByZWZyZXNoUG9zaXRpb25zOiAhMSxcbiAgICAgICAgICAgIHJldmVydDogITEsXG4gICAgICAgICAgICByZXZlcnREdXJhdGlvbjogNTAwLFxuICAgICAgICAgICAgc2NvcGU6ICdkZWZhdWx0JyxcbiAgICAgICAgICAgIHNjcm9sbDogITAsXG4gICAgICAgICAgICBzY3JvbGxTZW5zaXRpdml0eTogMjAsXG4gICAgICAgICAgICBzY3JvbGxTcGVlZDogMjAsXG4gICAgICAgICAgICBzbmFwOiAhMSxcbiAgICAgICAgICAgIHNuYXBNb2RlOiAnYm90aCcsXG4gICAgICAgICAgICBzbmFwVG9sZXJhbmNlOiAyMCxcbiAgICAgICAgICAgIHN0YWNrOiAhMSxcbiAgICAgICAgICAgIHpJbmRleDogITEsXG4gICAgICAgIH0sXG4gICAgICAgIF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJ29yaWdpbmFsJyAhPSB0aGlzLm9wdGlvbnMuaGVscGVyIHx8XG4gICAgICAgICAgICAgICAgL14oPzpyfGF8ZikvLnRlc3QodGhpcy5lbGVtZW50LmNzcygncG9zaXRpb24nKSkgfHxcbiAgICAgICAgICAgICAgICAodGhpcy5lbGVtZW50WzBdLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJyksXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmFkZENsYXNzZXMgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmFkZENsYXNzKCd1aS1kcmFnZ2FibGUnKSxcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmFkZENsYXNzKCd1aS1kcmFnZ2FibGUtZGlzYWJsZWQnKSxcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3VzZUluaXQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKFxuICAgICAgICAgICAgICAgICd1aS1kcmFnZ2FibGUgdWktZHJhZ2dhYmxlLWRyYWdnaW5nIHVpLWRyYWdnYWJsZS1kaXNhYmxlZCdcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgdGhpcy5fbW91c2VEZXN0cm95KCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9tb3VzZUNhcHR1cmU6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGVscGVyIHx8XG4gICAgICAgICAgICAgICAgaS5kaXNhYmxlZCB8fFxuICAgICAgICAgICAgICAgIGUodC50YXJnZXQpLmlzKCcudWktcmVzaXphYmxlLWhhbmRsZScpXG4gICAgICAgICAgICAgICAgPyAhMVxuICAgICAgICAgICAgICAgIDogKCh0aGlzLmhhbmRsZSA9IHRoaXMuX2dldEhhbmRsZSh0KSksXG4gICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVxuICAgICAgICAgICAgICAgICAgICAgID8gKGUoaS5pZnJhbWVGaXggPT09ICEwID8gJ2lmcmFtZScgOiBpLmlmcmFtZUZpeCkuZWFjaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidWktZHJhZ2dhYmxlLWlmcmFtZUZpeFwiIHN0eWxlPVwiYmFja2dyb3VuZDogI2ZmZjtcIj48L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLm9mZnNldFdpZHRoICsgJ3B4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMub2Zmc2V0SGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAnMC4wMDEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpJbmRleDogMWUzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jc3MoZSh0aGlzKS5vZmZzZXQoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbygnYm9keScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAhMClcbiAgICAgICAgICAgICAgICAgICAgICA6ICExKTtcbiAgICAgICAgfSxcbiAgICAgICAgX21vdXNlU3RhcnQ6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAodGhpcy5oZWxwZXIgPSB0aGlzLl9jcmVhdGVIZWxwZXIodCkpLFxuICAgICAgICAgICAgICAgIHRoaXMuaGVscGVyLmFkZENsYXNzKCd1aS1kcmFnZ2FibGUtZHJhZ2dpbmcnKSxcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUhlbHBlclByb3BvcnRpb25zKCksXG4gICAgICAgICAgICAgICAgZS51aS5kZG1hbmFnZXIgJiYgKGUudWkuZGRtYW5hZ2VyLmN1cnJlbnQgPSB0aGlzKSxcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZU1hcmdpbnMoKSxcbiAgICAgICAgICAgICAgICAodGhpcy5jc3NQb3NpdGlvbiA9IHRoaXMuaGVscGVyLmNzcygncG9zaXRpb24nKSksXG4gICAgICAgICAgICAgICAgKHRoaXMuc2Nyb2xsUGFyZW50ID0gdGhpcy5oZWxwZXIuc2Nyb2xsUGFyZW50KCkpLFxuICAgICAgICAgICAgICAgICh0aGlzLm9mZnNldCA9IHRoaXMucG9zaXRpb25BYnMgPSB0aGlzLmVsZW1lbnQub2Zmc2V0KCkpLFxuICAgICAgICAgICAgICAgICh0aGlzLm9mZnNldCA9IHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB0aGlzLm9mZnNldC50b3AgLSB0aGlzLm1hcmdpbnMudG9wLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0aGlzLm9mZnNldC5sZWZ0IC0gdGhpcy5tYXJnaW5zLmxlZnQsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZS5leHRlbmQodGhpcy5vZmZzZXQsIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IHQucGFnZVggLSB0aGlzLm9mZnNldC5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiB0LnBhZ2VZIC0gdGhpcy5vZmZzZXQudG9wLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IHRoaXMuX2dldFBhcmVudE9mZnNldCgpLFxuICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZTogdGhpcy5fZ2V0UmVsYXRpdmVPZmZzZXQoKSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAodGhpcy5vcmlnaW5hbFBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbiA9IHRoaXMuX2dlbmVyYXRlUG9zaXRpb24oXG4gICAgICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAodGhpcy5vcmlnaW5hbFBhZ2VYID0gdC5wYWdlWCksXG4gICAgICAgICAgICAgICAgKHRoaXMub3JpZ2luYWxQYWdlWSA9IHQucGFnZVkpLFxuICAgICAgICAgICAgICAgIGkuY3Vyc29yQXQgJiYgdGhpcy5fYWRqdXN0T2Zmc2V0RnJvbUhlbHBlcihpLmN1cnNvckF0KSxcbiAgICAgICAgICAgICAgICBpLmNvbnRhaW5tZW50ICYmIHRoaXMuX3NldENvbnRhaW5tZW50KCksXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignc3RhcnQnLCB0KSA9PT0gITFcbiAgICAgICAgICAgICAgICAgICAgPyAodGhpcy5fY2xlYXIoKSwgITEpXG4gICAgICAgICAgICAgICAgICAgIDogKHRoaXMuX2NhY2hlSGVscGVyUHJvcG9ydGlvbnMoKSxcbiAgICAgICAgICAgICAgICAgICAgICBlLnVpLmRkbWFuYWdlciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAhaS5kcm9wQmVoYXZpb3VyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGUudWkuZGRtYW5hZ2VyLnByZXBhcmVPZmZzZXRzKHRoaXMsIHQpLFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdXNlRHJhZyh0LCAhMCksXG4gICAgICAgICAgICAgICAgICAgICAgZS51aS5kZG1hbmFnZXIgJiYgZS51aS5kZG1hbmFnZXIuZHJhZ1N0YXJ0KHRoaXMsIHQpLFxuICAgICAgICAgICAgICAgICAgICAgICEwKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgX21vdXNlRHJhZzogZnVuY3Rpb24odCwgaSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICgodGhpcy5wb3NpdGlvbiA9IHRoaXMuX2dlbmVyYXRlUG9zaXRpb24odCkpLFxuICAgICAgICAgICAgICAgICh0aGlzLnBvc2l0aW9uQWJzID0gdGhpcy5fY29udmVydFBvc2l0aW9uVG8oJ2Fic29sdXRlJykpLFxuICAgICAgICAgICAgICAgICFpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSB0aGlzLl91aUhhc2goKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdHJpZ2dlcignZHJhZycsIHQsIHMpID09PSAhMSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vdXNlVXAoe30pLCAhMTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gcy5wb3NpdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgKHRoaXMub3B0aW9ucy5heGlzICYmICd5JyA9PSB0aGlzLm9wdGlvbnMuYXhpcykgfHxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaGVscGVyWzBdLnN0eWxlLmxlZnQgPSB0aGlzLnBvc2l0aW9uLmxlZnQgKyAncHgnKSxcbiAgICAgICAgICAgICAgICAodGhpcy5vcHRpb25zLmF4aXMgJiYgJ3gnID09IHRoaXMub3B0aW9ucy5heGlzKSB8fFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5oZWxwZXJbMF0uc3R5bGUudG9wID0gdGhpcy5wb3NpdGlvbi50b3AgKyAncHgnKSxcbiAgICAgICAgICAgICAgICBlLnVpLmRkbWFuYWdlciAmJiBlLnVpLmRkbWFuYWdlci5kcmFnKHRoaXMsIHQpLFxuICAgICAgICAgICAgICAgICExXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBfbW91c2VTdG9wOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgaSA9ICExO1xuICAgICAgICAgICAgZS51aS5kZG1hbmFnZXIgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy5vcHRpb25zLmRyb3BCZWhhdmlvdXIgJiZcbiAgICAgICAgICAgICAgICAoaSA9IGUudWkuZGRtYW5hZ2VyLmRyb3AodGhpcywgdCkpLFxuICAgICAgICAgICAgICAgIHRoaXMuZHJvcHBlZCAmJiAoKGkgPSB0aGlzLmRyb3BwZWQpLCAodGhpcy5kcm9wcGVkID0gITEpKTtcbiAgICAgICAgICAgIGZvciAodmFyIHMgPSB0aGlzLmVsZW1lbnRbMF0sIG4gPSAhMTsgcyAmJiAocyA9IHMucGFyZW50Tm9kZSk7IClcbiAgICAgICAgICAgICAgICBzID09IGRvY3VtZW50ICYmIChuID0gITApO1xuICAgICAgICAgICAgaWYgKCFuICYmICdvcmlnaW5hbCcgPT09IHRoaXMub3B0aW9ucy5oZWxwZXIpIHJldHVybiAhMTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoJ2ludmFsaWQnID09IHRoaXMub3B0aW9ucy5yZXZlcnQgJiYgIWkpIHx8XG4gICAgICAgICAgICAgICAgKCd2YWxpZCcgPT0gdGhpcy5vcHRpb25zLnJldmVydCAmJiBpKSB8fFxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5yZXZlcnQgPT09ICEwIHx8XG4gICAgICAgICAgICAgICAgKGUuaXNGdW5jdGlvbih0aGlzLm9wdGlvbnMucmV2ZXJ0KSAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucmV2ZXJ0LmNhbGwodGhpcy5lbGVtZW50LCBpKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcztcbiAgICAgICAgICAgICAgICBlKHRoaXMuaGVscGVyKS5hbmltYXRlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9yaWdpbmFsUG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHRoaXMub3B0aW9ucy5yZXZlcnREdXJhdGlvbiwgMTApLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuX3RyaWdnZXIoJ3N0b3AnLCB0KSAhPT0gITEgJiYgYS5fY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2UgdGhpcy5fdHJpZ2dlcignc3RvcCcsIHQpICE9PSAhMSAmJiB0aGlzLl9jbGVhcigpO1xuICAgICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICB9LFxuICAgICAgICBfbW91c2VVcDogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBlKCdkaXYudWktZHJhZ2dhYmxlLWlmcmFtZUZpeCcpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBlLnVpLmRkbWFuYWdlciAmJiBlLnVpLmRkbWFuYWdlci5kcmFnU3RvcCh0aGlzLCB0KSxcbiAgICAgICAgICAgICAgICBlLnVpLm1vdXNlLnByb3RvdHlwZS5fbW91c2VVcC5jYWxsKHRoaXMsIHQpXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICB0aGlzLmhlbHBlci5pcygnLnVpLWRyYWdnYWJsZS1kcmFnZ2luZycpXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5fbW91c2VVcCh7fSlcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9jbGVhcigpLFxuICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRIYW5kbGU6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciBpID1cbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuaGFuZGxlICYmXG4gICAgICAgICAgICAgICAgZSh0aGlzLm9wdGlvbnMuaGFuZGxlLCB0aGlzLmVsZW1lbnQpLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICA/ICExXG4gICAgICAgICAgICAgICAgICAgIDogITA7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIGUodGhpcy5vcHRpb25zLmhhbmRsZSwgdGhpcy5lbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnKicpXG4gICAgICAgICAgICAgICAgICAgIC5hbmRTZWxmKClcbiAgICAgICAgICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzID09IHQudGFyZ2V0ICYmIChpID0gITApO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBfY3JlYXRlSGVscGVyOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBzID0gZS5pc0Z1bmN0aW9uKGkuaGVscGVyKVxuICAgICAgICAgICAgICAgICAgICA/IGUoaS5oZWxwZXIuYXBwbHkodGhpcy5lbGVtZW50WzBdLCBbdF0pKVxuICAgICAgICAgICAgICAgICAgICA6ICdjbG9uZScgPT0gaS5oZWxwZXJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5lbGVtZW50LmNsb25lKCkucmVtb3ZlQXR0cignaWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmVsZW1lbnQ7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHMucGFyZW50cygnYm9keScpLmxlbmd0aCB8fFxuICAgICAgICAgICAgICAgICAgICBzLmFwcGVuZFRvKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3BhcmVudCcgPT0gaS5hcHBlbmRUb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5lbGVtZW50WzBdLnBhcmVudE5vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGkuYXBwZW5kVG9cbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBzWzBdID09IHRoaXMuZWxlbWVudFswXSB8fFxuICAgICAgICAgICAgICAgICAgICAvKGZpeGVkfGFic29sdXRlKS8udGVzdChzLmNzcygncG9zaXRpb24nKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgcy5jc3MoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyksXG4gICAgICAgICAgICAgICAgc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2FkanVzdE9mZnNldEZyb21IZWxwZXI6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICdzdHJpbmcnID09IHR5cGVvZiB0ICYmICh0ID0gdC5zcGxpdCgnICcpKSxcbiAgICAgICAgICAgICAgICBlLmlzQXJyYXkodCkgJiYgKHQgPSB7IGxlZnQ6ICt0WzBdLCB0b3A6ICt0WzFdIHx8IDAgfSksXG4gICAgICAgICAgICAgICAgJ2xlZnQnIGluIHQgJiZcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPSB0LmxlZnQgKyB0aGlzLm1hcmdpbnMubGVmdCksXG4gICAgICAgICAgICAgICAgJ3JpZ2h0JyBpbiB0ICYmXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLm9mZnNldC5jbGljay5sZWZ0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLVxuICAgICAgICAgICAgICAgICAgICAgICAgdC5yaWdodCArXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcmdpbnMubGVmdCksXG4gICAgICAgICAgICAgICAgJ3RvcCcgaW4gdCAmJlxuICAgICAgICAgICAgICAgICAgICAodGhpcy5vZmZzZXQuY2xpY2sudG9wID0gdC50b3AgKyB0aGlzLm1hcmdpbnMudG9wKSxcbiAgICAgICAgICAgICAgICAnYm90dG9tJyBpbiB0ICYmXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLm9mZnNldC5jbGljay50b3AgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgdC5ib3R0b20gK1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJnaW5zLnRvcCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRQYXJlbnRPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5vZmZzZXRQYXJlbnQgPSB0aGlzLmhlbHBlci5vZmZzZXRQYXJlbnQoKTtcbiAgICAgICAgICAgIHZhciB0ID0gdGhpcy5vZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICdhYnNvbHV0ZScgPT0gdGhpcy5jc3NQb3NpdGlvbiAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFBhcmVudFswXSAhPSBkb2N1bWVudCAmJlxuICAgICAgICAgICAgICAgICAgICBlLmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLCB0aGlzLm9mZnNldFBhcmVudFswXSkgJiZcbiAgICAgICAgICAgICAgICAgICAgKCh0LmxlZnQgKz0gdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpKSxcbiAgICAgICAgICAgICAgICAgICAgKHQudG9wICs9IHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpKSksXG4gICAgICAgICAgICAgICAgKHRoaXMub2Zmc2V0UGFyZW50WzBdID09IGRvY3VtZW50LmJvZHkgfHxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMub2Zmc2V0UGFyZW50WzBdLnRhZ05hbWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICdodG1sJyA9PSB0aGlzLm9mZnNldFBhcmVudFswXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGUudWkuaWUpKSAmJlxuICAgICAgICAgICAgICAgICAgICAodCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0pLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOlxuICAgICAgICAgICAgICAgICAgICAgICAgdC50b3AgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHBhcnNlSW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0UGFyZW50LmNzcygnYm9yZGVyVG9wV2lkdGgnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMFxuICAgICAgICAgICAgICAgICAgICAgICAgKSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHQubGVmdCArXG4gICAgICAgICAgICAgICAgICAgICAgICAocGFyc2VJbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXRQYXJlbnQuY3NzKCdib3JkZXJMZWZ0V2lkdGgnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMFxuICAgICAgICAgICAgICAgICAgICAgICAgKSB8fCAwKSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBfZ2V0UmVsYXRpdmVPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCdyZWxhdGl2ZScgPT0gdGhpcy5jc3NQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5lbGVtZW50LnBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOlxuICAgICAgICAgICAgICAgICAgICAgICAgZS50b3AgLVxuICAgICAgICAgICAgICAgICAgICAgICAgKHBhcnNlSW50KHRoaXMuaGVscGVyLmNzcygndG9wJyksIDEwKSB8fCAwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGUubGVmdCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAocGFyc2VJbnQodGhpcy5oZWxwZXIuY3NzKCdsZWZ0JyksIDEwKSB8fCAwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuICAgICAgICB9LFxuICAgICAgICBfY2FjaGVNYXJnaW5zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMubWFyZ2lucyA9IHtcbiAgICAgICAgICAgICAgICBsZWZ0OiBwYXJzZUludCh0aGlzLmVsZW1lbnQuY3NzKCdtYXJnaW5MZWZ0JyksIDEwKSB8fCAwLFxuICAgICAgICAgICAgICAgIHRvcDogcGFyc2VJbnQodGhpcy5lbGVtZW50LmNzcygnbWFyZ2luVG9wJyksIDEwKSB8fCAwLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiBwYXJzZUludCh0aGlzLmVsZW1lbnQuY3NzKCdtYXJnaW5SaWdodCcpLCAxMCkgfHwgMCxcbiAgICAgICAgICAgICAgICBib3R0b206IHBhcnNlSW50KHRoaXMuZWxlbWVudC5jc3MoJ21hcmdpbkJvdHRvbScpLCAxMCkgfHwgMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIF9jYWNoZUhlbHBlclByb3BvcnRpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuaGVscGVyLm91dGVyV2lkdGgoKSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuaGVscGVyLm91dGVySGVpZ2h0KCksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBfc2V0Q29udGFpbm1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHQgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKCdwYXJlbnQnID09IHQuY29udGFpbm1lbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgKHQuY29udGFpbm1lbnQgPSB0aGlzLmhlbHBlclswXS5wYXJlbnROb2RlKSxcbiAgICAgICAgICAgICAgICAoJ2RvY3VtZW50JyA9PSB0LmNvbnRhaW5tZW50IHx8ICd3aW5kb3cnID09IHQuY29udGFpbm1lbnQpICYmXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmNvbnRhaW5tZW50ID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2RvY3VtZW50JyA9PSB0LmNvbnRhaW5tZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBlKHdpbmRvdykuc2Nyb2xsTGVmdCgpIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQucGFyZW50LmxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZG9jdW1lbnQnID09IHQuY29udGFpbm1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUod2luZG93KS5zY3JvbGxUb3AoKSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldC5yZWxhdGl2ZS50b3AgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQucGFyZW50LnRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICgnZG9jdW1lbnQnID09IHQuY29udGFpbm1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUod2luZG93KS5zY3JvbGxMZWZ0KCkpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZG9jdW1lbnQnID09IHQuY29udGFpbm1lbnQgPyBkb2N1bWVudCA6IHdpbmRvd1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkud2lkdGgoKSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJnaW5zLmxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAoJ2RvY3VtZW50JyA9PSB0LmNvbnRhaW5tZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBlKHdpbmRvdykuc2Nyb2xsVG9wKCkpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RvY3VtZW50JyA9PSB0LmNvbnRhaW5tZW50ID8gZG9jdW1lbnQgOiB3aW5kb3dcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLmhlaWdodCgpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQpIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJnaW5zLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgL14oZG9jdW1lbnR8d2luZG93fHBhcmVudCkkLy50ZXN0KHQuY29udGFpbm1lbnQpIHx8XG4gICAgICAgICAgICAgICAgICAgIHQuY29udGFpbm1lbnQuY29uc3RydWN0b3IgPT0gQXJyYXkpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgdC5jb250YWlubWVudC5jb25zdHJ1Y3RvciA9PSBBcnJheSAmJlxuICAgICAgICAgICAgICAgICAgICAodGhpcy5jb250YWlubWVudCA9IHQuY29udGFpbm1lbnQpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBlKHQuY29udGFpbm1lbnQpLFxuICAgICAgICAgICAgICAgICAgICBzID0gaVswXTtcbiAgICAgICAgICAgICAgICBpZiAoIXMpIHJldHVybjtcbiAgICAgICAgICAgICAgICBpLm9mZnNldCgpO1xuICAgICAgICAgICAgICAgIHZhciBuID0gJ2hpZGRlbicgIT0gZShzKS5jc3MoJ292ZXJmbG93Jyk7XG4gICAgICAgICAgICAgICAgKHRoaXMuY29udGFpbm1lbnQgPSBbXG4gICAgICAgICAgICAgICAgICAgIChwYXJzZUludChlKHMpLmNzcygnYm9yZGVyTGVmdFdpZHRoJyksIDEwKSB8fCAwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAocGFyc2VJbnQoZShzKS5jc3MoJ3BhZGRpbmdMZWZ0JyksIDEwKSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgKHBhcnNlSW50KGUocykuY3NzKCdib3JkZXJUb3BXaWR0aCcpLCAxMCkgfHwgMCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHBhcnNlSW50KGUocykuY3NzKCdwYWRkaW5nVG9wJyksIDEwKSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgKG5cbiAgICAgICAgICAgICAgICAgICAgICAgID8gTWF0aC5tYXgocy5zY3JvbGxXaWR0aCwgcy5vZmZzZXRXaWR0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcy5vZmZzZXRXaWR0aCkgLVxuICAgICAgICAgICAgICAgICAgICAgICAgKHBhcnNlSW50KGUocykuY3NzKCdib3JkZXJMZWZ0V2lkdGgnKSwgMTApIHx8IDApIC1cbiAgICAgICAgICAgICAgICAgICAgICAgIChwYXJzZUludChlKHMpLmNzcygncGFkZGluZ1JpZ2h0JyksIDEwKSB8fCAwKSAtXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFyZ2lucy5sZWZ0IC1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFyZ2lucy5yaWdodCxcbiAgICAgICAgICAgICAgICAgICAgKG5cbiAgICAgICAgICAgICAgICAgICAgICAgID8gTWF0aC5tYXgocy5zY3JvbGxIZWlnaHQsIHMub2Zmc2V0SGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBzLm9mZnNldEhlaWdodCkgLVxuICAgICAgICAgICAgICAgICAgICAgICAgKHBhcnNlSW50KGUocykuY3NzKCdib3JkZXJUb3BXaWR0aCcpLCAxMCkgfHwgMCkgLVxuICAgICAgICAgICAgICAgICAgICAgICAgKHBhcnNlSW50KGUocykuY3NzKCdwYWRkaW5nQm90dG9tJyksIDEwKSB8fCAwKSAtXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAtXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcmdpbnMudG9wIC1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFyZ2lucy5ib3R0b20sXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnJlbGF0aXZlX2NvbnRhaW5lciA9IGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfY29udmVydFBvc2l0aW9uVG86IGZ1bmN0aW9uKHQsIGkpIHtcbiAgICAgICAgICAgIGkgfHwgKGkgPSB0aGlzLnBvc2l0aW9uKTtcbiAgICAgICAgICAgIHZhciBzID0gJ2Fic29sdXRlJyA9PSB0ID8gMSA6IC0xLFxuICAgICAgICAgICAgICAgIG4gPSAodGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgICdhYnNvbHV0ZScgIT0gdGhpcy5jc3NQb3NpdGlvbiB8fFxuICAgICAgICAgICAgICAgICh0aGlzLnNjcm9sbFBhcmVudFswXSAhPSBkb2N1bWVudCAmJlxuICAgICAgICAgICAgICAgICAgICBlLmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLCB0aGlzLm9mZnNldFBhcmVudFswXSkpXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5zY3JvbGxQYXJlbnRcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLm9mZnNldFBhcmVudCksXG4gICAgICAgICAgICAgICAgYSA9IC8oaHRtbHxib2R5KS9pLnRlc3QoblswXS50YWdOYW1lKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG9wOlxuICAgICAgICAgICAgICAgICAgICBpLnRvcCArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcCAqIHMgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldC5wYXJlbnQudG9wICogcyAtXG4gICAgICAgICAgICAgICAgICAgICgnZml4ZWQnID09IHRoaXMuY3NzUG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgID8gLXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG4uc2Nyb2xsVG9wKCkpICpcbiAgICAgICAgICAgICAgICAgICAgICAgIHMsXG4gICAgICAgICAgICAgICAgbGVmdDpcbiAgICAgICAgICAgICAgICAgICAgaS5sZWZ0ICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdCAqIHMgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldC5wYXJlbnQubGVmdCAqIHMgLVxuICAgICAgICAgICAgICAgICAgICAoJ2ZpeGVkJyA9PSB0aGlzLmNzc1Bvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICA/IC10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbi5zY3JvbGxMZWZ0KCkpICpcbiAgICAgICAgICAgICAgICAgICAgICAgIHMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBfZ2VuZXJhdGVQb3NpdGlvbjogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgcyA9XG4gICAgICAgICAgICAgICAgICAgICdhYnNvbHV0ZScgIT0gdGhpcy5jc3NQb3NpdGlvbiB8fFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5zY3JvbGxQYXJlbnRbMF0gIT0gZG9jdW1lbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuY29udGFpbnModGhpcy5zY3JvbGxQYXJlbnRbMF0sIHRoaXMub2Zmc2V0UGFyZW50WzBdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5zY3JvbGxQYXJlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5vZmZzZXRQYXJlbnQsXG4gICAgICAgICAgICAgICAgbiA9IC8oaHRtbHxib2R5KS9pLnRlc3Qoc1swXS50YWdOYW1lKSxcbiAgICAgICAgICAgICAgICBhID0gdC5wYWdlWCxcbiAgICAgICAgICAgICAgICBvID0gdC5wYWdlWTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9yaWdpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgcjtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250YWlubWVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWxhdGl2ZV9jb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoID0gdGhpcy5yZWxhdGl2ZV9jb250YWluZXIub2Zmc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbm1lbnRbMF0gKyBoLmxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWlubWVudFsxXSArIGgudG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbm1lbnRbMl0gKyBoLmxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWlubWVudFszXSArIGgudG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHIgPSB0aGlzLmNvbnRhaW5tZW50O1xuICAgICAgICAgICAgICAgICAgICB0LnBhZ2VYIC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA8IHJbMF0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChhID0gclswXSArIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5wYWdlWSAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA8IHJbMV0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobyA9IHJbMV0gKyB0aGlzLm9mZnNldC5jbGljay50b3ApLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5wYWdlWCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPiByWzJdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGEgPSByWzJdICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnBhZ2VZIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID4gclszXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvID0gclszXSArIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpLmdyaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBpLmdyaWRbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5vcmlnaW5hbFBhZ2VZICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgobyAtIHRoaXMub3JpZ2luYWxQYWdlWSkgLyBpLmdyaWRbMV0pICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuZ3JpZFsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLm9yaWdpbmFsUGFnZVk7XG4gICAgICAgICAgICAgICAgICAgIG8gPSByXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGwgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPCByWzFdIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGwgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPiByWzNdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBsIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wIDwgclsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGwgKyBpLmdyaWRbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsIC0gaS5ncmlkWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGw7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1ID0gaS5ncmlkWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMub3JpZ2luYWxQYWdlWCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQoKGEgLSB0aGlzLm9yaWdpbmFsUGFnZVgpIC8gaS5ncmlkWzBdKSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmdyaWRbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5vcmlnaW5hbFBhZ2VYO1xuICAgICAgICAgICAgICAgICAgICBhID0gclxuICAgICAgICAgICAgICAgICAgICAgICAgPyB1IC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA8IHJbMF0gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdSAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPiByWzJdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB1IC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA8IHJbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB1ICsgaS5ncmlkWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdSAtIGkuZ3JpZFswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB1O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG9wOlxuICAgICAgICAgICAgICAgICAgICBvIC1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQuY2xpY2sudG9wIC1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wIC1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQucGFyZW50LnRvcCArXG4gICAgICAgICAgICAgICAgICAgICgnZml4ZWQnID09IHRoaXMuY3NzUG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgID8gLXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHMuc2Nyb2xsVG9wKCkpLFxuICAgICAgICAgICAgICAgIGxlZnQ6XG4gICAgICAgICAgICAgICAgICAgIGEgLVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldC5jbGljay5sZWZ0IC1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdCAtXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0ICtcbiAgICAgICAgICAgICAgICAgICAgKCdmaXhlZCcgPT0gdGhpcy5jc3NQb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgPyAtdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHMuc2Nyb2xsTGVmdCgpKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIF9jbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmhlbHBlci5yZW1vdmVDbGFzcygndWktZHJhZ2dhYmxlLWRyYWdnaW5nJyksXG4gICAgICAgICAgICAgICAgdGhpcy5oZWxwZXJbMF0gPT0gdGhpcy5lbGVtZW50WzBdIHx8XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsSGVscGVyUmVtb3ZhbCB8fFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhlbHBlci5yZW1vdmUoKSxcbiAgICAgICAgICAgICAgICAodGhpcy5oZWxwZXIgPSBudWxsKSxcbiAgICAgICAgICAgICAgICAodGhpcy5jYW5jZWxIZWxwZXJSZW1vdmFsID0gITEpO1xuICAgICAgICB9LFxuICAgICAgICBfdHJpZ2dlcjogZnVuY3Rpb24odCwgaSwgcykge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAocyA9IHMgfHwgdGhpcy5fdWlIYXNoKCkpLFxuICAgICAgICAgICAgICAgIGUudWkucGx1Z2luLmNhbGwodGhpcywgdCwgW2ksIHNdKSxcbiAgICAgICAgICAgICAgICAnZHJhZycgPT0gdCAmJlxuICAgICAgICAgICAgICAgICAgICAodGhpcy5wb3NpdGlvbkFicyA9IHRoaXMuX2NvbnZlcnRQb3NpdGlvblRvKCdhYnNvbHV0ZScpKSxcbiAgICAgICAgICAgICAgICBlLldpZGdldC5wcm90b3R5cGUuX3RyaWdnZXIuY2FsbCh0aGlzLCB0LCBpLCBzKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgcGx1Z2luczoge30sXG4gICAgICAgIF91aUhhc2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBoZWxwZXI6IHRoaXMuaGVscGVyLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsUG9zaXRpb246IHRoaXMub3JpZ2luYWxQb3NpdGlvbixcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMucG9zaXRpb25BYnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0pLFxuICAgICAgICBlLnVpLnBsdWdpbi5hZGQoJ2RyYWdnYWJsZScsICdjb25uZWN0VG9Tb3J0YWJsZScsIHtcbiAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbih0LCBpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBlKHRoaXMpLmRhdGEoJ2RyYWdnYWJsZScpLFxuICAgICAgICAgICAgICAgICAgICBuID0gcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBhID0gZS5leHRlbmQoe30sIGksIHsgaXRlbTogcy5lbGVtZW50IH0pO1xuICAgICAgICAgICAgICAgIChzLnNvcnRhYmxlcyA9IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgZShuLmNvbm5lY3RUb1NvcnRhYmxlKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlLmRhdGEodGhpcywgJ3NvcnRhYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIWkub3B0aW9ucy5kaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzLnNvcnRhYmxlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2U6IGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFJldmVydDogaS5vcHRpb25zLnJldmVydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnJlZnJlc2hQb3NpdGlvbnMoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLl90cmlnZ2VyKCdhY3RpdmF0ZScsIHQsIGEpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24odCwgaSkge1xuICAgICAgICAgICAgICAgIHZhciBzID0gZSh0aGlzKS5kYXRhKCdkcmFnZ2FibGUnKSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGUuZXh0ZW5kKHt9LCBpLCB7IGl0ZW06IHMuZWxlbWVudCB9KTtcbiAgICAgICAgICAgICAgICBlLmVhY2gocy5zb3J0YWJsZXMsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLmlzT3ZlclxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKHRoaXMuaW5zdGFuY2UuaXNPdmVyID0gMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChzLmNhbmNlbEhlbHBlclJlbW92YWwgPSAhMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmluc3RhbmNlLmNhbmNlbEhlbHBlclJlbW92YWwgPSAhMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdWxkUmV2ZXJ0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5pbnN0YW5jZS5vcHRpb25zLnJldmVydCA9ICEwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5fbW91c2VTdG9wKHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5pbnN0YW5jZS5vcHRpb25zLmhlbHBlciA9IHRoaXMuaW5zdGFuY2Uub3B0aW9ucy5faGVscGVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ29yaWdpbmFsJyA9PSBzLm9wdGlvbnMuaGVscGVyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLmN1cnJlbnRJdGVtLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICgodGhpcy5pbnN0YW5jZS5jYW5jZWxIZWxwZXJSZW1vdmFsID0gITEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLl90cmlnZ2VyKCdkZWFjdGl2YXRlJywgdCwgbikpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRyYWc6IGZ1bmN0aW9uKHQsIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IGUodGhpcykuZGF0YSgnZHJhZ2dhYmxlJyksXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0aGlzO1xuICAgICAgICAgICAgICAgIGUuZWFjaChzLnNvcnRhYmxlcywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gITEsXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaW5zdGFuY2UucG9zaXRpb25BYnMgPSBzLnBvc2l0aW9uQWJzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmluc3RhbmNlLmhlbHBlclByb3BvcnRpb25zID0gcy5oZWxwZXJQcm9wb3J0aW9ucyksXG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5pbnN0YW5jZS5vZmZzZXQuY2xpY2sgPSBzLm9mZnNldC5jbGljayksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLl9pbnRlcnNlY3RzV2l0aChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLmNvbnRhaW5lckNhY2hlXG4gICAgICAgICAgICAgICAgICAgICAgICApICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChhID0gITApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuZWFjaChzLnNvcnRhYmxlcywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5pbnN0YW5jZS5wb3NpdGlvbkFicyA9IHMucG9zaXRpb25BYnMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaW5zdGFuY2UuaGVscGVyUHJvcG9ydGlvbnMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuaGVscGVyUHJvcG9ydGlvbnMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaW5zdGFuY2Uub2Zmc2V0LmNsaWNrID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLm9mZnNldC5jbGljayksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzICE9IG8gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLl9pbnRlcnNlY3RzV2l0aChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5jb250YWluZXJDYWNoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnVpLmNvbnRhaW5zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLmluc3RhbmNlLmVsZW1lbnRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UuZWxlbWVudFswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYSA9ICExKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICBhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAodGhpcy5pbnN0YW5jZS5pc092ZXIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKHRoaXMuaW5zdGFuY2UuaXNPdmVyID0gMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaW5zdGFuY2UuY3VycmVudEl0ZW0gPSBlKG4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jbG9uZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdpZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbyh0aGlzLmluc3RhbmNlLmVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kYXRhKCdzb3J0YWJsZS1pdGVtJywgITApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5pbnN0YW5jZS5vcHRpb25zLl9oZWxwZXIgPSB0aGlzLmluc3RhbmNlLm9wdGlvbnMuaGVscGVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5pbnN0YW5jZS5vcHRpb25zLmhlbHBlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaS5oZWxwZXJbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHQudGFyZ2V0ID0gdGhpcy5pbnN0YW5jZS5jdXJyZW50SXRlbVswXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5fbW91c2VDYXB0dXJlKHQsICEwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLl9tb3VzZVN0YXJ0KHQsICEwLCAhMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaW5zdGFuY2Uub2Zmc2V0LmNsaWNrLnRvcCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMub2Zmc2V0LmNsaWNrLnRvcCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaW5zdGFuY2Uub2Zmc2V0LmNsaWNrLmxlZnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLm9mZnNldC5jbGljay5sZWZ0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5pbnN0YW5jZS5vZmZzZXQucGFyZW50LmxlZnQgLT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5vZmZzZXQucGFyZW50LmxlZnQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLm9mZnNldC5wYXJlbnQubGVmdCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaW5zdGFuY2Uub2Zmc2V0LnBhcmVudC50b3AgLT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5vZmZzZXQucGFyZW50LnRvcCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2Uub2Zmc2V0LnBhcmVudC50b3ApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuX3RyaWdnZXIoJ3RvU29ydGFibGUnLCB0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocy5kcm9wcGVkID0gdGhpcy5pbnN0YW5jZS5lbGVtZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocy5jdXJyZW50SXRlbSA9IHMuZWxlbWVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaW5zdGFuY2UuZnJvbU91dHNpZGUgPSBzKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLmN1cnJlbnRJdGVtICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5fbW91c2VEcmFnKHQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5pbnN0YW5jZS5pc092ZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgodGhpcy5pbnN0YW5jZS5pc092ZXIgPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmluc3RhbmNlLmNhbmNlbEhlbHBlclJlbW92YWwgPSAhMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5pbnN0YW5jZS5vcHRpb25zLnJldmVydCA9ICExKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UuX3RyaWdnZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ291dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLl91aUhhc2godGhpcy5pbnN0YW5jZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLl9tb3VzZVN0b3AodCwgITApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaW5zdGFuY2Uub3B0aW9ucy5oZWxwZXIgPSB0aGlzLmluc3RhbmNlLm9wdGlvbnMuX2hlbHBlciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLmN1cnJlbnRJdGVtLnJlbW92ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5wbGFjZWhvbGRlciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UucGxhY2Vob2xkZXIucmVtb3ZlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLl90cmlnZ2VyKCdmcm9tU29ydGFibGUnLCB0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzLmRyb3BwZWQgPSAhMSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICAgIGUudWkucGx1Z2luLmFkZCgnZHJhZ2dhYmxlJywgJ2N1cnNvcicsIHtcbiAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IGUoJ2JvZHknKSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGUodGhpcykuZGF0YSgnZHJhZ2dhYmxlJykub3B0aW9ucztcbiAgICAgICAgICAgICAgICB0LmNzcygnY3Vyc29yJykgJiYgKGkuX2N1cnNvciA9IHQuY3NzKCdjdXJzb3InKSksXG4gICAgICAgICAgICAgICAgICAgIHQuY3NzKCdjdXJzb3InLCBpLmN1cnNvcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBlKHRoaXMpLmRhdGEoJ2RyYWdnYWJsZScpLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgdC5fY3Vyc29yICYmIGUoJ2JvZHknKS5jc3MoJ2N1cnNvcicsIHQuX2N1cnNvcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgZS51aS5wbHVnaW4uYWRkKCdkcmFnZ2FibGUnLCAnb3BhY2l0eScsIHtcbiAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbih0LCBpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBlKGkuaGVscGVyKSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGUodGhpcykuZGF0YSgnZHJhZ2dhYmxlJykub3B0aW9ucztcbiAgICAgICAgICAgICAgICBzLmNzcygnb3BhY2l0eScpICYmIChuLl9vcGFjaXR5ID0gcy5jc3MoJ29wYWNpdHknKSksXG4gICAgICAgICAgICAgICAgICAgIHMuY3NzKCdvcGFjaXR5Jywgbi5vcGFjaXR5KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdG9wOiBmdW5jdGlvbih0LCBpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBlKHRoaXMpLmRhdGEoJ2RyYWdnYWJsZScpLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgcy5fb3BhY2l0eSAmJiBlKGkuaGVscGVyKS5jc3MoJ29wYWNpdHknLCBzLl9vcGFjaXR5KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICBlLnVpLnBsdWdpbi5hZGQoJ2RyYWdnYWJsZScsICdzY3JvbGwnLCB7XG4gICAgICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBlKHRoaXMpLmRhdGEoJ2RyYWdnYWJsZScpO1xuICAgICAgICAgICAgICAgIHQuc2Nyb2xsUGFyZW50WzBdICE9IGRvY3VtZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICdIVE1MJyAhPSB0LnNjcm9sbFBhcmVudFswXS50YWdOYW1lICYmXG4gICAgICAgICAgICAgICAgICAgICh0Lm92ZXJmbG93T2Zmc2V0ID0gdC5zY3JvbGxQYXJlbnQub2Zmc2V0KCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRyYWc6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IGUodGhpcykuZGF0YSgnZHJhZ2dhYmxlJyksXG4gICAgICAgICAgICAgICAgICAgIHMgPSBpLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIG4gPSAhMTtcbiAgICAgICAgICAgICAgICBpLnNjcm9sbFBhcmVudFswXSAhPSBkb2N1bWVudCAmJlxuICAgICAgICAgICAgICAgICdIVE1MJyAhPSBpLnNjcm9sbFBhcmVudFswXS50YWdOYW1lXG4gICAgICAgICAgICAgICAgICAgID8gKChzLmF4aXMgJiYgJ3gnID09IHMuYXhpcykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGkub3ZlcmZsb3dPZmZzZXQudG9wICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2Nyb2xsUGFyZW50WzBdLm9mZnNldEhlaWdodCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnBhZ2VZIDxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zY3JvbGxTZW5zaXRpdml0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoaS5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wID0gbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3AgKyBzLnNjcm9sbFNwZWVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0LnBhZ2VZIC0gaS5vdmVyZmxvd09mZnNldC50b3AgPFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zY3JvbGxTZW5zaXRpdml0eSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wID0gbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3AgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zY3JvbGxTcGVlZCkpLFxuICAgICAgICAgICAgICAgICAgICAgIChzLmF4aXMgJiYgJ3knID09IHMuYXhpcykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGkub3ZlcmZsb3dPZmZzZXQubGVmdCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNjcm9sbFBhcmVudFswXS5vZmZzZXRXaWR0aCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnBhZ2VYIDxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zY3JvbGxTZW5zaXRpdml0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoaS5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdCA9IG4gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnNjcm9sbFNwZWVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0LnBhZ2VYIC0gaS5vdmVyZmxvd09mZnNldC5sZWZ0IDxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuc2Nyb2xsU2Vuc2l0aXZpdHkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQgPSBuID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zY3JvbGxTcGVlZCkpKVxuICAgICAgICAgICAgICAgICAgICA6ICgocy5heGlzICYmICd4JyA9PSBzLmF4aXMpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICh0LnBhZ2VZIC0gZShkb2N1bWVudCkuc2Nyb2xsVG9wKCkgPFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzLnNjcm9sbFNlbnNpdGl2aXR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChuID0gZShkb2N1bWVudCkuc2Nyb2xsVG9wKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZShkb2N1bWVudCkuc2Nyb2xsVG9wKCkgLSBzLnNjcm9sbFNwZWVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUod2luZG93KS5oZWlnaHQoKSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodC5wYWdlWSAtIGUoZG9jdW1lbnQpLnNjcm9sbFRvcCgpKSA8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnNjcm9sbFNlbnNpdGl2aXR5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChuID0gZShkb2N1bWVudCkuc2Nyb2xsVG9wKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZShkb2N1bWVudCkuc2Nyb2xsVG9wKCkgKyBzLnNjcm9sbFNwZWVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAocy5heGlzICYmICd5JyA9PSBzLmF4aXMpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICh0LnBhZ2VYIC0gZShkb2N1bWVudCkuc2Nyb2xsTGVmdCgpIDxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zY3JvbGxTZW5zaXRpdml0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAobiA9IGUoZG9jdW1lbnQpLnNjcm9sbExlZnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkgLSBzLnNjcm9sbFNwZWVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUod2luZG93KS53aWR0aCgpIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0LnBhZ2VYIC0gZShkb2N1bWVudCkuc2Nyb2xsTGVmdCgpKSA8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnNjcm9sbFNlbnNpdGl2aXR5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChuID0gZShkb2N1bWVudCkuc2Nyb2xsTGVmdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUoZG9jdW1lbnQpLnNjcm9sbExlZnQoKSArIHMuc2Nyb2xsU3BlZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSkpKSxcbiAgICAgICAgICAgICAgICAgICAgbiAhPT0gITEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGUudWkuZGRtYW5hZ2VyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhcy5kcm9wQmVoYXZpb3VyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyhpLCB0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICBlLnVpLnBsdWdpbi5hZGQoJ2RyYWdnYWJsZScsICdzbmFwJywge1xuICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gZSh0aGlzKS5kYXRhKCdkcmFnZ2FibGUnKSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IHQub3B0aW9ucztcbiAgICAgICAgICAgICAgICAodC5zbmFwRWxlbWVudHMgPSBbXSksXG4gICAgICAgICAgICAgICAgICAgIGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNuYXAuY29uc3RydWN0b3IgIT0gU3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpLnNuYXAuaXRlbXMgfHwgJzpkYXRhKGRyYWdnYWJsZSknXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpLnNuYXBcbiAgICAgICAgICAgICAgICAgICAgKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBpLm9mZnNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyAhPSB0LmVsZW1lbnRbMF0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNuYXBFbGVtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbTogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGkub3V0ZXJXaWR0aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGkub3V0ZXJIZWlnaHQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBzLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogcy5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkcmFnOiBmdW5jdGlvbih0LCBpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBlKHRoaXMpLmRhdGEoJ2RyYWdnYWJsZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBuLnNuYXBUb2xlcmFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gaS5vZmZzZXQubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBvICsgcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGggPSBpLm9mZnNldC50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICBsID0gaCArIHMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdSA9IHMuc25hcEVsZW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIHUgPj0gMDtcbiAgICAgICAgICAgICAgICAgICAgdS0tXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkID0gcy5zbmFwRWxlbWVudHNbdV0ubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBkICsgcy5zbmFwRWxlbWVudHNbdV0ud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBwID0gcy5zbmFwRWxlbWVudHNbdV0udG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgZiA9IHAgKyBzLnNuYXBFbGVtZW50c1t1XS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIChvID4gZCAtIGEgJiYgYyArIGEgPiBvICYmIGggPiBwIC0gYSAmJiBmICsgYSA+IGgpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAobyA+IGQgLSBhICYmIGMgKyBhID4gbyAmJiBsID4gcCAtIGEgJiYgZiArIGEgPiBsKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHIgPiBkIC0gYSAmJiBjICsgYSA+IHIgJiYgaCA+IHAgLSBhICYmIGYgKyBhID4gaCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChyID4gZCAtIGEgJiYgYyArIGEgPiByICYmIGwgPiBwIC0gYSAmJiBmICsgYSA+IGwpXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCdpbm5lcicgIT0gbi5zbmFwTW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtID0gYSA+PSBNYXRoLmFicyhwIC0gbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcgPSBhID49IE1hdGguYWJzKGYgLSBoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdiA9IGEgPj0gTWF0aC5hYnMoZCAtIHIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfID0gYSA+PSBNYXRoLmFicyhjIC0gbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5wb3NpdGlvbi50b3AgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5fY29udmVydFBvc2l0aW9uVG8oJ3JlbGF0aXZlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogcCAtIHMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50b3AgLSBzLm1hcmdpbnMudG9wKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkucG9zaXRpb24udG9wID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLl9jb252ZXJ0UG9zaXRpb25UbygncmVsYXRpdmUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50b3AgLSBzLm1hcmdpbnMudG9wKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkucG9zaXRpb24ubGVmdCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5fY29udmVydFBvc2l0aW9uVG8oJ3JlbGF0aXZlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGQgLSBzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmxlZnQgLSBzLm1hcmdpbnMubGVmdCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpLnBvc2l0aW9uLmxlZnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuX2NvbnZlcnRQb3NpdGlvblRvKCdyZWxhdGl2ZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmxlZnQgLSBzLm1hcmdpbnMubGVmdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IG0gfHwgZyB8fCB2IHx8IF87XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJ291dGVyJyAhPSBuLnNuYXBNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBhID49IE1hdGguYWJzKHAgLSBoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZyA9IGEgPj0gTWF0aC5hYnMoZiAtIGwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gYSA+PSBNYXRoLmFicyhkIC0gbyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gPSBhID49IE1hdGguYWJzKGMgLSByKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpLnBvc2l0aW9uLnRvcCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLl9jb252ZXJ0UG9zaXRpb25UbygncmVsYXRpdmUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50b3AgLSBzLm1hcmdpbnMudG9wKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkucG9zaXRpb24udG9wID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLl9jb252ZXJ0UG9zaXRpb25UbygncmVsYXRpdmUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogZiAtIHMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRvcCAtIHMubWFyZ2lucy50b3ApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5wb3NpdGlvbi5sZWZ0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLl9jb252ZXJ0UG9zaXRpb25UbygncmVsYXRpdmUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5sZWZ0IC0gcy5tYXJnaW5zLmxlZnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5wb3NpdGlvbi5sZWZ0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLl9jb252ZXJ0UG9zaXRpb25UbygncmVsYXRpdmUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogYyAtIHMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkubGVmdCAtIHMubWFyZ2lucy5sZWZ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICFzLnNuYXBFbGVtZW50c1t1XS5zbmFwcGluZyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtIHx8IGcgfHwgdiB8fCBfIHx8IGIpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5vcHRpb25zLnNuYXAuc25hcCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMub3B0aW9ucy5zbmFwLnNuYXAuY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5lbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmV4dGVuZChzLl91aUhhc2goKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc25hcEl0ZW06IHMuc25hcEVsZW1lbnRzW3VdLml0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocy5zbmFwRWxlbWVudHNbdV0uc25hcHBpbmcgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtIHx8IGcgfHwgdiB8fCBfIHx8IGIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuc25hcEVsZW1lbnRzW3VdLnNuYXBwaW5nICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5vcHRpb25zLnNuYXAucmVsZWFzZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMub3B0aW9ucy5zbmFwLnJlbGVhc2UuY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5lbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmV4dGVuZChzLl91aUhhc2goKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc25hcEl0ZW06IHMuc25hcEVsZW1lbnRzW3VdLml0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocy5zbmFwRWxlbWVudHNbdV0uc25hcHBpbmcgPSAhMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICAgIGUudWkucGx1Z2luLmFkZCgnZHJhZ2dhYmxlJywgJ3N0YWNrJywge1xuICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gZSh0aGlzKS5kYXRhKCdkcmFnZ2FibGUnKS5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBpID0gZS5tYWtlQXJyYXkoZSh0LnN0YWNrKSkuc29ydChmdW5jdGlvbih0LCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwYXJzZUludChlKHQpLmNzcygnekluZGV4JyksIDEwKSB8fCAwKSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBhcnNlSW50KGUoaSkuY3NzKCd6SW5kZXgnKSwgMTApIHx8IDApXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoaS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBwYXJzZUludChpWzBdLnN0eWxlLnpJbmRleCkgfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgZShpKS5lYWNoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUuekluZGV4ID0gcyArIGU7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXNbMF0uc3R5bGUuekluZGV4ID0gcyArIGkubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgZS51aS5wbHVnaW4uYWRkKCdkcmFnZ2FibGUnLCAnekluZGV4Jywge1xuICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKHQsIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IGUoaS5oZWxwZXIpLFxuICAgICAgICAgICAgICAgICAgICBuID0gZSh0aGlzKS5kYXRhKCdkcmFnZ2FibGUnKS5vcHRpb25zO1xuICAgICAgICAgICAgICAgIHMuY3NzKCd6SW5kZXgnKSAmJiAobi5fekluZGV4ID0gcy5jc3MoJ3pJbmRleCcpKSxcbiAgICAgICAgICAgICAgICAgICAgcy5jc3MoJ3pJbmRleCcsIG4uekluZGV4KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdG9wOiBmdW5jdGlvbih0LCBpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBlKHRoaXMpLmRhdGEoJ2RyYWdnYWJsZScpLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgcy5fekluZGV4ICYmIGUoaS5oZWxwZXIpLmNzcygnekluZGV4Jywgcy5fekluZGV4KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xufSkoalF1ZXJ5KTtcbihmdW5jdGlvbihlKSB7XG4gICAgZS53aWRnZXQoJ3VpLnJlc2l6YWJsZScsIGUudWkubW91c2UsIHtcbiAgICAgICAgdmVyc2lvbjogJzEuOS4yJyxcbiAgICAgICAgd2lkZ2V0RXZlbnRQcmVmaXg6ICdyZXNpemUnLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBhbHNvUmVzaXplOiAhMSxcbiAgICAgICAgICAgIGFuaW1hdGU6ICExLFxuICAgICAgICAgICAgYW5pbWF0ZUR1cmF0aW9uOiAnc2xvdycsXG4gICAgICAgICAgICBhbmltYXRlRWFzaW5nOiAnc3dpbmcnLFxuICAgICAgICAgICAgYXNwZWN0UmF0aW86ICExLFxuICAgICAgICAgICAgYXV0b0hpZGU6ICExLFxuICAgICAgICAgICAgY29udGFpbm1lbnQ6ICExLFxuICAgICAgICAgICAgZ2hvc3Q6ICExLFxuICAgICAgICAgICAgZ3JpZDogITEsXG4gICAgICAgICAgICBoYW5kbGVzOiAnZSxzLHNlJyxcbiAgICAgICAgICAgIGhlbHBlcjogITEsXG4gICAgICAgICAgICBtYXhIZWlnaHQ6IG51bGwsXG4gICAgICAgICAgICBtYXhXaWR0aDogbnVsbCxcbiAgICAgICAgICAgIG1pbkhlaWdodDogMTAsXG4gICAgICAgICAgICBtaW5XaWR0aDogMTAsXG4gICAgICAgICAgICB6SW5kZXg6IDFlMyxcbiAgICAgICAgfSxcbiAgICAgICAgX2NyZWF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgaSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAodGhpcy5lbGVtZW50LmFkZENsYXNzKCd1aS1yZXNpemFibGUnKSxcbiAgICAgICAgICAgICAgICBlLmV4dGVuZCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgIF9hc3BlY3RSYXRpbzogISFpLmFzcGVjdFJhdGlvLFxuICAgICAgICAgICAgICAgICAgICBhc3BlY3RSYXRpbzogaS5hc3BlY3RSYXRpbyxcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIF9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgX2hlbHBlcjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuaGVscGVyIHx8IGkuZ2hvc3QgfHwgaS5hbmltYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpLmhlbHBlciB8fCAndWktcmVzaXphYmxlLWhlbHBlcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGwsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50WzBdLm5vZGVOYW1lLm1hdGNoKFxuICAgICAgICAgICAgICAgICAgICAvY2FudmFzfHRleHRhcmVhfGlucHV0fHNlbGVjdHxidXR0b258aW1nL2lcbiAgICAgICAgICAgICAgICApICYmXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmVsZW1lbnQud3JhcChcbiAgICAgICAgICAgICAgICAgICAgICAgIGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ1aS13cmFwcGVyXCIgc3R5bGU9XCJvdmVyZmxvdzogaGlkZGVuO1wiPjwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgICAgICkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogdGhpcy5lbGVtZW50LmNzcygncG9zaXRpb24nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5lbGVtZW50Lm91dGVyV2lkdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogdGhpcy5lbGVtZW50LmNzcygndG9wJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogdGhpcy5lbGVtZW50LmNzcygnbGVmdCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuZWxlbWVudCA9IHRoaXMuZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZGF0YSgncmVzaXphYmxlJywgdGhpcy5lbGVtZW50LmRhdGEoJ3Jlc2l6YWJsZScpKSksXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmVsZW1lbnRJc1dyYXBwZXIgPSAhMCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCdtYXJnaW5MZWZ0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcygnbWFyZ2luVG9wJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCdtYXJnaW5SaWdodCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoJ21hcmdpbkJvdHRvbScpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMCxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLm9yaWdpbmFsUmVzaXplU3R5bGUgPSB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAncmVzaXplJ1xuICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCdyZXNpemUnLCAnbm9uZScpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnc3RhdGljJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b29tOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoJ21hcmdpbicpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemUoKSksXG4gICAgICAgICAgICAgICAgKHRoaXMuaGFuZGxlcyA9XG4gICAgICAgICAgICAgICAgICAgIGkuaGFuZGxlcyB8fFxuICAgICAgICAgICAgICAgICAgICAoZSgnLnVpLXJlc2l6YWJsZS1oYW5kbGUnLCB0aGlzLmVsZW1lbnQpLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuOiAnLnVpLXJlc2l6YWJsZS1uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGU6ICcudWktcmVzaXphYmxlLWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczogJy51aS1yZXNpemFibGUtcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3OiAnLnVpLXJlc2l6YWJsZS13JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlOiAnLnVpLXJlc2l6YWJsZS1zZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdzogJy51aS1yZXNpemFibGUtc3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmU6ICcudWktcmVzaXphYmxlLW5lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG53OiAnLnVpLXJlc2l6YWJsZS1udycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogJ2UscyxzZScpKSxcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZXMuY29uc3RydWN0b3IgPT0gU3RyaW5nKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgJ2FsbCcgPT0gdGhpcy5oYW5kbGVzICYmICh0aGlzLmhhbmRsZXMgPSAnbixlLHMsdyxzZSxzdyxuZSxudycpO1xuICAgICAgICAgICAgICAgIHZhciBzID0gdGhpcy5oYW5kbGVzLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVzID0ge307XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDA7IHMubGVuZ3RoID4gbjsgbisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gZS50cmltKHNbbl0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9ICd1aS1yZXNpemFibGUtJyArIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInVpLXJlc2l6YWJsZS1oYW5kbGUgJyArIG8gKyAnXCI+PC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgci5jc3MoeyB6SW5kZXg6IGkuekluZGV4IH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3NlJyA9PSBhICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgci5hZGRDbGFzcygndWktaWNvbiB1aS1pY29uLWdyaXBzbWFsbC1kaWFnb25hbC1zZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaGFuZGxlc1thXSA9ICcudWktcmVzaXphYmxlLScgKyBhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmQocik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKHRoaXMuX3JlbmRlckF4aXMgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdCA9IHQgfHwgdGhpcy5lbGVtZW50O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5oYW5kbGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmhhbmRsZXNbaV0uY29uc3RydWN0b3IgPT0gU3RyaW5nICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaGFuZGxlc1tpXSA9IGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlc1tpXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5zaG93KCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50SXNXcmFwcGVyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmlnaW5hbEVsZW1lbnRbMF0ubm9kZU5hbWUubWF0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC90ZXh0YXJlYXxpbnB1dHxzZWxlY3R8YnV0dG9uL2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gZSh0aGlzLmhhbmRsZXNbaV0sIHRoaXMuZWxlbWVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gL3N3fG5lfG53fHNlfG58cy8udGVzdChpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcy5vdXRlckhlaWdodCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBzLm91dGVyV2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwYWRkaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvbmV8bnd8bi8udGVzdChpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdUb3AnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogL3NlfHN3fHMvLnRlc3QoaSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ0JvdHRvbSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogL15lJC8udGVzdChpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ1JpZ2h0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ0xlZnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuY3NzKGEsIG4pLCB0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGUodGhpcy5oYW5kbGVzW2ldKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyQXhpcyh0aGlzLmVsZW1lbnQpLFxuICAgICAgICAgICAgICAgICh0aGlzLl9oYW5kbGVzID0gZShcbiAgICAgICAgICAgICAgICAgICAgJy51aS1yZXNpemFibGUtaGFuZGxlJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50XG4gICAgICAgICAgICAgICAgKS5kaXNhYmxlU2VsZWN0aW9uKCkpLFxuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZXMubW91c2VvdmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXQucmVzaXppbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNsYXNzTmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuY2xhc3NOYW1lLm1hdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvdWktcmVzaXphYmxlLShzZXxzd3xuZXxud3xufGV8c3x3KS9pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuYXhpcyA9IGUgJiYgZVsxXSA/IGVbMV0gOiAnc2UnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgaS5hdXRvSGlkZSAmJlxuICAgICAgICAgICAgICAgICAgICAodGhpcy5faGFuZGxlcy5oaWRlKCksXG4gICAgICAgICAgICAgICAgICAgIGUodGhpcy5lbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCd1aS1yZXNpemFibGUtYXV0b2hpZGUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1vdXNlZW50ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5kaXNhYmxlZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZSh0aGlzKS5yZW1vdmVDbGFzcygndWktcmVzaXphYmxlLWF1dG9oaWRlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuX2hhbmRsZXMuc2hvdygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAubW91c2VsZWF2ZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmRpc2FibGVkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQucmVzaXppbmcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUodGhpcykuYWRkQ2xhc3MoJ3VpLXJlc2l6YWJsZS1hdXRvaGlkZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Ll9oYW5kbGVzLmhpZGUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgdGhpcy5fbW91c2VJbml0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9kZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuX21vdXNlRGVzdHJveSgpO1xuICAgICAgICAgICAgdmFyIHQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgZSh0KVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAndWktcmVzaXphYmxlIHVpLXJlc2l6YWJsZS1kaXNhYmxlZCB1aS1yZXNpemFibGUtcmVzaXppbmcnXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZURhdGEoJ3Jlc2l6YWJsZScpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVEYXRhKCd1aS1yZXNpemFibGUnKVxuICAgICAgICAgICAgICAgICAgICAudW5iaW5kKCcucmVzaXphYmxlJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy51aS1yZXNpemFibGUtaGFuZGxlJylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRJc1dyYXBwZXIpIHtcbiAgICAgICAgICAgICAgICB0KHRoaXMuZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5vcmlnaW5hbEVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogaS5jc3MoJ3Bvc2l0aW9uJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogaS5vdXRlcldpZHRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGkub3V0ZXJIZWlnaHQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogaS5jc3MoJ3RvcCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogaS5jc3MoJ2xlZnQnKSxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmluc2VydEFmdGVyKGkpLFxuICAgICAgICAgICAgICAgICAgICBpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoJ3Jlc2l6ZScsIHRoaXMub3JpZ2luYWxSZXNpemVTdHlsZSksXG4gICAgICAgICAgICAgICAgdCh0aGlzLm9yaWdpbmFsRWxlbWVudCksXG4gICAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgX21vdXNlQ2FwdHVyZTogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIGkgPSAhMTtcbiAgICAgICAgICAgIGZvciAodmFyIHMgaW4gdGhpcy5oYW5kbGVzKVxuICAgICAgICAgICAgICAgIGUodGhpcy5oYW5kbGVzW3NdKVswXSA9PSB0LnRhcmdldCAmJiAoaSA9ICEwKTtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5vcHRpb25zLmRpc2FibGVkICYmIGk7XG4gICAgICAgIH0sXG4gICAgICAgIF9tb3VzZVN0YXJ0OiBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICB2YXIgcyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBuID0gdGhpcy5lbGVtZW50LnBvc2l0aW9uKCksXG4gICAgICAgICAgICAgICAgYSA9IHRoaXMuZWxlbWVudDtcbiAgICAgICAgICAgICh0aGlzLnJlc2l6aW5nID0gITApLFxuICAgICAgICAgICAgICAgICh0aGlzLmRvY3VtZW50U2Nyb2xsID0ge1xuICAgICAgICAgICAgICAgICAgICB0b3A6IGUoZG9jdW1lbnQpLnNjcm9sbFRvcCgpLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBlKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgKGEuaXMoJy51aS1kcmFnZ2FibGUnKSB8fCAvYWJzb2x1dGUvLnRlc3QoYS5jc3MoJ3Bvc2l0aW9uJykpKSAmJlxuICAgICAgICAgICAgICAgICAgICBhLmNzcyh7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCB0b3A6IG4udG9wLCBsZWZ0OiBuLmxlZnQgfSksXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyUHJveHkoKTtcbiAgICAgICAgICAgIHZhciBvID0gdCh0aGlzLmhlbHBlci5jc3MoJ2xlZnQnKSksXG4gICAgICAgICAgICAgICAgciA9IHQodGhpcy5oZWxwZXIuY3NzKCd0b3AnKSk7XG4gICAgICAgICAgICBzLmNvbnRhaW5tZW50ICYmXG4gICAgICAgICAgICAgICAgKChvICs9IGUocy5jb250YWlubWVudCkuc2Nyb2xsTGVmdCgpIHx8IDApLFxuICAgICAgICAgICAgICAgIChyICs9IGUocy5jb250YWlubWVudCkuc2Nyb2xsVG9wKCkgfHwgMCkpLFxuICAgICAgICAgICAgICAgICh0aGlzLm9mZnNldCA9IHRoaXMuaGVscGVyLm9mZnNldCgpKSxcbiAgICAgICAgICAgICAgICAodGhpcy5wb3NpdGlvbiA9IHsgbGVmdDogbywgdG9wOiByIH0pLFxuICAgICAgICAgICAgICAgICh0aGlzLnNpemUgPSB0aGlzLl9oZWxwZXJcbiAgICAgICAgICAgICAgICAgICAgPyB7IHdpZHRoOiBhLm91dGVyV2lkdGgoKSwgaGVpZ2h0OiBhLm91dGVySGVpZ2h0KCkgfVxuICAgICAgICAgICAgICAgICAgICA6IHsgd2lkdGg6IGEud2lkdGgoKSwgaGVpZ2h0OiBhLmhlaWdodCgpIH0pLFxuICAgICAgICAgICAgICAgICh0aGlzLm9yaWdpbmFsU2l6ZSA9IHRoaXMuX2hlbHBlclxuICAgICAgICAgICAgICAgICAgICA/IHsgd2lkdGg6IGEub3V0ZXJXaWR0aCgpLCBoZWlnaHQ6IGEub3V0ZXJIZWlnaHQoKSB9XG4gICAgICAgICAgICAgICAgICAgIDogeyB3aWR0aDogYS53aWR0aCgpLCBoZWlnaHQ6IGEuaGVpZ2h0KCkgfSksXG4gICAgICAgICAgICAgICAgKHRoaXMub3JpZ2luYWxQb3NpdGlvbiA9IHsgbGVmdDogbywgdG9wOiByIH0pLFxuICAgICAgICAgICAgICAgICh0aGlzLnNpemVEaWZmID0ge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogYS5vdXRlcldpZHRoKCkgLSBhLndpZHRoKCksXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogYS5vdXRlckhlaWdodCgpIC0gYS5oZWlnaHQoKSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAodGhpcy5vcmlnaW5hbE1vdXNlUG9zaXRpb24gPSB7IGxlZnQ6IGkucGFnZVgsIHRvcDogaS5wYWdlWSB9KSxcbiAgICAgICAgICAgICAgICAodGhpcy5hc3BlY3RSYXRpbyA9XG4gICAgICAgICAgICAgICAgICAgICdudW1iZXInID09IHR5cGVvZiBzLmFzcGVjdFJhdGlvXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHMuYXNwZWN0UmF0aW9cbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5vcmlnaW5hbFNpemUud2lkdGggLyB0aGlzLm9yaWdpbmFsU2l6ZS5oZWlnaHQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgMSk7XG4gICAgICAgICAgICB2YXIgaCA9IGUoJy51aS1yZXNpemFibGUtJyArIHRoaXMuYXhpcykuY3NzKCdjdXJzb3InKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgZSgnYm9keScpLmNzcyhcbiAgICAgICAgICAgICAgICAgICAgJ2N1cnNvcicsXG4gICAgICAgICAgICAgICAgICAgICdhdXRvJyA9PSBoID8gdGhpcy5heGlzICsgJy1yZXNpemUnIDogaFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgYS5hZGRDbGFzcygndWktcmVzaXphYmxlLXJlc2l6aW5nJyksXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvcGFnYXRlKCdzdGFydCcsIGkpLFxuICAgICAgICAgICAgICAgICEwXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBfbW91c2VEcmFnOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgdCA9IHRoaXMuaGVscGVyLFxuICAgICAgICAgICAgICAgIGkgPSAodGhpcy5vcHRpb25zLCB0aGlzLm9yaWdpbmFsTW91c2VQb3NpdGlvbiksXG4gICAgICAgICAgICAgICAgcyA9IHRoaXMuYXhpcyxcbiAgICAgICAgICAgICAgICBuID0gZS5wYWdlWCAtIGkubGVmdCB8fCAwLFxuICAgICAgICAgICAgICAgIGEgPSBlLnBhZ2VZIC0gaS50b3AgfHwgMCxcbiAgICAgICAgICAgICAgICBvID0gdGhpcy5fY2hhbmdlW3NdO1xuICAgICAgICAgICAgaWYgKCFvKSByZXR1cm4gITE7XG4gICAgICAgICAgICB2YXIgciA9IG8uYXBwbHkodGhpcywgW2UsIG4sIGFdKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlVmlydHVhbEJvdW5kYXJpZXMoZS5zaGlmdEtleSksXG4gICAgICAgICAgICAgICAgKHRoaXMuX2FzcGVjdFJhdGlvIHx8IGUuc2hpZnRLZXkpICYmXG4gICAgICAgICAgICAgICAgICAgIChyID0gdGhpcy5fdXBkYXRlUmF0aW8ociwgZSkpLFxuICAgICAgICAgICAgICAgIChyID0gdGhpcy5fcmVzcGVjdFNpemUociwgZSkpLFxuICAgICAgICAgICAgICAgIHRoaXMuX3Byb3BhZ2F0ZSgncmVzaXplJywgZSksXG4gICAgICAgICAgICAgICAgdC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICB0b3A6IHRoaXMucG9zaXRpb24udG9wICsgJ3B4JyxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogdGhpcy5wb3NpdGlvbi5sZWZ0ICsgJ3B4JyxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuc2l6ZS53aWR0aCArICdweCcsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5zaXplLmhlaWdodCArICdweCcsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgIXRoaXMuX2hlbHBlciAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpLFxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUNhY2hlKHIpLFxuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ3Jlc2l6ZScsIGUsIHRoaXMudWkoKSksXG4gICAgICAgICAgICAgICAgITFcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIF9tb3VzZVN0b3A6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHRoaXMucmVzaXppbmcgPSAhMTtcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgIHMgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2hlbHBlcikge1xuICAgICAgICAgICAgICAgIHZhciBuID0gdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgYSA9IG4ubGVuZ3RoICYmIC90ZXh0YXJlYS9pLnRlc3QoblswXS5ub2RlTmFtZSksXG4gICAgICAgICAgICAgICAgICAgIG8gPVxuICAgICAgICAgICAgICAgICAgICAgICAgYSAmJiBlLnVpLmhhc1Njcm9sbChuWzBdLCAnbGVmdCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBzLnNpemVEaWZmLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgciA9IGEgPyAwIDogcy5zaXplRGlmZi53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBzLmhlbHBlci53aWR0aCgpIC0gcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogcy5oZWxwZXIuaGVpZ2h0KCkgLSBvLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBsID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHMuZWxlbWVudC5jc3MoJ2xlZnQnKSwgMTApICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocy5wb3NpdGlvbi5sZWZ0IC0gcy5vcmlnaW5hbFBvc2l0aW9uLmxlZnQpIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQocy5lbGVtZW50LmNzcygndG9wJyksIDEwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHMucG9zaXRpb24udG9wIC0gcy5vcmlnaW5hbFBvc2l0aW9uLnRvcCkgfHwgbnVsbDtcbiAgICAgICAgICAgICAgICBpLmFuaW1hdGUgfHwgdGhpcy5lbGVtZW50LmNzcyhlLmV4dGVuZChoLCB7IHRvcDogdSwgbGVmdDogbCB9KSksXG4gICAgICAgICAgICAgICAgICAgIHMuaGVscGVyLmhlaWdodChzLnNpemUuaGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgcy5oZWxwZXIud2lkdGgocy5zaXplLndpZHRoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVscGVyICYmICFpLmFuaW1hdGUgJiYgdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgZSgnYm9keScpLmNzcygnY3Vyc29yJywgJ2F1dG8nKSxcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoJ3VpLXJlc2l6YWJsZS1yZXNpemluZycpLFxuICAgICAgICAgICAgICAgIHRoaXMuX3Byb3BhZ2F0ZSgnc3RvcCcsIHQpLFxuICAgICAgICAgICAgICAgIHRoaXMuX2hlbHBlciAmJiB0aGlzLmhlbHBlci5yZW1vdmUoKSxcbiAgICAgICAgICAgICAgICAhMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3VwZGF0ZVZpcnR1YWxCb3VuZGFyaWVzOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgdCxcbiAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgIHIgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICAobyA9IHtcbiAgICAgICAgICAgICAgICBtaW5XaWR0aDogaShyLm1pbldpZHRoKSA/IHIubWluV2lkdGggOiAwLFxuICAgICAgICAgICAgICAgIG1heFdpZHRoOiBpKHIubWF4V2lkdGgpID8gci5tYXhXaWR0aCA6IDEgLyAwLFxuICAgICAgICAgICAgICAgIG1pbkhlaWdodDogaShyLm1pbkhlaWdodCkgPyByLm1pbkhlaWdodCA6IDAsXG4gICAgICAgICAgICAgICAgbWF4SGVpZ2h0OiBpKHIubWF4SGVpZ2h0KSA/IHIubWF4SGVpZ2h0IDogMSAvIDAsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAodGhpcy5fYXNwZWN0UmF0aW8gfHwgZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgKCh0ID0gby5taW5IZWlnaHQgKiB0aGlzLmFzcGVjdFJhdGlvKSxcbiAgICAgICAgICAgICAgICAgICAgKG4gPSBvLm1pbldpZHRoIC8gdGhpcy5hc3BlY3RSYXRpbyksXG4gICAgICAgICAgICAgICAgICAgIChzID0gby5tYXhIZWlnaHQgKiB0aGlzLmFzcGVjdFJhdGlvKSxcbiAgICAgICAgICAgICAgICAgICAgKGEgPSBvLm1heFdpZHRoIC8gdGhpcy5hc3BlY3RSYXRpbyksXG4gICAgICAgICAgICAgICAgICAgIHQgPiBvLm1pbldpZHRoICYmIChvLm1pbldpZHRoID0gdCksXG4gICAgICAgICAgICAgICAgICAgIG4gPiBvLm1pbkhlaWdodCAmJiAoby5taW5IZWlnaHQgPSBuKSxcbiAgICAgICAgICAgICAgICAgICAgby5tYXhXaWR0aCA+IHMgJiYgKG8ubWF4V2lkdGggPSBzKSxcbiAgICAgICAgICAgICAgICAgICAgby5tYXhIZWlnaHQgPiBhICYmIChvLm1heEhlaWdodCA9IGEpKSxcbiAgICAgICAgICAgICAgICAodGhpcy5fdkJvdW5kYXJpZXMgPSBvKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3VwZGF0ZUNhY2hlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgKHRoaXMub2Zmc2V0ID0gdGhpcy5oZWxwZXIub2Zmc2V0KCkpLFxuICAgICAgICAgICAgICAgIGkoZS5sZWZ0KSAmJiAodGhpcy5wb3NpdGlvbi5sZWZ0ID0gZS5sZWZ0KSxcbiAgICAgICAgICAgICAgICBpKGUudG9wKSAmJiAodGhpcy5wb3NpdGlvbi50b3AgPSBlLnRvcCksXG4gICAgICAgICAgICAgICAgaShlLmhlaWdodCkgJiYgKHRoaXMuc2l6ZS5oZWlnaHQgPSBlLmhlaWdodCksXG4gICAgICAgICAgICAgICAgaShlLndpZHRoKSAmJiAodGhpcy5zaXplLndpZHRoID0gZS53aWR0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIF91cGRhdGVSYXRpbzogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHQgPSAodGhpcy5vcHRpb25zLCB0aGlzLnBvc2l0aW9uKSxcbiAgICAgICAgICAgICAgICBzID0gdGhpcy5zaXplLFxuICAgICAgICAgICAgICAgIG4gPSB0aGlzLmF4aXM7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIGkoZS5oZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgID8gKGUud2lkdGggPSBlLmhlaWdodCAqIHRoaXMuYXNwZWN0UmF0aW8pXG4gICAgICAgICAgICAgICAgICAgIDogaShlLndpZHRoKSAmJiAoZS5oZWlnaHQgPSBlLndpZHRoIC8gdGhpcy5hc3BlY3RSYXRpbyksXG4gICAgICAgICAgICAgICAgJ3N3JyA9PSBuICYmXG4gICAgICAgICAgICAgICAgICAgICgoZS5sZWZ0ID0gdC5sZWZ0ICsgKHMud2lkdGggLSBlLndpZHRoKSksIChlLnRvcCA9IG51bGwpKSxcbiAgICAgICAgICAgICAgICAnbncnID09IG4gJiZcbiAgICAgICAgICAgICAgICAgICAgKChlLnRvcCA9IHQudG9wICsgKHMuaGVpZ2h0IC0gZS5oZWlnaHQpKSxcbiAgICAgICAgICAgICAgICAgICAgKGUubGVmdCA9IHQubGVmdCArIChzLndpZHRoIC0gZS53aWR0aCkpKSxcbiAgICAgICAgICAgICAgICBlXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBfcmVzcGVjdFNpemU6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgIHZhciBzID0gKHRoaXMuaGVscGVyLCB0aGlzLl92Qm91bmRhcmllcyksXG4gICAgICAgICAgICAgICAgbiA9ICh0aGlzLl9hc3BlY3RSYXRpbyB8fCB0LnNoaWZ0S2V5LCB0aGlzLmF4aXMpLFxuICAgICAgICAgICAgICAgIGEgPSBpKGUud2lkdGgpICYmIHMubWF4V2lkdGggJiYgcy5tYXhXaWR0aCA8IGUud2lkdGgsXG4gICAgICAgICAgICAgICAgbyA9IGkoZS5oZWlnaHQpICYmIHMubWF4SGVpZ2h0ICYmIHMubWF4SGVpZ2h0IDwgZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgciA9IGkoZS53aWR0aCkgJiYgcy5taW5XaWR0aCAmJiBzLm1pbldpZHRoID4gZS53aWR0aCxcbiAgICAgICAgICAgICAgICBoID0gaShlLmhlaWdodCkgJiYgcy5taW5IZWlnaHQgJiYgcy5taW5IZWlnaHQgPiBlLmhlaWdodDtcbiAgICAgICAgICAgIHIgJiYgKGUud2lkdGggPSBzLm1pbldpZHRoKSxcbiAgICAgICAgICAgICAgICBoICYmIChlLmhlaWdodCA9IHMubWluSGVpZ2h0KSxcbiAgICAgICAgICAgICAgICBhICYmIChlLndpZHRoID0gcy5tYXhXaWR0aCksXG4gICAgICAgICAgICAgICAgbyAmJiAoZS5oZWlnaHQgPSBzLm1heEhlaWdodCk7XG4gICAgICAgICAgICB2YXIgbCA9IHRoaXMub3JpZ2luYWxQb3NpdGlvbi5sZWZ0ICsgdGhpcy5vcmlnaW5hbFNpemUud2lkdGgsXG4gICAgICAgICAgICAgICAgdSA9IHRoaXMucG9zaXRpb24udG9wICsgdGhpcy5zaXplLmhlaWdodCxcbiAgICAgICAgICAgICAgICBkID0gL3N3fG53fHcvLnRlc3QobiksXG4gICAgICAgICAgICAgICAgYyA9IC9ud3xuZXxuLy50ZXN0KG4pO1xuICAgICAgICAgICAgciAmJiBkICYmIChlLmxlZnQgPSBsIC0gcy5taW5XaWR0aCksXG4gICAgICAgICAgICAgICAgYSAmJiBkICYmIChlLmxlZnQgPSBsIC0gcy5tYXhXaWR0aCksXG4gICAgICAgICAgICAgICAgaCAmJiBjICYmIChlLnRvcCA9IHUgLSBzLm1pbkhlaWdodCksXG4gICAgICAgICAgICAgICAgbyAmJiBjICYmIChlLnRvcCA9IHUgLSBzLm1heEhlaWdodCk7XG4gICAgICAgICAgICB2YXIgcCA9ICFlLndpZHRoICYmICFlLmhlaWdodDtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgcCAmJiAhZS5sZWZ0ICYmIGUudG9wXG4gICAgICAgICAgICAgICAgICAgID8gKGUudG9wID0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgOiBwICYmICFlLnRvcCAmJiBlLmxlZnQgJiYgKGUubGVmdCA9IG51bGwpLFxuICAgICAgICAgICAgICAgIGVcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIF9wcm9wb3J0aW9uYWxseVJlc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoKHRoaXMub3B0aW9ucywgdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cy5sZW5ndGgpKVxuICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5oZWxwZXIgfHwgdGhpcy5lbGVtZW50LCBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cy5sZW5ndGggPiBpO1xuICAgICAgICAgICAgICAgICAgICBpKytcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSB0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYm9yZGVyRGlmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5jc3MoJ2JvcmRlclRvcFdpZHRoJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuY3NzKCdib3JkZXJSaWdodFdpZHRoJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuY3NzKCdib3JkZXJCb3R0b21XaWR0aCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLmNzcygnYm9yZGVyTGVmdFdpZHRoJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLmNzcygncGFkZGluZ1RvcCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLmNzcygncGFkZGluZ1JpZ2h0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuY3NzKCdwYWRkaW5nQm90dG9tJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuY3NzKCdwYWRkaW5nTGVmdCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJvcmRlckRpZiA9IGUubWFwKG4sIGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHBhcnNlSW50KGUsIDEwKSB8fCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gcGFyc2VJbnQoYVt0XSwgMTApIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgKyBzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcy5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuaGVpZ2h0KCkgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJvcmRlckRpZlswXSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYm9yZGVyRGlmWzJdIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LndpZHRoKCkgLSB0aGlzLmJvcmRlckRpZlsxXSAtIHRoaXMuYm9yZGVyRGlmWzNdIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfcmVuZGVyUHJveHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgICAgICAgaSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgICAgIGlmICgoKHRoaXMuZWxlbWVudE9mZnNldCA9IHQub2Zmc2V0KCkpLCB0aGlzLl9oZWxwZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWxwZXIgPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhlbHBlciB8fCBlKCc8ZGl2IHN0eWxlPVwib3ZlcmZsb3c6aGlkZGVuO1wiPjwvZGl2PicpO1xuICAgICAgICAgICAgICAgIHZhciBzID0gZS51aS5pZTYgPyAxIDogMCxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGUudWkuaWU2ID8gMiA6IC0xO1xuICAgICAgICAgICAgICAgIHRoaXMuaGVscGVyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyh0aGlzLl9oZWxwZXIpXG4gICAgICAgICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuZWxlbWVudC5vdXRlcldpZHRoKCkgKyBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQoKSArIG4sXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMuZWxlbWVudE9mZnNldC5sZWZ0IC0gcyArICdweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IHRoaXMuZWxlbWVudE9mZnNldC50b3AgLSBzICsgJ3B4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHpJbmRleDogKytpLnpJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGVscGVyLmFwcGVuZFRvKCdib2R5JykuZGlzYWJsZVNlbGVjdGlvbigpO1xuICAgICAgICAgICAgfSBlbHNlIHRoaXMuaGVscGVyID0gdGhpcy5lbGVtZW50O1xuICAgICAgICB9LFxuICAgICAgICBfY2hhbmdlOiB7XG4gICAgICAgICAgICBlOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgd2lkdGg6IHRoaXMub3JpZ2luYWxTaXplLndpZHRoICsgdCB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHc6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9ICh0aGlzLm9wdGlvbnMsIHRoaXMub3JpZ2luYWxTaXplKSxcbiAgICAgICAgICAgICAgICAgICAgcyA9IHRoaXMub3JpZ2luYWxQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBsZWZ0OiBzLmxlZnQgKyB0LCB3aWR0aDogaS53aWR0aCAtIHQgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuOiBmdW5jdGlvbihlLCB0LCBpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSAodGhpcy5vcHRpb25zLCB0aGlzLm9yaWdpbmFsU2l6ZSksXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0aGlzLm9yaWdpbmFsUG9zaXRpb247XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdG9wOiBuLnRvcCArIGksIGhlaWdodDogcy5oZWlnaHQgLSBpIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgczogZnVuY3Rpb24oZSwgdCwgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGhlaWdodDogdGhpcy5vcmlnaW5hbFNpemUuaGVpZ2h0ICsgaSB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlOiBmdW5jdGlvbih0LCBpLCBzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2Uucy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2UuZS5hcHBseSh0aGlzLCBbdCwgaSwgc10pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdzogZnVuY3Rpb24odCwgaSwgcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlLnMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlLncuYXBwbHkodGhpcywgW3QsIGksIHNdKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmU6IGZ1bmN0aW9uKHQsIGksIHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5leHRlbmQoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZS5uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZS5lLmFwcGx5KHRoaXMsIFt0LCBpLCBzXSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG53OiBmdW5jdGlvbih0LCBpLCBzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2Uubi5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2Uudy5hcHBseSh0aGlzLCBbdCwgaSwgc10pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIF9wcm9wYWdhdGU6IGZ1bmN0aW9uKHQsIGkpIHtcbiAgICAgICAgICAgIGUudWkucGx1Z2luLmNhbGwodGhpcywgdCwgW2ksIHRoaXMudWkoKV0pLFxuICAgICAgICAgICAgICAgICdyZXNpemUnICE9IHQgJiYgdGhpcy5fdHJpZ2dlcih0LCBpLCB0aGlzLnVpKCkpO1xuICAgICAgICB9LFxuICAgICAgICBwbHVnaW5zOiB7fSxcbiAgICAgICAgdWk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEVsZW1lbnQ6IHRoaXMub3JpZ2luYWxFbGVtZW50LFxuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICAgICAgICBoZWxwZXI6IHRoaXMuaGVscGVyLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIHNpemU6IHRoaXMuc2l6ZSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFNpemU6IHRoaXMub3JpZ2luYWxTaXplLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsUG9zaXRpb246IHRoaXMub3JpZ2luYWxQb3NpdGlvbixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfSksXG4gICAgICAgIGUudWkucGx1Z2luLmFkZCgncmVzaXphYmxlJywgJ2Fsc29SZXNpemUnLCB7XG4gICAgICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBlKHRoaXMpLmRhdGEoJ3Jlc2l6YWJsZScpLFxuICAgICAgICAgICAgICAgICAgICBpID0gdC5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBzID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZSh0KS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gZSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmRhdGEoJ3Jlc2l6YWJsZS1hbHNvcmVzaXplJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogcGFyc2VJbnQodC53aWR0aCgpLCAxMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogcGFyc2VJbnQodC5oZWlnaHQoKSwgMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBwYXJzZUludCh0LmNzcygnbGVmdCcpLCAxMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogcGFyc2VJbnQodC5jc3MoJ3RvcCcpLCAxMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAnb2JqZWN0JyAhPSB0eXBlb2YgaS5hbHNvUmVzaXplIHx8IGkuYWxzb1Jlc2l6ZS5wYXJlbnROb2RlXG4gICAgICAgICAgICAgICAgICAgID8gcyhpLmFsc29SZXNpemUpXG4gICAgICAgICAgICAgICAgICAgIDogaS5hbHNvUmVzaXplLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKGkuYWxzb1Jlc2l6ZSA9IGkuYWxzb1Jlc2l6ZVswXSksIHMoaS5hbHNvUmVzaXplKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZS5lYWNoKGkuYWxzb1Jlc2l6ZSwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyhlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbih0LCBpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBlKHRoaXMpLmRhdGEoJ3Jlc2l6YWJsZScpLFxuICAgICAgICAgICAgICAgICAgICBuID0gcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBhID0gcy5vcmlnaW5hbFNpemUsXG4gICAgICAgICAgICAgICAgICAgIG8gPSBzLm9yaWdpbmFsUG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIHIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHMuc2l6ZS5oZWlnaHQgLSBhLmhlaWdodCB8fCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHMuc2l6ZS53aWR0aCAtIGEud2lkdGggfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogcy5wb3NpdGlvbi50b3AgLSBvLnRvcCB8fCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogcy5wb3NpdGlvbi5sZWZ0IC0gby5sZWZ0IHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGggPSBmdW5jdGlvbih0LCBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlKHQpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBlKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gZSh0aGlzKS5kYXRhKCdyZXNpemFibGUtYWxzb3Jlc2l6ZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyAmJiBzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdC5wYXJlbnRzKGkub3JpZ2luYWxFbGVtZW50WzBdKS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBbJ3dpZHRoJywgJ2hlaWdodCddXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RvcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsZWZ0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuZWFjaChvLCBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gKG5bdF0gfHwgMCkgKyAoclt0XSB8fCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSAmJiBpID49IDAgJiYgKGFbdF0gPSBpIHx8IG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmNzcyhhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICdvYmplY3QnICE9IHR5cGVvZiBuLmFsc29SZXNpemUgfHwgbi5hbHNvUmVzaXplLm5vZGVUeXBlXG4gICAgICAgICAgICAgICAgICAgID8gaChuLmFsc29SZXNpemUpXG4gICAgICAgICAgICAgICAgICAgIDogZS5lYWNoKG4uYWxzb1Jlc2l6ZSwgZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBoKGUsIHQpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGUodGhpcykucmVtb3ZlRGF0YSgncmVzaXphYmxlLWFsc29yZXNpemUnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICBlLnVpLnBsdWdpbi5hZGQoJ3Jlc2l6YWJsZScsICdhbmltYXRlJywge1xuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gZSh0aGlzKS5kYXRhKCdyZXNpemFibGUnKSxcbiAgICAgICAgICAgICAgICAgICAgcyA9IGkub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMsXG4gICAgICAgICAgICAgICAgICAgIGEgPSBuLmxlbmd0aCAmJiAvdGV4dGFyZWEvaS50ZXN0KG5bMF0ubm9kZU5hbWUpLFxuICAgICAgICAgICAgICAgICAgICBvID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGEgJiYgZS51aS5oYXNTY3JvbGwoblswXSwgJ2xlZnQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaS5zaXplRGlmZi5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHIgPSBhID8gMCA6IGkuc2l6ZURpZmYud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGggPSB7IHdpZHRoOiBpLnNpemUud2lkdGggLSByLCBoZWlnaHQ6IGkuc2l6ZS5oZWlnaHQgLSBvIH0sXG4gICAgICAgICAgICAgICAgICAgIGwgPVxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoaS5lbGVtZW50LmNzcygnbGVmdCcpLCAxMCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpLnBvc2l0aW9uLmxlZnQgLSBpLm9yaWdpbmFsUG9zaXRpb24ubGVmdCkgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludChpLmVsZW1lbnQuY3NzKCd0b3AnKSwgMTApICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5wb3NpdGlvbi50b3AgLSBpLm9yaWdpbmFsUG9zaXRpb24udG9wKSB8fCBudWxsO1xuICAgICAgICAgICAgICAgIGkuZWxlbWVudC5hbmltYXRlKFxuICAgICAgICAgICAgICAgICAgICBlLmV4dGVuZChoLCB1ICYmIGwgPyB7IHRvcDogdSwgbGVmdDogbCB9IDoge30pLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogcy5hbmltYXRlRHVyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IHMuYW5pbWF0ZUVhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogcGFyc2VJbnQoaS5lbGVtZW50LmNzcygnd2lkdGgnKSwgMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHBhcnNlSW50KGkuZWxlbWVudC5jc3MoJ2hlaWdodCcpLCAxMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogcGFyc2VJbnQoaS5lbGVtZW50LmNzcygndG9wJyksIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogcGFyc2VJbnQoaS5lbGVtZW50LmNzcygnbGVmdCcpLCAxMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUoblswXSkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBzLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBzLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuX3VwZGF0ZUNhY2hlKHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLl9wcm9wYWdhdGUoJ3Jlc2l6ZScsIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgZS51aS5wbHVnaW4uYWRkKCdyZXNpemFibGUnLCAnY29udGFpbm1lbnQnLCB7XG4gICAgICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBlKHRoaXMpLmRhdGEoJ3Jlc2l6YWJsZScpLFxuICAgICAgICAgICAgICAgICAgICBzID0gaS5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBuID0gaS5lbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBhID0gcy5jb250YWlubWVudCxcbiAgICAgICAgICAgICAgICAgICAgbyA9XG4gICAgICAgICAgICAgICAgICAgICAgICBhIGluc3RhbmNlb2YgZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYS5nZXQoMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IC9wYXJlbnQvLnRlc3QoYSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBuLnBhcmVudCgpLmdldCgwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGE7XG4gICAgICAgICAgICAgICAgaWYgKG8pXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICgoaS5jb250YWluZXJFbGVtZW50ID0gZShvKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAvZG9jdW1lbnQvLnRlc3QoYSkgfHwgYSA9PSBkb2N1bWVudClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKGkuY29udGFpbmVyT2Zmc2V0ID0geyBsZWZ0OiAwLCB0b3A6IDAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkuY29udGFpbmVyUG9zaXRpb24gPSB7IGxlZnQ6IDAsIHRvcDogMCB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5wYXJlbnREYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlKGRvY3VtZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogZShkb2N1bWVudCkud2lkdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZShkb2N1bWVudCkuaGVpZ2h0KCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBlKG8pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUoWydUb3AnLCAnUmlnaHQnLCAnTGVmdCcsICdCb3R0b20nXSkuZWFjaChmdW5jdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhbZV0gPSB0KHIuY3NzKCdwYWRkaW5nJyArIGkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpLmNvbnRhaW5lck9mZnNldCA9IHIub2Zmc2V0KCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpLmNvbnRhaW5lclBvc2l0aW9uID0gci5wb3NpdGlvbigpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5jb250YWluZXJTaXplID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHIuaW5uZXJIZWlnaHQoKSAtIGhbM10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiByLmlubmVyV2lkdGgoKSAtIGhbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IGkuY29udGFpbmVyT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBpLmNvbnRhaW5lclNpemUuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBpLmNvbnRhaW5lclNpemUud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGUudWkuaGFzU2Nyb2xsKG8sICdsZWZ0JykgPyBvLnNjcm9sbFdpZHRoIDogZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gZS51aS5oYXNTY3JvbGwobykgPyBvLnNjcm9sbEhlaWdodCA6IHU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpLnBhcmVudERhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBsLmxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBsLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHAsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBlKHRoaXMpLmRhdGEoJ3Jlc2l6YWJsZScpLFxuICAgICAgICAgICAgICAgICAgICBzID0gaS5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBuID0gKGkuY29udGFpbmVyU2l6ZSwgaS5jb250YWluZXJPZmZzZXQpLFxuICAgICAgICAgICAgICAgICAgICBhID0gKGkuc2l6ZSwgaS5wb3NpdGlvbiksXG4gICAgICAgICAgICAgICAgICAgIG8gPSBpLl9hc3BlY3RSYXRpbyB8fCB0LnNoaWZ0S2V5LFxuICAgICAgICAgICAgICAgICAgICByID0geyB0b3A6IDAsIGxlZnQ6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgaCA9IGkuY29udGFpbmVyRWxlbWVudDtcbiAgICAgICAgICAgICAgICBoWzBdICE9IGRvY3VtZW50ICYmIC9zdGF0aWMvLnRlc3QoaC5jc3MoJ3Bvc2l0aW9uJykpICYmIChyID0gbiksXG4gICAgICAgICAgICAgICAgICAgIGEubGVmdCA8IChpLl9oZWxwZXIgPyBuLmxlZnQgOiAwKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKChpLnNpemUud2lkdGggPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2l6ZS53aWR0aCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkuX2hlbHBlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGkucG9zaXRpb24ubGVmdCAtIG4ubGVmdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGkucG9zaXRpb24ubGVmdCAtIHIubGVmdCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbyAmJiAoaS5zaXplLmhlaWdodCA9IGkuc2l6ZS53aWR0aCAvIGkuYXNwZWN0UmF0aW8pLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGkucG9zaXRpb24ubGVmdCA9IHMuaGVscGVyID8gbi5sZWZ0IDogMCkpLFxuICAgICAgICAgICAgICAgICAgICBhLnRvcCA8IChpLl9oZWxwZXIgPyBuLnRvcCA6IDApICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoKGkuc2l6ZS5oZWlnaHQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2l6ZS5oZWlnaHQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpLl9oZWxwZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpLnBvc2l0aW9uLnRvcCAtIG4udG9wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaS5wb3NpdGlvbi50b3ApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gJiYgKGkuc2l6ZS53aWR0aCA9IGkuc2l6ZS5oZWlnaHQgKiBpLmFzcGVjdFJhdGlvKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChpLnBvc2l0aW9uLnRvcCA9IGkuX2hlbHBlciA/IG4udG9wIDogMCkpLFxuICAgICAgICAgICAgICAgICAgICAoaS5vZmZzZXQubGVmdCA9IGkucGFyZW50RGF0YS5sZWZ0ICsgaS5wb3NpdGlvbi5sZWZ0KSxcbiAgICAgICAgICAgICAgICAgICAgKGkub2Zmc2V0LnRvcCA9IGkucGFyZW50RGF0YS50b3AgKyBpLnBvc2l0aW9uLnRvcCk7XG4gICAgICAgICAgICAgICAgdmFyIGwgPSBNYXRoLmFicyhcbiAgICAgICAgICAgICAgICAgICAgICAgIChpLl9oZWxwZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGkub2Zmc2V0LmxlZnQgLSByLmxlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGkub2Zmc2V0LmxlZnQgLSByLmxlZnQpICsgaS5zaXplRGlmZi53aWR0aFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB1ID0gTWF0aC5hYnMoXG4gICAgICAgICAgICAgICAgICAgICAgICAoaS5faGVscGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpLm9mZnNldC50b3AgLSByLnRvcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaS5vZmZzZXQudG9wIC0gbi50b3ApICsgaS5zaXplRGlmZi5oZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgZCA9IGkuY29udGFpbmVyRWxlbWVudC5nZXQoMCkgPT0gaS5lbGVtZW50LnBhcmVudCgpLmdldCgwKSxcbiAgICAgICAgICAgICAgICAgICAgYyA9IC9yZWxhdGl2ZXxhYnNvbHV0ZS8udGVzdChcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuY29udGFpbmVyRWxlbWVudC5jc3MoJ3Bvc2l0aW9uJylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBkICYmIGMgJiYgKGwgLT0gaS5wYXJlbnREYXRhLmxlZnQpLFxuICAgICAgICAgICAgICAgICAgICBsICsgaS5zaXplLndpZHRoID49IGkucGFyZW50RGF0YS53aWR0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKChpLnNpemUud2lkdGggPSBpLnBhcmVudERhdGEud2lkdGggLSBsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gJiYgKGkuc2l6ZS5oZWlnaHQgPSBpLnNpemUud2lkdGggLyBpLmFzcGVjdFJhdGlvKSksXG4gICAgICAgICAgICAgICAgICAgIHUgKyBpLnNpemUuaGVpZ2h0ID49IGkucGFyZW50RGF0YS5oZWlnaHQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICgoaS5zaXplLmhlaWdodCA9IGkucGFyZW50RGF0YS5oZWlnaHQgLSB1KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gJiYgKGkuc2l6ZS53aWR0aCA9IGkuc2l6ZS5oZWlnaHQgKiBpLmFzcGVjdFJhdGlvKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBlKHRoaXMpLmRhdGEoJ3Jlc2l6YWJsZScpLFxuICAgICAgICAgICAgICAgICAgICBpID0gdC5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBzID0gKHQucG9zaXRpb24sIHQuY29udGFpbmVyT2Zmc2V0KSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IHQuY29udGFpbmVyUG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGEgPSB0LmNvbnRhaW5lckVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIG8gPSBlKHQuaGVscGVyKSxcbiAgICAgICAgICAgICAgICAgICAgciA9IG8ub2Zmc2V0KCksXG4gICAgICAgICAgICAgICAgICAgIGggPSBvLm91dGVyV2lkdGgoKSAtIHQuc2l6ZURpZmYud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGwgPSBvLm91dGVySGVpZ2h0KCkgLSB0LnNpemVEaWZmLmhlaWdodDtcbiAgICAgICAgICAgICAgICB0Ll9oZWxwZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgIWkuYW5pbWF0ZSAmJlxuICAgICAgICAgICAgICAgICAgICAvcmVsYXRpdmUvLnRlc3QoYS5jc3MoJ3Bvc2l0aW9uJykpICYmXG4gICAgICAgICAgICAgICAgICAgIGUodGhpcykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IHIubGVmdCAtIG4ubGVmdCAtIHMubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBoLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBsLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgdC5faGVscGVyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhaS5hbmltYXRlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAvc3RhdGljLy50ZXN0KGEuY3NzKCdwb3NpdGlvbicpKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZSh0aGlzKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IHIubGVmdCAtIG4ubGVmdCAtIHMubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogaCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICBlLnVpLnBsdWdpbi5hZGQoJ3Jlc2l6YWJsZScsICdnaG9zdCcsIHtcbiAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IGUodGhpcykuZGF0YSgncmVzaXphYmxlJyksXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0Lm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIHMgPSB0LnNpemU7XG4gICAgICAgICAgICAgICAgKHQuZ2hvc3QgPSB0Lm9yaWdpbmFsRWxlbWVudC5jbG9uZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgdC5naG9zdFxuICAgICAgICAgICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC4yNSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogcy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHMud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygndWktcmVzaXphYmxlLWdob3N0JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc3RyaW5nJyA9PSB0eXBlb2YgaS5naG9zdCA/IGkuZ2hvc3QgOiAnJyksXG4gICAgICAgICAgICAgICAgICAgIHQuZ2hvc3QuYXBwZW5kVG8odC5oZWxwZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBlKHRoaXMpLmRhdGEoJ3Jlc2l6YWJsZScpO1xuICAgICAgICAgICAgICAgIHQub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgdC5naG9zdCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdC5naG9zdC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogdC5zaXplLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogdC5zaXplLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBlKHRoaXMpLmRhdGEoJ3Jlc2l6YWJsZScpO1xuICAgICAgICAgICAgICAgIHQub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgdC5naG9zdCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdC5oZWxwZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuaGVscGVyLmdldCgwKS5yZW1vdmVDaGlsZCh0Lmdob3N0LmdldCgwKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgZS51aS5wbHVnaW4uYWRkKCdyZXNpemFibGUnLCAnZ3JpZCcsIHtcbiAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gZSh0aGlzKS5kYXRhKCdyZXNpemFibGUnKSxcbiAgICAgICAgICAgICAgICAgICAgcyA9IGkub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkuc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgYSA9IGkub3JpZ2luYWxTaXplLFxuICAgICAgICAgICAgICAgICAgICBvID0gaS5vcmlnaW5hbFBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICByID0gaS5heGlzO1xuICAgICAgICAgICAgICAgIHMuX2FzcGVjdFJhdGlvIHx8IHQuc2hpZnRLZXksXG4gICAgICAgICAgICAgICAgICAgIChzLmdyaWQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIHMuZ3JpZCA/IFtzLmdyaWQsIHMuZ3JpZF0gOiBzLmdyaWQpO1xuICAgICAgICAgICAgICAgIHZhciBoID1cbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQoKG4ud2lkdGggLSBhLndpZHRoKSAvIChzLmdyaWRbMF0gfHwgMSkpICpcbiAgICAgICAgICAgICAgICAgICAgICAgIChzLmdyaWRbMF0gfHwgMSksXG4gICAgICAgICAgICAgICAgICAgIGwgPVxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgobi5oZWlnaHQgLSBhLmhlaWdodCkgLyAocy5ncmlkWzFdIHx8IDEpKSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAocy5ncmlkWzFdIHx8IDEpO1xuICAgICAgICAgICAgICAgIC9eKHNlfHN8ZSkkLy50ZXN0KHIpXG4gICAgICAgICAgICAgICAgICAgID8gKChpLnNpemUud2lkdGggPSBhLndpZHRoICsgaCksXG4gICAgICAgICAgICAgICAgICAgICAgKGkuc2l6ZS5oZWlnaHQgPSBhLmhlaWdodCArIGwpKVxuICAgICAgICAgICAgICAgICAgICA6IC9eKG5lKSQvLnRlc3QocilcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKChpLnNpemUud2lkdGggPSBhLndpZHRoICsgaCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChpLnNpemUuaGVpZ2h0ID0gYS5oZWlnaHQgKyBsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGkucG9zaXRpb24udG9wID0gby50b3AgLSBsKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogL14oc3cpJC8udGVzdChyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKChpLnNpemUud2lkdGggPSBhLndpZHRoICsgaCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5zaXplLmhlaWdodCA9IGEuaGVpZ2h0ICsgbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5wb3NpdGlvbi5sZWZ0ID0gby5sZWZ0IC0gaCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoKGkuc2l6ZS53aWR0aCA9IGEud2lkdGggKyBoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpLnNpemUuaGVpZ2h0ID0gYS5oZWlnaHQgKyBsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpLnBvc2l0aW9uLnRvcCA9IG8udG9wIC0gbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5wb3NpdGlvbi5sZWZ0ID0gby5sZWZ0IC0gaCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgdmFyIHQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoZSwgMTApIHx8IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGkgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gIWlzTmFOKHBhcnNlSW50KGUsIDEwKSk7XG4gICAgICAgIH07XG59KShqUXVlcnkpO1xuKGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgdCA9IDAsXG4gICAgICAgIGkgPSB7fSxcbiAgICAgICAgcyA9IHt9O1xuICAgIChpLmhlaWdodCA9IGkucGFkZGluZ1RvcCA9IGkucGFkZGluZ0JvdHRvbSA9IGkuYm9yZGVyVG9wV2lkdGggPSBpLmJvcmRlckJvdHRvbVdpZHRoID1cbiAgICAgICAgJ2hpZGUnKSxcbiAgICAgICAgKHMuaGVpZ2h0ID0gcy5wYWRkaW5nVG9wID0gcy5wYWRkaW5nQm90dG9tID0gcy5ib3JkZXJUb3BXaWR0aCA9IHMuYm9yZGVyQm90dG9tV2lkdGggPVxuICAgICAgICAgICAgJ3Nob3cnKSxcbiAgICAgICAgZS53aWRnZXQoJ3VpLmFjY29yZGlvbicsIHtcbiAgICAgICAgICAgIHZlcnNpb246ICcxLjkuMicsXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgYWN0aXZlOiAwLFxuICAgICAgICAgICAgICAgIGFuaW1hdGU6IHt9LFxuICAgICAgICAgICAgICAgIGNvbGxhcHNpYmxlOiAhMSxcbiAgICAgICAgICAgICAgICBldmVudDogJ2NsaWNrJyxcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICc+IGxpID4gOmZpcnN0LWNoaWxkLD4gOm5vdChsaSk6ZXZlbicsXG4gICAgICAgICAgICAgICAgaGVpZ2h0U3R5bGU6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICBpY29uczoge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVIZWFkZXI6ICd1aS1pY29uLXRyaWFuZ2xlLTEtcycsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcjogJ3VpLWljb24tdHJpYW5nbGUtMS1lJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFjdGl2YXRlOiBudWxsLFxuICAgICAgICAgICAgICAgIGJlZm9yZUFjdGl2YXRlOiBudWxsLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gKHRoaXMuYWNjb3JkaW9uSWQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgJ3VpLWFjY29yZGlvbi0nICsgKHRoaXMuZWxlbWVudC5hdHRyKCdpZCcpIHx8ICsrdCkpLFxuICAgICAgICAgICAgICAgICAgICBzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgICAgICh0aGlzLnByZXZTaG93ID0gdGhpcy5wcmV2SGlkZSA9IGUoKSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hZGRDbGFzcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICd1aS1hY2NvcmRpb24gdWktd2lkZ2V0IHVpLWhlbHBlci1yZXNldCdcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaGVhZGVycyA9IHRoaXMuZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQocy5oZWFkZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VpLWFjY29yZGlvbi1oZWFkZXIgdWktaGVscGVyLXJlc2V0IHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLWFsbCdcbiAgICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ob3ZlcmFibGUodGhpcy5oZWFkZXJzKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNhYmxlKHRoaXMuaGVhZGVycyksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSdcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlKCksXG4gICAgICAgICAgICAgICAgICAgIHMuY29sbGFwc2libGUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChzLmFjdGl2ZSAhPT0gITEgJiYgbnVsbCAhPSBzLmFjdGl2ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChzLmFjdGl2ZSA9IDApLFxuICAgICAgICAgICAgICAgICAgICAwID4gcy5hY3RpdmUgJiYgKHMuYWN0aXZlICs9IHRoaXMuaGVhZGVycy5sZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5hY3RpdmUgPSB0aGlzLl9maW5kQWN0aXZlKHMuYWN0aXZlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCd1aS1hY2NvcmRpb24taGVhZGVyLWFjdGl2ZSB1aS1zdGF0ZS1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCd1aS1jb3JuZXItYWxsIHVpLWNvcm5lci10b3AnKSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlXG4gICAgICAgICAgICAgICAgICAgICAgICAubmV4dCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3VpLWFjY29yZGlvbi1jb250ZW50LWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2hvdygpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVJY29ucygpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmF0dHIoJ3JvbGUnLCAndGFibGlzdCcpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhlYWRlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdyb2xlJywgJ3RhYicpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBlKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gcy5hdHRyKCdpZCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gcy5uZXh0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBhLmF0dHIoJ2lkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbiB8fCAoKG4gPSBpICsgJy1oZWFkZXItJyArIHQpLCBzLmF0dHIoJ2lkJywgbikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvIHx8ICgobyA9IGkgKyAnLXBhbmVsLScgKyB0KSwgYS5hdHRyKCdpZCcsIG8pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5hdHRyKCdhcmlhLWNvbnRyb2xzJywgbyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuYXR0cignYXJpYS1sYWJlbGxlZGJ5Jywgbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3JvbGUnLCAndGFicGFuZWwnKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAubm90KHRoaXMuYWN0aXZlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoeyAnYXJpYS1zZWxlY3RlZCc6ICdmYWxzZScsIHRhYkluZGV4OiAtMSB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhcmlhLWV4cGFuZGVkJzogJ2ZhbHNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmhpZGUoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmUubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuYWN0aXZlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cih7ICdhcmlhLXNlbGVjdGVkJzogJ3RydWUnLCB0YWJJbmRleDogMCB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhcmlhLWV4cGFuZGVkJzogJ3RydWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhcmlhLWhpZGRlbic6ICdmYWxzZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmhlYWRlcnMuZXEoMCkuYXR0cigndGFiSW5kZXgnLCAwKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb24odGhpcy5oZWFkZXJzLCB7IGtleWRvd246ICdfa2V5ZG93bicgfSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uKHRoaXMuaGVhZGVycy5uZXh0KCksIHsga2V5ZG93bjogJ19wYW5lbEtleURvd24nIH0pLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXR1cEV2ZW50cyhzLmV2ZW50KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfZ2V0Q3JlYXRlRXZlbnREYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXI6IHRoaXMuYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiB0aGlzLmFjdGl2ZS5sZW5ndGggPyB0aGlzLmFjdGl2ZS5uZXh0KCkgOiBlKCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY3JlYXRlSWNvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5vcHRpb25zLmljb25zO1xuICAgICAgICAgICAgICAgIHQgJiZcbiAgICAgICAgICAgICAgICAgICAgKGUoJzxzcGFuPicpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VpLWFjY29yZGlvbi1oZWFkZXItaWNvbiB1aS1pY29uICcgKyB0LmhlYWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnByZXBlbmRUbyh0aGlzLmhlYWRlcnMpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKCcudWktYWNjb3JkaW9uLWhlYWRlci1pY29uJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyh0LmhlYWRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyh0LmFjdGl2ZUhlYWRlciksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVycy5hZGRDbGFzcygndWktYWNjb3JkaW9uLWljb25zJykpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9kZXN0cm95SWNvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyc1xuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3VpLWFjY29yZGlvbi1pY29ucycpXG4gICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbignLnVpLWFjY29yZGlvbi1oZWFkZXItaWNvbicpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGU7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygndWktYWNjb3JkaW9uIHVpLXdpZGdldCB1aS1oZWxwZXItcmVzZXQnKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cigncm9sZScpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhlYWRlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndWktYWNjb3JkaW9uLWhlYWRlciB1aS1hY2NvcmRpb24taGVhZGVyLWFjdGl2ZSB1aS1oZWxwZXItcmVzZXQgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItYWxsIHVpLXN0YXRlLWFjdGl2ZSB1aS1zdGF0ZS1kaXNhYmxlZCB1aS1jb3JuZXItdG9wJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ3JvbGUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtc2VsZWN0ZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtY29udHJvbHMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ3RhYkluZGV4JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9edWktYWNjb3JkaW9uLy50ZXN0KHRoaXMuaWQpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdpZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lJY29ucygpLFxuICAgICAgICAgICAgICAgICAgICAoZSA9IHRoaXMuaGVhZGVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNzcygnZGlzcGxheScsICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ3JvbGUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtZXhwYW5kZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWxhYmVsbGVkYnknKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSB1aS1hY2NvcmRpb24tY29udGVudCB1aS1hY2NvcmRpb24tY29udGVudC1hY3RpdmUgdWktc3RhdGUtZGlzYWJsZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXnVpLWFjY29yZGlvbi8udGVzdCh0aGlzLmlkKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnICE9PSB0aGlzLm9wdGlvbnMuaGVpZ2h0U3R5bGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuY3NzKCdoZWlnaHQnLCAnJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldE9wdGlvbjogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnYWN0aXZlJyA9PT0gZVxuICAgICAgICAgICAgICAgICAgICA/ICh0aGlzLl9hY3RpdmF0ZSh0KSwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICA6ICgnZXZlbnQnID09PSBlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLm9wdGlvbnMuZXZlbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29mZih0aGlzLmhlYWRlcnMsIHRoaXMub3B0aW9ucy5ldmVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldHVwRXZlbnRzKHQpKSxcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdXBlcihlLCB0KSxcbiAgICAgICAgICAgICAgICAgICAgICAnY29sbGFwc2libGUnICE9PSBlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmFjdGl2ZSAhPT0gITEgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZhdGUoMCksXG4gICAgICAgICAgICAgICAgICAgICAgJ2ljb25zJyA9PT0gZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5fZGVzdHJveUljb25zKCksIHQgJiYgdGhpcy5fY3JlYXRlSWNvbnMoKSksXG4gICAgICAgICAgICAgICAgICAgICAgJ2Rpc2FibGVkJyA9PT0gZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhlYWRlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGQodGhpcy5oZWFkZXJzLm5leHQoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b2dnbGVDbGFzcygndWktc3RhdGUtZGlzYWJsZWQnLCAhIXQpLFxuICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2tleWRvd246IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXQuYWx0S2V5ICYmICF0LmN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlLnVpLmtleUNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gdGhpcy5oZWFkZXJzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSB0aGlzLmhlYWRlcnMuaW5kZXgodC50YXJnZXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9ICExO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHQua2V5Q29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBpLlJJR0hUOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBpLkRPV046XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHRoaXMuaGVhZGVyc1sobiArIDEpICUgc107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGkuTEVGVDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgaS5VUDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gdGhpcy5oZWFkZXJzWyhuIC0gMSArIHMpICUgc107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGkuU1BBQ0U6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGkuRU5URVI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBpLkhPTUU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHRoaXMuaGVhZGVyc1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgaS5FTkQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHRoaXMuaGVhZGVyc1tzIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKGUodC50YXJnZXQpLmF0dHIoJ3RhYkluZGV4JywgLTEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZShhKS5hdHRyKCd0YWJJbmRleCcsIDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgYS5mb2N1cygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5wcmV2ZW50RGVmYXVsdCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3BhbmVsS2V5RG93bjogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHQua2V5Q29kZSA9PT0gZS51aS5rZXlDb2RlLlVQICYmXG4gICAgICAgICAgICAgICAgICAgIHQuY3RybEtleSAmJlxuICAgICAgICAgICAgICAgICAgICBlKHQuY3VycmVudFRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mb2N1cygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZnJlc2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0LFxuICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICBzID0gdGhpcy5vcHRpb25zLmhlaWdodFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBuID0gdGhpcy5lbGVtZW50LnBhcmVudCgpO1xuICAgICAgICAgICAgICAgICdmaWxsJyA9PT0gc1xuICAgICAgICAgICAgICAgICAgICA/IChlLnN1cHBvcnQubWluSGVpZ2h0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICgoaSA9IG4uY3NzKCdvdmVyZmxvdycpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbi5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpKSxcbiAgICAgICAgICAgICAgICAgICAgICAodCA9IG4uaGVpZ2h0KCkpLFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zaWJsaW5ncygnOnZpc2libGUnKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGUodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gaS5jc3MoJ3Bvc2l0aW9uJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhYnNvbHV0ZScgIT09IHMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmaXhlZCcgIT09IHMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0IC09IGkub3V0ZXJIZWlnaHQoITApKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpICYmIG4uY3NzKCdvdmVyZmxvdycsIGkpLFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVycy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0IC09IGUodGhpcykub3V0ZXJIZWlnaHQoITApO1xuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAubmV4dCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSh0aGlzKS5oZWlnaHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSh0aGlzKS5pbm5lckhlaWdodCgpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUodGhpcykuaGVpZ2h0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuY3NzKCdvdmVyZmxvdycsICdhdXRvJykpXG4gICAgICAgICAgICAgICAgICAgIDogJ2F1dG8nID09PSBzICYmXG4gICAgICAgICAgICAgICAgICAgICAgKCh0ID0gMCksXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5uZXh0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jc3MoJ2hlaWdodCcsICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaGVpZ2h0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5oZWlnaHQodCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9hY3RpdmF0ZTogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcy5fZmluZEFjdGl2ZSh0KVswXTtcbiAgICAgICAgICAgICAgICBpICE9PSB0aGlzLmFjdGl2ZVswXSAmJlxuICAgICAgICAgICAgICAgICAgICAoKGkgPSBpIHx8IHRoaXMuYWN0aXZlWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUYXJnZXQ6IGksXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogZS5ub29wLFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2ZpbmRBY3RpdmU6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ251bWJlcicgPT0gdHlwZW9mIHQgPyB0aGlzLmhlYWRlcnMuZXEodCkgOiBlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldHVwRXZlbnRzOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSB7fTtcbiAgICAgICAgICAgICAgICB0ICYmXG4gICAgICAgICAgICAgICAgICAgIChlLmVhY2godC5zcGxpdCgnICcpLCBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpW3RdID0gJ19ldmVudEhhbmRsZXInO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb24odGhpcy5oZWFkZXJzLCBpKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2V2ZW50SGFuZGxlcjogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBzID0gdGhpcy5hY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBlKHQuY3VycmVudFRhcmdldCksXG4gICAgICAgICAgICAgICAgICAgIGEgPSBuWzBdID09PSBzWzBdLFxuICAgICAgICAgICAgICAgICAgICBvID0gYSAmJiBpLmNvbGxhcHNpYmxlLFxuICAgICAgICAgICAgICAgICAgICByID0gbyA/IGUoKSA6IG4ubmV4dCgpLFxuICAgICAgICAgICAgICAgICAgICBoID0gcy5uZXh0KCksXG4gICAgICAgICAgICAgICAgICAgIGwgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRIZWFkZXI6IHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRQYW5lbDogaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0hlYWRlcjogbyA/IGUoKSA6IG4sXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdQYW5lbDogcixcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0LnByZXZlbnREZWZhdWx0KCksXG4gICAgICAgICAgICAgICAgICAgIChhICYmICFpLmNvbGxhcHNpYmxlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignYmVmb3JlQWN0aXZhdGUnLCB0LCBsKSA9PT0gITEgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICgoaS5hY3RpdmUgPSBvID8gITEgOiB0aGlzLmhlYWRlcnMuaW5kZXgobikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuYWN0aXZlID0gYSA/IGUoKSA6IG4pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdG9nZ2xlKGwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcy5yZW1vdmVDbGFzcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndWktYWNjb3JkaW9uLWhlYWRlci1hY3RpdmUgdWktc3RhdGUtYWN0aXZlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuaWNvbnMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbignLnVpLWFjY29yZGlvbi1oZWFkZXItaWNvbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhpLmljb25zLmFjdGl2ZUhlYWRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKGkuaWNvbnMuaGVhZGVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3VpLWNvcm5lci1hbGwnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndWktYWNjb3JkaW9uLWhlYWRlci1hY3RpdmUgdWktc3RhdGUtYWN0aXZlIHVpLWNvcm5lci10b3AnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5pY29ucyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJy51aS1hY2NvcmRpb24taGVhZGVyLWljb24nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKGkuaWNvbnMuaGVhZGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKGkuaWNvbnMuYWN0aXZlSGVhZGVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLm5leHQoKS5hZGRDbGFzcygndWktYWNjb3JkaW9uLWNvbnRlbnQtYWN0aXZlJykpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfdG9nZ2xlOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSB0Lm5ld1BhbmVsLFxuICAgICAgICAgICAgICAgICAgICBzID0gdGhpcy5wcmV2U2hvdy5sZW5ndGggPyB0aGlzLnByZXZTaG93IDogdC5vbGRQYW5lbDtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXZTaG93LmFkZCh0aGlzLnByZXZIaWRlKS5zdG9wKCEwLCAhMCksXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnByZXZTaG93ID0gaSksXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnByZXZIaWRlID0gcyksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5hbmltYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuX2FuaW1hdGUoaSwgcywgdClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKHMuaGlkZSgpLCBpLnNob3coKSwgdGhpcy5fdG9nZ2xlQ29tcGxldGUodCkpLFxuICAgICAgICAgICAgICAgICAgICBzLmF0dHIoeyAnYXJpYS1leHBhbmRlZCc6ICdmYWxzZScsICdhcmlhLWhpZGRlbic6ICd0cnVlJyB9KSxcbiAgICAgICAgICAgICAgICAgICAgcy5wcmV2KCkuYXR0cignYXJpYS1zZWxlY3RlZCcsICdmYWxzZScpLFxuICAgICAgICAgICAgICAgICAgICBpLmxlbmd0aCAmJiBzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzLnByZXYoKS5hdHRyKCd0YWJJbmRleCcsIC0xKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBpLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhlYWRlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAgPT09IGUodGhpcykuYXR0cigndGFiSW5kZXgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigndGFiSW5kZXgnLCAtMSksXG4gICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1leHBhbmRlZCc6ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAnZmFsc2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKHsgJ2FyaWEtc2VsZWN0ZWQnOiAndHJ1ZScsIHRhYkluZGV4OiAwIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9hbmltYXRlOiBmdW5jdGlvbihlLCB0LCBuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEsXG4gICAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgICAgICAgIGggPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBsID0gMCxcbiAgICAgICAgICAgICAgICAgICAgdSA9IGUubGVuZ3RoICYmICghdC5sZW5ndGggfHwgZS5pbmRleCgpIDwgdC5pbmRleCgpKSxcbiAgICAgICAgICAgICAgICAgICAgZCA9IHRoaXMub3B0aW9ucy5hbmltYXRlIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICBjID0gKHUgJiYgZC5kb3duKSB8fCBkLFxuICAgICAgICAgICAgICAgICAgICBwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoLl90b2dnbGVDb21wbGV0ZShuKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgYyAmJiAociA9IGMpLFxuICAgICAgICAgICAgICAgICAgICAnc3RyaW5nJyA9PSB0eXBlb2YgYyAmJiAobyA9IGMpLFxuICAgICAgICAgICAgICAgICAgICAobyA9IG8gfHwgYy5lYXNpbmcgfHwgZC5lYXNpbmcpLFxuICAgICAgICAgICAgICAgICAgICAociA9IHIgfHwgYy5kdXJhdGlvbiB8fCBkLmR1cmF0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgdC5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICgoYSA9IGUuc2hvdygpLm91dGVySGVpZ2h0KCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5hbmltYXRlKGksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlcDogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lm5vdyA9IE1hdGgucm91bmQoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5oaWRlKCkuYW5pbWF0ZShzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IHIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiBvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uKGUsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkubm93ID0gTWF0aC5yb3VuZChlKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JyAhPT0gaS5wcm9wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAobCArPSBpLm5vdylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdjb250ZW50JyAhPT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLm9wdGlvbnMuaGVpZ2h0U3R5bGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoaS5ub3cgPSBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgLSB0Lm91dGVySGVpZ2h0KCkgLSBsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsID0gMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHQuYW5pbWF0ZShpLCByLCBvLCBwKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBlLmFuaW1hdGUocywgciwgbywgcClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF90b2dnbGVDb21wbGV0ZTogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gZS5vbGRQYW5lbDtcbiAgICAgICAgICAgICAgICB0XG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygndWktYWNjb3JkaW9uLWNvbnRlbnQtYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLnByZXYoKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3VpLWNvcm5lci10b3AnKVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3VpLWNvcm5lci1hbGwnKSxcbiAgICAgICAgICAgICAgICAgICAgdC5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICh0LnBhcmVudCgpWzBdLmNsYXNzTmFtZSA9IHQucGFyZW50KClbMF0uY2xhc3NOYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignYWN0aXZhdGUnLCBudWxsLCBlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICBlLnVpQmFja0NvbXBhdCAhPT0gITEgJiZcbiAgICAgICAgICAgICgoZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgIGUuZXh0ZW5kKHQub3B0aW9ucywge1xuICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uOiAhMSxcbiAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGlvbkZpbHRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaHJlZi50b0xvd2VyQ2FzZSgpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHQuX2NyZWF0ZTtcbiAgICAgICAgICAgICAgICB0Ll9jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5uYXZpZ2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHRoaXMuZWxlbWVudC5maW5kKHRoaXMub3B0aW9ucy5oZWFkZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBzLm5leHQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkKG4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCdhJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcih0aGlzLm9wdGlvbnMubmF2aWdhdGlvbkZpbHRlcilbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBhICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5hZGQobikuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmNvbnRhaW5zKHRoaXMsIGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICgodC5vcHRpb25zLmFjdGl2ZSA9IE1hdGguZmxvb3IoaSAvIDIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgITEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKGpRdWVyeSwgalF1ZXJ5LnVpLmFjY29yZGlvbi5wcm90b3R5cGUpLFxuICAgICAgICAgICAgKGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgICBlLmV4dGVuZCh0Lm9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0U3R5bGU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9IZWlnaHQ6ICEwLFxuICAgICAgICAgICAgICAgICAgICBjbGVhclN0eWxlOiAhMSxcbiAgICAgICAgICAgICAgICAgICAgZmlsbFNwYWNlOiAhMSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHQuX2NyZWF0ZSxcbiAgICAgICAgICAgICAgICAgICAgcyA9IHQuX3NldE9wdGlvbjtcbiAgICAgICAgICAgICAgICBlLmV4dGVuZCh0LCB7XG4gICAgICAgICAgICAgICAgICAgIF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMub3B0aW9ucy5oZWlnaHRTdHlsZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmhlaWdodFN0eWxlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVyZ2VIZWlnaHRTdHlsZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF9zZXRPcHRpb246IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICgnYXV0b0hlaWdodCcgPT09IGUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xlYXJTdHlsZScgPT09IGUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmlsbFNwYWNlJyA9PT0gZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5vcHRpb25zLmhlaWdodFN0eWxlID0gdGhpcy5fbWVyZ2VIZWlnaHRTdHlsZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF9tZXJnZUhlaWdodFN0eWxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuZmlsbFNwYWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnZmlsbCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUuY2xlYXJTdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdjb250ZW50J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUuYXV0b0hlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnYXV0bydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkoalF1ZXJ5LCBqUXVlcnkudWkuYWNjb3JkaW9uLnByb3RvdHlwZSksXG4gICAgICAgICAgICAoZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgIGUuZXh0ZW5kKHQub3B0aW9ucy5pY29ucywge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVIZWFkZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlclNlbGVjdGVkOiAndWktaWNvbi10cmlhbmdsZS0xLXMnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciBpID0gdC5fY3JlYXRlSWNvbnM7XG4gICAgICAgICAgICAgICAgdC5fY3JlYXRlSWNvbnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmljb25zICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5vcHRpb25zLmljb25zLmFjdGl2ZUhlYWRlciA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmljb25zLmFjdGl2ZUhlYWRlciB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5pY29ucy5oZWFkZXJTZWxlY3RlZCksXG4gICAgICAgICAgICAgICAgICAgICAgICBpLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKGpRdWVyeSwgalF1ZXJ5LnVpLmFjY29yZGlvbi5wcm90b3R5cGUpLFxuICAgICAgICAgICAgKGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgICB0LmFjdGl2YXRlID0gdC5fYWN0aXZhdGU7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSB0Ll9maW5kQWN0aXZlO1xuICAgICAgICAgICAgICAgIHQuX2ZpbmRBY3RpdmUgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAtMSA9PT0gZSAmJiAoZSA9ICExKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbnVtYmVyJyAhPSB0eXBlb2YgZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoZSA9IHRoaXMuaGVhZGVycy5pbmRleCh0aGlzLmhlYWRlcnMuZmlsdGVyKGUpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLTEgPT09IGUgJiYgKGUgPSAhMSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaS5jYWxsKHRoaXMsIGUpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKGpRdWVyeSwgalF1ZXJ5LnVpLmFjY29yZGlvbi5wcm90b3R5cGUpLFxuICAgICAgICAgICAgKGpRdWVyeS51aS5hY2NvcmRpb24ucHJvdG90eXBlLnJlc2l6ZSA9XG4gICAgICAgICAgICAgICAgalF1ZXJ5LnVpLmFjY29yZGlvbi5wcm90b3R5cGUucmVmcmVzaCksXG4gICAgICAgICAgICAoZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgIGUuZXh0ZW5kKHQub3B0aW9ucywgeyBjaGFuZ2U6IG51bGwsIGNoYW5nZXN0YXJ0OiBudWxsIH0pO1xuICAgICAgICAgICAgICAgIHZhciBpID0gdC5fdHJpZ2dlcjtcbiAgICAgICAgICAgICAgICB0Ll90cmlnZ2VyID0gZnVuY3Rpb24oZSwgdCwgcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5cbiAgICAgICAgICAgICAgICAgICAgICAgID8gKCdiZWZvcmVBY3RpdmF0ZScgPT09IGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKG4gPSBpLmNhbGwodGhpcywgJ2NoYW5nZXN0YXJ0JywgdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkSGVhZGVyOiBzLm9sZEhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZENvbnRlbnQ6IHMub2xkUGFuZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdIZWFkZXI6IHMubmV3SGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q29udGVudDogcy5uZXdQYW5lbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdhY3RpdmF0ZScgPT09IGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG4gPSBpLmNhbGwodGhpcywgJ2NoYW5nZScsIHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZEhlYWRlcjogcy5vbGRIZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRDb250ZW50OiBzLm9sZFBhbmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SGVhZGVyOiBzLm5ld0hlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NvbnRlbnQ6IHMubmV3UGFuZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbilcbiAgICAgICAgICAgICAgICAgICAgICAgIDogITE7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKGpRdWVyeSwgalF1ZXJ5LnVpLmFjY29yZGlvbi5wcm90b3R5cGUpLFxuICAgICAgICAgICAgKGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgICBlLmV4dGVuZCh0Lm9wdGlvbnMsIHsgYW5pbWF0ZTogbnVsbCwgYW5pbWF0ZWQ6ICdzbGlkZScgfSk7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSB0Ll9jcmVhdGU7XG4gICAgICAgICAgICAgICAgdC5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgICAgICAgICBudWxsID09PSBlLmFuaW1hdGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLmFuaW1hdGUgPSBlLmFuaW1hdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc2xpZGUnID09PSBlLmFuaW1hdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gMzAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ2JvdW5jZXNsaWRlJyA9PT0gZS5hbmltYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG93bjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogJ2Vhc2VPdXRCb3VuY2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxZTMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUuYW5pbWF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICExKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkoalF1ZXJ5LCBqUXVlcnkudWkuYWNjb3JkaW9uLnByb3RvdHlwZSkpO1xufSkoalF1ZXJ5KTtcbihmdW5jdGlvbihlKSB7XG4gICAgdmFyIHQgPSAwO1xuICAgIGUud2lkZ2V0KCd1aS5hdXRvY29tcGxldGUnLCB7XG4gICAgICAgIHZlcnNpb246ICcxLjkuMicsXG4gICAgICAgIGRlZmF1bHRFbGVtZW50OiAnPGlucHV0PicsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIGFwcGVuZFRvOiAnYm9keScsXG4gICAgICAgICAgICBhdXRvRm9jdXM6ICExLFxuICAgICAgICAgICAgZGVsYXk6IDMwMCxcbiAgICAgICAgICAgIG1pbkxlbmd0aDogMSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IG15OiAnbGVmdCB0b3AnLCBhdDogJ2xlZnQgYm90dG9tJywgY29sbGlzaW9uOiAnbm9uZScgfSxcbiAgICAgICAgICAgIHNvdXJjZTogbnVsbCxcbiAgICAgICAgICAgIGNoYW5nZTogbnVsbCxcbiAgICAgICAgICAgIGNsb3NlOiBudWxsLFxuICAgICAgICAgICAgZm9jdXM6IG51bGwsXG4gICAgICAgICAgICBvcGVuOiBudWxsLFxuICAgICAgICAgICAgcmVzcG9uc2U6IG51bGwsXG4gICAgICAgICAgICBzZWFyY2g6IG51bGwsXG4gICAgICAgICAgICBzZWxlY3Q6IG51bGwsXG4gICAgICAgIH0sXG4gICAgICAgIHBlbmRpbmc6IDAsXG4gICAgICAgIF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHQsIGksIHM7XG4gICAgICAgICAgICAodGhpcy5pc011bHRpTGluZSA9IHRoaXMuX2lzTXVsdGlMaW5lKCkpLFxuICAgICAgICAgICAgICAgICh0aGlzLnZhbHVlTWV0aG9kID0gdGhpcy5lbGVtZW50W1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuaXMoJ2lucHV0LHRleHRhcmVhJykgPyAndmFsJyA6ICd0ZXh0J1xuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICh0aGlzLmlzTmV3TWVudSA9ICEwKSxcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCd1aS1hdXRvY29tcGxldGUtaW5wdXQnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXV0b2NvbXBsZXRlJywgJ29mZicpLFxuICAgICAgICAgICAgICAgIHRoaXMuX29uKHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgICBrZXlkb3duOiBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50LnByb3AoJ3JlYWRPbmx5JykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0ID0gITApLCAocyA9ICEwKSwgKGkgPSAhMCksIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICh0ID0gITEpLCAocyA9ICExKSwgKGkgPSAhMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGUudWkua2V5Q29kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobi5rZXlDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBhLlBBR0VfVVA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0ID0gITApLCB0aGlzLl9tb3ZlKCdwcmV2aW91c1BhZ2UnLCBuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBhLlBBR0VfRE9XTjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHQgPSAhMCksIHRoaXMuX21vdmUoJ25leHRQYWdlJywgbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgYS5VUDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHQgPSAhMCksIHRoaXMuX2tleUV2ZW50KCdwcmV2aW91cycsIG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGEuRE9XTjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHQgPSAhMCksIHRoaXMuX2tleUV2ZW50KCduZXh0Jywgbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgYS5FTlRFUjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGEuTlVNUEFEX0VOVEVSOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lbnUuYWN0aXZlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKHQgPSAhMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLnByZXZlbnREZWZhdWx0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lbnUuc2VsZWN0KG4pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBhLlRBQjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZW51LmFjdGl2ZSAmJiB0aGlzLm1lbnUuc2VsZWN0KG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGEuRVNDQVBFOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lbnUuZWxlbWVudC5pcygnOnZpc2libGUnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuX3ZhbHVlKHRoaXMudGVybSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKG4pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5wcmV2ZW50RGVmYXVsdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkgPSAhMCksIHRoaXMuX3NlYXJjaFRpbWVvdXQobik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGtleXByZXNzOiBmdW5jdGlvbihzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCkgcmV0dXJuICh0ID0gITEpLCBzLnByZXZlbnREZWZhdWx0KCksIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZS51aS5rZXlDb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocy5rZXlDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugbi5QQUdFX1VQOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW92ZSgncHJldmlvdXNQYWdlJywgcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBuLlBBR0VfRE9XTjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdmUoJ25leHRQYWdlJywgcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBuLlVQOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5RXZlbnQoJ3ByZXZpb3VzJywgcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBuLkRPV046XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlFdmVudCgnbmV4dCcsIHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoKHMgPSAhMSksIGUucHJldmVudERlZmF1bHQoKSwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKHRoaXMuX3NlYXJjaFRpbWVvdXQoZSksIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnNlbGVjdGVkSXRlbSA9IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnByZXZpb3VzID0gdGhpcy5fdmFsdWUoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGJsdXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbmNlbEJsdXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChkZWxldGUgdGhpcy5jYW5jZWxCbHVyLCB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoY2xlYXJUaW1lb3V0KHRoaXMuc2VhcmNoaW5nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2UoZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHRoaXMuX2luaXRTb3VyY2UoKSxcbiAgICAgICAgICAgICAgICAodGhpcy5tZW51ID0gZSgnPHVsPicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygndWktYXV0b2NvbXBsZXRlJylcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5maW5kKHRoaXMub3B0aW9ucy5hcHBlbmRUbyB8fCAnYm9keScpWzBdXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLm1lbnUoeyBpbnB1dDogZSgpLCByb2xlOiBudWxsIH0pXG4gICAgICAgICAgICAgICAgICAgIC56SW5kZXgodGhpcy5lbGVtZW50LnpJbmRleCgpICsgMSlcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuZGF0YSgnbWVudScpKSxcbiAgICAgICAgICAgICAgICB0aGlzLl9vbih0aGlzLm1lbnUuZWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgICBtb3VzZWRvd246IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQucHJldmVudERlZmF1bHQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5jYW5jZWxCbHVyID0gITApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5jYW5jZWxCbHVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLm1lbnUuZWxlbWVudFswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUodC50YXJnZXQpLmNsb3Nlc3QoJy51aS1tZW51LWl0ZW0nKS5sZW5ndGggfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWxheShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50Lm9uZSgnbW91c2Vkb3duJywgZnVuY3Rpb24ocykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy50YXJnZXQgPT09IHQuZWxlbWVudFswXSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMudGFyZ2V0ID09PSBpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5jb250YWlucyhpLCBzLnRhcmdldCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtZW51Zm9jdXM6IGZ1bmN0aW9uKHQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTmV3TWVudSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgodGhpcy5pc05ld01lbnUgPSAhMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5vcmlnaW5hbEV2ZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9ebW91c2UvLnRlc3QodC5vcmlnaW5hbEV2ZW50LnR5cGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVudS5ibHVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQub25lKCdtb3VzZW1vdmUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUodC50YXJnZXQpLnRyaWdnZXIodC5vcmlnaW5hbEV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5pdGVtLmRhdGEoJ3VpLWF1dG9jb21wbGV0ZS1pdGVtJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLml0ZW0uZGF0YSgnaXRlbS5hdXRvY29tcGxldGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICExICE9PSB0aGlzLl90cmlnZ2VyKCdmb2N1cycsIHQsIHsgaXRlbTogcyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdC5vcmlnaW5hbEV2ZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXmtleS8udGVzdCh0Lm9yaWdpbmFsRXZlbnQudHlwZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlKHMudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmxpdmVSZWdpb24udGV4dChzLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbWVudXNlbGVjdDogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lml0ZW0uZGF0YSgndWktYXV0b2NvbXBsZXRlLWl0ZW0nKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lml0ZW0uZGF0YSgnaXRlbS5hdXRvY29tcGxldGUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gdGhpcy5wcmV2aW91cztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudFswXSAhPT0gdGhpcy5kb2N1bWVudFswXS5hY3RpdmVFbGVtZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuZWxlbWVudC5mb2N1cygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnByZXZpb3VzID0gcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnByZXZpb3VzID0gcyksICh0aGlzLnNlbGVjdGVkSXRlbSA9IGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMSAhPT0gdGhpcy5fdHJpZ2dlcignc2VsZWN0JywgZSwgeyBpdGVtOiBpIH0pICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlKGkudmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnRlcm0gPSB0aGlzLl92YWx1ZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnNlbGVjdGVkSXRlbSA9IGkpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICh0aGlzLmxpdmVSZWdpb24gPSBlKCc8c3Bhbj4nLCB7XG4gICAgICAgICAgICAgICAgICAgIHJvbGU6ICdzdGF0dXMnLFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1saXZlJzogJ3BvbGl0ZScsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCd1aS1oZWxwZXItaGlkZGVuLWFjY2Vzc2libGUnKVxuICAgICAgICAgICAgICAgICAgICAuaW5zZXJ0QWZ0ZXIodGhpcy5lbGVtZW50KSksXG4gICAgICAgICAgICAgICAgZS5mbi5iZ2lmcmFtZSAmJiB0aGlzLm1lbnUuZWxlbWVudC5iZ2lmcmFtZSgpLFxuICAgICAgICAgICAgICAgIHRoaXMuX29uKHRoaXMud2luZG93LCB7XG4gICAgICAgICAgICAgICAgICAgIGJlZm9yZXVubG9hZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cignYXV0b2NvbXBsZXRlJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9kZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnNlYXJjaGluZyksXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygndWktYXV0b2NvbXBsZXRlLWlucHV0JylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2F1dG9jb21wbGV0ZScpLFxuICAgICAgICAgICAgICAgIHRoaXMubWVudS5lbGVtZW50LnJlbW92ZSgpLFxuICAgICAgICAgICAgICAgIHRoaXMubGl2ZVJlZ2lvbi5yZW1vdmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NldE9wdGlvbjogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgdGhpcy5fc3VwZXIoZSwgdCksXG4gICAgICAgICAgICAgICAgJ3NvdXJjZScgPT09IGUgJiYgdGhpcy5faW5pdFNvdXJjZSgpLFxuICAgICAgICAgICAgICAgICdhcHBlbmRUbycgPT09IGUgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZW51LmVsZW1lbnQuYXBwZW5kVG8oXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50LmZpbmQodCB8fCAnYm9keScpWzBdXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgJ2Rpc2FibGVkJyA9PT0gZSAmJiB0ICYmIHRoaXMueGhyICYmIHRoaXMueGhyLmFib3J0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9pc011bHRpTGluZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmlzKCd0ZXh0YXJlYScpXG4gICAgICAgICAgICAgICAgPyAhMFxuICAgICAgICAgICAgICAgIDogdGhpcy5lbGVtZW50LmlzKCdpbnB1dCcpXG4gICAgICAgICAgICAgICAgICAgID8gITFcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmVsZW1lbnQucHJvcCgnaXNDb250ZW50RWRpdGFibGUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2luaXRTb3VyY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBzID0gdGhpcztcbiAgICAgICAgICAgIGUuaXNBcnJheSh0aGlzLm9wdGlvbnMuc291cmNlKVxuICAgICAgICAgICAgICAgID8gKCh0ID0gdGhpcy5vcHRpb25zLnNvdXJjZSksXG4gICAgICAgICAgICAgICAgICAodGhpcy5zb3VyY2UgPSBmdW5jdGlvbihpLCBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcyhlLnVpLmF1dG9jb21wbGV0ZS5maWx0ZXIodCwgaS50ZXJtKSk7XG4gICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICA6ICdzdHJpbmcnID09IHR5cGVvZiB0aGlzLm9wdGlvbnMuc291cmNlXG4gICAgICAgICAgICAgICAgICAgID8gKChpID0gdGhpcy5vcHRpb25zLnNvdXJjZSksXG4gICAgICAgICAgICAgICAgICAgICAgKHRoaXMuc291cmNlID0gZnVuY3Rpb24odCwgbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzLnhociAmJiBzLnhoci5hYm9ydCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHMueGhyID0gZS5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbihlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbihbXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgOiAodGhpcy5zb3VyY2UgPSB0aGlzLm9wdGlvbnMuc291cmNlKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NlYXJjaFRpbWVvdXQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnNlYXJjaGluZyksXG4gICAgICAgICAgICAgICAgKHRoaXMuc2VhcmNoaW5nID0gdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGVybSAhPT0gdGhpcy5fdmFsdWUoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKCh0aGlzLnNlbGVjdGVkSXRlbSA9IG51bGwpLCB0aGlzLnNlYXJjaChudWxsLCBlKSk7XG4gICAgICAgICAgICAgICAgfSwgdGhpcy5vcHRpb25zLmRlbGF5KSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNlYXJjaDogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAoZSA9IG51bGwgIT0gZSA/IGUgOiB0aGlzLl92YWx1ZSgpKSxcbiAgICAgICAgICAgICAgICAodGhpcy50ZXJtID0gdGhpcy5fdmFsdWUoKSksXG4gICAgICAgICAgICAgICAgZS5sZW5ndGggPCB0aGlzLm9wdGlvbnMubWluTGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5jbG9zZSh0KVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuX3RyaWdnZXIoJ3NlYXJjaCcsIHQpICE9PSAhMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLl9zZWFyY2goZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBfc2VhcmNoOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB0aGlzLnBlbmRpbmcrKyxcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoJ3VpLWF1dG9jb21wbGV0ZS1sb2FkaW5nJyksXG4gICAgICAgICAgICAgICAgKHRoaXMuY2FuY2VsU2VhcmNoID0gITEpLFxuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlKHsgdGVybTogZSB9LCB0aGlzLl9yZXNwb25zZSgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3Jlc3BvbnNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBlID0gdGhpcyxcbiAgICAgICAgICAgICAgICBpID0gKyt0O1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICAgICAgICBpID09PSB0ICYmIGUuX19yZXNwb25zZShzKSxcbiAgICAgICAgICAgICAgICAgICAgZS5wZW5kaW5nLS0sXG4gICAgICAgICAgICAgICAgICAgIGUucGVuZGluZyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZS5lbGVtZW50LnJlbW92ZUNsYXNzKCd1aS1hdXRvY29tcGxldGUtbG9hZGluZycpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgX19yZXNwb25zZTogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZSAmJiAoZSA9IHRoaXMuX25vcm1hbGl6ZShlKSksXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcigncmVzcG9uc2UnLCBudWxsLCB7IGNvbnRlbnQ6IGUgfSksXG4gICAgICAgICAgICAgICAgIXRoaXMub3B0aW9ucy5kaXNhYmxlZCAmJiBlICYmIGUubGVuZ3RoICYmICF0aGlzLmNhbmNlbFNlYXJjaFxuICAgICAgICAgICAgICAgICAgICA/ICh0aGlzLl9zdWdnZXN0KGUpLCB0aGlzLl90cmlnZ2VyKCdvcGVuJykpXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5fY2xvc2UoKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICh0aGlzLmNhbmNlbFNlYXJjaCA9ICEwKSwgdGhpcy5fY2xvc2UoZSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9jbG9zZTogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdGhpcy5tZW51LmVsZW1lbnQuaXMoJzp2aXNpYmxlJykgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5tZW51LmVsZW1lbnQuaGlkZSgpLFxuICAgICAgICAgICAgICAgIHRoaXMubWVudS5ibHVyKCksXG4gICAgICAgICAgICAgICAgKHRoaXMuaXNOZXdNZW51ID0gITApLFxuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ2Nsb3NlJywgZSkpO1xuICAgICAgICB9LFxuICAgICAgICBfY2hhbmdlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzICE9PSB0aGlzLl92YWx1ZSgpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignY2hhbmdlJywgZSwgeyBpdGVtOiB0aGlzLnNlbGVjdGVkSXRlbSB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgX25vcm1hbGl6ZTogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgcmV0dXJuIHQubGVuZ3RoICYmIHRbMF0ubGFiZWwgJiYgdFswXS52YWx1ZVxuICAgICAgICAgICAgICAgID8gdFxuICAgICAgICAgICAgICAgIDogZS5tYXAodCwgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnc3RyaW5nJyA9PSB0eXBlb2YgdFxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IHsgbGFiZWw6IHQsIHZhbHVlOiB0IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBlLmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHQubGFiZWwgfHwgdC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0LnZhbHVlIHx8IHQubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zdWdnZXN0OiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMubWVudS5lbGVtZW50LmVtcHR5KCkuekluZGV4KHRoaXMuZWxlbWVudC56SW5kZXgoKSArIDEpO1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyTWVudShpLCB0KSxcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnUucmVmcmVzaCgpLFxuICAgICAgICAgICAgICAgIGkuc2hvdygpLFxuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZU1lbnUoKSxcbiAgICAgICAgICAgICAgICBpLnBvc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgICBlLmV4dGVuZCh7IG9mOiB0aGlzLmVsZW1lbnQgfSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmF1dG9Gb2N1cyAmJiB0aGlzLm1lbnUubmV4dCgpO1xuICAgICAgICB9LFxuICAgICAgICBfcmVzaXplTWVudTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMubWVudS5lbGVtZW50O1xuICAgICAgICAgICAgZS5vdXRlcldpZHRoKFxuICAgICAgICAgICAgICAgIE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICBlLndpZHRoKCcnKS5vdXRlcldpZHRoKCkgKyAxLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQub3V0ZXJXaWR0aCgpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3JlbmRlck1lbnU6IGZ1bmN0aW9uKHQsIGkpIHtcbiAgICAgICAgICAgIHZhciBzID0gdGhpcztcbiAgICAgICAgICAgIGUuZWFjaChpLCBmdW5jdGlvbihlLCBpKSB7XG4gICAgICAgICAgICAgICAgcy5fcmVuZGVySXRlbURhdGEodCwgaSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgX3JlbmRlckl0ZW1EYXRhOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVySXRlbShlLCB0KS5kYXRhKCd1aS1hdXRvY29tcGxldGUtaXRlbScsIHQpO1xuICAgICAgICB9LFxuICAgICAgICBfcmVuZGVySXRlbTogZnVuY3Rpb24odCwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIGUoJzxsaT4nKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoZSgnPGE+JykudGV4dChpLmxhYmVsKSlcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8odCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9tb3ZlOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tZW51LmVsZW1lbnQuaXMoJzp2aXNpYmxlJylcbiAgICAgICAgICAgICAgICA/ICh0aGlzLm1lbnUuaXNGaXJzdEl0ZW0oKSAmJiAvXnByZXZpb3VzLy50ZXN0KGUpKSB8fFxuICAgICAgICAgICAgICAgICAgKHRoaXMubWVudS5pc0xhc3RJdGVtKCkgJiYgL15uZXh0Ly50ZXN0KGUpKVxuICAgICAgICAgICAgICAgICAgICA/ICh0aGlzLl92YWx1ZSh0aGlzLnRlcm0pLCB0aGlzLm1lbnUuYmx1cigpLCB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIDogKHRoaXMubWVudVtlXSh0KSwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIDogKHRoaXMuc2VhcmNoKG51bGwsIHQpLCB1bmRlZmluZWQpO1xuICAgICAgICB9LFxuICAgICAgICB3aWRnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVudS5lbGVtZW50O1xuICAgICAgICB9LFxuICAgICAgICBfdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVNZXRob2QuYXBwbHkodGhpcy5lbGVtZW50LCBhcmd1bWVudHMpO1xuICAgICAgICB9LFxuICAgICAgICBfa2V5RXZlbnQ6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICghdGhpcy5pc011bHRpTGluZSB8fCB0aGlzLm1lbnUuZWxlbWVudC5pcygnOnZpc2libGUnKSkgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5fbW92ZShlLCB0KSwgdC5wcmV2ZW50RGVmYXVsdCgpKTtcbiAgICAgICAgfSxcbiAgICB9KSxcbiAgICAgICAgZS5leHRlbmQoZS51aS5hdXRvY29tcGxldGUsIHtcbiAgICAgICAgICAgIGVzY2FwZVJlZ2V4OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUucmVwbGFjZSgvW1xcLVxcW1xcXXt9KCkqKz8uLFxcXFxcXF4kfCNcXHNdL2csICdcXFxcJCYnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uKHQsIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IFJlZ0V4cChlLnVpLmF1dG9jb21wbGV0ZS5lc2NhcGVSZWdleChpKSwgJ2knKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5ncmVwKHQsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMudGVzdChlLmxhYmVsIHx8IGUudmFsdWUgfHwgZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgZS53aWRnZXQoJ3VpLmF1dG9jb21wbGV0ZScsIGUudWkuYXV0b2NvbXBsZXRlLCB7XG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgbm9SZXN1bHRzOiAnTm8gc2VhcmNoIHJlc3VsdHMuJyxcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0czogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZSA+IDEgPyAnIHJlc3VsdHMgYXJlJyA6ICcgcmVzdWx0IGlzJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgYXZhaWxhYmxlLCB1c2UgdXAgYW5kIGRvd24gYXJyb3cga2V5cyB0byBuYXZpZ2F0ZS4nXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX19yZXNwb25zZTogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciB0O1xuICAgICAgICAgICAgICAgIHRoaXMuX3N1cGVyQXBwbHkoYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmRpc2FibGVkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbFNlYXJjaCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKCh0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlICYmIGUubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5vcHRpb25zLm1lc3NhZ2VzLnJlc3VsdHMoZS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5vcHRpb25zLm1lc3NhZ2VzLm5vUmVzdWx0cyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpdmVSZWdpb24udGV4dCh0KSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbn0pKGpRdWVyeSk7XG4oZnVuY3Rpb24oZSkge1xuICAgIHZhciB0LFxuICAgICAgICBpLFxuICAgICAgICBzLFxuICAgICAgICBuLFxuICAgICAgICBhID0gJ3VpLWJ1dHRvbiB1aS13aWRnZXQgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItYWxsJyxcbiAgICAgICAgbyA9ICd1aS1zdGF0ZS1ob3ZlciB1aS1zdGF0ZS1hY3RpdmUgJyxcbiAgICAgICAgciA9XG4gICAgICAgICAgICAndWktYnV0dG9uLWljb25zLW9ubHkgdWktYnV0dG9uLWljb24tb25seSB1aS1idXR0b24tdGV4dC1pY29ucyB1aS1idXR0b24tdGV4dC1pY29uLXByaW1hcnkgdWktYnV0dG9uLXRleHQtaWNvbi1zZWNvbmRhcnkgdWktYnV0dG9uLXRleHQtb25seScsXG4gICAgICAgIGggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0ID0gZSh0aGlzKS5maW5kKCc6dWktYnV0dG9uJyk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHQuYnV0dG9uKCdyZWZyZXNoJyk7XG4gICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgfSxcbiAgICAgICAgbCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciBpID0gdC5uYW1lLFxuICAgICAgICAgICAgICAgIHMgPSB0LmZvcm0sXG4gICAgICAgICAgICAgICAgbiA9IGUoW10pO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBpICYmXG4gICAgICAgICAgICAgICAgICAgIChuID0gc1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBlKHMpLmZpbmQoXCJbbmFtZT0nXCIgKyBpICsgXCInXVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBlKFwiW25hbWU9J1wiICsgaSArIFwiJ11cIiwgdC5vd25lckRvY3VtZW50KS5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMuZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgblxuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcbiAgICBlLndpZGdldCgndWkuYnV0dG9uJywge1xuICAgICAgICB2ZXJzaW9uOiAnMS45LjInLFxuICAgICAgICBkZWZhdWx0RWxlbWVudDogJzxidXR0b24+JyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgZGlzYWJsZWQ6IG51bGwsXG4gICAgICAgICAgICB0ZXh0OiAhMCxcbiAgICAgICAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgICAgICAgaWNvbnM6IHsgcHJpbWFyeTogbnVsbCwgc2Vjb25kYXJ5OiBudWxsIH0sXG4gICAgICAgIH0sXG4gICAgICAgIF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50XG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoJ2Zvcm0nKVxuICAgICAgICAgICAgICAgIC51bmJpbmQoJ3Jlc2V0JyArIHRoaXMuZXZlbnROYW1lc3BhY2UpXG4gICAgICAgICAgICAgICAgLmJpbmQoJ3Jlc2V0JyArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGgpLFxuICAgICAgICAgICAgICAgICdib29sZWFuJyAhPSB0eXBlb2YgdGhpcy5vcHRpb25zLmRpc2FibGVkXG4gICAgICAgICAgICAgICAgICAgID8gKHRoaXMub3B0aW9ucy5kaXNhYmxlZCA9ICEhdGhpcy5lbGVtZW50LnByb3AoJ2Rpc2FibGVkJykpXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5lbGVtZW50LnByb3AoJ2Rpc2FibGVkJywgdGhpcy5vcHRpb25zLmRpc2FibGVkKSxcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXRlcm1pbmVCdXR0b25UeXBlKCksXG4gICAgICAgICAgICAgICAgKHRoaXMuaGFzVGl0bGUgPSAhIXRoaXMuYnV0dG9uRWxlbWVudC5hdHRyKCd0aXRsZScpKTtcbiAgICAgICAgICAgIHZhciBvID0gdGhpcyxcbiAgICAgICAgICAgICAgICByID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgIHUgPSAnY2hlY2tib3gnID09PSB0aGlzLnR5cGUgfHwgJ3JhZGlvJyA9PT0gdGhpcy50eXBlLFxuICAgICAgICAgICAgICAgIGQgPSB1ID8gJycgOiAndWktc3RhdGUtYWN0aXZlJyxcbiAgICAgICAgICAgICAgICBjID0gJ3VpLXN0YXRlLWZvY3VzJztcbiAgICAgICAgICAgIG51bGwgPT09IHIubGFiZWwgJiZcbiAgICAgICAgICAgICAgICAoci5sYWJlbCA9XG4gICAgICAgICAgICAgICAgICAgICdpbnB1dCcgPT09IHRoaXMudHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmJ1dHRvbkVsZW1lbnQudmFsKClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5idXR0b25FbGVtZW50Lmh0bWwoKSksXG4gICAgICAgICAgICAgICAgdGhpcy5faG92ZXJhYmxlKHRoaXMuYnV0dG9uRWxlbWVudCksXG4gICAgICAgICAgICAgICAgdGhpcy5idXR0b25FbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhhKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigncm9sZScsICdidXR0b24nKVxuICAgICAgICAgICAgICAgICAgICAuYmluZCgnbW91c2VlbnRlcicgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuZGlzYWJsZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyA9PT0gdCAmJiBlKHRoaXMpLmFkZENsYXNzKCd1aS1zdGF0ZS1hY3RpdmUnKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5iaW5kKCdtb3VzZWxlYXZlJyArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgci5kaXNhYmxlZCB8fCBlKHRoaXMpLnJlbW92ZUNsYXNzKGQpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuYmluZCgnY2xpY2snICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgci5kaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlLnByZXZlbnREZWZhdWx0KCksIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkpO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLmJpbmQoJ2ZvY3VzJyArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgby5idXR0b25FbGVtZW50LmFkZENsYXNzKGMpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuYmluZCgnYmx1cicgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uYnV0dG9uRWxlbWVudC5yZW1vdmVDbGFzcyhjKTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdSAmJlxuICAgICAgICAgICAgICAgICAgICAodGhpcy5lbGVtZW50LmJpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2hhbmdlJyArIHRoaXMuZXZlbnROYW1lc3BhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuIHx8IG8ucmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvbkVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5iaW5kKCdtb3VzZWRvd24nICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuZGlzYWJsZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChuID0gITEpLCAoaSA9IGUucGFnZVgpLCAocyA9IGUucGFnZVkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuYmluZCgnbW91c2V1cCcgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgci5kaXNhYmxlZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGkgIT09IGUucGFnZVggfHwgcyAhPT0gZS5wYWdlWSkgJiYgKG4gPSAhMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgICdjaGVja2JveCcgPT09IHRoaXMudHlwZVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuYnV0dG9uRWxlbWVudC5iaW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xpY2snICsgdGhpcy5ldmVudE5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5kaXNhYmxlZCB8fCBuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAhMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKGUodGhpcykudG9nZ2xlQ2xhc3MoJ3VpLXN0YXRlLWFjdGl2ZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5idXR0b25FbGVtZW50LmF0dHIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtcHJlc3NlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5lbGVtZW50WzBdLmNoZWNrZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICA6ICdyYWRpbycgPT09IHRoaXMudHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmJ1dHRvbkVsZW1lbnQuYmluZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjbGljaycgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIuZGlzYWJsZWQgfHwgbikgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUodGhpcykuYWRkQ2xhc3MoJ3VpLXN0YXRlLWFjdGl2ZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLmJ1dHRvbkVsZW1lbnQuYXR0cihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhcmlhLXByZXNzZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RydWUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBvLmVsZW1lbnRbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCh0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubm90KHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSh0aGlzKS5idXR0b24oJ3dpZGdldCcpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3VpLXN0YXRlLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLXByZXNzZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAodGhpcy5idXR0b25FbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYmluZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbW91c2Vkb3duJyArIHRoaXMuZXZlbnROYW1lc3BhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByLmRpc2FibGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICExXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IChlKHRoaXMpLmFkZENsYXNzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VpLXN0YXRlLWFjdGl2ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHQgPSB0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5kb2N1bWVudC5vbmUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbW91c2V1cCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYmluZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbW91c2V1cCcgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5kaXNhYmxlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAhMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoZSh0aGlzKS5yZW1vdmVDbGFzcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1aS1zdGF0ZS1hY3RpdmUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmJpbmQoJ2tleWRvd24nICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZnVuY3Rpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIuZGlzYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAhMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgodC5rZXlDb2RlID09PSBlLnVpLmtleUNvZGUuU1BBQ0UgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5rZXlDb2RlID09PSBlLnVpLmtleUNvZGUuRU5URVIpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUodGhpcykuYWRkQ2xhc3MoJ3VpLXN0YXRlLWFjdGl2ZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmJpbmQoJ2tleXVwJyArIHRoaXMuZXZlbnROYW1lc3BhY2UsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUodGhpcykucmVtb3ZlQ2xhc3MoJ3VpLXN0YXRlLWFjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uRWxlbWVudC5pcygnYScpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvbkVsZW1lbnQua2V5dXAoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQua2V5Q29kZSA9PT0gZS51aS5rZXlDb2RlLlNQQUNFICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUodGhpcykuY2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ2Rpc2FibGVkJywgci5kaXNhYmxlZCksXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzZXRCdXR0b24oKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2RldGVybWluZUJ1dHRvblR5cGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGUsIHQsIGk7XG4gICAgICAgICAgICAodGhpcy50eXBlID0gdGhpcy5lbGVtZW50LmlzKCdbdHlwZT1jaGVja2JveF0nKVxuICAgICAgICAgICAgICAgID8gJ2NoZWNrYm94J1xuICAgICAgICAgICAgICAgIDogdGhpcy5lbGVtZW50LmlzKCdbdHlwZT1yYWRpb10nKVxuICAgICAgICAgICAgICAgICAgICA/ICdyYWRpbydcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmVsZW1lbnQuaXMoJ2lucHV0JylcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ2lucHV0J1xuICAgICAgICAgICAgICAgICAgICAgICAgOiAnYnV0dG9uJyksXG4gICAgICAgICAgICAgICAgJ2NoZWNrYm94JyA9PT0gdGhpcy50eXBlIHx8ICdyYWRpbycgPT09IHRoaXMudHlwZVxuICAgICAgICAgICAgICAgICAgICA/ICgoZSA9IHRoaXMuZWxlbWVudC5wYXJlbnRzKCkubGFzdCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAodCA9IFwibGFiZWxbZm9yPSdcIiArIHRoaXMuZWxlbWVudC5hdHRyKCdpZCcpICsgXCInXVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAodGhpcy5idXR0b25FbGVtZW50ID0gZS5maW5kKHQpKSxcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvbkVsZW1lbnQubGVuZ3RoIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICgoZSA9IGUubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGUuc2libGluZ3MoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmVsZW1lbnQuc2libGluZ3MoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmJ1dHRvbkVsZW1lbnQgPSBlLmZpbHRlcih0KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uRWxlbWVudC5sZW5ndGggfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmJ1dHRvbkVsZW1lbnQgPSBlLmZpbmQodCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoJ3VpLWhlbHBlci1oaWRkZW4tYWNjZXNzaWJsZScpLFxuICAgICAgICAgICAgICAgICAgICAgIChpID0gdGhpcy5lbGVtZW50LmlzKCc6Y2hlY2tlZCcpKSxcbiAgICAgICAgICAgICAgICAgICAgICBpICYmIHRoaXMuYnV0dG9uRWxlbWVudC5hZGRDbGFzcygndWktc3RhdGUtYWN0aXZlJyksXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5idXR0b25FbGVtZW50LnByb3AoJ2FyaWEtcHJlc3NlZCcsIGkpKVxuICAgICAgICAgICAgICAgICAgICA6ICh0aGlzLmJ1dHRvbkVsZW1lbnQgPSB0aGlzLmVsZW1lbnQpO1xuICAgICAgICB9LFxuICAgICAgICB3aWRnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnV0dG9uRWxlbWVudDtcbiAgICAgICAgfSxcbiAgICAgICAgX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKCd1aS1oZWxwZXItaGlkZGVuLWFjY2Vzc2libGUnKSxcbiAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvbkVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKGEgKyAnICcgKyBvICsgJyAnICsgcilcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ3JvbGUnKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1wcmVzc2VkJylcbiAgICAgICAgICAgICAgICAgICAgLmh0bWwodGhpcy5idXR0b25FbGVtZW50LmZpbmQoJy51aS1idXR0b24tdGV4dCcpLmh0bWwoKSksXG4gICAgICAgICAgICAgICAgdGhpcy5oYXNUaXRsZSB8fCB0aGlzLmJ1dHRvbkVsZW1lbnQucmVtb3ZlQXR0cigndGl0bGUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NldE9wdGlvbjogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICB0aGlzLl9zdXBlcihlLCB0KSxcbiAgICAgICAgICAgICAgICAnZGlzYWJsZWQnID09PSBlXG4gICAgICAgICAgICAgICAgICAgID8gKHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmVsZW1lbnQucHJvcCgnZGlzYWJsZWQnLCAhMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmVsZW1lbnQucHJvcCgnZGlzYWJsZWQnLCAhMSksXG4gICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICA6ICh0aGlzLl9yZXNldEJ1dHRvbigpLCB1bmRlZmluZWQpXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICByZWZyZXNoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0ID0gdGhpcy5lbGVtZW50LmlzKCdpbnB1dCwgYnV0dG9uJylcbiAgICAgICAgICAgICAgICA/IHRoaXMuZWxlbWVudC5pcygnOmRpc2FibGVkJylcbiAgICAgICAgICAgICAgICA6IHRoaXMuZWxlbWVudC5oYXNDbGFzcygndWktYnV0dG9uLWRpc2FibGVkJyk7XG4gICAgICAgICAgICB0ICE9PSB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgJiYgdGhpcy5fc2V0T3B0aW9uKCdkaXNhYmxlZCcsIHQpLFxuICAgICAgICAgICAgICAgICdyYWRpbycgPT09IHRoaXMudHlwZVxuICAgICAgICAgICAgICAgICAgICA/IGwodGhpcy5lbGVtZW50WzBdKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBlKHRoaXMpLmlzKCc6Y2hlY2tlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGUodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5idXR0b24oJ3dpZGdldCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3VpLXN0YXRlLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1wcmVzc2VkJywgJ3RydWUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBlKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYnV0dG9uKCd3aWRnZXQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCd1aS1zdGF0ZS1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtcHJlc3NlZCcsICdmYWxzZScpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIDogJ2NoZWNrYm94JyA9PT0gdGhpcy50eXBlICYmXG4gICAgICAgICAgICAgICAgICAgICAgKHRoaXMuZWxlbWVudC5pcygnOmNoZWNrZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuYnV0dG9uRWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3VpLXN0YXRlLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLXByZXNzZWQnLCAndHJ1ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5idXR0b25FbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygndWktc3RhdGUtYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtcHJlc3NlZCcsICdmYWxzZScpKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3Jlc2V0QnV0dG9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICgnaW5wdXQnID09PSB0aGlzLnR5cGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmxhYmVsICYmIHRoaXMuZWxlbWVudC52YWwodGhpcy5vcHRpb25zLmxhYmVsKSxcbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHZhciB0ID0gdGhpcy5idXR0b25FbGVtZW50LnJlbW92ZUNsYXNzKHIpLFxuICAgICAgICAgICAgICAgIGkgPSBlKCc8c3Bhbj48L3NwYW4+JywgdGhpcy5kb2N1bWVudFswXSlcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCd1aS1idXR0b24tdGV4dCcpXG4gICAgICAgICAgICAgICAgICAgIC5odG1sKHRoaXMub3B0aW9ucy5sYWJlbClcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKHQuZW1wdHkoKSlcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoKSxcbiAgICAgICAgICAgICAgICBzID0gdGhpcy5vcHRpb25zLmljb25zLFxuICAgICAgICAgICAgICAgIG4gPSBzLnByaW1hcnkgJiYgcy5zZWNvbmRhcnksXG4gICAgICAgICAgICAgICAgYSA9IFtdO1xuICAgICAgICAgICAgcy5wcmltYXJ5IHx8IHMuc2Vjb25kYXJ5XG4gICAgICAgICAgICAgICAgPyAodGhpcy5vcHRpb25zLnRleHQgJiZcbiAgICAgICAgICAgICAgICAgICAgICBhLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd1aS1idXR0b24tdGV4dC1pY29uJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobiA/ICdzJyA6IHMucHJpbWFyeSA/ICctcHJpbWFyeScgOiAnLXNlY29uZGFyeScpXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIHMucHJpbWFyeSAmJlxuICAgICAgICAgICAgICAgICAgICAgIHQucHJlcGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCI8c3BhbiBjbGFzcz0ndWktYnV0dG9uLWljb24tcHJpbWFyeSB1aS1pY29uIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMucHJpbWFyeSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIic+PC9zcGFuPlwiXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIHMuc2Vjb25kYXJ5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgdC5hcHBlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiPHNwYW4gY2xhc3M9J3VpLWJ1dHRvbi1pY29uLXNlY29uZGFyeSB1aS1pY29uIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuc2Vjb25kYXJ5ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiJz48L3NwYW4+XCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnRleHQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAoYS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuID8gJ3VpLWJ1dHRvbi1pY29ucy1vbmx5JyA6ICd1aS1idXR0b24taWNvbi1vbmx5J1xuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYXNUaXRsZSB8fCB0LmF0dHIoJ3RpdGxlJywgZS50cmltKGkpKSkpXG4gICAgICAgICAgICAgICAgOiBhLnB1c2goJ3VpLWJ1dHRvbi10ZXh0LW9ubHknKSxcbiAgICAgICAgICAgICAgICB0LmFkZENsYXNzKGEuam9pbignICcpKTtcbiAgICAgICAgfSxcbiAgICB9KSxcbiAgICAgICAgZS53aWRnZXQoJ3VpLmJ1dHRvbnNldCcsIHtcbiAgICAgICAgICAgIHZlcnNpb246ICcxLjkuMicsXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgaXRlbXM6XG4gICAgICAgICAgICAgICAgICAgICdidXR0b24sIGlucHV0W3R5cGU9YnV0dG9uXSwgaW5wdXRbdHlwZT1zdWJtaXRdLCBpbnB1dFt0eXBlPXJlc2V0XSwgaW5wdXRbdHlwZT1jaGVja2JveF0sIGlucHV0W3R5cGU9cmFkaW9dLCBhLCA6ZGF0YShidXR0b24pJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY3JlYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoJ3VpLWJ1dHRvbnNldCcpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2V0T3B0aW9uOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgICAgJ2Rpc2FibGVkJyA9PT0gZSAmJiB0aGlzLmJ1dHRvbnMuYnV0dG9uKCdvcHRpb24nLCBlLCB0KSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3VwZXIoZSwgdCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVmcmVzaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSAncnRsJyA9PT0gdGhpcy5lbGVtZW50LmNzcygnZGlyZWN0aW9uJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5idXR0b25zID0gdGhpcy5lbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIC5maW5kKHRoaXMub3B0aW9ucy5pdGVtcylcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcignOnVpLWJ1dHRvbicpXG4gICAgICAgICAgICAgICAgICAgIC5idXR0b24oJ3JlZnJlc2gnKVxuICAgICAgICAgICAgICAgICAgICAuZW5kKClcbiAgICAgICAgICAgICAgICAgICAgLm5vdCgnOnVpLWJ1dHRvbicpXG4gICAgICAgICAgICAgICAgICAgIC5idXR0b24oKVxuICAgICAgICAgICAgICAgICAgICAuZW5kKClcbiAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlKHRoaXMpLmJ1dHRvbignd2lkZ2V0JylbMF07XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygndWktY29ybmVyLWFsbCB1aS1jb3JuZXItbGVmdCB1aS1jb3JuZXItcmlnaHQnKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKCc6Zmlyc3QnKVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3ModCA/ICd1aS1jb3JuZXItcmlnaHQnIDogJ3VpLWNvcm5lci1sZWZ0JylcbiAgICAgICAgICAgICAgICAgICAgLmVuZCgpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoJzpsYXN0JylcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKHQgPyAndWktY29ybmVyLWxlZnQnIDogJ3VpLWNvcm5lci1yaWdodCcpXG4gICAgICAgICAgICAgICAgICAgIC5lbmQoKVxuICAgICAgICAgICAgICAgICAgICAuZW5kKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcygndWktYnV0dG9uc2V0JyksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSh0aGlzKS5idXR0b24oJ3dpZGdldCcpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygndWktY29ybmVyLWxlZnQgdWktY29ybmVyLXJpZ2h0JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lbmQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmJ1dHRvbignZGVzdHJveScpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG59KShqUXVlcnkpO1xuKGZ1bmN0aW9uKCQsIHVuZGVmaW5lZCkge1xuICAgIGZ1bmN0aW9uIERhdGVwaWNrZXIoKSB7XG4gICAgICAgICh0aGlzLmRlYnVnID0gITEpLFxuICAgICAgICAgICAgKHRoaXMuX2N1ckluc3QgPSBudWxsKSxcbiAgICAgICAgICAgICh0aGlzLl9rZXlFdmVudCA9ICExKSxcbiAgICAgICAgICAgICh0aGlzLl9kaXNhYmxlZElucHV0cyA9IFtdKSxcbiAgICAgICAgICAgICh0aGlzLl9kYXRlcGlja2VyU2hvd2luZyA9ICExKSxcbiAgICAgICAgICAgICh0aGlzLl9pbkRpYWxvZyA9ICExKSxcbiAgICAgICAgICAgICh0aGlzLl9tYWluRGl2SWQgPSAndWktZGF0ZXBpY2tlci1kaXYnKSxcbiAgICAgICAgICAgICh0aGlzLl9pbmxpbmVDbGFzcyA9ICd1aS1kYXRlcGlja2VyLWlubGluZScpLFxuICAgICAgICAgICAgKHRoaXMuX2FwcGVuZENsYXNzID0gJ3VpLWRhdGVwaWNrZXItYXBwZW5kJyksXG4gICAgICAgICAgICAodGhpcy5fdHJpZ2dlckNsYXNzID0gJ3VpLWRhdGVwaWNrZXItdHJpZ2dlcicpLFxuICAgICAgICAgICAgKHRoaXMuX2RpYWxvZ0NsYXNzID0gJ3VpLWRhdGVwaWNrZXItZGlhbG9nJyksXG4gICAgICAgICAgICAodGhpcy5fZGlzYWJsZUNsYXNzID0gJ3VpLWRhdGVwaWNrZXItZGlzYWJsZWQnKSxcbiAgICAgICAgICAgICh0aGlzLl91bnNlbGVjdGFibGVDbGFzcyA9ICd1aS1kYXRlcGlja2VyLXVuc2VsZWN0YWJsZScpLFxuICAgICAgICAgICAgKHRoaXMuX2N1cnJlbnRDbGFzcyA9ICd1aS1kYXRlcGlja2VyLWN1cnJlbnQtZGF5JyksXG4gICAgICAgICAgICAodGhpcy5fZGF5T3ZlckNsYXNzID0gJ3VpLWRhdGVwaWNrZXItZGF5cy1jZWxsLW92ZXInKSxcbiAgICAgICAgICAgICh0aGlzLnJlZ2lvbmFsID0gW10pLFxuICAgICAgICAgICAgKHRoaXMucmVnaW9uYWxbJyddID0ge1xuICAgICAgICAgICAgICAgIGNsb3NlVGV4dDogJ0RvbmUnLFxuICAgICAgICAgICAgICAgIHByZXZUZXh0OiAnUHJldicsXG4gICAgICAgICAgICAgICAgbmV4dFRleHQ6ICdOZXh0JyxcbiAgICAgICAgICAgICAgICBjdXJyZW50VGV4dDogJ1RvZGF5JyxcbiAgICAgICAgICAgICAgICBtb250aE5hbWVzOiBbXG4gICAgICAgICAgICAgICAgICAgICdKYW51YXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgJ0ZlYnJ1YXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgJ01hcmNoJyxcbiAgICAgICAgICAgICAgICAgICAgJ0FwcmlsJyxcbiAgICAgICAgICAgICAgICAgICAgJ01heScsXG4gICAgICAgICAgICAgICAgICAgICdKdW5lJyxcbiAgICAgICAgICAgICAgICAgICAgJ0p1bHknLFxuICAgICAgICAgICAgICAgICAgICAnQXVndXN0JyxcbiAgICAgICAgICAgICAgICAgICAgJ1NlcHRlbWJlcicsXG4gICAgICAgICAgICAgICAgICAgICdPY3RvYmVyJyxcbiAgICAgICAgICAgICAgICAgICAgJ05vdmVtYmVyJyxcbiAgICAgICAgICAgICAgICAgICAgJ0RlY2VtYmVyJyxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIG1vbnRoTmFtZXNTaG9ydDogW1xuICAgICAgICAgICAgICAgICAgICAnSmFuJyxcbiAgICAgICAgICAgICAgICAgICAgJ0ZlYicsXG4gICAgICAgICAgICAgICAgICAgICdNYXInLFxuICAgICAgICAgICAgICAgICAgICAnQXByJyxcbiAgICAgICAgICAgICAgICAgICAgJ01heScsXG4gICAgICAgICAgICAgICAgICAgICdKdW4nLFxuICAgICAgICAgICAgICAgICAgICAnSnVsJyxcbiAgICAgICAgICAgICAgICAgICAgJ0F1ZycsXG4gICAgICAgICAgICAgICAgICAgICdTZXAnLFxuICAgICAgICAgICAgICAgICAgICAnT2N0JyxcbiAgICAgICAgICAgICAgICAgICAgJ05vdicsXG4gICAgICAgICAgICAgICAgICAgICdEZWMnLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgZGF5TmFtZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ1N1bmRheScsXG4gICAgICAgICAgICAgICAgICAgICdNb25kYXknLFxuICAgICAgICAgICAgICAgICAgICAnVHVlc2RheScsXG4gICAgICAgICAgICAgICAgICAgICdXZWRuZXNkYXknLFxuICAgICAgICAgICAgICAgICAgICAnVGh1cnNkYXknLFxuICAgICAgICAgICAgICAgICAgICAnRnJpZGF5JyxcbiAgICAgICAgICAgICAgICAgICAgJ1NhdHVyZGF5JyxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGRheU5hbWVzU2hvcnQ6IFtcbiAgICAgICAgICAgICAgICAgICAgJ1N1bicsXG4gICAgICAgICAgICAgICAgICAgICdNb24nLFxuICAgICAgICAgICAgICAgICAgICAnVHVlJyxcbiAgICAgICAgICAgICAgICAgICAgJ1dlZCcsXG4gICAgICAgICAgICAgICAgICAgICdUaHUnLFxuICAgICAgICAgICAgICAgICAgICAnRnJpJyxcbiAgICAgICAgICAgICAgICAgICAgJ1NhdCcsXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBkYXlOYW1lc01pbjogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICAgICAgICAgICAgICAgIHdlZWtIZWFkZXI6ICdXaycsXG4gICAgICAgICAgICAgICAgZGF0ZUZvcm1hdDogJ21tL2RkL3l5JyxcbiAgICAgICAgICAgICAgICBmaXJzdERheTogMCxcbiAgICAgICAgICAgICAgICBpc1JUTDogITEsXG4gICAgICAgICAgICAgICAgc2hvd01vbnRoQWZ0ZXJZZWFyOiAhMSxcbiAgICAgICAgICAgICAgICB5ZWFyU3VmZml4OiAnJyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKHRoaXMuX2RlZmF1bHRzID0ge1xuICAgICAgICAgICAgICAgIHNob3dPbjogJ2ZvY3VzJyxcbiAgICAgICAgICAgICAgICBzaG93QW5pbTogJ2ZhZGVJbicsXG4gICAgICAgICAgICAgICAgc2hvd09wdGlvbnM6IHt9LFxuICAgICAgICAgICAgICAgIGRlZmF1bHREYXRlOiBudWxsLFxuICAgICAgICAgICAgICAgIGFwcGVuZFRleHQ6ICcnLFxuICAgICAgICAgICAgICAgIGJ1dHRvblRleHQ6ICcuLi4nLFxuICAgICAgICAgICAgICAgIGJ1dHRvbkltYWdlOiAnJyxcbiAgICAgICAgICAgICAgICBidXR0b25JbWFnZU9ubHk6ICExLFxuICAgICAgICAgICAgICAgIGhpZGVJZk5vUHJldk5leHQ6ICExLFxuICAgICAgICAgICAgICAgIG5hdmlnYXRpb25Bc0RhdGVGb3JtYXQ6ICExLFxuICAgICAgICAgICAgICAgIGdvdG9DdXJyZW50OiAhMSxcbiAgICAgICAgICAgICAgICBjaGFuZ2VNb250aDogITEsXG4gICAgICAgICAgICAgICAgY2hhbmdlWWVhcjogITEsXG4gICAgICAgICAgICAgICAgeWVhclJhbmdlOiAnYy0xMDpjKzEwJyxcbiAgICAgICAgICAgICAgICBzaG93T3RoZXJNb250aHM6ICExLFxuICAgICAgICAgICAgICAgIHNlbGVjdE90aGVyTW9udGhzOiAhMSxcbiAgICAgICAgICAgICAgICBzaG93V2VlazogITEsXG4gICAgICAgICAgICAgICAgY2FsY3VsYXRlV2VlazogdGhpcy5pc284NjAxV2VlayxcbiAgICAgICAgICAgICAgICBzaG9ydFllYXJDdXRvZmY6ICcrMTAnLFxuICAgICAgICAgICAgICAgIG1pbkRhdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgbWF4RGF0ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogJ2Zhc3QnLFxuICAgICAgICAgICAgICAgIGJlZm9yZVNob3dEYXk6IG51bGwsXG4gICAgICAgICAgICAgICAgYmVmb3JlU2hvdzogbnVsbCxcbiAgICAgICAgICAgICAgICBvblNlbGVjdDogbnVsbCxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZU1vbnRoWWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICBvbkNsb3NlOiBudWxsLFxuICAgICAgICAgICAgICAgIG51bWJlck9mTW9udGhzOiAxLFxuICAgICAgICAgICAgICAgIHNob3dDdXJyZW50QXRQb3M6IDAsXG4gICAgICAgICAgICAgICAgc3RlcE1vbnRoczogMSxcbiAgICAgICAgICAgICAgICBzdGVwQmlnTW9udGhzOiAxMixcbiAgICAgICAgICAgICAgICBhbHRGaWVsZDogJycsXG4gICAgICAgICAgICAgICAgYWx0Rm9ybWF0OiAnJyxcbiAgICAgICAgICAgICAgICBjb25zdHJhaW5JbnB1dDogITAsXG4gICAgICAgICAgICAgICAgc2hvd0J1dHRvblBhbmVsOiAhMSxcbiAgICAgICAgICAgICAgICBhdXRvU2l6ZTogITEsXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6ICExLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAkLmV4dGVuZCh0aGlzLl9kZWZhdWx0cywgdGhpcy5yZWdpb25hbFsnJ10pLFxuICAgICAgICAgICAgKHRoaXMuZHBEaXYgPSBiaW5kSG92ZXIoXG4gICAgICAgICAgICAgICAgJChcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgaWQ9XCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21haW5EaXZJZCArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXCIgY2xhc3M9XCJ1aS1kYXRlcGlja2VyIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1oZWxwZXItY2xlYXJmaXggdWktY29ybmVyLWFsbFwiPjwvZGl2PidcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmluZEhvdmVyKGUpIHtcbiAgICAgICAgdmFyIHQgPVxuICAgICAgICAgICAgJ2J1dHRvbiwgLnVpLWRhdGVwaWNrZXItcHJldiwgLnVpLWRhdGVwaWNrZXItbmV4dCwgLnVpLWRhdGVwaWNrZXItY2FsZW5kYXIgdGQgYSc7XG4gICAgICAgIHJldHVybiBlXG4gICAgICAgICAgICAuZGVsZWdhdGUodCwgJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygndWktc3RhdGUtaG92ZXInKSxcbiAgICAgICAgICAgICAgICAgICAgLTEgIT0gdGhpcy5jbGFzc05hbWUuaW5kZXhPZigndWktZGF0ZXBpY2tlci1wcmV2JykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ3VpLWRhdGVwaWNrZXItcHJldi1ob3ZlcicpLFxuICAgICAgICAgICAgICAgICAgICAtMSAhPSB0aGlzLmNsYXNzTmFtZS5pbmRleE9mKCd1aS1kYXRlcGlja2VyLW5leHQnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygndWktZGF0ZXBpY2tlci1uZXh0LWhvdmVyJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmRlbGVnYXRlKHQsICdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIuX2lzRGlzYWJsZWREYXRlcGlja2VyKFxuICAgICAgICAgICAgICAgICAgICBpbnN0QWN0aXZlLmlubGluZSA/IGUucGFyZW50KClbMF0gOiBpbnN0QWN0aXZlLmlucHV0WzBdXG4gICAgICAgICAgICAgICAgKSB8fFxuICAgICAgICAgICAgICAgICAgICAoJCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudHMoJy51aS1kYXRlcGlja2VyLWNhbGVuZGFyJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCdhJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygndWktc3RhdGUtaG92ZXInKSxcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygndWktc3RhdGUtaG92ZXInKSxcbiAgICAgICAgICAgICAgICAgICAgLTEgIT0gdGhpcy5jbGFzc05hbWUuaW5kZXhPZigndWktZGF0ZXBpY2tlci1wcmV2JykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ3VpLWRhdGVwaWNrZXItcHJldi1ob3ZlcicpLFxuICAgICAgICAgICAgICAgICAgICAtMSAhPSB0aGlzLmNsYXNzTmFtZS5pbmRleE9mKCd1aS1kYXRlcGlja2VyLW5leHQnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygndWktZGF0ZXBpY2tlci1uZXh0LWhvdmVyJykpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGV4dGVuZFJlbW92ZShlLCB0KSB7XG4gICAgICAgICQuZXh0ZW5kKGUsIHQpO1xuICAgICAgICBmb3IgKHZhciBpIGluIHQpIChudWxsID09IHRbaV0gfHwgdFtpXSA9PSB1bmRlZmluZWQpICYmIChlW2ldID0gdFtpXSk7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICAkLmV4dGVuZCgkLnVpLCB7IGRhdGVwaWNrZXI6IHsgdmVyc2lvbjogJzEuOS4yJyB9IH0pO1xuICAgIHZhciBQUk9QX05BTUUgPSAnZGF0ZXBpY2tlcicsXG4gICAgICAgIGRwdXVpZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgICAgICBpbnN0QWN0aXZlO1xuICAgICQuZXh0ZW5kKERhdGVwaWNrZXIucHJvdG90eXBlLCB7XG4gICAgICAgIG1hcmtlckNsYXNzTmFtZTogJ2hhc0RhdGVwaWNrZXInLFxuICAgICAgICBtYXhSb3dzOiA0LFxuICAgICAgICBsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5kZWJ1ZyAmJiBjb25zb2xlLmxvZy5hcHBseSgnJywgYXJndW1lbnRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3dpZGdldERhdGVwaWNrZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHBEaXY7XG4gICAgICAgIH0sXG4gICAgICAgIHNldERlZmF1bHRzOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gZXh0ZW5kUmVtb3ZlKHRoaXMuX2RlZmF1bHRzLCBlIHx8IHt9KSwgdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgX2F0dGFjaERhdGVwaWNrZXI6IGZ1bmN0aW9uKHRhcmdldCwgc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHZhciBpbmxpbmVTZXR0aW5ncyA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKHZhciBhdHRyTmFtZSBpbiB0aGlzLl9kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyVmFsdWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRlOicgKyBhdHRyTmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHJWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpbmxpbmVTZXR0aW5ncyA9IGlubGluZVNldHRpbmdzIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5lU2V0dGluZ3NbYXR0ck5hbWVdID0gZXZhbChhdHRyVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlubGluZVNldHRpbmdzW2F0dHJOYW1lXSA9IGF0dHJWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBub2RlTmFtZSA9IHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgIGlubGluZSA9ICdkaXYnID09IG5vZGVOYW1lIHx8ICdzcGFuJyA9PSBub2RlTmFtZTtcbiAgICAgICAgICAgIHRhcmdldC5pZCB8fCAoKHRoaXMudXVpZCArPSAxKSwgKHRhcmdldC5pZCA9ICdkcCcgKyB0aGlzLnV1aWQpKTtcbiAgICAgICAgICAgIHZhciBpbnN0ID0gdGhpcy5fbmV3SW5zdCgkKHRhcmdldCksIGlubGluZSk7XG4gICAgICAgICAgICAoaW5zdC5zZXR0aW5ncyA9ICQuZXh0ZW5kKFxuICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgIHNldHRpbmdzIHx8IHt9LFxuICAgICAgICAgICAgICAgIGlubGluZVNldHRpbmdzIHx8IHt9XG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAnaW5wdXQnID09IG5vZGVOYW1lXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5fY29ubmVjdERhdGVwaWNrZXIodGFyZ2V0LCBpbnN0KVxuICAgICAgICAgICAgICAgICAgICA6IGlubGluZSAmJiB0aGlzLl9pbmxpbmVEYXRlcGlja2VyKHRhcmdldCwgaW5zdCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9uZXdJbnN0OiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICB2YXIgaSA9IGVbMF0uaWQucmVwbGFjZSgvKFteQS1aYS16MC05Xy1dKS9nLCAnXFxcXFxcXFwkMScpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZDogaSxcbiAgICAgICAgICAgICAgICBpbnB1dDogZSxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZERheTogMCxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZE1vbnRoOiAwLFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkWWVhcjogMCxcbiAgICAgICAgICAgICAgICBkcmF3TW9udGg6IDAsXG4gICAgICAgICAgICAgICAgZHJhd1llYXI6IDAsXG4gICAgICAgICAgICAgICAgaW5saW5lOiB0LFxuICAgICAgICAgICAgICAgIGRwRGl2OiB0XG4gICAgICAgICAgICAgICAgICAgID8gYmluZEhvdmVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmxpbmVDbGFzcyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyB1aS1kYXRlcGlja2VyIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1oZWxwZXItY2xlYXJmaXggdWktY29ybmVyLWFsbFwiPjwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmRwRGl2LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgX2Nvbm5lY3REYXRlcGlja2VyOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICB2YXIgaSA9ICQoZSk7XG4gICAgICAgICAgICAodC5hcHBlbmQgPSAkKFtdKSksXG4gICAgICAgICAgICAgICAgKHQudHJpZ2dlciA9ICQoW10pKSxcbiAgICAgICAgICAgICAgICBpLmhhc0NsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKSB8fFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5fYXR0YWNobWVudHMoaSwgdCksXG4gICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5rZXlkb3duKHRoaXMuX2RvS2V5RG93bilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5rZXlwcmVzcyh0aGlzLl9kb0tleVByZXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmtleXVwKHRoaXMuX2RvS2V5VXApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYmluZCgnc2V0RGF0YS5kYXRlcGlja2VyJywgZnVuY3Rpb24oZSwgaSwgcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0dGluZ3NbaV0gPSBzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5iaW5kKCdnZXREYXRhLmRhdGVwaWNrZXInLCBmdW5jdGlvbihlLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldCh0LCBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hdXRvU2l6ZSh0KSxcbiAgICAgICAgICAgICAgICAgICAgJC5kYXRhKGUsIFBST1BfTkFNRSwgdCksXG4gICAgICAgICAgICAgICAgICAgIHQuc2V0dGluZ3MuZGlzYWJsZWQgJiYgdGhpcy5fZGlzYWJsZURhdGVwaWNrZXIoZSkpO1xuICAgICAgICB9LFxuICAgICAgICBfYXR0YWNobWVudHM6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5fZ2V0KHQsICdhcHBlbmRUZXh0JyksXG4gICAgICAgICAgICAgICAgcyA9IHRoaXMuX2dldCh0LCAnaXNSVEwnKTtcbiAgICAgICAgICAgIHQuYXBwZW5kICYmIHQuYXBwZW5kLnJlbW92ZSgpLFxuICAgICAgICAgICAgICAgIGkgJiZcbiAgICAgICAgICAgICAgICAgICAgKCh0LmFwcGVuZCA9ICQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcHBlbmRDbGFzcyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3NwYW4+J1xuICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgZVtzID8gJ2JlZm9yZScgOiAnYWZ0ZXInXSh0LmFwcGVuZCkpLFxuICAgICAgICAgICAgICAgIGUudW5iaW5kKCdmb2N1cycsIHRoaXMuX3Nob3dEYXRlcGlja2VyKSxcbiAgICAgICAgICAgICAgICB0LnRyaWdnZXIgJiYgdC50cmlnZ2VyLnJlbW92ZSgpO1xuICAgICAgICAgICAgdmFyIG4gPSB0aGlzLl9nZXQodCwgJ3Nob3dPbicpO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICgoJ2ZvY3VzJyA9PSBuIHx8ICdib3RoJyA9PSBuKSAmJiBlLmZvY3VzKHRoaXMuX3Nob3dEYXRlcGlja2VyKSxcbiAgICAgICAgICAgICAgICAnYnV0dG9uJyA9PSBuIHx8ICdib3RoJyA9PSBuKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLl9nZXQodCwgJ2J1dHRvblRleHQnKSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IHRoaXMuX2dldCh0LCAnYnV0dG9uSW1hZ2UnKTtcbiAgICAgICAgICAgICAgICAodC50cmlnZ2VyID0gJChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0KHQsICdidXR0b25JbWFnZU9ubHknKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAkKCc8aW1nLz4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKHRoaXMuX3RyaWdnZXJDbGFzcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKHsgc3JjOiBvLCBhbHQ6IGEsIHRpdGxlOiBhIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiPjwvYnV0dG9uPicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3ModGhpcy5fdHJpZ2dlckNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmh0bWwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJycgPT0gb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAkKCc8aW1nLz4nKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6IGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIGVbcyA/ICdiZWZvcmUnIDogJ2FmdGVyJ10odC50cmlnZ2VyKSxcbiAgICAgICAgICAgICAgICAgICAgdC50cmlnZ2VyLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl9sYXN0SW5wdXQgPT0gZVswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICQuZGF0ZXBpY2tlci5fZGF0ZXBpY2tlclNob3dpbmcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIuX2xhc3RJbnB1dCAhPSBlWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICgkLmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZGF0ZXBpY2tlci5fc2hvd0RhdGVwaWNrZXIoZVswXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICQuZGF0ZXBpY2tlci5fc2hvd0RhdGVwaWNrZXIoZVswXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgITFcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfYXV0b1NpemU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9nZXQoZSwgJ2F1dG9TaXplJykgJiYgIWUuaW5saW5lKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBuZXcgRGF0ZSgyMDA5LCAxMSwgMjApLFxuICAgICAgICAgICAgICAgICAgICBpID0gdGhpcy5fZ2V0KGUsICdkYXRlRm9ybWF0Jyk7XG4gICAgICAgICAgICAgICAgaWYgKGkubWF0Y2goL1tETV0vKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHQgPSAwLCBpID0gMCwgcyA9IDA7IGUubGVuZ3RoID4gczsgcysrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVbc10ubGVuZ3RoID4gdCAmJiAoKHQgPSBlW3NdLmxlbmd0aCksIChpID0gcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHQuc2V0TW9udGgoXG4gICAgICAgICAgICAgICAgICAgICAgICBzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5tYXRjaCgvTU0vKSA/ICdtb250aE5hbWVzJyA6ICdtb250aE5hbWVzU2hvcnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXREYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm1hdGNoKC9ERC8pID8gJ2RheU5hbWVzJyA6ICdkYXlOYW1lc1Nob3J0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIwIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5nZXREYXkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZS5pbnB1dC5hdHRyKCdzaXplJywgdGhpcy5fZm9ybWF0RGF0ZShlLCB0KS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfaW5saW5lRGF0ZXBpY2tlcjogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgdmFyIGkgPSAkKGUpO1xuICAgICAgICAgICAgaS5oYXNDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSkgfHxcbiAgICAgICAgICAgICAgICAoaVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQodC5kcERpdilcbiAgICAgICAgICAgICAgICAgICAgLmJpbmQoJ3NldERhdGEuZGF0ZXBpY2tlcicsIGZ1bmN0aW9uKGUsIGksIHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0dGluZ3NbaV0gPSBzO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuYmluZCgnZ2V0RGF0YS5kYXRlcGlja2VyJywgZnVuY3Rpb24oZSwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldCh0LCBpKTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgJC5kYXRhKGUsIFBST1BfTkFNRSwgdCksXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0RGF0ZSh0LCB0aGlzLl9nZXREZWZhdWx0RGF0ZSh0KSwgITApLFxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZURhdGVwaWNrZXIodCksXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlQWx0ZXJuYXRlKHQpLFxuICAgICAgICAgICAgICAgIHQuc2V0dGluZ3MuZGlzYWJsZWQgJiYgdGhpcy5fZGlzYWJsZURhdGVwaWNrZXIoZSksXG4gICAgICAgICAgICAgICAgdC5kcERpdi5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9kaWFsb2dEYXRlcGlja2VyOiBmdW5jdGlvbihlLCB0LCBpLCBzLCBuKSB7XG4gICAgICAgICAgICB2YXIgYSA9IHRoaXMuX2RpYWxvZ0luc3Q7XG4gICAgICAgICAgICBpZiAoIWEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV1aWQgKz0gMTtcbiAgICAgICAgICAgICAgICB2YXIgbyA9ICdkcCcgKyB0aGlzLnV1aWQ7XG4gICAgICAgICAgICAgICAgKHRoaXMuX2RpYWxvZ0lucHV0ID0gJChcbiAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBvICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcIiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAtMTAwcHg7IHdpZHRoOiAwcHg7XCIvPidcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlhbG9nSW5wdXQua2V5ZG93bih0aGlzLl9kb0tleURvd24pLFxuICAgICAgICAgICAgICAgICAgICAkKCdib2R5JykuYXBwZW5kKHRoaXMuX2RpYWxvZ0lucHV0KSxcbiAgICAgICAgICAgICAgICAgICAgKGEgPSB0aGlzLl9kaWFsb2dJbnN0ID0gdGhpcy5fbmV3SW5zdChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RpYWxvZ0lucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgITFcbiAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgIChhLnNldHRpbmdzID0ge30pLFxuICAgICAgICAgICAgICAgICAgICAkLmRhdGEodGhpcy5fZGlhbG9nSW5wdXRbMF0sIFBST1BfTkFNRSwgYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKGV4dGVuZFJlbW92ZShhLnNldHRpbmdzLCBzIHx8IHt9KSxcbiAgICAgICAgICAgICAgICAodCA9IHQgJiYgdC5jb25zdHJ1Y3RvciA9PSBEYXRlID8gdGhpcy5fZm9ybWF0RGF0ZShhLCB0KSA6IHQpLFxuICAgICAgICAgICAgICAgIHRoaXMuX2RpYWxvZ0lucHV0LnZhbCh0KSxcbiAgICAgICAgICAgICAgICAodGhpcy5fcG9zID0gbiA/IChuLmxlbmd0aCA/IG4gOiBbbi5wYWdlWCwgbi5wYWdlWV0pIDogbnVsbCksXG4gICAgICAgICAgICAgICAgIXRoaXMuX3BvcylcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciByID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgbCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0LFxuICAgICAgICAgICAgICAgICAgICB1ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgICAgIHRoaXMuX3BvcyA9IFtyIC8gMiAtIDEwMCArIGwsIGggLyAyIC0gMTUwICsgdV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHRoaXMuX2RpYWxvZ0lucHV0XG4gICAgICAgICAgICAgICAgICAgIC5jc3MoJ2xlZnQnLCB0aGlzLl9wb3NbMF0gKyAyMCArICdweCcpXG4gICAgICAgICAgICAgICAgICAgIC5jc3MoJ3RvcCcsIHRoaXMuX3Bvc1sxXSArICdweCcpLFxuICAgICAgICAgICAgICAgIChhLnNldHRpbmdzLm9uU2VsZWN0ID0gaSksXG4gICAgICAgICAgICAgICAgKHRoaXMuX2luRGlhbG9nID0gITApLFxuICAgICAgICAgICAgICAgIHRoaXMuZHBEaXYuYWRkQ2xhc3ModGhpcy5fZGlhbG9nQ2xhc3MpLFxuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3dEYXRlcGlja2VyKHRoaXMuX2RpYWxvZ0lucHV0WzBdKSxcbiAgICAgICAgICAgICAgICAkLmJsb2NrVUkgJiYgJC5ibG9ja1VJKHRoaXMuZHBEaXYpLFxuICAgICAgICAgICAgICAgICQuZGF0YSh0aGlzLl9kaWFsb2dJbnB1dFswXSwgUFJPUF9OQU1FLCBhKSxcbiAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBfZGVzdHJveURhdGVwaWNrZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gJChlKSxcbiAgICAgICAgICAgICAgICBpID0gJC5kYXRhKGUsIFBST1BfTkFNRSk7XG4gICAgICAgICAgICBpZiAodC5oYXNDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAkLnJlbW92ZURhdGEoZSwgUFJPUF9OQU1FKSxcbiAgICAgICAgICAgICAgICAgICAgJ2lucHV0JyA9PSBzXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChpLmFwcGVuZC5yZW1vdmUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaS50cmlnZ2VyLnJlbW92ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudW5iaW5kKCdmb2N1cycsIHRoaXMuX3Nob3dEYXRlcGlja2VyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnVuYmluZCgna2V5ZG93bicsIHRoaXMuX2RvS2V5RG93bilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC51bmJpbmQoJ2tleXByZXNzJywgdGhpcy5fZG9LZXlQcmVzcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC51bmJpbmQoJ2tleXVwJywgdGhpcy5fZG9LZXlVcCkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICgnZGl2JyA9PSBzIHx8ICdzcGFuJyA9PSBzKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICB0LnJlbW92ZUNsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKS5lbXB0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZW5hYmxlRGF0ZXBpY2tlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHQgPSAkKGUpLFxuICAgICAgICAgICAgICAgIGkgPSAkLmRhdGEoZSwgUFJPUF9OQU1FKTtcbiAgICAgICAgICAgIGlmICh0Lmhhc0NsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICAgIHZhciBzID0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGlmICgnaW5wdXQnID09IHMpXG4gICAgICAgICAgICAgICAgICAgIChlLmRpc2FibGVkID0gITEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaS50cmlnZ2VyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcignYnV0dG9uJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlZCA9ICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVuZCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcignaW1nJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY3NzKHsgb3BhY2l0eTogJzEuMCcsIGN1cnNvcjogJycgfSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoJ2RpdicgPT0gcyB8fCAnc3BhbicgPT0gcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHQuY2hpbGRyZW4oJy4nICsgdGhpcy5faW5saW5lQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICBuLmNoaWxkcmVuKCkucmVtb3ZlQ2xhc3MoJ3VpLXN0YXRlLWRpc2FibGVkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzZWxlY3QudWktZGF0ZXBpY2tlci1tb250aCwgc2VsZWN0LnVpLWRhdGVwaWNrZXIteWVhcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByb3AoJ2Rpc2FibGVkJywgITEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlZElucHV0cyA9ICQubWFwKHRoaXMuX2Rpc2FibGVkSW5wdXRzLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID09IGUgPyBudWxsIDogdDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2Rpc2FibGVEYXRlcGlja2VyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgdCA9ICQoZSksXG4gICAgICAgICAgICAgICAgaSA9ICQuZGF0YShlLCBQUk9QX05BTUUpO1xuICAgICAgICAgICAgaWYgKHQuaGFzQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKCdpbnB1dCcgPT0gcylcbiAgICAgICAgICAgICAgICAgICAgKGUuZGlzYWJsZWQgPSAhMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnRyaWdnZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKCdidXR0b24nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVkID0gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW5kKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKCdpbWcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jc3MoeyBvcGFjaXR5OiAnMC41JywgY3Vyc29yOiAnZGVmYXVsdCcgfSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoJ2RpdicgPT0gcyB8fCAnc3BhbicgPT0gcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHQuY2hpbGRyZW4oJy4nICsgdGhpcy5faW5saW5lQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICBuLmNoaWxkcmVuKCkuYWRkQ2xhc3MoJ3VpLXN0YXRlLWRpc2FibGVkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzZWxlY3QudWktZGF0ZXBpY2tlci1tb250aCwgc2VsZWN0LnVpLWRhdGVwaWNrZXIteWVhcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByb3AoJ2Rpc2FibGVkJywgITApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAodGhpcy5fZGlzYWJsZWRJbnB1dHMgPSAkLm1hcCh0aGlzLl9kaXNhYmxlZElucHV0cywgZnVuY3Rpb24oXG4gICAgICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPT0gZSA/IG51bGwgOiB0O1xuICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuX2Rpc2FibGVkSW5wdXRzW3RoaXMuX2Rpc2FibGVkSW5wdXRzLmxlbmd0aF0gPSBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2lzRGlzYWJsZWREYXRlcGlja2VyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZiAoIWUpIHJldHVybiAhMTtcbiAgICAgICAgICAgIGZvciAodmFyIHQgPSAwOyB0aGlzLl9kaXNhYmxlZElucHV0cy5sZW5ndGggPiB0OyB0KyspXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Rpc2FibGVkSW5wdXRzW3RdID09IGUpIHJldHVybiAhMDtcbiAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldEluc3Q6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuZGF0YShlLCBQUk9QX05BTUUpO1xuICAgICAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgICAgIHRocm93ICdNaXNzaW5nIGluc3RhbmNlIGRhdGEgZm9yIHRoaXMgZGF0ZXBpY2tlcic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9vcHRpb25EYXRlcGlja2VyOiBmdW5jdGlvbihlLCB0LCBpKSB7XG4gICAgICAgICAgICB2YXIgcyA9IHRoaXMuX2dldEluc3QoZSk7XG4gICAgICAgICAgICBpZiAoMiA9PSBhcmd1bWVudHMubGVuZ3RoICYmICdzdHJpbmcnID09IHR5cGVvZiB0KVxuICAgICAgICAgICAgICAgIHJldHVybiAnZGVmYXVsdHMnID09IHRcbiAgICAgICAgICAgICAgICAgICAgPyAkLmV4dGVuZCh7fSwgJC5kYXRlcGlja2VyLl9kZWZhdWx0cylcbiAgICAgICAgICAgICAgICAgICAgOiBzXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICdhbGwnID09IHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICQuZXh0ZW5kKHt9LCBzLnNldHRpbmdzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5fZ2V0KHMsIHQpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICB2YXIgbiA9IHQgfHwge307XG4gICAgICAgICAgICBpZiAoKCdzdHJpbmcnID09IHR5cGVvZiB0ICYmICgobiA9IHt9KSwgKG5bdF0gPSBpKSksIHMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3VySW5zdCA9PSBzICYmIHRoaXMuX2hpZGVEYXRlcGlja2VyKCk7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLl9nZXREYXRlRGF0ZXBpY2tlcihlLCAhMCksXG4gICAgICAgICAgICAgICAgICAgIG8gPSB0aGlzLl9nZXRNaW5NYXhEYXRlKHMsICdtaW4nKSxcbiAgICAgICAgICAgICAgICAgICAgciA9IHRoaXMuX2dldE1pbk1heERhdGUocywgJ21heCcpO1xuICAgICAgICAgICAgICAgIGV4dGVuZFJlbW92ZShzLnNldHRpbmdzLCBuKSxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gbyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbi5kYXRlRm9ybWF0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ubWluRGF0ZSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAocy5zZXR0aW5ncy5taW5EYXRlID0gdGhpcy5fZm9ybWF0RGF0ZShzLCBvKSksXG4gICAgICAgICAgICAgICAgICAgIG51bGwgIT09IHIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG4uZGF0ZUZvcm1hdCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBuLm1heERhdGUgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKHMuc2V0dGluZ3MubWF4RGF0ZSA9IHRoaXMuX2Zvcm1hdERhdGUocywgcikpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hdHRhY2htZW50cygkKGUpLCBzKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXV0b1NpemUocyksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldERhdGUocywgYSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUFsdGVybmF0ZShzKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlRGF0ZXBpY2tlcihzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2NoYW5nZURhdGVwaWNrZXI6IGZ1bmN0aW9uKGUsIHQsIGkpIHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbkRhdGVwaWNrZXIoZSwgdCwgaSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9yZWZyZXNoRGF0ZXBpY2tlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl9nZXRJbnN0KGUpO1xuICAgICAgICAgICAgdCAmJiB0aGlzLl91cGRhdGVEYXRlcGlja2VyKHQpO1xuICAgICAgICB9LFxuICAgICAgICBfc2V0RGF0ZURhdGVwaWNrZXI6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5fZ2V0SW5zdChlKTtcbiAgICAgICAgICAgIGkgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5fc2V0RGF0ZShpLCB0KSxcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVEYXRlcGlja2VyKGkpLFxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUFsdGVybmF0ZShpKSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXREYXRlRGF0ZXBpY2tlcjogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLl9nZXRJbnN0KGUpO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBpICYmICFpLmlubGluZSAmJiB0aGlzLl9zZXREYXRlRnJvbUZpZWxkKGksIHQpLFxuICAgICAgICAgICAgICAgIGkgPyB0aGlzLl9nZXREYXRlKGkpIDogbnVsbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2RvS2V5RG93bjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHQgPSAkLmRhdGVwaWNrZXIuX2dldEluc3QoZS50YXJnZXQpLFxuICAgICAgICAgICAgICAgIGkgPSAhMCxcbiAgICAgICAgICAgICAgICBzID0gdC5kcERpdi5pcygnLnVpLWRhdGVwaWNrZXItcnRsJyk7XG4gICAgICAgICAgICBpZiAoKCh0Ll9rZXlFdmVudCA9ICEwKSwgJC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZykpXG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlcigpLCAoaSA9ICExKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSAkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZC4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl9kYXlPdmVyQ2xhc3MgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnOm5vdCguJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZGF0ZXBpY2tlci5fY3VycmVudENsYXNzICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuZHBEaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuWzBdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl9zZWxlY3REYXkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNlbGVjdGVkTW9udGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2VsZWN0ZWRZZWFyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gJC5kYXRlcGlja2VyLl9nZXQodCwgJ29uU2VsZWN0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gJC5kYXRlcGlja2VyLl9mb3JtYXREYXRlKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuYXBwbHkodC5pbnB1dCA/IHQuaW5wdXRbMF0gOiBudWxsLCBbbywgdF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlICQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDMzOlxuICAgICAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY3RybEtleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IC0kLmRhdGVwaWNrZXIuX2dldCh0LCAnc3RlcEJpZ01vbnRocycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogLSQuZGF0ZXBpY2tlci5fZ2V0KHQsICdzdGVwTW9udGhzJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ00nXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIuX2FkanVzdERhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5jdHJsS2V5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKyQuZGF0ZXBpY2tlci5fZ2V0KHQsICdzdGVwQmlnTW9udGhzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiArJC5kYXRlcGlja2VyLl9nZXQodCwgJ3N0ZXBNb250aHMnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTSdcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZGF0ZXBpY2tlci5fY2xlYXJEYXRlKGUudGFyZ2V0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaSA9IGUuY3RybEtleSB8fCBlLm1ldGFLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzY6XG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIuX2dvdG9Ub2RheShlLnRhcmdldCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkgPSBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM3OlxuICAgICAgICAgICAgICAgICAgICAgICAgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGUudGFyZ2V0LCBzID8gMSA6IC0xLCAnRCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpID0gZS5jdHJsS2V5IHx8IGUubWV0YUtleSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5vcmlnaW5hbEV2ZW50LmFsdEtleSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIuX2FkanVzdERhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY3RybEtleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gLSQuZGF0ZXBpY2tlci5fZ2V0KHQsICdzdGVwQmlnTW9udGhzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IC0kLmRhdGVwaWNrZXIuX2dldCh0LCAnc3RlcE1vbnRocycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ00nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzODpcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShlLnRhcmdldCwgLTcsICdEJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkgPSBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICAgICAgICAgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGUudGFyZ2V0LCBzID8gLTEgOiAxLCAnRCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpID0gZS5jdHJsS2V5IHx8IGUubWV0YUtleSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5vcmlnaW5hbEV2ZW50LmFsdEtleSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIuX2FkanVzdERhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY3RybEtleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKyQuZGF0ZXBpY2tlci5fZ2V0KHQsICdzdGVwQmlnTW9udGhzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICskLmRhdGVwaWNrZXIuX2dldCh0LCAnc3RlcE1vbnRocycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ00nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShlLnRhcmdldCwgNywgJ0QnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaSA9IGUuY3RybEtleSB8fCBlLm1ldGFLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gITE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIDM2ID09IGUua2V5Q29kZSAmJiBlLmN0cmxLZXlcbiAgICAgICAgICAgICAgICAgICAgPyAkLmRhdGVwaWNrZXIuX3Nob3dEYXRlcGlja2VyKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgIDogKGkgPSAhMSk7XG4gICAgICAgICAgICBpICYmIChlLnByZXZlbnREZWZhdWx0KCksIGUuc3RvcFByb3BhZ2F0aW9uKCkpO1xuICAgICAgICB9LFxuICAgICAgICBfZG9LZXlQcmVzczogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHQgPSAkLmRhdGVwaWNrZXIuX2dldEluc3QoZS50YXJnZXQpO1xuICAgICAgICAgICAgaWYgKCQuZGF0ZXBpY2tlci5fZ2V0KHQsICdjb25zdHJhaW5JbnB1dCcpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSAkLmRhdGVwaWNrZXIuX3Bvc3NpYmxlQ2hhcnMoXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIuX2dldCh0LCAnZGF0ZUZvcm1hdCcpXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIHMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFxuICAgICAgICAgICAgICAgICAgICAgICAgZS5jaGFyQ29kZSA9PSB1bmRlZmluZWQgPyBlLmtleUNvZGUgOiBlLmNoYXJDb2RlXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCAnICcgPiBzIHx8ICFpIHx8IGkuaW5kZXhPZihzKSA+IC0xXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2RvS2V5VXA6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gJC5kYXRlcGlja2VyLl9nZXRJbnN0KGUudGFyZ2V0KTtcbiAgICAgICAgICAgIGlmICh0LmlucHV0LnZhbCgpICE9IHQubGFzdFZhbClcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9ICQuZGF0ZXBpY2tlci5wYXJzZURhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIuX2dldCh0LCAnZGF0ZUZvcm1hdCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5pbnB1dCA/IHQuaW5wdXQudmFsKCkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl9nZXRGb3JtYXRDb25maWcodClcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgaSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKCQuZGF0ZXBpY2tlci5fc2V0RGF0ZUZyb21GaWVsZCh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZGF0ZXBpY2tlci5fdXBkYXRlQWx0ZXJuYXRlKHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl91cGRhdGVEYXRlcGlja2VyKHQpKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICAgICAgICAgICQuZGF0ZXBpY2tlci5sb2cocyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICB9LFxuICAgICAgICBfc2hvd0RhdGVwaWNrZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoKGUgPSBlLnRhcmdldCB8fCBlKSxcbiAgICAgICAgICAgICAgICAnaW5wdXQnICE9IGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAmJlxuICAgICAgICAgICAgICAgICAgICAoZSA9ICQoJ2lucHV0JywgZS5wYXJlbnROb2RlKVswXSksXG4gICAgICAgICAgICAgICAgISQuZGF0ZXBpY2tlci5faXNEaXNhYmxlZERhdGVwaWNrZXIoZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl9sYXN0SW5wdXQgIT0gZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gJC5kYXRlcGlja2VyLl9nZXRJbnN0KGUpO1xuICAgICAgICAgICAgICAgICQuZGF0ZXBpY2tlci5fY3VySW5zdCAmJlxuICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIuX2N1ckluc3QgIT0gdCAmJlxuICAgICAgICAgICAgICAgICAgICAoJC5kYXRlcGlja2VyLl9jdXJJbnN0LmRwRGl2LnN0b3AoITAsICEwKSxcbiAgICAgICAgICAgICAgICAgICAgdCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIuX2N1ckluc3QuaW5wdXRbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgIHZhciBpID0gJC5kYXRlcGlja2VyLl9nZXQodCwgJ2JlZm9yZVNob3cnKSxcbiAgICAgICAgICAgICAgICAgICAgcyA9IGkgPyBpLmFwcGx5KGUsIFtlLCB0XSkgOiB7fTtcbiAgICAgICAgICAgICAgICBpZiAocyAhPT0gITEpIHtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kUmVtb3ZlKHQuc2V0dGluZ3MsIHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHQubGFzdFZhbCA9IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKCQuZGF0ZXBpY2tlci5fbGFzdElucHV0ID0gZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIuX3NldERhdGVGcm9tRmllbGQodCksXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIuX2luRGlhbG9nICYmIChlLnZhbHVlID0gJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl9wb3MgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKCQuZGF0ZXBpY2tlci5fcG9zID0gJC5kYXRlcGlja2VyLl9maW5kUG9zKGUpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJC5kYXRlcGlja2VyLl9wb3NbMV0gKz0gZS5vZmZzZXRIZWlnaHQpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgJChlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudHMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG4gfD0gJ2ZpeGVkJyA9PSAkKHRoaXMpLmNzcygncG9zaXRpb24nKSksICFuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICQuZGF0ZXBpY2tlci5fcG9zWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAkLmRhdGVwaWNrZXIuX3Bvc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgKCgkLmRhdGVwaWNrZXIuX3BvcyA9IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5kcERpdi5lbXB0eSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5kcERpdi5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAnLTEwMDBweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZGF0ZXBpY2tlci5fdXBkYXRlRGF0ZXBpY2tlcih0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChhID0gJC5kYXRlcGlja2VyLl9jaGVja09mZnNldCh0LCBhLCBuKSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmRwRGl2LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZGF0ZXBpY2tlci5faW5EaWFsb2cgJiYgJC5ibG9ja1VJXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdzdGF0aWMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdmaXhlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGEubGVmdCArICdweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBhLnRvcCArICdweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICF0LmlubGluZSlcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9ICQuZGF0ZXBpY2tlci5fZ2V0KHQsICdzaG93QW5pbScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSAkLmRhdGVwaWNrZXIuX2dldCh0LCAnZHVyYXRpb24nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdC5kcERpdi5maW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lmcmFtZS51aS1kYXRlcGlja2VyLWNvdmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gJC5kYXRlcGlja2VyLl9nZXRCb3JkZXJzKHQuZHBEaXYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IC1pWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogLWlbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHQuZHBEaXYub3V0ZXJXaWR0aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogdC5kcERpdi5vdXRlckhlaWdodCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdC5kcERpdi56SW5kZXgoJChlKS56SW5kZXgoKSArIDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkLmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nID0gITApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWZmZWN0cyAmJiAoJC5lZmZlY3RzLmVmZmVjdFtvXSB8fCAkLmVmZmVjdHNbb10pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdC5kcERpdi5zaG93KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIuX2dldCh0LCAnc2hvd09wdGlvbnMnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0LmRwRGl2W28gfHwgJ3Nob3cnXShvID8gciA6IG51bGwsIGgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvICYmIHIpIHx8IGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmlucHV0LmlzKCc6dmlzaWJsZScpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICF0LmlucHV0LmlzKCc6ZGlzYWJsZWQnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmlucHV0LmZvY3VzKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCQuZGF0ZXBpY2tlci5fY3VySW5zdCA9IHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfdXBkYXRlRGF0ZXBpY2tlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdGhpcy5tYXhSb3dzID0gNDtcbiAgICAgICAgICAgIHZhciB0ID0gJC5kYXRlcGlja2VyLl9nZXRCb3JkZXJzKGUuZHBEaXYpO1xuICAgICAgICAgICAgKGluc3RBY3RpdmUgPSBlKSxcbiAgICAgICAgICAgICAgICBlLmRwRGl2LmVtcHR5KCkuYXBwZW5kKHRoaXMuX2dlbmVyYXRlSFRNTChlKSksXG4gICAgICAgICAgICAgICAgdGhpcy5fYXR0YWNoSGFuZGxlcnMoZSk7XG4gICAgICAgICAgICB2YXIgaSA9IGUuZHBEaXYuZmluZCgnaWZyYW1lLnVpLWRhdGVwaWNrZXItY292ZXInKTtcbiAgICAgICAgICAgIGkubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgaS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAtdFswXSxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAtdFsxXSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGUuZHBEaXYub3V0ZXJXaWR0aCgpLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGUuZHBEaXYub3V0ZXJIZWlnaHQoKSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBlLmRwRGl2LmZpbmQoJy4nICsgdGhpcy5fZGF5T3ZlckNsYXNzICsgJyBhJykubW91c2VvdmVyKCk7XG4gICAgICAgICAgICB2YXIgcyA9IHRoaXMuX2dldE51bWJlck9mTW9udGhzKGUpLFxuICAgICAgICAgICAgICAgIG4gPSBzWzFdLFxuICAgICAgICAgICAgICAgIGEgPSAxNztcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoZS5kcERpdlxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAndWktZGF0ZXBpY2tlci1tdWx0aS0yIHVpLWRhdGVwaWNrZXItbXVsdGktMyB1aS1kYXRlcGlja2VyLW11bHRpLTQnXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLndpZHRoKCcnKSxcbiAgICAgICAgICAgICAgICBuID4gMSAmJlxuICAgICAgICAgICAgICAgICAgICBlLmRwRGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3VpLWRhdGVwaWNrZXItbXVsdGktJyArIG4pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY3NzKCd3aWR0aCcsIGEgKiBuICsgJ2VtJyksXG4gICAgICAgICAgICAgICAgZS5kcERpdlsoMSAhPSBzWzBdIHx8IDEgIT0gc1sxXSA/ICdhZGQnIDogJ3JlbW92ZScpICsgJ0NsYXNzJ10oXG4gICAgICAgICAgICAgICAgICAgICd1aS1kYXRlcGlja2VyLW11bHRpJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgZS5kcERpdlsodGhpcy5fZ2V0KGUsICdpc1JUTCcpID8gJ2FkZCcgOiAncmVtb3ZlJykgKyAnQ2xhc3MnXShcbiAgICAgICAgICAgICAgICAgICAgJ3VpLWRhdGVwaWNrZXItcnRsJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgZSA9PSAkLmRhdGVwaWNrZXIuX2N1ckluc3QgJiZcbiAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyAmJlxuICAgICAgICAgICAgICAgICAgICBlLmlucHV0ICYmXG4gICAgICAgICAgICAgICAgICAgIGUuaW5wdXQuaXMoJzp2aXNpYmxlJykgJiZcbiAgICAgICAgICAgICAgICAgICAgIWUuaW5wdXQuaXMoJzpkaXNhYmxlZCcpICYmXG4gICAgICAgICAgICAgICAgICAgIGUuaW5wdXRbMF0gIT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuICAgICAgICAgICAgICAgICAgICBlLmlucHV0LmZvY3VzKCksXG4gICAgICAgICAgICAgICAgZS55ZWFyc2h0bWwpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB2YXIgbyA9IGUueWVhcnNodG1sO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIG8gPT09IGUueWVhcnNodG1sICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnllYXJzaHRtbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZS5kcERpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCdzZWxlY3QudWktZGF0ZXBpY2tlci15ZWFyOmZpcnN0JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZVdpdGgoZS55ZWFyc2h0bWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKG8gPSBlLnllYXJzaHRtbCA9IG51bGwpO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfZ2V0Qm9yZGVyczogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdGhpbjogMSwgbWVkaXVtOiAyLCB0aGljazogMyB9W2VdIHx8IGU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHQoZS5jc3MoJ2JvcmRlci1sZWZ0LXdpZHRoJykpKSxcbiAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHQoZS5jc3MoJ2JvcmRlci10b3Atd2lkdGgnKSkpLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSxcbiAgICAgICAgX2NoZWNrT2Zmc2V0OiBmdW5jdGlvbihlLCB0LCBpKSB7XG4gICAgICAgICAgICB2YXIgcyA9IGUuZHBEaXYub3V0ZXJXaWR0aCgpLFxuICAgICAgICAgICAgICAgIG4gPSBlLmRwRGl2Lm91dGVySGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgYSA9IGUuaW5wdXQgPyBlLmlucHV0Lm91dGVyV2lkdGgoKSA6IDAsXG4gICAgICAgICAgICAgICAgbyA9IGUuaW5wdXQgPyBlLmlucHV0Lm91dGVySGVpZ2h0KCkgOiAwLFxuICAgICAgICAgICAgICAgIHIgPVxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggK1xuICAgICAgICAgICAgICAgICAgICAoaSA/IDAgOiAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkpLFxuICAgICAgICAgICAgICAgIGggPVxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0ICtcbiAgICAgICAgICAgICAgICAgICAgKGkgPyAwIDogJChkb2N1bWVudCkuc2Nyb2xsVG9wKCkpO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAodC5sZWZ0IC09IHRoaXMuX2dldChlLCAnaXNSVEwnKSA/IHMgLSBhIDogMCksXG4gICAgICAgICAgICAgICAgKHQubGVmdCAtPVxuICAgICAgICAgICAgICAgICAgICBpICYmIHQubGVmdCA9PSBlLmlucHV0Lm9mZnNldCgpLmxlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJChkb2N1bWVudCkuc2Nyb2xsTGVmdCgpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDApLFxuICAgICAgICAgICAgICAgICh0LnRvcCAtPVxuICAgICAgICAgICAgICAgICAgICBpICYmIHQudG9wID09IGUuaW5wdXQub2Zmc2V0KCkudG9wICsgb1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAkKGRvY3VtZW50KS5zY3JvbGxUb3AoKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAwKSxcbiAgICAgICAgICAgICAgICAodC5sZWZ0IC09IE1hdGgubWluKFxuICAgICAgICAgICAgICAgICAgICB0LmxlZnQsXG4gICAgICAgICAgICAgICAgICAgIHQubGVmdCArIHMgPiByICYmIHIgPiBzID8gTWF0aC5hYnModC5sZWZ0ICsgcyAtIHIpIDogMFxuICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICh0LnRvcCAtPSBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICAgICAgdC50b3AsXG4gICAgICAgICAgICAgICAgICAgIHQudG9wICsgbiA+IGggJiYgaCA+IG4gPyBNYXRoLmFicyhuICsgbykgOiAwXG4gICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2ZpbmRQb3M6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl9nZXRJbnN0KGUpLCBpID0gdGhpcy5fZ2V0KHQsICdpc1JUTCcpO1xuICAgICAgICAgICAgICAgIGUgJiZcbiAgICAgICAgICAgICAgICAoJ2hpZGRlbicgPT0gZS50eXBlIHx8XG4gICAgICAgICAgICAgICAgICAgIDEgIT0gZS5ub2RlVHlwZSB8fFxuICAgICAgICAgICAgICAgICAgICAkLmV4cHIuZmlsdGVycy5oaWRkZW4oZSkpO1xuXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgZSA9IGVbaSA/ICdwcmV2aW91c1NpYmxpbmcnIDogJ25leHRTaWJsaW5nJ107XG4gICAgICAgICAgICB2YXIgcyA9ICQoZSkub2Zmc2V0KCk7XG4gICAgICAgICAgICByZXR1cm4gW3MubGVmdCwgcy50b3BdO1xuICAgICAgICB9LFxuICAgICAgICBfaGlkZURhdGVwaWNrZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fY3VySW5zdDtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0ICYmXG4gICAgICAgICAgICAgICAgKCFlIHx8IHQgPT0gJC5kYXRhKGUsIFBST1BfTkFNRSkpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fZGF0ZXBpY2tlclNob3dpbmdcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcy5fZ2V0KHQsICdzaG93QW5pbScpLFxuICAgICAgICAgICAgICAgICAgICBzID0gdGhpcy5fZ2V0KHQsICdkdXJhdGlvbicpLFxuICAgICAgICAgICAgICAgICAgICBuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIuX3RpZHlEaWFsb2codCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgJC5lZmZlY3RzICYmICgkLmVmZmVjdHMuZWZmZWN0W2ldIHx8ICQuZWZmZWN0c1tpXSlcbiAgICAgICAgICAgICAgICAgICAgPyB0LmRwRGl2LmhpZGUoaSwgJC5kYXRlcGlja2VyLl9nZXQodCwgJ3Nob3dPcHRpb25zJyksIHMsIG4pXG4gICAgICAgICAgICAgICAgICAgIDogdC5kcERpdltcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NsaWRlRG93bicgPT0gaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc2xpZGVVcCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ2ZhZGVJbicgPT0gaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ2ZhZGVPdXQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnaGlkZSdcbiAgICAgICAgICAgICAgICAgICAgICBdKGkgPyBzIDogbnVsbCwgbiksXG4gICAgICAgICAgICAgICAgICAgIGkgfHwgbigpLFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5fZGF0ZXBpY2tlclNob3dpbmcgPSAhMSk7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLl9nZXQodCwgJ29uQ2xvc2UnKTtcbiAgICAgICAgICAgICAgICBhICYmXG4gICAgICAgICAgICAgICAgICAgIGEuYXBwbHkodC5pbnB1dCA/IHQuaW5wdXRbMF0gOiBudWxsLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmlucHV0ID8gdC5pbnB1dC52YWwoKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdCxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLl9sYXN0SW5wdXQgPSBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5EaWFsb2cgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLl9kaWFsb2dJbnB1dC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICcwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6ICctMTAwcHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmJsb2NrVUkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJC51bmJsb2NrVUkoKSwgJCgnYm9keScpLmFwcGVuZCh0aGlzLmRwRGl2KSkpLFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5faW5EaWFsb2cgPSAhMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF90aWR5RGlhbG9nOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLmRwRGl2XG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKHRoaXMuX2RpYWxvZ0NsYXNzKVxuICAgICAgICAgICAgICAgIC51bmJpbmQoJy51aS1kYXRlcGlja2VyLWNhbGVuZGFyJyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9jaGVja0V4dGVybmFsQ2xpY2s6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmICgkLmRhdGVwaWNrZXIuX2N1ckluc3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9ICQoZS50YXJnZXQpLFxuICAgICAgICAgICAgICAgICAgICBpID0gJC5kYXRlcGlja2VyLl9nZXRJbnN0KHRbMF0pO1xuICAgICAgICAgICAgICAgICgodFswXS5pZCAhPSAkLmRhdGVwaWNrZXIuX21haW5EaXZJZCAmJlxuICAgICAgICAgICAgICAgICAgICAwID09IHQucGFyZW50cygnIycgKyAkLmRhdGVwaWNrZXIuX21haW5EaXZJZCkubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICF0Lmhhc0NsYXNzKCQuZGF0ZXBpY2tlci5tYXJrZXJDbGFzc05hbWUpICYmXG4gICAgICAgICAgICAgICAgICAgICF0LmNsb3Nlc3QoJy4nICsgJC5kYXRlcGlja2VyLl90cmlnZ2VyQ2xhc3MpLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nICYmXG4gICAgICAgICAgICAgICAgICAgICghJC5kYXRlcGlja2VyLl9pbkRpYWxvZyB8fCAhJC5ibG9ja1VJKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKHQuaGFzQ2xhc3MoJC5kYXRlcGlja2VyLm1hcmtlckNsYXNzTmFtZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZGF0ZXBpY2tlci5fY3VySW5zdCAhPSBpKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfYWRqdXN0RGF0ZTogZnVuY3Rpb24oZSwgdCwgaSkge1xuICAgICAgICAgICAgdmFyIHMgPSAkKGUpLFxuICAgICAgICAgICAgICAgIG4gPSB0aGlzLl9nZXRJbnN0KHNbMF0pO1xuICAgICAgICAgICAgdGhpcy5faXNEaXNhYmxlZERhdGVwaWNrZXIoc1swXSkgfHxcbiAgICAgICAgICAgICAgICAodGhpcy5fYWRqdXN0SW5zdERhdGUoXG4gICAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICAgIHQgKyAoJ00nID09IGkgPyB0aGlzLl9nZXQobiwgJ3Nob3dDdXJyZW50QXRQb3MnKSA6IDApLFxuICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVEYXRlcGlja2VyKG4pKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dvdG9Ub2RheTogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHQgPSAkKGUpLFxuICAgICAgICAgICAgICAgIGkgPSB0aGlzLl9nZXRJbnN0KHRbMF0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2dldChpLCAnZ290b0N1cnJlbnQnKSAmJiBpLmN1cnJlbnREYXkpXG4gICAgICAgICAgICAgICAgKGkuc2VsZWN0ZWREYXkgPSBpLmN1cnJlbnREYXkpLFxuICAgICAgICAgICAgICAgICAgICAoaS5kcmF3TW9udGggPSBpLnNlbGVjdGVkTW9udGggPSBpLmN1cnJlbnRNb250aCksXG4gICAgICAgICAgICAgICAgICAgIChpLmRyYXdZZWFyID0gaS5zZWxlY3RlZFllYXIgPSBpLmN1cnJlbnRZZWFyKTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBzID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAoaS5zZWxlY3RlZERheSA9IHMuZ2V0RGF0ZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgKGkuZHJhd01vbnRoID0gaS5zZWxlY3RlZE1vbnRoID0gcy5nZXRNb250aCgpKSxcbiAgICAgICAgICAgICAgICAgICAgKGkuZHJhd1llYXIgPSBpLnNlbGVjdGVkWWVhciA9IHMuZ2V0RnVsbFllYXIoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9ub3RpZnlDaGFuZ2UoaSksIHRoaXMuX2FkanVzdERhdGUodCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zZWxlY3RNb250aFllYXI6IGZ1bmN0aW9uKGUsIHQsIGkpIHtcbiAgICAgICAgICAgIHZhciBzID0gJChlKSxcbiAgICAgICAgICAgICAgICBuID0gdGhpcy5fZ2V0SW5zdChzWzBdKTtcbiAgICAgICAgICAgIChuWydzZWxlY3RlZCcgKyAoJ00nID09IGkgPyAnTW9udGgnIDogJ1llYXInKV0gPSBuW1xuICAgICAgICAgICAgICAgICdkcmF3JyArICgnTScgPT0gaSA/ICdNb250aCcgOiAnWWVhcicpXG4gICAgICAgICAgICBdID0gcGFyc2VJbnQodC5vcHRpb25zW3Quc2VsZWN0ZWRJbmRleF0udmFsdWUsIDEwKSksXG4gICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5Q2hhbmdlKG4pLFxuICAgICAgICAgICAgICAgIHRoaXMuX2FkanVzdERhdGUocyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zZWxlY3REYXk6IGZ1bmN0aW9uKGUsIHQsIGksIHMpIHtcbiAgICAgICAgICAgIHZhciBuID0gJChlKTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhJChzKS5oYXNDbGFzcyh0aGlzLl91bnNlbGVjdGFibGVDbGFzcykgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy5faXNEaXNhYmxlZERhdGVwaWNrZXIoblswXSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcy5fZ2V0SW5zdChuWzBdKTtcbiAgICAgICAgICAgICAgICAoYS5zZWxlY3RlZERheSA9IGEuY3VycmVudERheSA9ICQoJ2EnLCBzKS5odG1sKCkpLFxuICAgICAgICAgICAgICAgICAgICAoYS5zZWxlY3RlZE1vbnRoID0gYS5jdXJyZW50TW9udGggPSB0KSxcbiAgICAgICAgICAgICAgICAgICAgKGEuc2VsZWN0ZWRZZWFyID0gYS5jdXJyZW50WWVhciA9IGkpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3REYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zvcm1hdERhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmN1cnJlbnREYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5jdXJyZW50TW9udGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5jdXJyZW50WWVhclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfY2xlYXJEYXRlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgdCA9ICQoZSk7XG4gICAgICAgICAgICB0aGlzLl9nZXRJbnN0KHRbMF0pLCB0aGlzLl9zZWxlY3REYXRlKHQsICcnKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NlbGVjdERhdGU6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgIHZhciBpID0gJChlKSxcbiAgICAgICAgICAgICAgICBzID0gdGhpcy5fZ2V0SW5zdChpWzBdKTtcbiAgICAgICAgICAgICh0ID0gbnVsbCAhPSB0ID8gdCA6IHRoaXMuX2Zvcm1hdERhdGUocykpLFxuICAgICAgICAgICAgICAgIHMuaW5wdXQgJiYgcy5pbnB1dC52YWwodCksXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlQWx0ZXJuYXRlKHMpO1xuICAgICAgICAgICAgdmFyIG4gPSB0aGlzLl9nZXQocywgJ29uU2VsZWN0Jyk7XG4gICAgICAgICAgICBuXG4gICAgICAgICAgICAgICAgPyBuLmFwcGx5KHMuaW5wdXQgPyBzLmlucHV0WzBdIDogbnVsbCwgW3QsIHNdKVxuICAgICAgICAgICAgICAgIDogcy5pbnB1dCAmJiBzLmlucHV0LnRyaWdnZXIoJ2NoYW5nZScpLFxuICAgICAgICAgICAgICAgIHMuaW5saW5lXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5fdXBkYXRlRGF0ZXBpY2tlcihzKVxuICAgICAgICAgICAgICAgICAgICA6ICh0aGlzLl9oaWRlRGF0ZXBpY2tlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICh0aGlzLl9sYXN0SW5wdXQgPSBzLmlucHV0WzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAnb2JqZWN0JyAhPSB0eXBlb2Ygcy5pbnB1dFswXSAmJiBzLmlucHV0LmZvY3VzKCksXG4gICAgICAgICAgICAgICAgICAgICAgKHRoaXMuX2xhc3RJbnB1dCA9IG51bGwpKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3VwZGF0ZUFsdGVybmF0ZTogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl9nZXQoZSwgJ2FsdEZpZWxkJyk7XG4gICAgICAgICAgICBpZiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcy5fZ2V0KGUsICdhbHRGb3JtYXQnKSB8fCB0aGlzLl9nZXQoZSwgJ2RhdGVGb3JtYXQnKSxcbiAgICAgICAgICAgICAgICAgICAgcyA9IHRoaXMuX2dldERhdGUoZSksXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0aGlzLmZvcm1hdERhdGUoaSwgcywgdGhpcy5fZ2V0Rm9ybWF0Q29uZmlnKGUpKTtcbiAgICAgICAgICAgICAgICAkKHQpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykudmFsKG4pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBub1dlZWtlbmRzOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgdCA9IGUuZ2V0RGF5KCk7XG4gICAgICAgICAgICByZXR1cm4gW3QgPiAwICYmIDYgPiB0LCAnJ107XG4gICAgICAgIH0sXG4gICAgICAgIGlzbzg2MDFXZWVrOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgdCA9IG5ldyBEYXRlKGUuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgIHQuc2V0RGF0ZSh0LmdldERhdGUoKSArIDQgLSAodC5nZXREYXkoKSB8fCA3KSk7XG4gICAgICAgICAgICB2YXIgaSA9IHQuZ2V0VGltZSgpO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICB0LnNldE1vbnRoKDApLFxuICAgICAgICAgICAgICAgIHQuc2V0RGF0ZSgxKSxcbiAgICAgICAgICAgICAgICBNYXRoLmZsb29yKE1hdGgucm91bmQoKGkgLSB0KSAvIDg2NGU1KSAvIDcpICsgMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgcGFyc2VEYXRlOiBmdW5jdGlvbihlLCB0LCBpKSB7XG4gICAgICAgICAgICBpZiAobnVsbCA9PSBlIHx8IG51bGwgPT0gdCkgdGhyb3cgJ0ludmFsaWQgYXJndW1lbnRzJztcbiAgICAgICAgICAgIGlmICgoKHQgPSAnb2JqZWN0JyA9PSB0eXBlb2YgdCA/ICcnICsgdCA6IHQgKyAnJyksICcnID09IHQpKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgdmFyIHMgPVxuICAgICAgICAgICAgICAgIChpID8gaS5zaG9ydFllYXJDdXRvZmYgOiBudWxsKSB8fFxuICAgICAgICAgICAgICAgIHRoaXMuX2RlZmF1bHRzLnNob3J0WWVhckN1dG9mZjtcbiAgICAgICAgICAgIHMgPVxuICAgICAgICAgICAgICAgICdzdHJpbmcnICE9IHR5cGVvZiBzXG4gICAgICAgICAgICAgICAgICAgID8gc1xuICAgICAgICAgICAgICAgICAgICA6IChuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkgJSAxMDApICsgcGFyc2VJbnQocywgMTApO1xuICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICB2YXIgbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICAoaSA/IGkuZGF5TmFtZXNTaG9ydCA6IG51bGwpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWZhdWx0cy5kYXlOYW1lc1Nob3J0LFxuICAgICAgICAgICAgICAgICAgICBhID0gKGkgPyBpLmRheU5hbWVzIDogbnVsbCkgfHwgdGhpcy5fZGVmYXVsdHMuZGF5TmFtZXMsXG4gICAgICAgICAgICAgICAgICAgIG8gPVxuICAgICAgICAgICAgICAgICAgICAgICAgKGkgPyBpLm1vbnRoTmFtZXNTaG9ydCA6IG51bGwpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWZhdWx0cy5tb250aE5hbWVzU2hvcnQsXG4gICAgICAgICAgICAgICAgICAgIHIgPSAoaSA/IGkubW9udGhOYW1lcyA6IG51bGwpIHx8IHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXMsXG4gICAgICAgICAgICAgICAgICAgIGggPSAtMSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IC0xLFxuICAgICAgICAgICAgICAgICAgICB1ID0gLTEsXG4gICAgICAgICAgICAgICAgICAgIGQgPSAtMSxcbiAgICAgICAgICAgICAgICAgICAgYyA9ICExLFxuICAgICAgICAgICAgICAgICAgICBwID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlLmxlbmd0aCA+IF8gKyAxICYmIGUuY2hhckF0KF8gKyAxKSA9PSB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgJiYgXysrLCBpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBwKGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQCcgPT0gZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAxNFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnIScgPT0gZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gMjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd5JyA9PSBlICYmIGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyA0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ28nID09IGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBSZWdFeHAoJ15cXFxcZHsxLCcgKyBzICsgJ30nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gdC5zdWJzdHJpbmcodikubWF0Y2gobik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWEpIHRocm93ICdNaXNzaW5nIG51bWJlciBhdCBwb3NpdGlvbiAnICsgdjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAodiArPSBhWzBdLmxlbmd0aCksIHBhcnNlSW50KGFbMF0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbSA9IGZ1bmN0aW9uKGUsIGksIHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gJC5tYXAocChlKSA/IHMgOiBpLCBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbW3QsIGVdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5zb3J0KGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0oZVsxXS5sZW5ndGggLSB0WzFdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkLmVhY2gobiwgZnVuY3Rpb24oZSwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IGlbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnN1YnN0cih2LCBzLmxlbmd0aCkudG9Mb3dlckNhc2UoKSA9PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICgoYSA9IGlbMF0pLCAodiArPSBzLmxlbmd0aCksICExKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLTEgIT0gYSlcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyAnVW5rbm93biBuYW1lIGF0IHBvc2l0aW9uICcgKyB2O1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5jaGFyQXQodikgIT0gZS5jaGFyQXQoXykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ1VuZXhwZWN0ZWQgbGl0ZXJhbCBhdCBwb3NpdGlvbiAnICsgdjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHYrKztcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdiA9IDAsXG4gICAgICAgICAgICAgICAgICAgIF8gPSAwO1xuICAgICAgICAgICAgICAgIGUubGVuZ3RoID4gXztcbiAgICAgICAgICAgICAgICBfKytcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBpZiAoYykgXCInXCIgIT0gZS5jaGFyQXQoXykgfHwgcChcIidcIikgPyBnKCkgOiAoYyA9ICExKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5jaGFyQXQoXykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBmKCdkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKCdEJywgbiwgYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdvJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gZignbycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IGYoJ20nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBtKCdNJywgbywgcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gZigneScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHkgPSBuZXcgRGF0ZShmKCdAJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoID0geS5nZXRGdWxsWWVhcigpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwgPSB5LmdldE1vbnRoKCkgKyAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHUgPSB5LmdldERhdGUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICchJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZignIScpIC0gdGhpcy5fdGlja3NUbzE5NzApIC8gMWU0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaCA9IHkuZ2V0RnVsbFllYXIoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsID0geS5nZXRNb250aCgpICsgMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh1ID0geS5nZXREYXRlKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIidcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwKFwiJ1wiKSA/IGcoKSA6IChjID0gITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0Lmxlbmd0aCA+IHYpIHtcbiAgICAgICAgICAgICAgICB2YXIgYiA9IHQuc3Vic3RyKHYpO1xuICAgICAgICAgICAgICAgIGlmICghL15cXHMrLy50ZXN0KGIpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyAnRXh0cmEvdW5wYXJzZWQgY2hhcmFjdGVycyBmb3VuZCBpbiBkYXRlOiAnICsgYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoLTEgPT0gaFxuICAgICAgICAgICAgICAgICAgICA/IChoID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpKVxuICAgICAgICAgICAgICAgICAgICA6IDEwMCA+IGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAoaCArPVxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAobmV3IERhdGUoKS5nZXRGdWxsWWVhcigpICUgMTAwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChzID49IGggPyAwIDogLTEwMCkpLFxuICAgICAgICAgICAgICAgIGQgPiAtMSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBmb3IgKGwgPSAxLCB1ID0gZDsgOyApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSB0aGlzLl9nZXREYXlzSW5Nb250aChoLCBsIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh4ID49IHUpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBsKyssICh1IC09IHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB5ID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoaCwgbCAtIDEsIHUpKTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB5LmdldEZ1bGxZZWFyKCkgIT0gaCB8fFxuICAgICAgICAgICAgICAgIHkuZ2V0TW9udGgoKSArIDEgIT0gbCB8fFxuICAgICAgICAgICAgICAgIHkuZ2V0RGF0ZSgpICE9IHVcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB0aHJvdyAnSW52YWxpZCBkYXRlJztcbiAgICAgICAgICAgIHJldHVybiB5O1xuICAgICAgICB9LFxuICAgICAgICBBVE9NOiAneXktbW0tZGQnLFxuICAgICAgICBDT09LSUU6ICdELCBkZCBNIHl5JyxcbiAgICAgICAgSVNPXzg2MDE6ICd5eS1tbS1kZCcsXG4gICAgICAgIFJGQ184MjI6ICdELCBkIE0geScsXG4gICAgICAgIFJGQ184NTA6ICdERCwgZGQtTS15JyxcbiAgICAgICAgUkZDXzEwMzY6ICdELCBkIE0geScsXG4gICAgICAgIFJGQ18xMTIzOiAnRCwgZCBNIHl5JyxcbiAgICAgICAgUkZDXzI4MjI6ICdELCBkIE0geXknLFxuICAgICAgICBSU1M6ICdELCBkIE0geScsXG4gICAgICAgIFRJQ0tTOiAnIScsXG4gICAgICAgIFRJTUVTVEFNUDogJ0AnLFxuICAgICAgICBXM0M6ICd5eS1tbS1kZCcsXG4gICAgICAgIF90aWNrc1RvMTk3MDpcbiAgICAgICAgICAgIDFlNyAqXG4gICAgICAgICAgICA2MCAqXG4gICAgICAgICAgICA2MCAqXG4gICAgICAgICAgICAyNCAqXG4gICAgICAgICAgICAoNzE4Njg1ICsgTWF0aC5mbG9vcig0OTIuNSkgLSBNYXRoLmZsb29yKDE5LjcpICsgTWF0aC5mbG9vcig0LjkyNSkpLFxuICAgICAgICBmb3JtYXREYXRlOiBmdW5jdGlvbihlLCB0LCBpKSB7XG4gICAgICAgICAgICBpZiAoIXQpIHJldHVybiAnJztcbiAgICAgICAgICAgIHZhciBzID1cbiAgICAgICAgICAgICAgICAgICAgKGkgPyBpLmRheU5hbWVzU2hvcnQgOiBudWxsKSB8fFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWZhdWx0cy5kYXlOYW1lc1Nob3J0LFxuICAgICAgICAgICAgICAgIG4gPSAoaSA/IGkuZGF5TmFtZXMgOiBudWxsKSB8fCB0aGlzLl9kZWZhdWx0cy5kYXlOYW1lcyxcbiAgICAgICAgICAgICAgICBhID1cbiAgICAgICAgICAgICAgICAgICAgKGkgPyBpLm1vbnRoTmFtZXNTaG9ydCA6IG51bGwpIHx8XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXNTaG9ydCxcbiAgICAgICAgICAgICAgICBvID0gKGkgPyBpLm1vbnRoTmFtZXMgOiBudWxsKSB8fCB0aGlzLl9kZWZhdWx0cy5tb250aE5hbWVzLFxuICAgICAgICAgICAgICAgIHIgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gZS5sZW5ndGggPiBjICsgMSAmJiBlLmNoYXJBdChjICsgMSkgPT0gdDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgJiYgYysrLCBpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaCA9IGZ1bmN0aW9uKGUsIHQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSAnJyArIHQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyKGUpKSBmb3IgKDsgaSA+IHMubGVuZ3RoOyApIHMgPSAnMCcgKyBzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGwgPSBmdW5jdGlvbihlLCB0LCBpLCBzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByKGUpID8gc1t0XSA6IGlbdF07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1ID0gJycsXG4gICAgICAgICAgICAgICAgZCA9ICExO1xuICAgICAgICAgICAgaWYgKHQpXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGUubGVuZ3RoID4gYzsgYysrKVxuICAgICAgICAgICAgICAgICAgICBpZiAoZClcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiJ1wiICE9IGUuY2hhckF0KGMpIHx8IHIoXCInXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAodSArPSBlLmNoYXJBdChjKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IChkID0gITEpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuY2hhckF0KGMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgKz0gaCgnZCcsIHQuZ2V0RGF0ZSgpLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgKz0gbCgnRCcsIHQuZ2V0RGF5KCksIHMsIG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdvJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdSArPSBoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ28nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobmV3IERhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5nZXRNb250aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldERhdGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkuZ2V0VGltZSgpIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLmdldFRpbWUoKSkgL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA4NjRlNVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgKz0gaCgnbScsIHQuZ2V0TW9udGgoKSArIDEsIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdSArPSBsKCdNJywgdC5nZXRNb250aCgpLCBhLCBvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgKz0gcigneScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHQuZ2V0RnVsbFllYXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoMTAgPiB0LmdldFllYXIoKSAlIDEwMCA/ICcwJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0LmdldFllYXIoKSAlIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0AnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ICs9IHQuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICchJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdSArPSAxZTQgKiB0LmdldFRpbWUoKSArIHRoaXMuX3RpY2tzVG8xOTcwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiJ1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByKFwiJ1wiKSA/ICh1ICs9IFwiJ1wiKSA6IChkID0gITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ICs9IGUuY2hhckF0KGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHU7XG4gICAgICAgIH0sXG4gICAgICAgIF9wb3NzaWJsZUNoYXJzOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgIHZhciB0ID0gJycsXG4gICAgICAgICAgICAgICAgICAgIGkgPSAhMSxcbiAgICAgICAgICAgICAgICAgICAgcyA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gZS5sZW5ndGggPiBuICsgMSAmJiBlLmNoYXJBdChuICsgMSkgPT0gdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpICYmIG4rKywgaTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbiA9IDA7XG4gICAgICAgICAgICAgICAgZS5sZW5ndGggPiBuO1xuICAgICAgICAgICAgICAgIG4rK1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGlmIChpKVxuICAgICAgICAgICAgICAgICAgICBcIidcIiAhPSBlLmNoYXJBdChuKSB8fCBzKFwiJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAodCArPSBlLmNoYXJBdChuKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKGkgPSAhMSk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuY2hhckF0KG4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdAJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ICs9ICcwMTIzNDU2Nzg5JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiJ1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMoXCInXCIpID8gKHQgKz0gXCInXCIpIDogKGkgPSAhMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgKz0gZS5jaGFyQXQobik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICB9LFxuICAgICAgICBfZ2V0OiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gZS5zZXR0aW5nc1t0XSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBlLnNldHRpbmdzW3RdXG4gICAgICAgICAgICAgICAgOiB0aGlzLl9kZWZhdWx0c1t0XTtcbiAgICAgICAgfSxcbiAgICAgICAgX3NldERhdGVGcm9tRmllbGQ6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgIGlmIChlLmlucHV0LnZhbCgpICE9IGUubGFzdFZhbCkge1xuICAgICAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgICAgICBuID0gdGhpcy5fZ2V0KGUsICdkYXRlRm9ybWF0JyksXG4gICAgICAgICAgICAgICAgICAgIGEgPSAoZS5sYXN0VmFsID0gZS5pbnB1dCA/IGUuaW5wdXQudmFsKCkgOiBudWxsKTtcbiAgICAgICAgICAgICAgICBpID0gcyA9IHRoaXMuX2dldERlZmF1bHREYXRlKGUpO1xuICAgICAgICAgICAgICAgIHZhciBvID0gdGhpcy5fZ2V0Rm9ybWF0Q29uZmlnKGUpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzLnBhcnNlRGF0ZShuLCBhLCBvKSB8fCBzO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cociksIChhID0gdCA/ICcnIDogYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIChlLnNlbGVjdGVkRGF5ID0gaS5nZXREYXRlKCkpLFxuICAgICAgICAgICAgICAgICAgICAoZS5kcmF3TW9udGggPSBlLnNlbGVjdGVkTW9udGggPSBpLmdldE1vbnRoKCkpLFxuICAgICAgICAgICAgICAgICAgICAoZS5kcmF3WWVhciA9IGUuc2VsZWN0ZWRZZWFyID0gaS5nZXRGdWxsWWVhcigpKSxcbiAgICAgICAgICAgICAgICAgICAgKGUuY3VycmVudERheSA9IGEgPyBpLmdldERhdGUoKSA6IDApLFxuICAgICAgICAgICAgICAgICAgICAoZS5jdXJyZW50TW9udGggPSBhID8gaS5nZXRNb250aCgpIDogMCksXG4gICAgICAgICAgICAgICAgICAgIChlLmN1cnJlbnRZZWFyID0gYSA/IGkuZ2V0RnVsbFllYXIoKSA6IDApLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGp1c3RJbnN0RGF0ZShlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2dldERlZmF1bHREYXRlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVzdHJpY3RNaW5NYXgoXG4gICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXRlcm1pbmVEYXRlKGUsIHRoaXMuX2dldChlLCAnZGVmYXVsdERhdGUnKSwgbmV3IERhdGUoKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIF9kZXRlcm1pbmVEYXRlOiBmdW5jdGlvbihlLCB0LCBpKSB7XG4gICAgICAgICAgICB2YXIgcyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5zZXREYXRlKHQuZ2V0RGF0ZSgpICsgZSksIHQ7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBuID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQuZGF0ZXBpY2tlci5wYXJzZURhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl9nZXQoZSwgJ2RhdGVGb3JtYXQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZGF0ZXBpY2tlci5fZ2V0Rm9ybWF0Q29uZmlnKGUpXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChpKSB7fVxuICAgICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9eYy8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICQuZGF0ZXBpY2tlci5fZ2V0RGF0ZShlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsKSB8fCBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBzLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHMuZ2V0TW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gcy5nZXREYXRlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IC8oWystXT9bMC05XSspXFxzKihkfER8d3xXfG18TXx5fFkpPy9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSByLmV4ZWModCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoO1xuXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChoWzJdIHx8ICdkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvICs9IHBhcnNlSW50KGhbMV0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gKz0gNyAqIHBhcnNlSW50KGhbMV0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhICs9IHBhcnNlSW50KGhbMV0sIDEwKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobyA9IE1hdGgubWluKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLl9nZXREYXlzSW5Nb250aChuLCBhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1knOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobiArPSBwYXJzZUludChoWzFdLCAxMCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG8gPSBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZGF0ZXBpY2tlci5fZ2V0RGF5c0luTW9udGgobiwgYSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaCA9IHIuZXhlYyh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUobiwgYSwgbyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhID1cbiAgICAgICAgICAgICAgICAgICAgbnVsbCA9PSB0IHx8ICcnID09PSB0XG4gICAgICAgICAgICAgICAgICAgICAgICA/IGlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJ3N0cmluZycgPT0gdHlwZW9mIHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG4odClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdudW1iZXInID09IHR5cGVvZiB0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gaXNOYU4odClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBzKHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IERhdGUodC5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAoYSA9IGEgJiYgJ0ludmFsaWQgRGF0ZScgPT0gJycgKyBhID8gaSA6IGEpLFxuICAgICAgICAgICAgICAgIGEgJiZcbiAgICAgICAgICAgICAgICAgICAgKGEuc2V0SG91cnMoMCksXG4gICAgICAgICAgICAgICAgICAgIGEuc2V0TWludXRlcygwKSxcbiAgICAgICAgICAgICAgICAgICAgYS5zZXRTZWNvbmRzKDApLFxuICAgICAgICAgICAgICAgICAgICBhLnNldE1pbGxpc2Vjb25kcygwKSksXG4gICAgICAgICAgICAgICAgdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoYSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIF9kYXlsaWdodFNhdmluZ0FkanVzdDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIGVcbiAgICAgICAgICAgICAgICA/IChlLnNldEhvdXJzKGUuZ2V0SG91cnMoKSA+IDEyID8gZS5nZXRIb3VycygpICsgMiA6IDApLCBlKVxuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgX3NldERhdGU6IGZ1bmN0aW9uKGUsIHQsIGkpIHtcbiAgICAgICAgICAgIHZhciBzID0gIXQsXG4gICAgICAgICAgICAgICAgbiA9IGUuc2VsZWN0ZWRNb250aCxcbiAgICAgICAgICAgICAgICBhID0gZS5zZWxlY3RlZFllYXIsXG4gICAgICAgICAgICAgICAgbyA9IHRoaXMuX3Jlc3RyaWN0TWluTWF4KFxuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZXRlcm1pbmVEYXRlKGUsIHQsIG5ldyBEYXRlKCkpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIChlLnNlbGVjdGVkRGF5ID0gZS5jdXJyZW50RGF5ID0gby5nZXREYXRlKCkpLFxuICAgICAgICAgICAgICAgIChlLmRyYXdNb250aCA9IGUuc2VsZWN0ZWRNb250aCA9IGUuY3VycmVudE1vbnRoID0gby5nZXRNb250aCgpKSxcbiAgICAgICAgICAgICAgICAoZS5kcmF3WWVhciA9IGUuc2VsZWN0ZWRZZWFyID0gZS5jdXJyZW50WWVhciA9IG8uZ2V0RnVsbFllYXIoKSksXG4gICAgICAgICAgICAgICAgKG4gPT0gZS5zZWxlY3RlZE1vbnRoICYmIGEgPT0gZS5zZWxlY3RlZFllYXIpIHx8XG4gICAgICAgICAgICAgICAgICAgIGkgfHxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5Q2hhbmdlKGUpLFxuICAgICAgICAgICAgICAgIHRoaXMuX2FkanVzdEluc3REYXRlKGUpLFxuICAgICAgICAgICAgICAgIGUuaW5wdXQgJiYgZS5pbnB1dC52YWwocyA/ICcnIDogdGhpcy5fZm9ybWF0RGF0ZShlKSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXREYXRlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgdCA9XG4gICAgICAgICAgICAgICAgIWUuY3VycmVudFllYXIgfHwgKGUuaW5wdXQgJiYgJycgPT0gZS5pbnB1dC52YWwoKSlcbiAgICAgICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKGUuY3VycmVudFllYXIsIGUuY3VycmVudE1vbnRoLCBlLmN1cnJlbnREYXkpXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICB9LFxuICAgICAgICBfYXR0YWNoSGFuZGxlcnM6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fZ2V0KGUsICdzdGVwTW9udGhzJyksXG4gICAgICAgICAgICAgICAgaSA9ICcjJyArIGUuaWQucmVwbGFjZSgvXFxcXFxcXFwvZywgJ1xcXFwnKTtcbiAgICAgICAgICAgIGUuZHBEaXYuZmluZCgnW2RhdGEtaGFuZGxlcl0nKS5tYXAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXY6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93WydEUF9qUXVlcnlfJyArIGRwdXVpZF0uZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC10LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdNJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dbJ0RQX2pRdWVyeV8nICsgZHB1dWlkXS5kYXRlcGlja2VyLl9hZGp1c3REYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgK3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ00nXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBoaWRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRFBfalF1ZXJ5XycgKyBkcHV1aWRcbiAgICAgICAgICAgICAgICAgICAgICAgIF0uZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG9kYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93WydEUF9qUXVlcnlfJyArIGRwdXVpZF0uZGF0ZXBpY2tlci5fZ290b1RvZGF5KGkpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3REYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dbJ0RQX2pRdWVyeV8nICsgZHB1dWlkXS5kYXRlcGlja2VyLl9zZWxlY3REYXkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICt0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1tb250aCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEteWVhcicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0TW9udGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdEUF9qUXVlcnlfJyArIGRwdXVpZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uZGF0ZXBpY2tlci5fc2VsZWN0TW9udGhZZWFyKGksIHRoaXMsICdNJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgITFcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdFllYXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdEUF9qUXVlcnlfJyArIGRwdXVpZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uZGF0ZXBpY2tlci5fc2VsZWN0TW9udGhZZWFyKGksIHRoaXMsICdZJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgITFcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmJpbmQoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLWV2ZW50JyksXG4gICAgICAgICAgICAgICAgICAgIGVbdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGFuZGxlcicpXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dlbmVyYXRlSFRNTDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgdCA9IHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KFxuICAgICAgICAgICAgICAgIG5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSwgdC5nZXRNb250aCgpLCB0LmdldERhdGUoKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuX2dldChlLCAnaXNSVEwnKSxcbiAgICAgICAgICAgICAgICBzID0gdGhpcy5fZ2V0KGUsICdzaG93QnV0dG9uUGFuZWwnKSxcbiAgICAgICAgICAgICAgICBuID0gdGhpcy5fZ2V0KGUsICdoaWRlSWZOb1ByZXZOZXh0JyksXG4gICAgICAgICAgICAgICAgYSA9IHRoaXMuX2dldChlLCAnbmF2aWdhdGlvbkFzRGF0ZUZvcm1hdCcpLFxuICAgICAgICAgICAgICAgIG8gPSB0aGlzLl9nZXROdW1iZXJPZk1vbnRocyhlKSxcbiAgICAgICAgICAgICAgICByID0gdGhpcy5fZ2V0KGUsICdzaG93Q3VycmVudEF0UG9zJyksXG4gICAgICAgICAgICAgICAgaCA9IHRoaXMuX2dldChlLCAnc3RlcE1vbnRocycpLFxuICAgICAgICAgICAgICAgIGwgPSAxICE9IG9bMF0gfHwgMSAhPSBvWzFdLFxuICAgICAgICAgICAgICAgIHUgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChcbiAgICAgICAgICAgICAgICAgICAgZS5jdXJyZW50RGF5XG4gICAgICAgICAgICAgICAgICAgICAgICA/IG5ldyBEYXRlKGUuY3VycmVudFllYXIsIGUuY3VycmVudE1vbnRoLCBlLmN1cnJlbnREYXkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG5ldyBEYXRlKDk5OTksIDksIDkpXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBkID0gdGhpcy5fZ2V0TWluTWF4RGF0ZShlLCAnbWluJyksXG4gICAgICAgICAgICAgICAgYyA9IHRoaXMuX2dldE1pbk1heERhdGUoZSwgJ21heCcpLFxuICAgICAgICAgICAgICAgIHAgPSBlLmRyYXdNb250aCAtIHIsXG4gICAgICAgICAgICAgICAgZiA9IGUuZHJhd1llYXI7XG4gICAgICAgICAgICBpZiAoKDAgPiBwICYmICgocCArPSAxMiksIGYtLSksIGMpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG0gPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChcbiAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBjLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjLmdldE1vbnRoKCkgLSBvWzBdICogb1sxXSArIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjLmdldERhdGUoKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICBtID0gZCAmJiBkID4gbSA/IGQgOiBtO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShmLCBwLCAxKSkgPiBtO1xuXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBwLS0sIDAgPiBwICYmICgocCA9IDExKSwgZi0tKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChlLmRyYXdNb250aCA9IHApLCAoZS5kcmF3WWVhciA9IGYpO1xuICAgICAgICAgICAgdmFyIGcgPSB0aGlzLl9nZXQoZSwgJ3ByZXZUZXh0Jyk7XG4gICAgICAgICAgICBnID0gYVxuICAgICAgICAgICAgICAgID8gdGhpcy5mb3JtYXREYXRlKFxuICAgICAgICAgICAgICAgICAgICAgIGcsXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoZiwgcCAtIGgsIDEpKSxcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZXRGb3JtYXRDb25maWcoZSlcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA6IGc7XG4gICAgICAgICAgICB2YXIgdiA9IHRoaXMuX2NhbkFkanVzdE1vbnRoKGUsIC0xLCBmLCBwKVxuICAgICAgICAgICAgICAgICAgICA/ICc8YSBjbGFzcz1cInVpLWRhdGVwaWNrZXItcHJldiB1aS1jb3JuZXItYWxsXCIgZGF0YS1oYW5kbGVyPVwicHJldlwiIGRhdGEtZXZlbnQ9XCJjbGlja1wiIHRpdGxlPVwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgZyArXG4gICAgICAgICAgICAgICAgICAgICAgJ1wiPjxzcGFuIGNsYXNzPVwidWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS0nICtcbiAgICAgICAgICAgICAgICAgICAgICAoaSA/ICdlJyA6ICd3JykgK1xuICAgICAgICAgICAgICAgICAgICAgICdcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICBnICtcbiAgICAgICAgICAgICAgICAgICAgICAnPC9zcGFuPjwvYT4nXG4gICAgICAgICAgICAgICAgICAgIDogblxuICAgICAgICAgICAgICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiAnPGEgY2xhc3M9XCJ1aS1kYXRlcGlja2VyLXByZXYgdWktY29ybmVyLWFsbCB1aS1zdGF0ZS1kaXNhYmxlZFwiIHRpdGxlPVwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnXCI+PHNwYW4gY2xhc3M9XCJ1aS1pY29uIHVpLWljb24tY2lyY2xlLXRyaWFuZ2xlLScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAoaSA/ICdlJyA6ICd3JykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9zcGFuPjwvYT4nLFxuICAgICAgICAgICAgICAgIF8gPSB0aGlzLl9nZXQoZSwgJ25leHRUZXh0Jyk7XG4gICAgICAgICAgICBfID0gYVxuICAgICAgICAgICAgICAgID8gdGhpcy5mb3JtYXREYXRlKFxuICAgICAgICAgICAgICAgICAgICAgIF8sXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoZiwgcCArIGgsIDEpKSxcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZXRGb3JtYXRDb25maWcoZSlcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA6IF87XG4gICAgICAgICAgICB2YXIgeSA9IHRoaXMuX2NhbkFkanVzdE1vbnRoKGUsIDEsIGYsIHApXG4gICAgICAgICAgICAgICAgICAgID8gJzxhIGNsYXNzPVwidWktZGF0ZXBpY2tlci1uZXh0IHVpLWNvcm5lci1hbGxcIiBkYXRhLWhhbmRsZXI9XCJuZXh0XCIgZGF0YS1ldmVudD1cImNsaWNrXCIgdGl0bGU9XCInICtcbiAgICAgICAgICAgICAgICAgICAgICBfICtcbiAgICAgICAgICAgICAgICAgICAgICAnXCI+PHNwYW4gY2xhc3M9XCJ1aS1pY29uIHVpLWljb24tY2lyY2xlLXRyaWFuZ2xlLScgK1xuICAgICAgICAgICAgICAgICAgICAgIChpID8gJ3cnIDogJ2UnKSArXG4gICAgICAgICAgICAgICAgICAgICAgJ1wiPicgK1xuICAgICAgICAgICAgICAgICAgICAgIF8gK1xuICAgICAgICAgICAgICAgICAgICAgICc8L3NwYW4+PC9hPidcbiAgICAgICAgICAgICAgICAgICAgOiBuXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICc8YSBjbGFzcz1cInVpLWRhdGVwaWNrZXItbmV4dCB1aS1jb3JuZXItYWxsIHVpLXN0YXRlLWRpc2FibGVkXCIgdGl0bGU9XCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdcIj48c3BhbiBjbGFzcz1cInVpLWljb24gdWktaWNvbi1jaXJjbGUtdHJpYW5nbGUtJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChpID8gJ3cnIDogJ2UnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICc8L3NwYW4+PC9hPicsXG4gICAgICAgICAgICAgICAgYiA9IHRoaXMuX2dldChlLCAnY3VycmVudFRleHQnKSxcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5fZ2V0KGUsICdnb3RvQ3VycmVudCcpICYmIGUuY3VycmVudERheSA/IHUgOiB0O1xuICAgICAgICAgICAgYiA9IGEgPyB0aGlzLmZvcm1hdERhdGUoYiwgeCwgdGhpcy5fZ2V0Rm9ybWF0Q29uZmlnKGUpKSA6IGI7XG4gICAgICAgICAgICB2YXIgdyA9IGUuaW5saW5lXG4gICAgICAgICAgICAgICAgICAgID8gJydcbiAgICAgICAgICAgICAgICAgICAgOiAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJ1aS1kYXRlcGlja2VyLWNsb3NlIHVpLXN0YXRlLWRlZmF1bHQgdWktcHJpb3JpdHktcHJpbWFyeSB1aS1jb3JuZXItYWxsXCIgZGF0YS1oYW5kbGVyPVwiaGlkZVwiIGRhdGEtZXZlbnQ9XCJjbGlja1wiPicgK1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldChlLCAnY2xvc2VUZXh0JykgK1xuICAgICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgIGsgPSBzXG4gICAgICAgICAgICAgICAgICAgID8gJzxkaXYgY2xhc3M9XCJ1aS1kYXRlcGlja2VyLWJ1dHRvbnBhbmUgdWktd2lkZ2V0LWNvbnRlbnRcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAoaSA/IHcgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICh0aGlzLl9pc0luUmFuZ2UoZSwgeClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJ1aS1kYXRlcGlja2VyLWN1cnJlbnQgdWktc3RhdGUtZGVmYXVsdCB1aS1wcmlvcml0eS1zZWNvbmRhcnkgdWktY29ybmVyLWFsbFwiIGRhdGEtaGFuZGxlcj1cInRvZGF5XCIgZGF0YS1ldmVudD1cImNsaWNrXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgIChpID8gJycgOiB3KSArXG4gICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgOiAnJyxcbiAgICAgICAgICAgICAgICBEID0gcGFyc2VJbnQodGhpcy5fZ2V0KGUsICdmaXJzdERheScpLCAxMCk7XG4gICAgICAgICAgICBEID0gaXNOYU4oRCkgPyAwIDogRDtcbiAgICAgICAgICAgIHZhciBUID0gdGhpcy5fZ2V0KGUsICdzaG93V2VlaycpLFxuICAgICAgICAgICAgICAgIFMgPSB0aGlzLl9nZXQoZSwgJ2RheU5hbWVzJyk7XG4gICAgICAgICAgICB0aGlzLl9nZXQoZSwgJ2RheU5hbWVzU2hvcnQnKTtcbiAgICAgICAgICAgIHZhciBNID0gdGhpcy5fZ2V0KGUsICdkYXlOYW1lc01pbicpLFxuICAgICAgICAgICAgICAgIE4gPSB0aGlzLl9nZXQoZSwgJ21vbnRoTmFtZXMnKSxcbiAgICAgICAgICAgICAgICBDID0gdGhpcy5fZ2V0KGUsICdtb250aE5hbWVzU2hvcnQnKSxcbiAgICAgICAgICAgICAgICBQID0gdGhpcy5fZ2V0KGUsICdiZWZvcmVTaG93RGF5JyksXG4gICAgICAgICAgICAgICAgQSA9IHRoaXMuX2dldChlLCAnc2hvd090aGVyTW9udGhzJyksXG4gICAgICAgICAgICAgICAgSSA9IHRoaXMuX2dldChlLCAnc2VsZWN0T3RoZXJNb250aHMnKTtcbiAgICAgICAgICAgIHRoaXMuX2dldChlLCAnY2FsY3VsYXRlV2VlaycpIHx8IHRoaXMuaXNvODYwMVdlZWs7XG4gICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgIHZhciBIID0gdGhpcy5fZ2V0RGVmYXVsdERhdGUoZSksIHogPSAnJywgRiA9IDA7XG4gICAgICAgICAgICAgICAgb1swXSA+IEY7XG4gICAgICAgICAgICAgICAgRisrXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB2YXIgRSA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMubWF4Um93cyA9IDQ7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgTyA9IDA7IG9bMV0gPiBPOyBPKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIFcgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRGF0ZShmLCBwLCBlLnNlbGVjdGVkRGF5KVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGogPSAnIHVpLWNvcm5lci1hbGwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgTCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAobCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoTCArPSAnPGRpdiBjbGFzcz1cInVpLWRhdGVwaWNrZXItZ3JvdXAnKSwgb1sxXSA+IDEpXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChPKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChMICs9ICcgdWktZGF0ZXBpY2tlci1ncm91cC1maXJzdCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChqID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyB1aS1jb3JuZXItJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpID8gJ3JpZ2h0JyA6ICdsZWZ0JykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugb1sxXSAtIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoTCArPSAnIHVpLWRhdGVwaWNrZXItZ3JvdXAtbGFzdCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChqID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyB1aS1jb3JuZXItJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpID8gJ2xlZnQnIDogJ3JpZ2h0JykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoTCArPSAnIHVpLWRhdGVwaWNrZXItZ3JvdXAtbWlkZGxlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGogPSAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgTCArPSAnXCI+JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBMICs9XG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInVpLWRhdGVwaWNrZXItaGVhZGVyIHVpLXdpZGdldC1oZWFkZXIgdWktaGVscGVyLWNsZWFyZml4JyArXG4gICAgICAgICAgICAgICAgICAgICAgICBqICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICgvYWxsfGxlZnQvLnRlc3QoaikgJiYgMCA9PSBGID8gKGkgPyB5IDogdikgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKC9hbGx8cmlnaHQvLnRlc3QoaikgJiYgMCA9PSBGID8gKGkgPyB2IDogeSkgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2VuZXJhdGVNb250aFllYXJIZWFkZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEYgPiAwIHx8IE8gPiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1xuICAgICAgICAgICAgICAgICAgICAgICAgKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+PHRhYmxlIGNsYXNzPVwidWktZGF0ZXBpY2tlci1jYWxlbmRhclwiPjx0aGVhZD4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8dHI+JztcbiAgICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBSID0gVFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICc8dGggY2xhc3M9XCJ1aS1kYXRlcGlja2VyLXdlZWstY29sXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0KGUsICd3ZWVrSGVhZGVyJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3RoPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBZID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIDcgPiBZO1xuICAgICAgICAgICAgICAgICAgICAgICAgWSsrXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIEIgPSAoWSArIEQpICUgNztcbiAgICAgICAgICAgICAgICAgICAgICAgIFIgKz1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHRoJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChZICsgRCArIDYpICUgNyA+PSA1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyBjbGFzcz1cInVpLWRhdGVwaWNrZXItd2Vlay1lbmRcIidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIHRpdGxlPVwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU1tCXSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1bQl0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3NwYW4+PC90aD4nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIEwgKz0gUiArICc8L3RyPjwvdGhlYWQ+PHRib2R5Pic7XG4gICAgICAgICAgICAgICAgICAgIHZhciBKID0gdGhpcy5fZ2V0RGF5c0luTW9udGgoZiwgcCk7XG4gICAgICAgICAgICAgICAgICAgIGYgPT0gZS5zZWxlY3RlZFllYXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgPT0gZS5zZWxlY3RlZE1vbnRoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS5zZWxlY3RlZERheSA9IE1hdGgubWluKGUuc2VsZWN0ZWREYXksIEopKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIEsgPSAodGhpcy5fZ2V0Rmlyc3REYXlPZk1vbnRoKGYsIHApIC0gRCArIDcpICUgNyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFYgPSBNYXRoLmNlaWwoKEsgKyBKKSAvIDcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgVSA9IGwgPyAodGhpcy5tYXhSb3dzID4gViA/IHRoaXMubWF4Um93cyA6IFYpIDogVjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhSb3dzID0gVTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKGYsIHAsIDEgLSBLKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBVID4gUTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFErK1xuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEwgKz0gJzx0cj4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgRyA9IFRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJzx0ZCBjbGFzcz1cInVpLWRhdGVwaWNrZXItd2Vlay1jb2xcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0KGUsICdjYWxjdWxhdGVXZWVrJykocSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC90ZD4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA3ID4gWTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBZKytcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBYID0gUFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBQLmFwcGx5KGUuaW5wdXQgPyBlLmlucHV0WzBdIDogbnVsbCwgW3FdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBbITAsICcnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWiA9IHEuZ2V0TW9udGgoKSAhPSBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoWiAmJiAhSSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFYWzBdIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZCAmJiBkID4gcSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjICYmIHEgPiBjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoRyArPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHRkIGNsYXNzPVwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoWSArIEQgKyA2KSAlIDcgPj0gNVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIHVpLWRhdGVwaWNrZXItd2Vlay1lbmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChaID8gJyB1aS1kYXRlcGlja2VyLW90aGVyLW1vbnRoJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgocS5nZXRUaW1lKCkgPT0gVy5nZXRUaW1lKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgPT0gZS5zZWxlY3RlZE1vbnRoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLl9rZXlFdmVudCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEguZ2V0VGltZSgpID09IHEuZ2V0VGltZSgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBILmdldFRpbWUoKSA9PSBXLmdldFRpbWUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyAnICsgdGhpcy5fZGF5T3ZlckNsYXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChldFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91bnNlbGVjdGFibGVDbGFzcyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgdWktc3RhdGUtZGlzYWJsZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChaICYmICFBXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFhbMV0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocS5nZXRUaW1lKCkgPT0gdS5nZXRUaW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyAnICsgdGhpcy5fY3VycmVudENsYXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChxLmdldFRpbWUoKSA9PSB0LmdldFRpbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIHVpLWRhdGVwaWNrZXItdG9kYXknXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnKSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChaICYmICFBKSB8fCAhWFsyXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnIHRpdGxlPVwiJyArIFhbMl0gKyAnXCInKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChldFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnIGRhdGEtaGFuZGxlcj1cInNlbGVjdERheVwiIGRhdGEtZXZlbnQ9XCJjbGlja1wiIGRhdGEtbW9udGg9XCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcS5nZXRNb250aCgpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiIGRhdGEteWVhcj1cIicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxLmdldEZ1bGxZZWFyKCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCInKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChaICYmICFBXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcmI3hhMDsnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnPHNwYW4gY2xhc3M9XCJ1aS1zdGF0ZS1kZWZhdWx0XCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxLmdldERhdGUoKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9zcGFuPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICc8YSBjbGFzcz1cInVpLXN0YXRlLWRlZmF1bHQnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChxLmdldFRpbWUoKSA9PSB0LmdldFRpbWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyB1aS1zdGF0ZS1oaWdobGlnaHQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHEuZ2V0VGltZSgpID09IHUuZ2V0VGltZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnIHVpLXN0YXRlLWFjdGl2ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoWiA/ICcgdWktcHJpb3JpdHktc2Vjb25kYXJ5JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCIgaHJlZj1cIiNcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEuZ2V0RGF0ZSgpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2E+JykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC90ZD4nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcS5zZXREYXRlKHEuZ2V0RGF0ZSgpICsgMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChxID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QocSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgTCArPSBHICsgJzwvdHI+JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwKyssXG4gICAgICAgICAgICAgICAgICAgICAgICBwID4gMTEgJiYgKChwID0gMCksIGYrKyksXG4gICAgICAgICAgICAgICAgICAgICAgICAoTCArPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3Rib2R5PjwvdGFibGU+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9bMF0gPiAwICYmIE8gPT0gb1sxXSAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnPGRpdiBjbGFzcz1cInVpLWRhdGVwaWNrZXItcm93LWJyZWFrXCI+PC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoRSArPSBMKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgeiArPSBFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAoeiArPVxuICAgICAgICAgICAgICAgICAgICBrICtcbiAgICAgICAgICAgICAgICAgICAgKCQudWkuaWU2ICYmICFlLmlubGluZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAnPGlmcmFtZSBzcmM9XCJqYXZhc2NyaXB0OmZhbHNlO1wiIGNsYXNzPVwidWktZGF0ZXBpY2tlci1jb3ZlclwiIGZyYW1lYm9yZGVyPVwiMFwiPjwvaWZyYW1lPidcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJycpKSxcbiAgICAgICAgICAgICAgICAoZS5fa2V5RXZlbnQgPSAhMSksXG4gICAgICAgICAgICAgICAgelxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dlbmVyYXRlTW9udGhZZWFySGVhZGVyOiBmdW5jdGlvbihlLCB0LCBpLCBzLCBuLCBhLCBvLCByKSB7XG4gICAgICAgICAgICB2YXIgaCA9IHRoaXMuX2dldChlLCAnY2hhbmdlTW9udGgnKSxcbiAgICAgICAgICAgICAgICBsID0gdGhpcy5fZ2V0KGUsICdjaGFuZ2VZZWFyJyksXG4gICAgICAgICAgICAgICAgdSA9IHRoaXMuX2dldChlLCAnc2hvd01vbnRoQWZ0ZXJZZWFyJyksXG4gICAgICAgICAgICAgICAgZCA9ICc8ZGl2IGNsYXNzPVwidWktZGF0ZXBpY2tlci10aXRsZVwiPicsXG4gICAgICAgICAgICAgICAgYyA9ICcnO1xuICAgICAgICAgICAgaWYgKGEgfHwgIWgpXG4gICAgICAgICAgICAgICAgYyArPSAnPHNwYW4gY2xhc3M9XCJ1aS1kYXRlcGlja2VyLW1vbnRoXCI+JyArIG9bdF0gKyAnPC9zcGFuPic7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcCA9IHMgJiYgcy5nZXRGdWxsWWVhcigpID09IGksXG4gICAgICAgICAgICAgICAgICAgIGYgPSBuICYmIG4uZ2V0RnVsbFllYXIoKSA9PSBpO1xuICAgICAgICAgICAgICAgIGMgKz1cbiAgICAgICAgICAgICAgICAgICAgJzxzZWxlY3QgY2xhc3M9XCJ1aS1kYXRlcGlja2VyLW1vbnRoXCIgZGF0YS1oYW5kbGVyPVwic2VsZWN0TW9udGhcIiBkYXRhLWV2ZW50PVwiY2hhbmdlXCI+JztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBtID0gMDsgMTIgPiBtOyBtKyspXG4gICAgICAgICAgICAgICAgICAgICghcCB8fCBtID49IHMuZ2V0TW9udGgoKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICghZiB8fCBuLmdldE1vbnRoKCkgPj0gbSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChjICs9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxvcHRpb24gdmFsdWU9XCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobSA9PSB0ID8gJyBzZWxlY3RlZD1cInNlbGVjdGVkXCInIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJbbV0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L29wdGlvbj4nKTtcbiAgICAgICAgICAgICAgICBjICs9ICc8L3NlbGVjdD4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh1IHx8IChkICs9IGMgKyAoIWEgJiYgaCAmJiBsID8gJycgOiAnJiN4YTA7JykpLCAhZS55ZWFyc2h0bWwpKVxuICAgICAgICAgICAgICAgIGlmICgoKGUueWVhcnNodG1sID0gJycpLCBhIHx8ICFsKSlcbiAgICAgICAgICAgICAgICAgICAgZCArPSAnPHNwYW4gY2xhc3M9XCJ1aS1kYXRlcGlja2VyLXllYXJcIj4nICsgaSArICc8L3NwYW4+JztcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGcgPSB0aGlzLl9nZXQoZSwgJ3llYXJSYW5nZScpLnNwbGl0KCc6JyksXG4gICAgICAgICAgICAgICAgICAgICAgICB2ID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGUubWF0Y2goL2NbKy1dLiovKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGkgKyBwYXJzZUludChlLnN1YnN0cmluZygxKSwgMTApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZS5tYXRjaCgvWystXS4qLylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdiArIHBhcnNlSW50KGUsIDEwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBwYXJzZUludChlLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzTmFOKHQpID8gdiA6IHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IF8oZ1swXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBiID0gTWF0aC5tYXgoeSwgXyhnWzFdIHx8ICcnKSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gcyA/IE1hdGgubWF4KHksIHMuZ2V0RnVsbFllYXIoKSkgOiB5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBuID8gTWF0aC5taW4oYiwgbi5nZXRGdWxsWWVhcigpKSA6IGIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS55ZWFyc2h0bWwgKz1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzZWxlY3QgY2xhc3M9XCJ1aS1kYXRlcGlja2VyLXllYXJcIiBkYXRhLWhhbmRsZXI9XCJzZWxlY3RZZWFyXCIgZGF0YS1ldmVudD1cImNoYW5nZVwiPic7XG4gICAgICAgICAgICAgICAgICAgICAgICBiID49IHk7XG4gICAgICAgICAgICAgICAgICAgICAgICB5KytcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgZS55ZWFyc2h0bWwgKz1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPG9wdGlvbiB2YWx1ZT1cIicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcIicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh5ID09IGkgPyAnIHNlbGVjdGVkPVwic2VsZWN0ZWRcIicgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvb3B0aW9uPic7XG4gICAgICAgICAgICAgICAgICAgIChlLnllYXJzaHRtbCArPSAnPC9zZWxlY3Q+JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZCArPSBlLnllYXJzaHRtbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZS55ZWFyc2h0bWwgPSBudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIChkICs9IHRoaXMuX2dldChlLCAneWVhclN1ZmZpeCcpKSxcbiAgICAgICAgICAgICAgICB1ICYmIChkICs9ICghYSAmJiBoICYmIGwgPyAnJyA6ICcmI3hhMDsnKSArIGMpLFxuICAgICAgICAgICAgICAgIChkICs9ICc8L2Rpdj4nKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2FkanVzdEluc3REYXRlOiBmdW5jdGlvbihlLCB0LCBpKSB7XG4gICAgICAgICAgICB2YXIgcyA9IGUuZHJhd1llYXIgKyAoJ1knID09IGkgPyB0IDogMCksXG4gICAgICAgICAgICAgICAgbiA9IGUuZHJhd01vbnRoICsgKCdNJyA9PSBpID8gdCA6IDApLFxuICAgICAgICAgICAgICAgIGEgPVxuICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbihlLnNlbGVjdGVkRGF5LCB0aGlzLl9nZXREYXlzSW5Nb250aChzLCBuKSkgK1xuICAgICAgICAgICAgICAgICAgICAoJ0QnID09IGkgPyB0IDogMCksXG4gICAgICAgICAgICAgICAgbyA9IHRoaXMuX3Jlc3RyaWN0TWluTWF4KFxuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShzLCBuLCBhKSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgKGUuc2VsZWN0ZWREYXkgPSBvLmdldERhdGUoKSksXG4gICAgICAgICAgICAgICAgKGUuZHJhd01vbnRoID0gZS5zZWxlY3RlZE1vbnRoID0gby5nZXRNb250aCgpKSxcbiAgICAgICAgICAgICAgICAoZS5kcmF3WWVhciA9IGUuc2VsZWN0ZWRZZWFyID0gby5nZXRGdWxsWWVhcigpKSxcbiAgICAgICAgICAgICAgICAoJ00nID09IGkgfHwgJ1knID09IGkpICYmIHRoaXMuX25vdGlmeUNoYW5nZShlKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3Jlc3RyaWN0TWluTWF4OiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuX2dldE1pbk1heERhdGUoZSwgJ21pbicpLFxuICAgICAgICAgICAgICAgIHMgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKGUsICdtYXgnKSxcbiAgICAgICAgICAgICAgICBuID0gaSAmJiBpID4gdCA/IGkgOiB0O1xuICAgICAgICAgICAgcmV0dXJuIChuID0gcyAmJiBuID4gcyA/IHMgOiBuKTtcbiAgICAgICAgfSxcbiAgICAgICAgX25vdGlmeUNoYW5nZTogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl9nZXQoZSwgJ29uQ2hhbmdlTW9udGhZZWFyJyk7XG4gICAgICAgICAgICB0ICYmXG4gICAgICAgICAgICAgICAgdC5hcHBseShlLmlucHV0ID8gZS5pbnB1dFswXSA6IG51bGwsIFtcbiAgICAgICAgICAgICAgICAgICAgZS5zZWxlY3RlZFllYXIsXG4gICAgICAgICAgICAgICAgICAgIGUuc2VsZWN0ZWRNb250aCArIDEsXG4gICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXROdW1iZXJPZk1vbnRoczogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl9nZXQoZSwgJ251bWJlck9mTW9udGhzJyk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0ID8gWzEsIDFdIDogJ251bWJlcicgPT0gdHlwZW9mIHQgPyBbMSwgdF0gOiB0O1xuICAgICAgICB9LFxuICAgICAgICBfZ2V0TWluTWF4RGF0ZTogZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RldGVybWluZURhdGUoZSwgdGhpcy5fZ2V0KGUsIHQgKyAnRGF0ZScpLCBudWxsKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldERheXNJbk1vbnRoOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDMyIC0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoZSwgdCwgMzIpKS5nZXREYXRlKClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRGaXJzdERheU9mTW9udGg6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShlLCB0LCAxKS5nZXREYXkoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2NhbkFkanVzdE1vbnRoOiBmdW5jdGlvbihlLCB0LCBpLCBzKSB7XG4gICAgICAgICAgICB2YXIgbiA9IHRoaXMuX2dldE51bWJlck9mTW9udGhzKGUpLFxuICAgICAgICAgICAgICAgIGEgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChcbiAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUoaSwgcyArICgwID4gdCA/IHQgOiBuWzBdICogblsxXSksIDEpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgMCA+IHQgJiZcbiAgICAgICAgICAgICAgICAgICAgYS5zZXREYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0RGF5c0luTW9udGgoYS5nZXRGdWxsWWVhcigpLCBhLmdldE1vbnRoKCkpXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgdGhpcy5faXNJblJhbmdlKGUsIGEpXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBfaXNJblJhbmdlOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuX2dldE1pbk1heERhdGUoZSwgJ21pbicpLFxuICAgICAgICAgICAgICAgIHMgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKGUsICdtYXgnKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgKCFpIHx8IHQuZ2V0VGltZSgpID49IGkuZ2V0VGltZSgpKSAmJlxuICAgICAgICAgICAgICAgICghcyB8fCB0LmdldFRpbWUoKSA8PSBzLmdldFRpbWUoKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRGb3JtYXRDb25maWc6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fZ2V0KGUsICdzaG9ydFllYXJDdXRvZmYnKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgKHQgPVxuICAgICAgICAgICAgICAgICAgICAnc3RyaW5nJyAhPSB0eXBlb2YgdFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0XG4gICAgICAgICAgICAgICAgICAgICAgICA6IChuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkgJSAxMDApICsgcGFyc2VJbnQodCwgMTApKSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNob3J0WWVhckN1dG9mZjogdCxcbiAgICAgICAgICAgICAgICAgICAgZGF5TmFtZXNTaG9ydDogdGhpcy5fZ2V0KGUsICdkYXlOYW1lc1Nob3J0JyksXG4gICAgICAgICAgICAgICAgICAgIGRheU5hbWVzOiB0aGlzLl9nZXQoZSwgJ2RheU5hbWVzJyksXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoTmFtZXNTaG9ydDogdGhpcy5fZ2V0KGUsICdtb250aE5hbWVzU2hvcnQnKSxcbiAgICAgICAgICAgICAgICAgICAgbW9udGhOYW1lczogdGhpcy5fZ2V0KGUsICdtb250aE5hbWVzJyksXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2Zvcm1hdERhdGU6IGZ1bmN0aW9uKGUsIHQsIGksIHMpIHtcbiAgICAgICAgICAgIHQgfHxcbiAgICAgICAgICAgICAgICAoKGUuY3VycmVudERheSA9IGUuc2VsZWN0ZWREYXkpLFxuICAgICAgICAgICAgICAgIChlLmN1cnJlbnRNb250aCA9IGUuc2VsZWN0ZWRNb250aCksXG4gICAgICAgICAgICAgICAgKGUuY3VycmVudFllYXIgPSBlLnNlbGVjdGVkWWVhcikpO1xuICAgICAgICAgICAgdmFyIG4gPSB0XG4gICAgICAgICAgICAgICAgPyAnb2JqZWN0JyA9PSB0eXBlb2YgdFxuICAgICAgICAgICAgICAgICAgICA/IHRcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShzLCBpLCB0KSlcbiAgICAgICAgICAgICAgICA6IHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KFxuICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKGUuY3VycmVudFllYXIsIGUuY3VycmVudE1vbnRoLCBlLmN1cnJlbnREYXkpXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0RGF0ZShcbiAgICAgICAgICAgICAgICB0aGlzLl9nZXQoZSwgJ2RhdGVGb3JtYXQnKSxcbiAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgIHRoaXMuX2dldEZvcm1hdENvbmZpZyhlKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICB9KSxcbiAgICAgICAgKCQuZm4uZGF0ZXBpY2tlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5sZW5ndGgpIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgJC5kYXRlcGlja2VyLmluaXRpYWxpemVkIHx8XG4gICAgICAgICAgICAgICAgKCQoZG9jdW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIC5tb3VzZWRvd24oJC5kYXRlcGlja2VyLl9jaGVja0V4dGVybmFsQ2xpY2spXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGRvY3VtZW50LmJvZHkpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJC5kYXRlcGlja2VyLmRwRGl2KSxcbiAgICAgICAgICAgICAgICAoJC5kYXRlcGlja2VyLmluaXRpYWxpemVkID0gITApKTtcbiAgICAgICAgICAgIHZhciB0ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICAgIHJldHVybiAnc3RyaW5nJyAhPSB0eXBlb2YgZSB8fFxuICAgICAgICAgICAgICAgICgnaXNEaXNhYmxlZCcgIT0gZSAmJiAnZ2V0RGF0ZScgIT0gZSAmJiAnd2lkZ2V0JyAhPSBlKVxuICAgICAgICAgICAgICAgID8gJ29wdGlvbicgPT0gZSAmJlxuICAgICAgICAgICAgICAgICAgMiA9PSBhcmd1bWVudHMubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAnc3RyaW5nJyA9PSB0eXBlb2YgYXJndW1lbnRzWzFdXG4gICAgICAgICAgICAgICAgICAgID8gJC5kYXRlcGlja2VyWydfJyArIGUgKyAnRGF0ZXBpY2tlciddLmFwcGx5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFt0aGlzWzBdXS5jb25jYXQodClcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnc3RyaW5nJyA9PSB0eXBlb2YgZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAkLmRhdGVwaWNrZXJbJ18nICsgZSArICdEYXRlcGlja2VyJ10uYXBwbHkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmRhdGVwaWNrZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdGhpc10uY29uY2F0KHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJC5kYXRlcGlja2VyLl9hdHRhY2hEYXRlcGlja2VyKHRoaXMsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgOiAkLmRhdGVwaWNrZXJbJ18nICsgZSArICdEYXRlcGlja2VyJ10uYXBwbHkoXG4gICAgICAgICAgICAgICAgICAgICAgJC5kYXRlcGlja2VyLFxuICAgICAgICAgICAgICAgICAgICAgIFt0aGlzWzBdXS5jb25jYXQodClcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgIH0pLFxuICAgICAgICAoJC5kYXRlcGlja2VyID0gbmV3IERhdGVwaWNrZXIoKSksXG4gICAgICAgICgkLmRhdGVwaWNrZXIuaW5pdGlhbGl6ZWQgPSAhMSksXG4gICAgICAgICgkLmRhdGVwaWNrZXIudXVpZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpKSxcbiAgICAgICAgKCQuZGF0ZXBpY2tlci52ZXJzaW9uID0gJzEuOS4yJyksXG4gICAgICAgICh3aW5kb3dbJ0RQX2pRdWVyeV8nICsgZHB1dWlkXSA9ICQpO1xufSkoalF1ZXJ5KTtcbihmdW5jdGlvbihlLCB0KSB7XG4gICAgdmFyIGkgPSAndWktZGlhbG9nIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsICcsXG4gICAgICAgIHMgPSB7XG4gICAgICAgICAgICBidXR0b25zOiAhMCxcbiAgICAgICAgICAgIGhlaWdodDogITAsXG4gICAgICAgICAgICBtYXhIZWlnaHQ6ICEwLFxuICAgICAgICAgICAgbWF4V2lkdGg6ICEwLFxuICAgICAgICAgICAgbWluSGVpZ2h0OiAhMCxcbiAgICAgICAgICAgIG1pbldpZHRoOiAhMCxcbiAgICAgICAgICAgIHdpZHRoOiAhMCxcbiAgICAgICAgfSxcbiAgICAgICAgbiA9IHsgbWF4SGVpZ2h0OiAhMCwgbWF4V2lkdGg6ICEwLCBtaW5IZWlnaHQ6ICEwLCBtaW5XaWR0aDogITAgfTtcbiAgICBlLndpZGdldCgndWkuZGlhbG9nJywge1xuICAgICAgICB2ZXJzaW9uOiAnMS45LjInLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBhdXRvT3BlbjogITAsXG4gICAgICAgICAgICBidXR0b25zOiB7fSxcbiAgICAgICAgICAgIGNsb3NlT25Fc2NhcGU6ICEwLFxuICAgICAgICAgICAgY2xvc2VUZXh0OiAnY2xvc2UnLFxuICAgICAgICAgICAgZGlhbG9nQ2xhc3M6ICcnLFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiAhMCxcbiAgICAgICAgICAgIGhpZGU6IG51bGwsXG4gICAgICAgICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgICAgICAgIG1heEhlaWdodDogITEsXG4gICAgICAgICAgICBtYXhXaWR0aDogITEsXG4gICAgICAgICAgICBtaW5IZWlnaHQ6IDE1MCxcbiAgICAgICAgICAgIG1pbldpZHRoOiAxNTAsXG4gICAgICAgICAgICBtb2RhbDogITEsXG4gICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgIG15OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBhdDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgb2Y6IHdpbmRvdyxcbiAgICAgICAgICAgICAgICBjb2xsaXNpb246ICdmaXQnLFxuICAgICAgICAgICAgICAgIHVzaW5nOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gZSh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNzcyh0KVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9mZnNldCgpLnRvcDtcbiAgICAgICAgICAgICAgICAgICAgMCA+IGkgJiYgZSh0aGlzKS5jc3MoJ3RvcCcsIHQudG9wIC0gaSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXNpemFibGU6ICEwLFxuICAgICAgICAgICAgc2hvdzogbnVsbCxcbiAgICAgICAgICAgIHN0YWNrOiAhMCxcbiAgICAgICAgICAgIHRpdGxlOiAnJyxcbiAgICAgICAgICAgIHdpZHRoOiAzMDAsXG4gICAgICAgICAgICB6SW5kZXg6IDFlMyxcbiAgICAgICAgfSxcbiAgICAgICAgX2NyZWF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAodGhpcy5vcmlnaW5hbFRpdGxlID0gdGhpcy5lbGVtZW50LmF0dHIoJ3RpdGxlJykpLFxuICAgICAgICAgICAgICAgICdzdHJpbmcnICE9IHR5cGVvZiB0aGlzLm9yaWdpbmFsVGl0bGUgJiZcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMub3JpZ2luYWxUaXRsZSA9ICcnKSxcbiAgICAgICAgICAgICAgICAodGhpcy5vbGRQb3NpdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiB0aGlzLmVsZW1lbnQucGFyZW50KCksXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wYXJlbnQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5pbmRleCh0aGlzLmVsZW1lbnQpLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICh0aGlzLm9wdGlvbnMudGl0bGUgPSB0aGlzLm9wdGlvbnMudGl0bGUgfHwgdGhpcy5vcmlnaW5hbFRpdGxlKTtcbiAgICAgICAgICAgIHZhciBzLFxuICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgICAgaCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgbCA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICB1ID0gbC50aXRsZSB8fCAnJiMxNjA7JztcbiAgICAgICAgICAgIChzID0gKHRoaXMudWlEaWFsb2cgPSBlKCc8ZGl2PicpKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhpICsgbC5kaWFsb2dDbGFzcylcbiAgICAgICAgICAgICAgICAuY3NzKHsgZGlzcGxheTogJ25vbmUnLCBvdXRsaW5lOiAwLCB6SW5kZXg6IGwuekluZGV4IH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3RhYkluZGV4JywgLTEpXG4gICAgICAgICAgICAgICAgLmtleWRvd24oZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICBsLmNsb3NlT25Fc2NhcGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICF0LmlzRGVmYXVsdFByZXZlbnRlZCgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmtleUNvZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHQua2V5Q29kZSA9PT0gZS51aS5rZXlDb2RlLkVTQ0FQRSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKGguY2xvc2UodCksIHQucHJldmVudERlZmF1bHQoKSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAubW91c2Vkb3duKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaC5tb3ZlVG9Ub3AoITEsIGUpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKCdib2R5JykpLFxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCd0aXRsZScpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygndWktZGlhbG9nLWNvbnRlbnQgdWktd2lkZ2V0LWNvbnRlbnQnKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8ocyksXG4gICAgICAgICAgICAgICAgKG4gPSAodGhpcy51aURpYWxvZ1RpdGxlYmFyID0gZSgnPGRpdj4nKSlcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3VpLWRpYWxvZy10aXRsZWJhciAgdWktd2lkZ2V0LWhlYWRlciAgdWktY29ybmVyLWFsbCAgdWktaGVscGVyLWNsZWFyZml4J1xuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5iaW5kKCdtb3VzZWRvd24nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnByZXBlbmRUbyhzKSksXG4gICAgICAgICAgICAgICAgKGEgPSBlKFwiPGEgaHJlZj0nIyc+PC9hPlwiKVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3VpLWRpYWxvZy10aXRsZWJhci1jbG9zZSAgdWktY29ybmVyLWFsbCcpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdyb2xlJywgJ2J1dHRvbicpXG4gICAgICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCksIGguY2xvc2UoZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhuKSksXG4gICAgICAgICAgICAgICAgKHRoaXMudWlEaWFsb2dUaXRsZWJhckNsb3NlVGV4dCA9IGUoJzxzcGFuPicpKVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3VpLWljb24gdWktaWNvbi1jbG9zZXRoaWNrJylcbiAgICAgICAgICAgICAgICAgICAgLnRleHQobC5jbG9zZVRleHQpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhhKSxcbiAgICAgICAgICAgICAgICAobyA9IGUoJzxzcGFuPicpXG4gICAgICAgICAgICAgICAgICAgIC51bmlxdWVJZCgpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygndWktZGlhbG9nLXRpdGxlJylcbiAgICAgICAgICAgICAgICAgICAgLmh0bWwodSlcbiAgICAgICAgICAgICAgICAgICAgLnByZXBlbmRUbyhuKSksXG4gICAgICAgICAgICAgICAgKHIgPSAodGhpcy51aURpYWxvZ0J1dHRvblBhbmUgPSBlKCc8ZGl2PicpKS5hZGRDbGFzcyhcbiAgICAgICAgICAgICAgICAgICAgJ3VpLWRpYWxvZy1idXR0b25wYW5lIHVpLXdpZGdldC1jb250ZW50IHVpLWhlbHBlci1jbGVhcmZpeCdcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAodGhpcy51aUJ1dHRvblNldCA9IGUoJzxkaXY+JykpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygndWktZGlhbG9nLWJ1dHRvbnNldCcpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhyKSxcbiAgICAgICAgICAgICAgICBzLmF0dHIoeyByb2xlOiAnZGlhbG9nJywgJ2FyaWEtbGFiZWxsZWRieSc6IG8uYXR0cignaWQnKSB9KSxcbiAgICAgICAgICAgICAgICBuXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKCcqJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZChuKVxuICAgICAgICAgICAgICAgICAgICAuZGlzYWJsZVNlbGVjdGlvbigpLFxuICAgICAgICAgICAgICAgIHRoaXMuX2hvdmVyYWJsZShhKSxcbiAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c2FibGUoYSksXG4gICAgICAgICAgICAgICAgbC5kcmFnZ2FibGUgJiYgZS5mbi5kcmFnZ2FibGUgJiYgdGhpcy5fbWFrZURyYWdnYWJsZSgpLFxuICAgICAgICAgICAgICAgIGwucmVzaXphYmxlICYmIGUuZm4ucmVzaXphYmxlICYmIHRoaXMuX21ha2VSZXNpemFibGUoKSxcbiAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVCdXR0b25zKGwuYnV0dG9ucyksXG4gICAgICAgICAgICAgICAgKHRoaXMuX2lzT3BlbiA9ICExKSxcbiAgICAgICAgICAgICAgICBlLmZuLmJnaWZyYW1lICYmIHMuYmdpZnJhbWUoKSxcbiAgICAgICAgICAgICAgICB0aGlzLl9vbihzLCB7XG4gICAgICAgICAgICAgICAgICAgIGtleWRvd246IGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsLm1vZGFsICYmIGkua2V5Q29kZSA9PT0gZS51aS5rZXlDb2RlLlRBQikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZSgnOnRhYmJhYmxlJywgcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBuLmZpbHRlcignOmZpcnN0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBuLmZpbHRlcignOmxhc3QnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaS50YXJnZXQgIT09IG9bMF0gfHwgaS5zaGlmdEtleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGkudGFyZ2V0ID09PSBhWzBdICYmIGkuc2hpZnRLZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKG8uZm9jdXMoMSksICExKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKGEuZm9jdXMoMSksICExKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgX2luaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmF1dG9PcGVuICYmIHRoaXMub3BlbigpO1xuICAgICAgICB9LFxuICAgICAgICBfZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICB0ID0gdGhpcy5vbGRQb3NpdGlvbjtcbiAgICAgICAgICAgIHRoaXMub3ZlcmxheSAmJiB0aGlzLm92ZXJsYXkuZGVzdHJveSgpLFxuICAgICAgICAgICAgICAgIHRoaXMudWlEaWFsb2cuaGlkZSgpLFxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3VpLWRpYWxvZy1jb250ZW50IHVpLXdpZGdldC1jb250ZW50JylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oJ2JvZHknKSxcbiAgICAgICAgICAgICAgICB0aGlzLnVpRGlhbG9nLnJlbW92ZSgpLFxuICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luYWxUaXRsZSAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuYXR0cigndGl0bGUnLCB0aGlzLm9yaWdpbmFsVGl0bGUpLFxuICAgICAgICAgICAgICAgIChlID0gdC5wYXJlbnQuY2hpbGRyZW4oKS5lcSh0LmluZGV4KSksXG4gICAgICAgICAgICAgICAgZS5sZW5ndGggJiYgZVswXSAhPT0gdGhpcy5lbGVtZW50WzBdXG4gICAgICAgICAgICAgICAgICAgID8gZS5iZWZvcmUodGhpcy5lbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICA6IHQucGFyZW50LmFwcGVuZCh0aGlzLmVsZW1lbnQpO1xuICAgICAgICB9LFxuICAgICAgICB3aWRnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudWlEaWFsb2c7XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgIG4gPSB0aGlzO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzT3BlbiAmJiAhMSAhPT0gdGhpcy5fdHJpZ2dlcignYmVmb3JlQ2xvc2UnLCB0KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5faXNPcGVuID0gITEpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm92ZXJsYXkgJiYgdGhpcy5vdmVybGF5LmRlc3Ryb3koKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmhpZGVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5faGlkZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWlEaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuaGlkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uX3RyaWdnZXIoJ2Nsb3NlJywgdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKHRoaXMudWlEaWFsb2cuaGlkZSgpLCB0aGlzLl90cmlnZ2VyKCdjbG9zZScsIHQpKSxcbiAgICAgICAgICAgICAgICAgICAgZS51aS5kaWFsb2cub3ZlcmxheS5yZXNpemUoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLm1vZGFsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoKGkgPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUoJy51aS1kaWFsb2cnKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgIT09IG4udWlEaWFsb2dbMF0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChzID0gZSh0aGlzKS5jc3MoJ3otaW5kZXgnKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTmFOKHMpIHx8IChpID0gTWF0aC5tYXgoaSwgcykpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGUudWkuZGlhbG9nLm1heFogPSBpKSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBpc09wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzT3BlbjtcbiAgICAgICAgfSxcbiAgICAgICAgbW92ZVRvVG9wOiBmdW5jdGlvbih0LCBpKSB7XG4gICAgICAgICAgICB2YXIgcyxcbiAgICAgICAgICAgICAgICBuID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgcmV0dXJuIChuLm1vZGFsICYmICF0KSB8fCAoIW4uc3RhY2sgJiYgIW4ubW9kYWwpXG4gICAgICAgICAgICAgICAgPyB0aGlzLl90cmlnZ2VyKCdmb2N1cycsIGkpXG4gICAgICAgICAgICAgICAgOiAobi56SW5kZXggPiBlLnVpLmRpYWxvZy5tYXhaICYmIChlLnVpLmRpYWxvZy5tYXhaID0gbi56SW5kZXgpLFxuICAgICAgICAgICAgICAgICAgdGhpcy5vdmVybGF5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgKChlLnVpLmRpYWxvZy5tYXhaICs9IDEpLFxuICAgICAgICAgICAgICAgICAgICAgIChlLnVpLmRpYWxvZy5vdmVybGF5Lm1heFogPSBlLnVpLmRpYWxvZy5tYXhaKSxcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLm92ZXJsYXkuJGVsLmNzcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3otaW5kZXgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlLnVpLmRpYWxvZy5vdmVybGF5Lm1heFpcbiAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgIChzID0ge1xuICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogdGhpcy5lbGVtZW50LnNjcm9sbFRvcCgpLFxuICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbExlZnQ6IHRoaXMuZWxlbWVudC5zY3JvbGxMZWZ0KCksXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIChlLnVpLmRpYWxvZy5tYXhaICs9IDEpLFxuICAgICAgICAgICAgICAgICAgdGhpcy51aURpYWxvZy5jc3MoJ3otaW5kZXgnLCBlLnVpLmRpYWxvZy5tYXhaKSxcbiAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hdHRyKHMpLFxuICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignZm9jdXMnLCBpKSxcbiAgICAgICAgICAgICAgICAgIHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5faXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIHMgPSB0aGlzLnVpRGlhbG9nO1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NpemUoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24oaS5wb3NpdGlvbiksXG4gICAgICAgICAgICAgICAgICAgIHMuc2hvdyhpLnNob3cpLFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5vdmVybGF5ID0gaS5tb2RhbFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBuZXcgZS51aS5kaWFsb2cub3ZlcmxheSh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlVG9Ub3AoITApLFxuICAgICAgICAgICAgICAgICAgICAodCA9IHRoaXMuZWxlbWVudC5maW5kKCc6dGFiYmFibGUnKSksXG4gICAgICAgICAgICAgICAgICAgIHQubGVuZ3RoIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoKHQgPSB0aGlzLnVpRGlhbG9nQnV0dG9uUGFuZS5maW5kKCc6dGFiYmFibGUnKSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0Lmxlbmd0aCB8fCAodCA9IHMpKSxcbiAgICAgICAgICAgICAgICAgICAgdC5lcSgwKS5mb2N1cygpLFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5faXNPcGVuID0gITApLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdvcGVuJyksXG4gICAgICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfY3JlYXRlQnV0dG9uczogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHMgPSAhMTtcbiAgICAgICAgICAgIHRoaXMudWlEaWFsb2dCdXR0b25QYW5lLnJlbW92ZSgpLFxuICAgICAgICAgICAgICAgIHRoaXMudWlCdXR0b25TZXQuZW1wdHkoKSxcbiAgICAgICAgICAgICAgICAnb2JqZWN0JyA9PSB0eXBlb2YgdCAmJlxuICAgICAgICAgICAgICAgICAgICBudWxsICE9PSB0ICYmXG4gICAgICAgICAgICAgICAgICAgIGUuZWFjaCh0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhKHMgPSAhMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHNcbiAgICAgICAgICAgICAgICAgICAgPyAoZS5lYWNoKHQsIGZ1bmN0aW9uKHQsIHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4sIGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIChzID0gZS5pc0Z1bmN0aW9uKHMpID8geyBjbGljazogcywgdGV4dDogdCB9IDogcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocyA9IGUuZXh0ZW5kKHsgdHlwZTogJ2J1dHRvbicgfSwgcykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGEgPSBzLmNsaWNrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzLmNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5hcHBseShpLmVsZW1lbnRbMF0sIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChuID0gZSgnPGJ1dHRvbj48L2J1dHRvbj4nLCBzKS5hcHBlbmRUbyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnVpQnV0dG9uU2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuZm4uYnV0dG9uICYmIG4uYnV0dG9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy51aURpYWxvZy5hZGRDbGFzcygndWktZGlhbG9nLWJ1dHRvbnMnKSxcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVpRGlhbG9nQnV0dG9uUGFuZS5hcHBlbmRUbyh0aGlzLnVpRGlhbG9nKSlcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnVpRGlhbG9nLnJlbW92ZUNsYXNzKCd1aS1kaWFsb2ctYnV0dG9ucycpO1xuICAgICAgICB9LFxuICAgICAgICBfbWFrZURyYWdnYWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiB0KGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBwb3NpdGlvbjogZS5wb3NpdGlvbiwgb2Zmc2V0OiBlLm9mZnNldCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICB0aGlzLnVpRGlhbG9nLmRyYWdnYWJsZSh7XG4gICAgICAgICAgICAgICAgY2FuY2VsOiAnLnVpLWRpYWxvZy1jb250ZW50LCAudWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlJyxcbiAgICAgICAgICAgICAgICBoYW5kbGU6ICcudWktZGlhbG9nLXRpdGxlYmFyJyxcbiAgICAgICAgICAgICAgICBjb250YWlubWVudDogJ2RvY3VtZW50JyxcbiAgICAgICAgICAgICAgICBzdGFydDogZnVuY3Rpb24ocywgbikge1xuICAgICAgICAgICAgICAgICAgICBlKHRoaXMpLmFkZENsYXNzKCd1aS1kaWFsb2ctZHJhZ2dpbmcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuX3RyaWdnZXIoJ2RyYWdTdGFydCcsIHMsIHQobikpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZHJhZzogZnVuY3Rpb24oZSwgcykge1xuICAgICAgICAgICAgICAgICAgICBpLl90cmlnZ2VyKCdkcmFnJywgZSwgdChzKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdG9wOiBmdW5jdGlvbihuLCBhKSB7XG4gICAgICAgICAgICAgICAgICAgIChzLnBvc2l0aW9uID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5wb3NpdGlvbi5sZWZ0IC0gaS5kb2N1bWVudC5zY3JvbGxMZWZ0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBhLnBvc2l0aW9uLnRvcCAtIGkuZG9jdW1lbnQuc2Nyb2xsVG9wKCksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgZSh0aGlzKS5yZW1vdmVDbGFzcygndWktZGlhbG9nLWRyYWdnaW5nJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBpLl90cmlnZ2VyKCdkcmFnU3RvcCcsIG4sIHQoYSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZS51aS5kaWFsb2cub3ZlcmxheS5yZXNpemUoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9tYWtlUmVzaXphYmxlOiBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBzKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFBvc2l0aW9uOiBlLm9yaWdpbmFsUG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsU2l6ZTogZS5vcmlnaW5hbFNpemUsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBlLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICBzaXplOiBlLnNpemUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkgPSBpID09PSB0ID8gdGhpcy5vcHRpb25zLnJlc2l6YWJsZSA6IGk7XG4gICAgICAgICAgICB2YXIgbiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgYSA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBvID0gdGhpcy51aURpYWxvZy5jc3MoJ3Bvc2l0aW9uJyksXG4gICAgICAgICAgICAgICAgciA9ICdzdHJpbmcnID09IHR5cGVvZiBpID8gaSA6ICduLGUscyx3LHNlLHN3LG5lLG53JztcbiAgICAgICAgICAgIHRoaXMudWlEaWFsb2dcbiAgICAgICAgICAgICAgICAucmVzaXphYmxlKHtcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsOiAnLnVpLWRpYWxvZy1jb250ZW50JyxcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbm1lbnQ6ICdkb2N1bWVudCcsXG4gICAgICAgICAgICAgICAgICAgIGFsc29SZXNpemU6IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgbWF4V2lkdGg6IGEubWF4V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIG1heEhlaWdodDogYS5tYXhIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIG1pbldpZHRoOiBhLm1pbldpZHRoLFxuICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQ6IHRoaXMuX21pbkhlaWdodCgpLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVzOiByLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogZnVuY3Rpb24odCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZSh0aGlzKS5hZGRDbGFzcygndWktZGlhbG9nLXJlc2l6aW5nJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5fdHJpZ2dlcigncmVzaXplU3RhcnQnLCB0LCBzKGkpKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuLl90cmlnZ2VyKCdyZXNpemUnLCBlLCBzKHQpKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24odCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZSh0aGlzKS5yZW1vdmVDbGFzcygndWktZGlhbG9nLXJlc2l6aW5nJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGEuaGVpZ2h0ID0gZSh0aGlzKS5oZWlnaHQoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGEud2lkdGggPSBlKHRoaXMpLndpZHRoKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uX3RyaWdnZXIoJ3Jlc2l6ZVN0b3AnLCB0LCBzKGkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnVpLmRpYWxvZy5vdmVybGF5LnJlc2l6ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNzcygncG9zaXRpb24nLCBvKVxuICAgICAgICAgICAgICAgIC5maW5kKCcudWktcmVzaXphYmxlLXNlJylcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3VpLWljb24gdWktaWNvbi1ncmlwLWRpYWdvbmFsLXNlJyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9taW5IZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICByZXR1cm4gJ2F1dG8nID09PSBlLmhlaWdodFxuICAgICAgICAgICAgICAgID8gZS5taW5IZWlnaHRcbiAgICAgICAgICAgICAgICA6IE1hdGgubWluKGUubWluSGVpZ2h0LCBlLmhlaWdodCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9wb3NpdGlvbjogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgcyA9IFtdLFxuICAgICAgICAgICAgICAgIG4gPSBbMCwgMF07XG4gICAgICAgICAgICB0XG4gICAgICAgICAgICAgICAgPyAoKCdzdHJpbmcnID09IHR5cGVvZiB0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgKCdvYmplY3QnID09IHR5cGVvZiB0ICYmICcwJyBpbiB0KSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAoKHMgPSB0LnNwbGl0ID8gdC5zcGxpdCgnICcpIDogW3RbMF0sIHRbMV1dKSxcbiAgICAgICAgICAgICAgICAgICAgICAxID09PSBzLmxlbmd0aCAmJiAoc1sxXSA9IHNbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgIGUuZWFjaChbJ2xlZnQnLCAndG9wJ10sIGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgK3NbZV0gPT09IHNbZV0gJiYgKChuW2VdID0gc1tlXSksIChzW2VdID0gdCkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICh0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBteTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNbMF0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAgPiBuWzBdID8gblswXSA6ICcrJyArIG5bMF0pICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzWzFdICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwID4gblsxXSA/IG5bMV0gOiAnKycgKyBuWzFdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXQ6IHMuam9pbignICcpLFxuICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICh0ID0gZS5leHRlbmQoe30sIGUudWkuZGlhbG9nLnByb3RvdHlwZS5vcHRpb25zLnBvc2l0aW9uLCB0KSkpXG4gICAgICAgICAgICAgICAgOiAodCA9IGUudWkuZGlhbG9nLnByb3RvdHlwZS5vcHRpb25zLnBvc2l0aW9uKSxcbiAgICAgICAgICAgICAgICAoaSA9IHRoaXMudWlEaWFsb2cuaXMoJzp2aXNpYmxlJykpLFxuICAgICAgICAgICAgICAgIGkgfHwgdGhpcy51aURpYWxvZy5zaG93KCksXG4gICAgICAgICAgICAgICAgdGhpcy51aURpYWxvZy5wb3NpdGlvbih0KSxcbiAgICAgICAgICAgICAgICBpIHx8IHRoaXMudWlEaWFsb2cuaGlkZSgpO1xuICAgICAgICB9LFxuICAgICAgICBfc2V0T3B0aW9uczogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGEgPSB7fSxcbiAgICAgICAgICAgICAgICBvID0gITE7XG4gICAgICAgICAgICBlLmVhY2godCwgZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgICAgIGkuX3NldE9wdGlvbihlLCB0KSwgZSBpbiBzICYmIChvID0gITApLCBlIGluIG4gJiYgKGFbZV0gPSB0KTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG8gJiYgdGhpcy5fc2l6ZSgpLFxuICAgICAgICAgICAgICAgIHRoaXMudWlEaWFsb2cuaXMoJzpkYXRhKHJlc2l6YWJsZSknKSAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpRGlhbG9nLnJlc2l6YWJsZSgnb3B0aW9uJywgYSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zZXRPcHRpb246IGZ1bmN0aW9uKHQsIHMpIHtcbiAgICAgICAgICAgIHZhciBuLFxuICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgbyA9IHRoaXMudWlEaWFsb2c7XG4gICAgICAgICAgICBzd2l0Y2ggKHQpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdidXR0b25zJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlQnV0dG9ucyhzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2xvc2VUZXh0JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aURpYWxvZ1RpdGxlYmFyQ2xvc2VUZXh0LnRleHQoJycgKyBzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGlhbG9nQ2xhc3MnOlxuICAgICAgICAgICAgICAgICAgICBvLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5kaWFsb2dDbGFzcykuYWRkQ2xhc3MoaSArIHMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkaXNhYmxlZCc6XG4gICAgICAgICAgICAgICAgICAgIHNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gby5hZGRDbGFzcygndWktZGlhbG9nLWRpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogby5yZW1vdmVDbGFzcygndWktZGlhbG9nLWRpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RyYWdnYWJsZSc6XG4gICAgICAgICAgICAgICAgICAgIChuID0gby5pcygnOmRhdGEoZHJhZ2dhYmxlKScpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gJiYgIXMgJiYgby5kcmFnZ2FibGUoJ2Rlc3Ryb3knKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICFuICYmIHMgJiYgdGhpcy5fbWFrZURyYWdnYWJsZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdwb3NpdGlvbic6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uKHMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdyZXNpemFibGUnOlxuICAgICAgICAgICAgICAgICAgICAoYSA9IG8uaXMoJzpkYXRhKHJlc2l6YWJsZSknKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBhICYmICFzICYmIG8ucmVzaXphYmxlKCdkZXN0cm95JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBhICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N0cmluZycgPT0gdHlwZW9mIHMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLnJlc2l6YWJsZSgnb3B0aW9uJywgJ2hhbmRsZXMnLCBzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgfHwgcyA9PT0gITEgfHwgdGhpcy5fbWFrZVJlc2l6YWJsZShzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndGl0bGUnOlxuICAgICAgICAgICAgICAgICAgICBlKCcudWktZGlhbG9nLXRpdGxlJywgdGhpcy51aURpYWxvZ1RpdGxlYmFyKS5odG1sKFxuICAgICAgICAgICAgICAgICAgICAgICAgJycgKyAocyB8fCAnJiMxNjA7JylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3N1cGVyKHQsIHMpO1xuICAgICAgICB9LFxuICAgICAgICBfc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdCxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIHMsXG4gICAgICAgICAgICAgICAgbiA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBhID0gdGhpcy51aURpYWxvZy5pcygnOnZpc2libGUnKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zaG93KCkuY3NzKHsgd2lkdGg6ICdhdXRvJywgbWluSGVpZ2h0OiAwLCBoZWlnaHQ6IDAgfSksXG4gICAgICAgICAgICAgICAgbi5taW5XaWR0aCA+IG4ud2lkdGggJiYgKG4ud2lkdGggPSBuLm1pbldpZHRoKSxcbiAgICAgICAgICAgICAgICAodCA9IHRoaXMudWlEaWFsb2dcbiAgICAgICAgICAgICAgICAgICAgLmNzcyh7IGhlaWdodDogJ2F1dG8nLCB3aWR0aDogbi53aWR0aCB9KVxuICAgICAgICAgICAgICAgICAgICAub3V0ZXJIZWlnaHQoKSksXG4gICAgICAgICAgICAgICAgKGkgPSBNYXRoLm1heCgwLCBuLm1pbkhlaWdodCAtIHQpKSxcbiAgICAgICAgICAgICAgICAnYXV0bycgPT09IG4uaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgID8gZS5zdXBwb3J0Lm1pbkhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmVsZW1lbnQuY3NzKHsgbWluSGVpZ2h0OiBpLCBoZWlnaHQ6ICdhdXRvJyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAodGhpcy51aURpYWxvZy5zaG93KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChzID0gdGhpcy5lbGVtZW50LmNzcygnaGVpZ2h0JywgJ2F1dG8nKS5oZWlnaHQoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEgfHwgdGhpcy51aURpYWxvZy5oaWRlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5oZWlnaHQoTWF0aC5tYXgocywgaSkpKVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZWxlbWVudC5oZWlnaHQoTWF0aC5tYXgobi5oZWlnaHQgLSB0LCAwKSksXG4gICAgICAgICAgICAgICAgdGhpcy51aURpYWxvZy5pcygnOmRhdGEocmVzaXphYmxlKScpICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudWlEaWFsb2cucmVzaXphYmxlKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ29wdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWluSGVpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21pbkhlaWdodCgpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgfSksXG4gICAgICAgIGUuZXh0ZW5kKGUudWkuZGlhbG9nLCB7XG4gICAgICAgICAgICB1dWlkOiAwLFxuICAgICAgICAgICAgbWF4WjogMCxcbiAgICAgICAgICAgIGdldFRpdGxlSWQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IGUuYXR0cignaWQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICB0IHx8ICgodGhpcy51dWlkICs9IDEpLCAodCA9IHRoaXMudXVpZCkpLFxuICAgICAgICAgICAgICAgICAgICAndWktZGlhbG9nLXRpdGxlLScgKyB0XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvdmVybGF5OiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZWwgPSBlLnVpLmRpYWxvZy5vdmVybGF5LmNyZWF0ZSh0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICBlLmV4dGVuZChlLnVpLmRpYWxvZy5vdmVybGF5LCB7XG4gICAgICAgICAgICBpbnN0YW5jZXM6IFtdLFxuICAgICAgICAgICAgb2xkSW5zdGFuY2VzOiBbXSxcbiAgICAgICAgICAgIG1heFo6IDAsXG4gICAgICAgICAgICBldmVudHM6IGVcbiAgICAgICAgICAgICAgICAubWFwKFxuICAgICAgICAgICAgICAgICAgICAnZm9jdXMsbW91c2Vkb3duLG1vdXNldXAsa2V5ZG93bixrZXlwcmVzcyxjbGljaycuc3BsaXQoJywnKSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgKyAnLmRpYWxvZy1vdmVybGF5JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuam9pbignICcpLFxuICAgICAgICAgICAgY3JlYXRlOiBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgMCA9PT0gdGhpcy5pbnN0YW5jZXMubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgIChzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS51aS5kaWFsb2cub3ZlcmxheS5pbnN0YW5jZXMubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZShkb2N1bWVudCkuYmluZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS51aS5kaWFsb2cub3ZlcmxheS5ldmVudHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlKGkudGFyZ2V0KS56SW5kZXgoKSA8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS51aS5kaWFsb2cub3ZlcmxheS5tYXhaXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAhMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDEpLFxuICAgICAgICAgICAgICAgICAgICBlKHdpbmRvdykuYmluZChcbiAgICAgICAgICAgICAgICAgICAgICAgICdyZXNpemUuZGlhbG9nLW92ZXJsYXknLFxuICAgICAgICAgICAgICAgICAgICAgICAgZS51aS5kaWFsb2cub3ZlcmxheS5yZXNpemVcbiAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgdmFyIHMgPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9sZEluc3RhbmNlcy5wb3AoKSB8fFxuICAgICAgICAgICAgICAgICAgICBlKCc8ZGl2PicpLmFkZENsYXNzKCd1aS13aWRnZXQtb3ZlcmxheScpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGUoZG9jdW1lbnQpLmJpbmQoJ2tleWRvd24uZGlhbG9nLW92ZXJsYXknLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGUudWkuZGlhbG9nLm92ZXJsYXkuaW5zdGFuY2VzO1xuICAgICAgICAgICAgICAgICAgICAgICAgMCAhPT0gbi5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuW24ubGVuZ3RoIC0gMV0gPT09IHMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9wdGlvbnMuY2xvc2VPbkVzY2FwZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICF0LmlzRGVmYXVsdFByZXZlbnRlZCgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5rZXlDb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5rZXlDb2RlID09PSBlLnVpLmtleUNvZGUuRVNDQVBFICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkuY2xvc2UodCksIHQucHJldmVudERlZmF1bHQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBzXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jc3MoeyB3aWR0aDogdGhpcy53aWR0aCgpLCBoZWlnaHQ6IHRoaXMuaGVpZ2h0KCkgfSksXG4gICAgICAgICAgICAgICAgICAgIGUuZm4uYmdpZnJhbWUgJiYgcy5iZ2lmcmFtZSgpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlcy5wdXNoKHMpLFxuICAgICAgICAgICAgICAgICAgICBzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXN0cm95OiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBlLmluQXJyYXkodCwgdGhpcy5pbnN0YW5jZXMpLFxuICAgICAgICAgICAgICAgICAgICBzID0gMDtcbiAgICAgICAgICAgICAgICAtMSAhPT0gaSAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9sZEluc3RhbmNlcy5wdXNoKHRoaXMuaW5zdGFuY2VzLnNwbGljZShpLCAxKVswXSksXG4gICAgICAgICAgICAgICAgICAgIDAgPT09IHRoaXMuaW5zdGFuY2VzLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZShbZG9jdW1lbnQsIHdpbmRvd10pLnVuYmluZCgnLmRpYWxvZy1vdmVybGF5JyksXG4gICAgICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5oZWlnaHQoMClcbiAgICAgICAgICAgICAgICAgICAgICAgIC53aWR0aCgwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZSgpLFxuICAgICAgICAgICAgICAgICAgICBlLmVhY2godGhpcy5pbnN0YW5jZXMsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IE1hdGgubWF4KHMsIHRoaXMuY3NzKCd6LWluZGV4JykpO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMubWF4WiA9IHMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQsIGk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUudWkuaWVcbiAgICAgICAgICAgICAgICAgICAgPyAoKHQgPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgICAoaSA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAgIGkgPiB0ID8gZSh3aW5kb3cpLmhlaWdodCgpICsgJ3B4JyA6IHQgKyAncHgnKVxuICAgICAgICAgICAgICAgICAgICA6IGUoZG9jdW1lbnQpLmhlaWdodCgpICsgJ3B4JztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3aWR0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQsIGk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUudWkuaWVcbiAgICAgICAgICAgICAgICAgICAgPyAoKHQgPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgKGkgPSBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICAgICAgaSA+IHQgPyBlKHdpbmRvdykud2lkdGgoKSArICdweCcgOiB0ICsgJ3B4JylcbiAgICAgICAgICAgICAgICAgICAgOiBlKGRvY3VtZW50KS53aWR0aCgpICsgJ3B4JztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gZShbXSk7XG4gICAgICAgICAgICAgICAgZS5lYWNoKGUudWkuZGlhbG9nLm92ZXJsYXkuaW5zdGFuY2VzLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdCA9IHQuYWRkKHRoaXMpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB0XG4gICAgICAgICAgICAgICAgICAgICAgICAuY3NzKHsgd2lkdGg6IDAsIGhlaWdodDogMCB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGUudWkuZGlhbG9nLm92ZXJsYXkud2lkdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGUudWkuZGlhbG9nLm92ZXJsYXkuaGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICBlLmV4dGVuZChlLnVpLmRpYWxvZy5vdmVybGF5LnByb3RvdHlwZSwge1xuICAgICAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZS51aS5kaWFsb2cub3ZlcmxheS5kZXN0cm95KHRoaXMuJGVsKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xufSkoalF1ZXJ5KTtcbihmdW5jdGlvbihlKSB7XG4gICAgdmFyIHQgPSAhMTtcbiAgICBlLndpZGdldCgndWkubWVudScsIHtcbiAgICAgICAgdmVyc2lvbjogJzEuOS4yJyxcbiAgICAgICAgZGVmYXVsdEVsZW1lbnQ6ICc8dWw+JyxcbiAgICAgICAgZGVsYXk6IDMwMCxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgaWNvbnM6IHsgc3VibWVudTogJ3VpLWljb24tY2FyYXQtMS1lJyB9LFxuICAgICAgICAgICAgbWVudXM6ICd1bCcsXG4gICAgICAgICAgICBwb3NpdGlvbjogeyBteTogJ2xlZnQgdG9wJywgYXQ6ICdyaWdodCB0b3AnIH0sXG4gICAgICAgICAgICByb2xlOiAnbWVudScsXG4gICAgICAgICAgICBibHVyOiBudWxsLFxuICAgICAgICAgICAgZm9jdXM6IG51bGwsXG4gICAgICAgICAgICBzZWxlY3Q6IG51bGwsXG4gICAgICAgIH0sXG4gICAgICAgIF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgKHRoaXMuYWN0aXZlTWVudSA9IHRoaXMuZWxlbWVudCksXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIC51bmlxdWVJZCgpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICd1aS1tZW51IHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsJ1xuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC50b2dnbGVDbGFzcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICd1aS1tZW51LWljb25zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICEhdGhpcy5lbGVtZW50LmZpbmQoJy51aS1pY29uJykubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoeyByb2xlOiB0aGlzLm9wdGlvbnMucm9sZSwgdGFiSW5kZXg6IDAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmJpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2xpY2snICsgdGhpcy5ldmVudE5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5kaXNhYmxlZCAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5kaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygndWktc3RhdGUtZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpLFxuICAgICAgICAgICAgICAgIHRoaXMuX29uKHtcbiAgICAgICAgICAgICAgICAgICAgJ21vdXNlZG93biAudWktbWVudS1pdGVtID4gYSc6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrIC51aS1zdGF0ZS1kaXNhYmxlZCA+IGEnOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdjbGljayAudWktbWVudS1pdGVtOmhhcyhhKSc6IGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gZShpLnRhcmdldCkuY2xvc2VzdCgnLnVpLW1lbnUtaXRlbScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIXQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLm5vdCgnLnVpLXN0YXRlLWRpc2FibGVkJykubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCh0ID0gITApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0KGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuaGFzKCcudWktbWVudScpLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuZXhwYW5kKGkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5lbGVtZW50LmlzKCc6Zm9jdXMnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmVsZW1lbnQudHJpZ2dlcignZm9jdXMnLCBbITBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmUucGFyZW50cygnLnVpLW1lbnUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdtb3VzZWVudGVyIC51aS1tZW51LWl0ZW0nOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGUodC5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2libGluZ3MoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbignLnVpLXN0YXRlLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCd1aS1zdGF0ZS1hY3RpdmUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzKHQsIGkpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtb3VzZWxlYXZlOiAnY29sbGFwc2VBbGwnLFxuICAgICAgICAgICAgICAgICAgICAnbW91c2VsZWF2ZSAudWktbWVudSc6ICdjb2xsYXBzZUFsbCcsXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzOiBmdW5jdGlvbihlLCB0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuY2hpbGRyZW4oJy51aS1tZW51LWl0ZW0nKS5lcSgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgfHwgdGhpcy5mb2N1cyhlLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYmx1cjogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5jb250YWlucyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50WzBdLmFjdGl2ZUVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHx8IHRoaXMuY29sbGFwc2VBbGwodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAga2V5ZG93bjogJ19rZXlkb3duJyxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKSxcbiAgICAgICAgICAgICAgICB0aGlzLl9vbih0aGlzLmRvY3VtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlKGkudGFyZ2V0KS5jbG9zZXN0KCcudWktbWVudScpLmxlbmd0aCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sbGFwc2VBbGwoaSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHQgPSAhMSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9kZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnKVxuICAgICAgICAgICAgICAgIC5maW5kKCcudWktbWVudScpXG4gICAgICAgICAgICAgICAgLmFuZFNlbGYoKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhcbiAgICAgICAgICAgICAgICAgICAgJ3VpLW1lbnUgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwgdWktbWVudS1pY29ucydcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ3JvbGUnKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCd0YWJJbmRleCcpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtbGFiZWxsZWRieScpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtZXhwYW5kZWQnKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVVbmlxdWVJZCgpXG4gICAgICAgICAgICAgICAgLnNob3coKSxcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy51aS1tZW51LWl0ZW0nKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3VpLW1lbnUtaXRlbScpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdyb2xlJylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJ2EnKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlVW5pcXVlSWQoKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3VpLWNvcm5lci1hbGwgdWktc3RhdGUtaG92ZXInKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cigndGFiSW5kZXgnKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cigncm9sZScpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhhc3BvcHVwJylcbiAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKClcbiAgICAgICAgICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmRhdGEoJ3VpLW1lbnUtc3VibWVudS1jYXJhdCcpICYmIHQucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnLnVpLW1lbnUtZGl2aWRlcicpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygndWktbWVudS1kaXZpZGVyIHVpLXdpZGdldC1jb250ZW50Jyk7XG4gICAgICAgIH0sXG4gICAgICAgIF9rZXlkb3duOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBpKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5yZXBsYWNlKC9bXFwtXFxbXFxde30oKSorPy4sXFxcXFxcXiR8I1xcc10vZywgJ1xcXFwkJicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHMsXG4gICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgICBoID0gITA7XG4gICAgICAgICAgICBzd2l0Y2ggKHQua2V5Q29kZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgZS51aS5rZXlDb2RlLlBBR0VfVVA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJldmlvdXNQYWdlKHQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGUudWkua2V5Q29kZS5QQUdFX0RPV046XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFBhZ2UodCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZS51aS5rZXlDb2RlLkhPTUU6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdmUoJ2ZpcnN0JywgJ2ZpcnN0JywgdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZS51aS5rZXlDb2RlLkVORDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW92ZSgnbGFzdCcsICdsYXN0JywgdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZS51aS5rZXlDb2RlLlVQOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZpb3VzKHQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGUudWkua2V5Q29kZS5ET1dOOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHQodCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZS51aS5rZXlDb2RlLkxFRlQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29sbGFwc2UodCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZS51aS5rZXlDb2RlLlJJR0hUOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIXRoaXMuYWN0aXZlLmlzKCcudWktc3RhdGUtZGlzYWJsZWQnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBhbmQodCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZS51aS5rZXlDb2RlLkVOVEVSOlxuICAgICAgICAgICAgICAgIGNhc2UgZS51aS5rZXlDb2RlLlNQQUNFOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBlLnVpLmtleUNvZGUuRVNDQVBFOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbGxhcHNlKHQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAoaCA9ICExKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChuID0gdGhpcy5wcmV2aW91c0ZpbHRlciB8fCAnJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAoYSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodC5rZXlDb2RlKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAobyA9ICExKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmZpbHRlclRpbWVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgPT09IG4gPyAobyA9ICEwKSA6IChhID0gbiArIGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHIgPSBSZWdFeHAoJ14nICsgaShhKSwgJ2knKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAocyA9IHRoaXMuYWN0aXZlTWVudVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbignLnVpLW1lbnUtaXRlbScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIudGVzdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJ2EnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAocyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbyAmJiAtMSAhPT0gcy5pbmRleCh0aGlzLmFjdGl2ZS5uZXh0KCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5hY3RpdmUubmV4dEFsbCgnLnVpLW1lbnUtaXRlbScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBzLmxlbmd0aCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoYSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodC5rZXlDb2RlKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHIgPSBSZWdFeHAoJ14nICsgaShhKSwgJ2knKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHMgPSB0aGlzLmFjdGl2ZU1lbnVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKCcudWktbWVudS1pdGVtJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByLnRlc3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJ2EnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICh0aGlzLmZvY3VzKHQsIHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5sZW5ndGggPiAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoKHRoaXMucHJldmlvdXNGaWx0ZXIgPSBhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmZpbHRlclRpbWVyID0gdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucHJldmlvdXNGaWx0ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxZTMpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGRlbGV0ZSB0aGlzLnByZXZpb3VzRmlsdGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZGVsZXRlIHRoaXMucHJldmlvdXNGaWx0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoICYmIHQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2FjdGl2YXRlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZS5pcygnLnVpLXN0YXRlLWRpc2FibGVkJykgfHxcbiAgICAgICAgICAgICAgICAodGhpcy5hY3RpdmUuY2hpbGRyZW4oXCJhW2FyaWEtaGFzcG9wdXA9J3RydWUnXVwiKS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmV4cGFuZChlKVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuc2VsZWN0KGUpKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVmcmVzaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdCxcbiAgICAgICAgICAgICAgICBpID0gdGhpcy5vcHRpb25zLmljb25zLnN1Ym1lbnUsXG4gICAgICAgICAgICAgICAgcyA9IHRoaXMuZWxlbWVudC5maW5kKHRoaXMub3B0aW9ucy5tZW51cyk7XG4gICAgICAgICAgICBzXG4gICAgICAgICAgICAgICAgLmZpbHRlcignOm5vdCgudWktbWVudSknKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygndWktbWVudSB1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWFsbCcpXG4gICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogdGhpcy5vcHRpb25zLnJvbGUsXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtZXhwYW5kZWQnOiAnZmFsc2UnLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gZSh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgPSB0LnByZXYoJ2EnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBlKCc8c3Bhbj4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygndWktbWVudS1pY29uIHVpLWljb24gJyArIGkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRhdGEoJ3VpLW1lbnUtc3VibWVudS1jYXJhdCcsICEwKTtcbiAgICAgICAgICAgICAgICAgICAgcy5hdHRyKCdhcmlhLWhhc3BvcHVwJywgJ3RydWUnKS5wcmVwZW5kKG4pLFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5hdHRyKCdhcmlhLWxhYmVsbGVkYnknLCBzLmF0dHIoJ2lkJykpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICh0ID0gcy5hZGQodGhpcy5lbGVtZW50KSksXG4gICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJzpub3QoLnVpLW1lbnUtaXRlbSk6aGFzKGEpJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCd1aS1tZW51LWl0ZW0nKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigncm9sZScsICdwcmVzZW50YXRpb24nKVxuICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJ2EnKVxuICAgICAgICAgICAgICAgICAgICAudW5pcXVlSWQoKVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3VpLWNvcm5lci1hbGwnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cih7IHRhYkluZGV4OiAtMSwgcm9sZTogdGhpcy5faXRlbVJvbGUoKSB9KSxcbiAgICAgICAgICAgICAgICB0LmNoaWxkcmVuKCc6bm90KC51aS1tZW51LWl0ZW0pJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAvW15cXC3igJTigJNcXHNdLy50ZXN0KHQudGV4dCgpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdC5hZGRDbGFzcygndWktd2lkZ2V0LWNvbnRlbnQgdWktbWVudS1kaXZpZGVyJyk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdC5jaGlsZHJlbignLnVpLXN0YXRlLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyksXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmUgJiZcbiAgICAgICAgICAgICAgICAgICAgIWUuY29udGFpbnModGhpcy5lbGVtZW50WzBdLCB0aGlzLmFjdGl2ZVswXSkgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9pdGVtUm9sZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4geyBtZW51OiAnbWVudWl0ZW0nLCBsaXN0Ym94OiAnb3B0aW9uJyB9W3RoaXMub3B0aW9ucy5yb2xlXTtcbiAgICAgICAgfSxcbiAgICAgICAgZm9jdXM6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgIHZhciBpLCBzO1xuICAgICAgICAgICAgdGhpcy5ibHVyKGUsIGUgJiYgJ2ZvY3VzJyA9PT0gZS50eXBlKSxcbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxJbnRvVmlldyh0KSxcbiAgICAgICAgICAgICAgICAodGhpcy5hY3RpdmUgPSB0LmZpcnN0KCkpLFxuICAgICAgICAgICAgICAgIChzID0gdGhpcy5hY3RpdmUuY2hpbGRyZW4oJ2EnKS5hZGRDbGFzcygndWktc3RhdGUtZm9jdXMnKSksXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnJvbGUgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcsIHMuYXR0cignaWQnKSksXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcudWktbWVudS1pdGVtJylcbiAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKCdhOmZpcnN0JylcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCd1aS1zdGF0ZS1hY3RpdmUnKSxcbiAgICAgICAgICAgICAgICBlICYmICdrZXlkb3duJyA9PT0gZS50eXBlXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5fY2xvc2UoKVxuICAgICAgICAgICAgICAgICAgICA6ICh0aGlzLnRpbWVyID0gdGhpcy5fZGVsYXkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5kZWxheSkpLFxuICAgICAgICAgICAgICAgIChpID0gdC5jaGlsZHJlbignLnVpLW1lbnUnKSksXG4gICAgICAgICAgICAgICAgaS5sZW5ndGggJiYgL15tb3VzZS8udGVzdChlLnR5cGUpICYmIHRoaXMuX3N0YXJ0T3BlbmluZyhpKSxcbiAgICAgICAgICAgICAgICAodGhpcy5hY3RpdmVNZW51ID0gdC5wYXJlbnQoKSksXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignZm9jdXMnLCBlLCB7IGl0ZW06IHQgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zY3JvbGxJbnRvVmlldzogZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgdmFyIGksIHMsIG4sIGEsIG8sIHI7XG4gICAgICAgICAgICB0aGlzLl9oYXNTY3JvbGwoKSAmJlxuICAgICAgICAgICAgICAgICgoaSA9XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQoZS5jc3ModGhpcy5hY3RpdmVNZW51WzBdLCAnYm9yZGVyVG9wV2lkdGgnKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgMCksXG4gICAgICAgICAgICAgICAgKHMgPSBwYXJzZUZsb2F0KGUuY3NzKHRoaXMuYWN0aXZlTWVudVswXSwgJ3BhZGRpbmdUb3AnKSkgfHwgMCksXG4gICAgICAgICAgICAgICAgKG4gPSB0Lm9mZnNldCgpLnRvcCAtIHRoaXMuYWN0aXZlTWVudS5vZmZzZXQoKS50b3AgLSBpIC0gcyksXG4gICAgICAgICAgICAgICAgKGEgPSB0aGlzLmFjdGl2ZU1lbnUuc2Nyb2xsVG9wKCkpLFxuICAgICAgICAgICAgICAgIChvID0gdGhpcy5hY3RpdmVNZW51LmhlaWdodCgpKSxcbiAgICAgICAgICAgICAgICAociA9IHQuaGVpZ2h0KCkpLFxuICAgICAgICAgICAgICAgIDAgPiBuXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5hY3RpdmVNZW51LnNjcm9sbFRvcChhICsgbilcbiAgICAgICAgICAgICAgICAgICAgOiBuICsgciA+IG8gJiYgdGhpcy5hY3RpdmVNZW51LnNjcm9sbFRvcChhICsgbiAtIG8gKyByKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGJsdXI6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICAgICAgICAgIHQgfHwgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpLFxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlICYmXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmFjdGl2ZS5jaGlsZHJlbignYScpLnJlbW92ZUNsYXNzKCd1aS1zdGF0ZS1mb2N1cycpLFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5hY3RpdmUgPSBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignYmx1cicsIGUsIHsgaXRlbTogdGhpcy5hY3RpdmUgfSkpO1xuICAgICAgICB9LFxuICAgICAgICBfc3RhcnRPcGVuaW5nOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lciksXG4gICAgICAgICAgICAgICAgJ3RydWUnID09PSBlLmF0dHIoJ2FyaWEtaGlkZGVuJykgJiZcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMudGltZXIgPSB0aGlzLl9kZWxheShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nsb3NlKCksIHRoaXMuX29wZW4oZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuZGVsYXkpKTtcbiAgICAgICAgfSxcbiAgICAgICAgX29wZW46IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciBpID0gZS5leHRlbmQoeyBvZjogdGhpcy5hY3RpdmUgfSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uKTtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKSxcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy51aS1tZW51JylcbiAgICAgICAgICAgICAgICAgICAgLm5vdCh0LnBhcmVudHMoJy51aS1tZW51JykpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKSxcbiAgICAgICAgICAgICAgICB0XG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpXG4gICAgICAgICAgICAgICAgICAgIC5wb3NpdGlvbihpKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29sbGFwc2VBbGw6IGZ1bmN0aW9uKHQsIGkpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKSxcbiAgICAgICAgICAgICAgICAodGhpcy50aW1lciA9IHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IGlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5lbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICA6IGUodCAmJiB0LnRhcmdldCkuY2xvc2VzdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5maW5kKCcudWktbWVudScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHMubGVuZ3RoIHx8IChzID0gdGhpcy5lbGVtZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nsb3NlKHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ibHVyKHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuYWN0aXZlTWVudSA9IHMpO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMuZGVsYXkpKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2Nsb3NlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlIHx8IChlID0gdGhpcy5hY3RpdmUgPyB0aGlzLmFjdGl2ZS5wYXJlbnQoKSA6IHRoaXMuZWxlbWVudCksXG4gICAgICAgICAgICAgICAgZVxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnLnVpLW1lbnUnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgICAgICAgICAgICAgICAgICAuZW5kKClcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ2EudWktc3RhdGUtYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCd1aS1zdGF0ZS1hY3RpdmUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29sbGFwc2U6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciB0ID1cbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlLnBhcmVudCgpLmNsb3Nlc3QoJy51aS1tZW51LWl0ZW0nLCB0aGlzLmVsZW1lbnQpO1xuICAgICAgICAgICAgdCAmJiB0Lmxlbmd0aCAmJiAodGhpcy5fY2xvc2UoKSwgdGhpcy5mb2N1cyhlLCB0KSk7XG4gICAgICAgIH0sXG4gICAgICAgIGV4cGFuZDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHQgPVxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlICYmXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKCcudWktbWVudSAnKVxuICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJy51aS1tZW51LWl0ZW0nKVxuICAgICAgICAgICAgICAgICAgICAuZmlyc3QoKTtcbiAgICAgICAgICAgIHQgJiZcbiAgICAgICAgICAgICAgICB0Lmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICh0aGlzLl9vcGVuKHQucGFyZW50KCkpLFxuICAgICAgICAgICAgICAgIHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzKGUsIHQpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdGhpcy5fbW92ZSgnbmV4dCcsICdmaXJzdCcsIGUpO1xuICAgICAgICB9LFxuICAgICAgICBwcmV2aW91czogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdGhpcy5fbW92ZSgncHJldicsICdsYXN0JywgZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGlzRmlyc3RJdGVtOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZSAmJiAhdGhpcy5hY3RpdmUucHJldkFsbCgnLnVpLW1lbnUtaXRlbScpLmxlbmd0aDtcbiAgICAgICAgfSxcbiAgICAgICAgaXNMYXN0SXRlbTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmUgJiYgIXRoaXMuYWN0aXZlLm5leHRBbGwoJy51aS1tZW51LWl0ZW0nKS5sZW5ndGg7XG4gICAgICAgIH0sXG4gICAgICAgIF9tb3ZlOiBmdW5jdGlvbihlLCB0LCBpKSB7XG4gICAgICAgICAgICB2YXIgcztcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlICYmXG4gICAgICAgICAgICAgICAgKHMgPVxuICAgICAgICAgICAgICAgICAgICAnZmlyc3QnID09PSBlIHx8ICdsYXN0JyA9PT0gZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmFjdGl2ZVsnZmlyc3QnID09PSBlID8gJ3ByZXZBbGwnIDogJ25leHRBbGwnXShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcudWktbWVudS1pdGVtJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICApLmVxKC0xKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmFjdGl2ZVtlICsgJ0FsbCddKCcudWktbWVudS1pdGVtJykuZXEoMCkpLFxuICAgICAgICAgICAgICAgIChzICYmIHMubGVuZ3RoICYmIHRoaXMuYWN0aXZlKSB8fFxuICAgICAgICAgICAgICAgICAgICAocyA9IHRoaXMuYWN0aXZlTWVudS5jaGlsZHJlbignLnVpLW1lbnUtaXRlbScpW3RdKCkpLFxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoaSwgcyk7XG4gICAgICAgIH0sXG4gICAgICAgIG5leHRQYWdlOiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgaSwgcywgbjtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZVxuICAgICAgICAgICAgICAgID8gKHRoaXMuaXNMYXN0SXRlbSgpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgKHRoaXMuX2hhc1Njcm9sbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gKChzID0gdGhpcy5hY3RpdmUub2Zmc2V0KCkudG9wKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobiA9IHRoaXMuZWxlbWVudC5oZWlnaHQoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm5leHRBbGwoJy51aS1tZW51LWl0ZW0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkgPSBlKHRoaXMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwID4gaS5vZmZzZXQoKS50b3AgLSBzIC0gblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1cyh0LCBpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmZvY3VzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZU1lbnVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbignLnVpLW1lbnUtaXRlbScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdGhpcy5hY3RpdmUgPyAnbGFzdCcgOiAnZmlyc3QnXSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgICB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgOiAodGhpcy5uZXh0KHQpLCB1bmRlZmluZWQpO1xuICAgICAgICB9LFxuICAgICAgICBwcmV2aW91c1BhZ2U6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHZhciBpLCBzLCBuO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlXG4gICAgICAgICAgICAgICAgPyAodGhpcy5pc0ZpcnN0SXRlbSgpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgKHRoaXMuX2hhc1Njcm9sbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gKChzID0gdGhpcy5hY3RpdmUub2Zmc2V0KCkudG9wKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobiA9IHRoaXMuZWxlbWVudC5oZWlnaHQoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByZXZBbGwoJy51aS1tZW51LWl0ZW0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkgPSBlKHRoaXMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9mZnNldCgpLnRvcCAtIHMgKyBuID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1cyh0LCBpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmZvY3VzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZU1lbnVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbignLnVpLW1lbnUtaXRlbScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlyc3QoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIDogKHRoaXMubmV4dCh0KSwgdW5kZWZpbmVkKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2hhc1Njcm9sbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpIDwgdGhpcy5lbGVtZW50LnByb3AoJ3Njcm9sbEhlaWdodCcpXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBzZWxlY3Q6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gdGhpcy5hY3RpdmUgfHwgZSh0LnRhcmdldCkuY2xvc2VzdCgnLnVpLW1lbnUtaXRlbScpO1xuICAgICAgICAgICAgdmFyIGkgPSB7IGl0ZW06IHRoaXMuYWN0aXZlIH07XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZS5oYXMoJy51aS1tZW51JykubGVuZ3RoIHx8IHRoaXMuY29sbGFwc2VBbGwodCwgITApLFxuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ3NlbGVjdCcsIHQsIGkpO1xuICAgICAgICB9LFxuICAgIH0pO1xufSkoalF1ZXJ5KTtcbiIsIi8qXG4gKiBqUXVlcnkgQkJROiBCYWNrIEJ1dHRvbiAmIFF1ZXJ5IExpYnJhcnkgLSB2MS4yLjEgLSAyLzE3LzIwMTBcbiAqIGh0dHA6Ly9iZW5hbG1hbi5jb20vcHJvamVjdHMvanF1ZXJ5LWJicS1wbHVnaW4vXG4gKiBcbiAqIENvcHlyaWdodCAoYykgMjAxMCBcIkNvd2JveVwiIEJlbiBBbG1hblxuICogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGFuZCBHUEwgbGljZW5zZXMuXG4gKiBodHRwOi8vYmVuYWxtYW4uY29tL2Fib3V0L2xpY2Vuc2UvXG4gKi9cbihmdW5jdGlvbigkLCBwKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG0gPSBBcnJheS5wcm90b3R5cGUuc2xpY2UsXG4gICAgICAgIHIgPSBkZWNvZGVVUklDb21wb25lbnQsXG4gICAgICAgIGEgPSAkLnBhcmFtLFxuICAgICAgICBjLFxuICAgICAgICBsLFxuICAgICAgICB2LFxuICAgICAgICBiID0gKCQuYmJxID0gJC5iYnEgfHwge30pLFxuICAgICAgICBxLFxuICAgICAgICB1LFxuICAgICAgICBqLFxuICAgICAgICBlID0gJC5ldmVudC5zcGVjaWFsLFxuICAgICAgICBkID0gJ2hhc2hjaGFuZ2UnLFxuICAgICAgICBBID0gJ3F1ZXJ5c3RyaW5nJyxcbiAgICAgICAgRCA9ICdmcmFnbWVudCcsXG4gICAgICAgIHkgPSAnZWxlbVVybEF0dHInLFxuICAgICAgICBnID0gJ2xvY2F0aW9uJyxcbiAgICAgICAgayA9ICdocmVmJyxcbiAgICAgICAgdCA9ICdzcmMnLFxuICAgICAgICB4ID0gL14uKlxcP3wjLiokL2csXG4gICAgICAgIHcgPSAvXi4qXFwjLyxcbiAgICAgICAgaCxcbiAgICAgICAgQyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gRShGKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgRiA9PT0gJ3N0cmluZyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gQihHKSB7XG4gICAgICAgIHZhciBGID0gbS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBHLmFwcGx5KHRoaXMsIEYuY29uY2F0KG0uY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbihGKSB7XG4gICAgICAgIHJldHVybiBGLnJlcGxhY2UoL15bXiNdKiM/KC4qKSQvLCAnJDEnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvKEYpIHtcbiAgICAgICAgcmV0dXJuIEYucmVwbGFjZSgvKD86XltePyNdKlxcPyhbXiNdKikuKiQpPy4qLywgJyQxJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZihILCBNLCBGLCBJLCBHKSB7XG4gICAgICAgIHZhciBPLCBMLCBLLCBOLCBKO1xuICAgICAgICBpZiAoSSAhPT0gaSkge1xuICAgICAgICAgICAgSyA9IEYubWF0Y2goSCA/IC9eKFteI10qKVxcIz8oLiopJC8gOiAvXihbXiM/XSopXFw/PyhbXiNdKikoIz8uKikvKTtcbiAgICAgICAgICAgIEogPSBLWzNdIHx8ICcnO1xuICAgICAgICAgICAgaWYgKEcgPT09IDIgJiYgRShJKSkge1xuICAgICAgICAgICAgICAgIEwgPSBJLnJlcGxhY2UoSCA/IHcgOiB4LCAnJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIE4gPSBsKEtbMl0pO1xuICAgICAgICAgICAgICAgIEkgPSBFKEkpID8gbFtIID8gRCA6IEFdKEkpIDogSTtcbiAgICAgICAgICAgICAgICBMID1cbiAgICAgICAgICAgICAgICAgICAgRyA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgPyBJXG4gICAgICAgICAgICAgICAgICAgICAgICA6IEcgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICQuZXh0ZW5kKHt9LCBJLCBOKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJC5leHRlbmQoe30sIE4sIEkpO1xuICAgICAgICAgICAgICAgIEwgPSBhKEwpO1xuICAgICAgICAgICAgICAgIGlmIChIKSB7XG4gICAgICAgICAgICAgICAgICAgIEwgPSBMLnJlcGxhY2UoaCwgcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTyA9IEtbMV0gKyAoSCA/ICcjJyA6IEwgfHwgIUtbMV0gPyAnPycgOiAnJykgKyBMICsgSjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE8gPSBNKEYgIT09IGkgPyBGIDogcFtnXVtrXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE87XG4gICAgfVxuXG4gICAgYVtBXSA9IEIoZiwgMCwgbyk7XG4gICAgYVtEXSA9IGMgPSBCKGYsIDEsIG4pO1xuICAgIGMubm9Fc2NhcGUgPSBmdW5jdGlvbihHKSB7XG4gICAgICAgIEcgPSBHIHx8ICcnO1xuICAgICAgICB2YXIgRiA9ICQubWFwKEcuc3BsaXQoJycpLCBlbmNvZGVVUklDb21wb25lbnQpO1xuICAgICAgICBoID0gbmV3IFJlZ0V4cChGLmpvaW4oJ3wnKSwgJ2cnKTtcbiAgICB9O1xuICAgIGMubm9Fc2NhcGUoJywvJyk7XG4gICAgJC5kZXBhcmFtID0gbCA9IGZ1bmN0aW9uKEksIEYpIHtcbiAgICAgICAgdmFyIEggPSB7fSxcbiAgICAgICAgICAgIEcgPSB7IHRydWU6ICEwLCBmYWxzZTogITEsIG51bGw6IG51bGwgfTtcbiAgICAgICAgJC5lYWNoKEkucmVwbGFjZSgvXFwrL2csICcgJykuc3BsaXQoJyYnKSwgZnVuY3Rpb24oTCwgUSkge1xuICAgICAgICAgICAgdmFyIEsgPSBRLnNwbGl0KCc9JyksXG4gICAgICAgICAgICAgICAgUCA9IHIoS1swXSksXG4gICAgICAgICAgICAgICAgSixcbiAgICAgICAgICAgICAgICBPID0gSCxcbiAgICAgICAgICAgICAgICBNID0gMCxcbiAgICAgICAgICAgICAgICBSID0gUC5zcGxpdCgnXVsnKSxcbiAgICAgICAgICAgICAgICBOID0gUi5sZW5ndGggLSAxO1xuICAgICAgICAgICAgaWYgKC9cXFsvLnRlc3QoUlswXSkgJiYgL1xcXSQvLnRlc3QoUltOXSkpIHtcbiAgICAgICAgICAgICAgICBSW05dID0gUltOXS5yZXBsYWNlKC9cXF0kLywgJycpO1xuICAgICAgICAgICAgICAgIFIgPSBSLnNoaWZ0KClcbiAgICAgICAgICAgICAgICAgICAgLnNwbGl0KCdbJylcbiAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChSKTtcbiAgICAgICAgICAgICAgICBOID0gUi5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBOID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChLLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIEogPSByKEtbMV0pO1xuICAgICAgICAgICAgICAgIGlmIChGKSB7XG4gICAgICAgICAgICAgICAgICAgIEogPVxuICAgICAgICAgICAgICAgICAgICAgICAgSiAmJiAhaXNOYU4oSilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICtKXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBKID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBHW0pdICE9PSBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IEdbSl1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogSjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKE4pIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IE0gPD0gTjsgTSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBQID0gUltNXSA9PT0gJycgPyBPLmxlbmd0aCA6IFJbTV07XG4gICAgICAgICAgICAgICAgICAgICAgICBPID0gT1tQXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTSA8IE5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBPW1BdIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFJbTSArIDFdICYmIGlzTmFOKFJbTSArIDFdKSA/IHt9IDogW10pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogSjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkLmlzQXJyYXkoSFtQXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEhbUF0ucHVzaChKKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChIW1BdICE9PSBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSFtQXSA9IFtIW1BdLCBKXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSFtQXSA9IEo7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChQKSB7XG4gICAgICAgICAgICAgICAgICAgIEhbUF0gPSBGID8gaSA6ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBIO1xuICAgIH07XG4gICAgZnVuY3Rpb24geihILCBGLCBHKSB7XG4gICAgICAgIGlmIChGID09PSBpIHx8IHR5cGVvZiBGID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIEcgPSBGO1xuICAgICAgICAgICAgRiA9IGFbSCA/IEQgOiBBXSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgRiA9IEUoRikgPyBGLnJlcGxhY2UoSCA/IHcgOiB4LCAnJykgOiBGO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsKEYsIEcpO1xuICAgIH1cblxuICAgIGxbQV0gPSBCKHosIDApO1xuICAgIGxbRF0gPSB2ID0gQih6LCAxKTtcbiAgICAkW3ldIHx8XG4gICAgICAgICgkW3ldID0gZnVuY3Rpb24oRikge1xuICAgICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKEMsIEYpO1xuICAgICAgICB9KSh7XG4gICAgICAgICAgICBhOiBrLFxuICAgICAgICAgICAgYmFzZTogayxcbiAgICAgICAgICAgIGlmcmFtZTogdCxcbiAgICAgICAgICAgIGltZzogdCxcbiAgICAgICAgICAgIGlucHV0OiB0LFxuICAgICAgICAgICAgZm9ybTogJ2FjdGlvbicsXG4gICAgICAgICAgICBsaW5rOiBrLFxuICAgICAgICAgICAgc2NyaXB0OiB0LFxuICAgICAgICB9KTtcbiAgICBqID0gJFt5XTtcbiAgICBmdW5jdGlvbiBzKEksIEcsIEgsIEYpIHtcbiAgICAgICAgaWYgKCFFKEgpICYmIHR5cGVvZiBIICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgRiA9IEg7XG4gICAgICAgICAgICBIID0gRztcbiAgICAgICAgICAgIEcgPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgTCA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgSiA9IEcgfHwgaigpWyh0aGlzLm5vZGVOYW1lIHx8ICcnKS50b0xvd2VyQ2FzZSgpXSB8fCAnJyxcbiAgICAgICAgICAgICAgICBLID0gKEogJiYgTC5hdHRyKEopKSB8fCAnJztcbiAgICAgICAgICAgIEwuYXR0cihKLCBhW0ldKEssIEgsIEYpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgJC5mbltBXSA9IEIocywgQSk7XG4gICAgJC5mbltEXSA9IEIocywgRCk7XG4gICAgYi5wdXNoU3RhdGUgPSBxID0gZnVuY3Rpb24oSSwgRikge1xuICAgICAgICBpZiAoRShJKSAmJiAvXiMvLnRlc3QoSSkgJiYgRiA9PT0gaSkge1xuICAgICAgICAgICAgRiA9IDI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIEggPSBJICE9PSBpLFxuICAgICAgICAgICAgRyA9IGMocFtnXVtrXSwgSCA/IEkgOiB7fSwgSCA/IEYgOiAyKTtcbiAgICAgICAgcFtnXVtrXSA9IEcgKyAoLyMvLnRlc3QoRykgPyAnJyA6ICcjJyk7XG4gICAgfTtcbiAgICBiLmdldFN0YXRlID0gdSA9IGZ1bmN0aW9uKEYsIEcpIHtcbiAgICAgICAgcmV0dXJuIEYgPT09IGkgfHwgdHlwZW9mIEYgPT09ICdib29sZWFuJyA/IHYoRikgOiB2KEcpW0ZdO1xuICAgIH07XG4gICAgYi5yZW1vdmVTdGF0ZSA9IGZ1bmN0aW9uKEYpIHtcbiAgICAgICAgdmFyIEcgPSB7fTtcbiAgICAgICAgaWYgKEYgIT09IGkpIHtcbiAgICAgICAgICAgIEcgPSB1KCk7XG4gICAgICAgICAgICAkLmVhY2goJC5pc0FycmF5KEYpID8gRiA6IGFyZ3VtZW50cywgZnVuY3Rpb24oSSwgSCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBHW0hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcShHLCAyKTtcbiAgICB9O1xuICAgIGVbZF0gPSAkLmV4dGVuZChlW2RdLCB7XG4gICAgICAgIGFkZDogZnVuY3Rpb24oRikge1xuICAgICAgICAgICAgdmFyIEg7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIEcoSikge1xuICAgICAgICAgICAgICAgIHZhciBJID0gKEpbRF0gPSBjKCkpO1xuICAgICAgICAgICAgICAgIEouZ2V0U3RhdGUgPSBmdW5jdGlvbihLLCBMKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBLID09PSBpIHx8IHR5cGVvZiBLID09PSAnYm9vbGVhbidcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbChJLCBLKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBsKEksIEwpW0tdO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgSC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKEYpKSB7XG4gICAgICAgICAgICAgICAgSCA9IEY7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEggPSBGLmhhbmRsZXI7XG4gICAgICAgICAgICAgICAgRi5oYW5kbGVyID0gRztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcbn0pKGpRdWVyeSwgd2luZG93KTtcbi8qXG4gKiBqUXVlcnkgaGFzaGNoYW5nZSBldmVudCAtIHYxLjIgLSAyLzExLzIwMTBcbiAqIGh0dHA6Ly9iZW5hbG1hbi5jb20vcHJvamVjdHMvanF1ZXJ5LWhhc2hjaGFuZ2UtcGx1Z2luL1xuICogXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTAgXCJDb3dib3lcIiBCZW4gQWxtYW5cbiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBhbmQgR1BMIGxpY2Vuc2VzLlxuICogaHR0cDovL2JlbmFsbWFuLmNvbS9hYm91dC9saWNlbnNlL1xuICovXG4oZnVuY3Rpb24oJCwgaSwgYikge1xuICAgIHZhciBqLFxuICAgICAgICBrID0gJC5ldmVudC5zcGVjaWFsLFxuICAgICAgICBjID0gJ2xvY2F0aW9uJyxcbiAgICAgICAgZCA9ICdoYXNoY2hhbmdlJyxcbiAgICAgICAgbCA9ICdocmVmJyxcbiAgICAgICAgZiA9ICQuYnJvd3NlcixcbiAgICAgICAgZyA9IGRvY3VtZW50LmRvY3VtZW50TW9kZSxcbiAgICAgICAgaCA9IGYubXNpZSAmJiAoZyA9PT0gYiB8fCBnIDwgOCksXG4gICAgICAgIGUgPSAnb24nICsgZCBpbiBpICYmICFoO1xuXG4gICAgZnVuY3Rpb24gYShtKSB7XG4gICAgICAgIG0gPSBtIHx8IGlbY11bbF07XG4gICAgICAgIHJldHVybiBtLnJlcGxhY2UoL15bXiNdKiM/KC4qKSQvLCAnJDEnKTtcbiAgICB9XG5cbiAgICAkW2QgKyAnRGVsYXknXSA9IDEwMDtcbiAgICBrW2RdID0gJC5leHRlbmQoa1tkXSwge1xuICAgICAgICBzZXR1cDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQoai5zdGFydCk7XG4gICAgICAgIH0sXG4gICAgICAgIHRlYXJkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJChqLnN0b3ApO1xuICAgICAgICB9LFxuICAgIH0pO1xuICAgIGogPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtID0ge30sXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBxO1xuXG4gICAgICAgIGZ1bmN0aW9uIHAoKSB7XG4gICAgICAgICAgICBvID0gcSA9IGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaCkge1xuICAgICAgICAgICAgICAgIG4gPSAkKCc8aWZyYW1lIHNyYz1cImphdmFzY3JpcHQ6MFwiLz4nKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5pbnNlcnRBZnRlcignYm9keScpWzBdLmNvbnRlbnRXaW5kb3c7XG4gICAgICAgICAgICAgICAgcSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYShuLmRvY3VtZW50W2NdW2xdKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIG8gPSBmdW5jdGlvbih1LCBzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IG4uZG9jdW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0Lm9wZW4oKS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdFtjXS5oYXNoID0gJyMnICsgdTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbyhhKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbS5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdCA9IGEoKTtcbiAgICAgICAgICAgIG8gfHwgcCgpO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIHMoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHYgPSBhKCksXG4gICAgICAgICAgICAgICAgICAgIHUgPSBxKHQpO1xuICAgICAgICAgICAgICAgIGlmICh2ICE9PSB0KSB7XG4gICAgICAgICAgICAgICAgICAgIG8oKHQgPSB2KSwgdSk7XG4gICAgICAgICAgICAgICAgICAgICQoaSkudHJpZ2dlcihkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaVtjXVtsXSA9IGlbY11bbF0ucmVwbGFjZSgvIy4qLywgJycpICsgJyMnICsgdTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByID0gc2V0VGltZW91dChzLCAkW2QgKyAnRGVsYXknXSk7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICB9O1xuICAgICAgICBtLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghbikge1xuICAgICAgICAgICAgICAgIHIgJiYgY2xlYXJUaW1lb3V0KHIpO1xuICAgICAgICAgICAgICAgIHIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbTtcbiAgICB9KSgpO1xufSkoalF1ZXJ5LCB3aW5kb3cpO1xuIiwiLyohIGpRdWVyeSB2MS44LjIganF1ZXJ5LmNvbSB8IGpxdWVyeS5vcmcvbGljZW5zZSAqL1xuKGZ1bmN0aW9uKGEsIGIpIHtcbiAgICBmdW5jdGlvbiBHKGEpIHtcbiAgICAgICAgdmFyIGIgPSAoRlthXSA9IHt9KTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHAuZWFjaChhLnNwbGl0KHMpLCBmdW5jdGlvbihhLCBjKSB7XG4gICAgICAgICAgICAgICAgYltjXSA9ICEwO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBiXG4gICAgICAgICk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIEooYSwgYywgZCkge1xuICAgICAgICBpZiAoZCA9PT0gYiAmJiBhLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICB2YXIgZSA9ICdkYXRhLScgKyBjLnJlcGxhY2UoSSwgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBkID0gYS5nZXRBdHRyaWJ1dGUoZSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGQgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBkID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGQgPT09ICd0cnVlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gITBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGQgPT09ICdmYWxzZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAhMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGQgPT09ICdudWxsJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICtkICsgJycgPT09IGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICtkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBILnRlc3QoZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBwLnBhcnNlSlNPTihkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGQ7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZikge31cbiAgICAgICAgICAgICAgICBwLmRhdGEoYSwgYywgZCk7XG4gICAgICAgICAgICB9IGVsc2UgZCA9IGI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIEsoYSkge1xuICAgICAgICB2YXIgYjtcbiAgICAgICAgZm9yIChiIGluIGEpIHtcbiAgICAgICAgICAgIGlmIChiID09PSAnZGF0YScgJiYgcC5pc0VtcHR5T2JqZWN0KGFbYl0pKSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChiICE9PSAndG9KU09OJykgcmV0dXJuICExO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmEoKSB7XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmIoKSB7XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmgoYSkge1xuICAgICAgICByZXR1cm4gIWEgfHwgIWEucGFyZW50Tm9kZSB8fCBhLnBhcmVudE5vZGUubm9kZVR5cGUgPT09IDExO1xuICAgIH1cbiAgICBmdW5jdGlvbiBiaShhLCBiKSB7XG4gICAgICAgIGRvIGEgPSBhW2JdO1xuICAgICAgICB3aGlsZSAoYSAmJiBhLm5vZGVUeXBlICE9PSAxKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJqKGEsIGIsIGMpIHtcbiAgICAgICAgYiA9IGIgfHwgMDtcbiAgICAgICAgaWYgKHAuaXNGdW5jdGlvbihiKSlcbiAgICAgICAgICAgIHJldHVybiBwLmdyZXAoYSwgZnVuY3Rpb24oYSwgZCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gISFiLmNhbGwoYSwgZCwgYSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUgPT09IGM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgaWYgKGIubm9kZVR5cGUpXG4gICAgICAgICAgICByZXR1cm4gcC5ncmVwKGEsIGZ1bmN0aW9uKGEsIGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGEgPT09IGIpID09PSBjO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGlmICh0eXBlb2YgYiA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIGQgPSBwLmdyZXAoYSwgZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhLm5vZGVUeXBlID09PSAxO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoYmUudGVzdChiKSkgcmV0dXJuIHAuZmlsdGVyKGIsIGQsICFjKTtcbiAgICAgICAgICAgIGIgPSBwLmZpbHRlcihiLCBkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcC5ncmVwKGEsIGZ1bmN0aW9uKGEsIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBwLmluQXJyYXkoYSwgYikgPj0gMCA9PT0gYztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJrKGEpIHtcbiAgICAgICAgdmFyIGIgPSBibC5zcGxpdCgnfCcpLFxuICAgICAgICAgICAgYyA9IGEuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICBpZiAoYy5jcmVhdGVFbGVtZW50KSB3aGlsZSAoYi5sZW5ndGgpIGMuY3JlYXRlRWxlbWVudChiLnBvcCgpKTtcbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJDKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYilbMF0gfHxcbiAgICAgICAgICAgIGEuYXBwZW5kQ2hpbGQoYS5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoYikpXG4gICAgICAgICk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJEKGEsIGIpIHtcbiAgICAgICAgaWYgKGIubm9kZVR5cGUgIT09IDEgfHwgIXAuaGFzRGF0YShhKSkgcmV0dXJuO1xuICAgICAgICB2YXIgYyxcbiAgICAgICAgICAgIGQsXG4gICAgICAgICAgICBlLFxuICAgICAgICAgICAgZiA9IHAuX2RhdGEoYSksXG4gICAgICAgICAgICBnID0gcC5fZGF0YShiLCBmKSxcbiAgICAgICAgICAgIGggPSBmLmV2ZW50cztcbiAgICAgICAgaWYgKGgpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBnLmhhbmRsZSwgKGcuZXZlbnRzID0ge30pO1xuICAgICAgICAgICAgZm9yIChjIGluIGgpXG4gICAgICAgICAgICAgICAgZm9yIChkID0gMCwgZSA9IGhbY10ubGVuZ3RoOyBkIDwgZTsgZCsrKVxuICAgICAgICAgICAgICAgICAgICBwLmV2ZW50LmFkZChiLCBjLCBoW2NdW2RdKTtcbiAgICAgICAgfVxuICAgICAgICBnLmRhdGEgJiYgKGcuZGF0YSA9IHAuZXh0ZW5kKHt9LCBnLmRhdGEpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYkUoYSwgYikge1xuICAgICAgICB2YXIgYztcbiAgICAgICAgaWYgKGIubm9kZVR5cGUgIT09IDEpIHJldHVybjtcbiAgICAgICAgYi5jbGVhckF0dHJpYnV0ZXMgJiYgYi5jbGVhckF0dHJpYnV0ZXMoKSxcbiAgICAgICAgICAgIGIubWVyZ2VBdHRyaWJ1dGVzICYmIGIubWVyZ2VBdHRyaWJ1dGVzKGEpLFxuICAgICAgICAgICAgKGMgPSBiLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLFxuICAgICAgICAgICAgYyA9PT0gJ29iamVjdCdcbiAgICAgICAgICAgICAgICA/IChiLnBhcmVudE5vZGUgJiYgKGIub3V0ZXJIVE1MID0gYS5vdXRlckhUTUwpLFxuICAgICAgICAgICAgICAgICAgcC5zdXBwb3J0Lmh0bWw1Q2xvbmUgJiZcbiAgICAgICAgICAgICAgICAgICAgICBhLmlubmVySFRNTCAmJlxuICAgICAgICAgICAgICAgICAgICAgICFwLnRyaW0oYi5pbm5lckhUTUwpICYmXG4gICAgICAgICAgICAgICAgICAgICAgKGIuaW5uZXJIVE1MID0gYS5pbm5lckhUTUwpKVxuICAgICAgICAgICAgICAgIDogYyA9PT0gJ2lucHV0JyAmJiBidi50ZXN0KGEudHlwZSlcbiAgICAgICAgICAgICAgICAgICAgPyAoKGIuZGVmYXVsdENoZWNrZWQgPSBiLmNoZWNrZWQgPSBhLmNoZWNrZWQpLFxuICAgICAgICAgICAgICAgICAgICAgIGIudmFsdWUgIT09IGEudmFsdWUgJiYgKGIudmFsdWUgPSBhLnZhbHVlKSlcbiAgICAgICAgICAgICAgICAgICAgOiBjID09PSAnb3B0aW9uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAoYi5zZWxlY3RlZCA9IGEuZGVmYXVsdFNlbGVjdGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBjID09PSAnaW5wdXQnIHx8IGMgPT09ICd0ZXh0YXJlYSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChiLmRlZmF1bHRWYWx1ZSA9IGEuZGVmYXVsdFZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYyA9PT0gJ3NjcmlwdCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIudGV4dCAhPT0gYS50ZXh0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYi50ZXh0ID0gYS50ZXh0KSxcbiAgICAgICAgICAgIGIucmVtb3ZlQXR0cmlidXRlKHAuZXhwYW5kbyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJGKGEpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBhLmdldEVsZW1lbnRzQnlUYWdOYW1lICE9ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IGEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKVxuICAgICAgICAgICAgOiB0eXBlb2YgYS5xdWVyeVNlbGVjdG9yQWxsICE9ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgPyBhLnF1ZXJ5U2VsZWN0b3JBbGwoJyonKVxuICAgICAgICAgICAgICAgIDogW107XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJHKGEpIHtcbiAgICAgICAgYnYudGVzdChhLnR5cGUpICYmIChhLmRlZmF1bHRDaGVja2VkID0gYS5jaGVja2VkKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYlkoYSwgYikge1xuICAgICAgICBpZiAoYiBpbiBhKSByZXR1cm4gYjtcbiAgICAgICAgdmFyIGMgPSBiLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgYi5zbGljZSgxKSxcbiAgICAgICAgICAgIGQgPSBiLFxuICAgICAgICAgICAgZSA9IGJXLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGUtLSkge1xuICAgICAgICAgICAgYiA9IGJXW2VdICsgYztcbiAgICAgICAgICAgIGlmIChiIGluIGEpIHJldHVybiBiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBiWihhLCBiKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoYSA9IGIgfHwgYSksXG4gICAgICAgICAgICBwLmNzcyhhLCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgIXAuY29udGFpbnMoYS5vd25lckRvY3VtZW50LCBhKVxuICAgICAgICApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBiJChhLCBiKSB7XG4gICAgICAgIHZhciBjLFxuICAgICAgICAgICAgZCxcbiAgICAgICAgICAgIGUgPSBbXSxcbiAgICAgICAgICAgIGYgPSAwLFxuICAgICAgICAgICAgZyA9IGEubGVuZ3RoO1xuICAgICAgICBmb3IgKDsgZiA8IGc7IGYrKykge1xuICAgICAgICAgICAgYyA9IGFbZl07XG4gICAgICAgICAgICBpZiAoIWMuc3R5bGUpIGNvbnRpbnVlO1xuICAgICAgICAgICAgKGVbZl0gPSBwLl9kYXRhKGMsICdvbGRkaXNwbGF5JykpLFxuICAgICAgICAgICAgICAgIGJcbiAgICAgICAgICAgICAgICAgICAgPyAoIWVbZl0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYy5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGMuc3R5bGUuZGlzcGxheSA9ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICBjLnN0eWxlLmRpc3BsYXkgPT09ICcnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJaKGMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChlW2ZdID0gcC5fZGF0YShjLCAnb2xkZGlzcGxheScsIGNjKGMubm9kZU5hbWUpKSkpXG4gICAgICAgICAgICAgICAgICAgIDogKChkID0gYkgoYywgJ2Rpc3BsYXknKSksXG4gICAgICAgICAgICAgICAgICAgICAgIWVbZl0gJiYgZCAhPT0gJ25vbmUnICYmIHAuX2RhdGEoYywgJ29sZGRpc3BsYXknLCBkKSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChmID0gMDsgZiA8IGc7IGYrKykge1xuICAgICAgICAgICAgYyA9IGFbZl07XG4gICAgICAgICAgICBpZiAoIWMuc3R5bGUpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKCFiIHx8IGMuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnIHx8IGMuc3R5bGUuZGlzcGxheSA9PT0gJycpXG4gICAgICAgICAgICAgICAgYy5zdHlsZS5kaXNwbGF5ID0gYiA/IGVbZl0gfHwgJycgOiAnbm9uZSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJfKGEsIGIsIGMpIHtcbiAgICAgICAgdmFyIGQgPSBiUC5leGVjKGIpO1xuICAgICAgICByZXR1cm4gZCA/IE1hdGgubWF4KDAsIGRbMV0gLSAoYyB8fCAwKSkgKyAoZFsyXSB8fCAncHgnKSA6IGI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNhKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgdmFyIGUgPSBjID09PSAoZCA/ICdib3JkZXInIDogJ2NvbnRlbnQnKSA/IDQgOiBiID09PSAnd2lkdGgnID8gMSA6IDAsXG4gICAgICAgICAgICBmID0gMDtcbiAgICAgICAgZm9yICg7IGUgPCA0OyBlICs9IDIpXG4gICAgICAgICAgICBjID09PSAnbWFyZ2luJyAmJiAoZiArPSBwLmNzcyhhLCBjICsgYlZbZV0sICEwKSksXG4gICAgICAgICAgICAgICAgZFxuICAgICAgICAgICAgICAgICAgICA/IChjID09PSAnY29udGVudCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGYgLT0gcGFyc2VGbG9hdChiSChhLCAncGFkZGluZycgKyBiVltlXSkpIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICAgIGMgIT09ICdtYXJnaW4nICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChmIC09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KGJIKGEsICdib3JkZXInICsgYlZbZV0gKyAnV2lkdGgnKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDApKVxuICAgICAgICAgICAgICAgICAgICA6ICgoZiArPSBwYXJzZUZsb2F0KGJIKGEsICdwYWRkaW5nJyArIGJWW2VdKSkgfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgYyAhPT0gJ3BhZGRpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChmICs9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KGJIKGEsICdib3JkZXInICsgYlZbZV0gKyAnV2lkdGgnKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDApKTtcbiAgICAgICAgcmV0dXJuIGY7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNiKGEsIGIsIGMpIHtcbiAgICAgICAgdmFyIGQgPSBiID09PSAnd2lkdGgnID8gYS5vZmZzZXRXaWR0aCA6IGEub2Zmc2V0SGVpZ2h0LFxuICAgICAgICAgICAgZSA9ICEwLFxuICAgICAgICAgICAgZiA9IHAuc3VwcG9ydC5ib3hTaXppbmcgJiYgcC5jc3MoYSwgJ2JveFNpemluZycpID09PSAnYm9yZGVyLWJveCc7XG4gICAgICAgIGlmIChkIDw9IDAgfHwgZCA9PSBudWxsKSB7XG4gICAgICAgICAgICBkID0gYkgoYSwgYik7XG4gICAgICAgICAgICBpZiAoZCA8IDAgfHwgZCA9PSBudWxsKSBkID0gYS5zdHlsZVtiXTtcbiAgICAgICAgICAgIGlmIChiUS50ZXN0KGQpKSByZXR1cm4gZDtcbiAgICAgICAgICAgIChlID0gZiAmJiAocC5zdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlIHx8IGQgPT09IGEuc3R5bGVbYl0pKSxcbiAgICAgICAgICAgICAgICAoZCA9IHBhcnNlRmxvYXQoZCkgfHwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGQgKyBjYShhLCBiLCBjIHx8IChmID8gJ2JvcmRlcicgOiAnY29udGVudCcpLCBlKSArICdweCc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNjKGEpIHtcbiAgICAgICAgaWYgKGJTW2FdKSByZXR1cm4gYlNbYV07XG4gICAgICAgIHZhciBiID0gcCgnPCcgKyBhICsgJz4nKS5hcHBlbmRUbyhlLmJvZHkpLFxuICAgICAgICAgICAgYyA9IGIuY3NzKCdkaXNwbGF5Jyk7XG4gICAgICAgIGIucmVtb3ZlKCk7XG4gICAgICAgIGlmIChjID09PSAnbm9uZScgfHwgYyA9PT0gJycpIHtcbiAgICAgICAgICAgIGJJID0gZS5ib2R5LmFwcGVuZENoaWxkKFxuICAgICAgICAgICAgICAgIGJJIHx8XG4gICAgICAgICAgICAgICAgICAgIHAuZXh0ZW5kKGUuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lQm9yZGVyOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFiSiB8fCAhYkkuY3JlYXRlRWxlbWVudClcbiAgICAgICAgICAgICAgICAoYkogPSAoYkkuY29udGVudFdpbmRvdyB8fCBiSS5jb250ZW50RG9jdW1lbnQpLmRvY3VtZW50KSxcbiAgICAgICAgICAgICAgICAgICAgYkoud3JpdGUoJzwhZG9jdHlwZSBodG1sPjxodG1sPjxib2R5PicpLFxuICAgICAgICAgICAgICAgICAgICBiSi5jbG9zZSgpO1xuICAgICAgICAgICAgKGIgPSBiSi5ib2R5LmFwcGVuZENoaWxkKGJKLmNyZWF0ZUVsZW1lbnQoYSkpKSxcbiAgICAgICAgICAgICAgICAoYyA9IGJIKGIsICdkaXNwbGF5JykpLFxuICAgICAgICAgICAgICAgIGUuYm9keS5yZW1vdmVDaGlsZChiSSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChiU1thXSA9IGMpLCBjO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjaShhLCBiLCBjLCBkKSB7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAocC5pc0FycmF5KGIpKVxuICAgICAgICAgICAgcC5lYWNoKGIsIGZ1bmN0aW9uKGIsIGUpIHtcbiAgICAgICAgICAgICAgICBjIHx8IGNlLnRlc3QoYSlcbiAgICAgICAgICAgICAgICAgICAgPyBkKGEsIGUpXG4gICAgICAgICAgICAgICAgICAgIDogY2koXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEgKyAnWycgKyAodHlwZW9mIGUgPT0gJ29iamVjdCcgPyBiIDogJycpICsgJ10nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBlbHNlIGlmICghYyAmJiBwLnR5cGUoYikgPT09ICdvYmplY3QnKVxuICAgICAgICAgICAgZm9yIChlIGluIGIpIGNpKGEgKyAnWycgKyBlICsgJ10nLCBiW2VdLCBjLCBkKTtcbiAgICAgICAgZWxzZSBkKGEsIGIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjeihhKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihiLCBjKSB7XG4gICAgICAgICAgICB0eXBlb2YgYiAhPSAnc3RyaW5nJyAmJiAoKGMgPSBiKSwgKGIgPSAnKicpKTtcbiAgICAgICAgICAgIHZhciBkLFxuICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgZixcbiAgICAgICAgICAgICAgICBnID0gYi50b0xvd2VyQ2FzZSgpLnNwbGl0KHMpLFxuICAgICAgICAgICAgICAgIGggPSAwLFxuICAgICAgICAgICAgICAgIGkgPSBnLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChwLmlzRnVuY3Rpb24oYykpXG4gICAgICAgICAgICAgICAgZm9yICg7IGggPCBpOyBoKyspXG4gICAgICAgICAgICAgICAgICAgIChkID0gZ1toXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZiA9IC9eXFwrLy50ZXN0KGQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGYgJiYgKGQgPSBkLnN1YnN0cigxKSB8fCAnKicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGUgPSBhW2RdID0gYVtkXSB8fCBbXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBlW2YgPyAndW5zaGlmdCcgOiAncHVzaCddKGMpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBjQShhLCBjLCBkLCBlLCBmLCBnKSB7XG4gICAgICAgIChmID0gZiB8fCBjLmRhdGFUeXBlc1swXSksIChnID0gZyB8fCB7fSksIChnW2ZdID0gITApO1xuICAgICAgICB2YXIgaCxcbiAgICAgICAgICAgIGkgPSBhW2ZdLFxuICAgICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgICBrID0gaSA/IGkubGVuZ3RoIDogMCxcbiAgICAgICAgICAgIGwgPSBhID09PSBjdjtcbiAgICAgICAgZm9yICg7IGogPCBrICYmIChsIHx8ICFoKTsgaisrKVxuICAgICAgICAgICAgKGggPSBpW2pdKGMsIGQsIGUpKSxcbiAgICAgICAgICAgICAgICB0eXBlb2YgaCA9PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICAoIWwgfHwgZ1toXVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoaCA9IGIpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IChjLmRhdGFUeXBlcy51bnNoaWZ0KGgpLCAoaCA9IGNBKGEsIGMsIGQsIGUsIGgsIGcpKSkpO1xuICAgICAgICByZXR1cm4gKGwgfHwgIWgpICYmICFnWycqJ10gJiYgKGggPSBjQShhLCBjLCBkLCBlLCAnKicsIGcpKSwgaDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY0IoYSwgYykge1xuICAgICAgICB2YXIgZCxcbiAgICAgICAgICAgIGUsXG4gICAgICAgICAgICBmID0gcC5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG4gICAgICAgIGZvciAoZCBpbiBjKSBjW2RdICE9PSBiICYmICgoZltkXSA/IGEgOiBlIHx8IChlID0ge30pKVtkXSA9IGNbZF0pO1xuICAgICAgICBlICYmIHAuZXh0ZW5kKCEwLCBhLCBlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY0MoYSwgYywgZCkge1xuICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgIGYsXG4gICAgICAgICAgICBnLFxuICAgICAgICAgICAgaCxcbiAgICAgICAgICAgIGkgPSBhLmNvbnRlbnRzLFxuICAgICAgICAgICAgaiA9IGEuZGF0YVR5cGVzLFxuICAgICAgICAgICAgayA9IGEucmVzcG9uc2VGaWVsZHM7XG4gICAgICAgIGZvciAoZiBpbiBrKSBmIGluIGQgJiYgKGNba1tmXV0gPSBkW2ZdKTtcbiAgICAgICAgd2hpbGUgKGpbMF0gPT09ICcqJylcbiAgICAgICAgICAgIGouc2hpZnQoKSxcbiAgICAgICAgICAgICAgICBlID09PSBiICYmXG4gICAgICAgICAgICAgICAgICAgIChlID0gYS5taW1lVHlwZSB8fCBjLmdldFJlc3BvbnNlSGVhZGVyKCdjb250ZW50LXR5cGUnKSk7XG4gICAgICAgIGlmIChlKVxuICAgICAgICAgICAgZm9yIChmIGluIGkpXG4gICAgICAgICAgICAgICAgaWYgKGlbZl0gJiYgaVtmXS50ZXN0KGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGoudW5zaGlmdChmKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICBpZiAoalswXSBpbiBkKSBnID0galswXTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGYgaW4gZCkge1xuICAgICAgICAgICAgICAgIGlmICghalswXSB8fCBhLmNvbnZlcnRlcnNbZiArICcgJyArIGpbMF1dKSB7XG4gICAgICAgICAgICAgICAgICAgIGcgPSBmO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaCB8fCAoaCA9IGYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZyA9IGcgfHwgaDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZykgcmV0dXJuIGcgIT09IGpbMF0gJiYgai51bnNoaWZ0KGcpLCBkW2ddO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjRChhLCBiKSB7XG4gICAgICAgIHZhciBjLFxuICAgICAgICAgICAgZCxcbiAgICAgICAgICAgIGUsXG4gICAgICAgICAgICBmLFxuICAgICAgICAgICAgZyA9IGEuZGF0YVR5cGVzLnNsaWNlKCksXG4gICAgICAgICAgICBoID0gZ1swXSxcbiAgICAgICAgICAgIGkgPSB7fSxcbiAgICAgICAgICAgIGogPSAwO1xuICAgICAgICBhLmRhdGFGaWx0ZXIgJiYgKGIgPSBhLmRhdGFGaWx0ZXIoYiwgYS5kYXRhVHlwZSkpO1xuICAgICAgICBpZiAoZ1sxXSkgZm9yIChjIGluIGEuY29udmVydGVycykgaVtjLnRvTG93ZXJDYXNlKCldID0gYS5jb252ZXJ0ZXJzW2NdO1xuICAgICAgICBmb3IgKDsgKGUgPSBnWysral0pOyApXG4gICAgICAgICAgICBpZiAoZSAhPT0gJyonKSB7XG4gICAgICAgICAgICAgICAgaWYgKGggIT09ICcqJyAmJiBoICE9PSBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBpW2ggKyAnICcgKyBlXSB8fCBpWycqICcgKyBlXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjKVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChkIGluIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gZC5zcGxpdCgnICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmWzFdID09PSBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBpW2ggKyAnICcgKyBmWzBdXSB8fCBpWycqICcgKyBmWzBdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPT09ICEwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoYyA9IGlbZF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpW2RdICE9PSAhMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChlID0gZlswXSksIGcuc3BsaWNlKGotLSwgMCwgZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjICE9PSAhMClcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjICYmIGFbJ3Rocm93cyddKSBiID0gYyhiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gYyhiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogJ3BhcnNlcmVycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnTm8gY29udmVyc2lvbiBmcm9tICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGggPSBlO1xuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0ZTogJ3N1Y2Nlc3MnLCBkYXRhOiBiIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNMKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBhLlhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIH0gY2F0Y2ggKGIpIHt9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNNKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBhLkFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxIVFRQJyk7XG4gICAgICAgIH0gY2F0Y2ggKGIpIHt9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNVKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjTiA9IGI7XG4gICAgICAgICAgICB9LCAwKSxcbiAgICAgICAgICAgIChjTiA9IHAubm93KCkpXG4gICAgICAgICk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNWKGEsIGIpIHtcbiAgICAgICAgcC5lYWNoKGIsIGZ1bmN0aW9uKGIsIGMpIHtcbiAgICAgICAgICAgIHZhciBkID0gKGNUW2JdIHx8IFtdKS5jb25jYXQoY1RbJyonXSksXG4gICAgICAgICAgICAgICAgZSA9IDAsXG4gICAgICAgICAgICAgICAgZiA9IGQubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICg7IGUgPCBmOyBlKyspIGlmIChkW2VdLmNhbGwoYSwgYiwgYykpIHJldHVybjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNXKGEsIGIsIGMpIHtcbiAgICAgICAgdmFyIGQsXG4gICAgICAgICAgICBlID0gMCxcbiAgICAgICAgICAgIGYgPSAwLFxuICAgICAgICAgICAgZyA9IGNTLmxlbmd0aCxcbiAgICAgICAgICAgIGggPSBwLkRlZmVycmVkKCkuYWx3YXlzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBpLmVsZW07XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgYiA9IGNOIHx8IGNVKCksXG4gICAgICAgICAgICAgICAgICAgIGMgPSBNYXRoLm1heCgwLCBqLnN0YXJ0VGltZSArIGouZHVyYXRpb24gLSBiKSxcbiAgICAgICAgICAgICAgICAgICAgZCA9IDEgLSAoYyAvIGouZHVyYXRpb24gfHwgMCksXG4gICAgICAgICAgICAgICAgICAgIGUgPSAwLFxuICAgICAgICAgICAgICAgICAgICBmID0gai50d2VlbnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAoOyBlIDwgZjsgZSsrKSBqLnR3ZWVuc1tlXS5ydW4oZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgaC5ub3RpZnlXaXRoKGEsIFtqLCBkLCBjXSksXG4gICAgICAgICAgICAgICAgICAgIGQgPCAxICYmIGYgPyBjIDogKGgucmVzb2x2ZVdpdGgoYSwgW2pdKSwgITEpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBqID0gaC5wcm9taXNlKHtcbiAgICAgICAgICAgICAgICBlbGVtOiBhLFxuICAgICAgICAgICAgICAgIHByb3BzOiBwLmV4dGVuZCh7fSwgYiksXG4gICAgICAgICAgICAgICAgb3B0czogcC5leHRlbmQoITAsIHsgc3BlY2lhbEVhc2luZzoge30gfSwgYyksXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxQcm9wZXJ0aWVzOiBiLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsT3B0aW9uczogYyxcbiAgICAgICAgICAgICAgICBzdGFydFRpbWU6IGNOIHx8IGNVKCksXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGMuZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgdHdlZW5zOiBbXSxcbiAgICAgICAgICAgICAgICBjcmVhdGVUd2VlbjogZnVuY3Rpb24oYiwgYywgZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHAuVHdlZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgai5vcHRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgYixcbiAgICAgICAgICAgICAgICAgICAgICAgIGMsXG4gICAgICAgICAgICAgICAgICAgICAgICBqLm9wdHMuc3BlY2lhbEVhc2luZ1tiXSB8fCBqLm9wdHMuZWFzaW5nXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBqLnR3ZWVucy5wdXNoKGUpLCBlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gYiA/IGoudHdlZW5zLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoOyBjIDwgZDsgYysrKSBqLnR3ZWVuc1tjXS5ydW4oMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBiID8gaC5yZXNvbHZlV2l0aChhLCBbaiwgYl0pIDogaC5yZWplY3RXaXRoKGEsIFtqLCBiXSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgayA9IGoucHJvcHM7XG4gICAgICAgIGNYKGssIGoub3B0cy5zcGVjaWFsRWFzaW5nKTtcbiAgICAgICAgZm9yICg7IGUgPCBnOyBlKyspIHtcbiAgICAgICAgICAgIGQgPSBjU1tlXS5jYWxsKGosIGEsIGssIGoub3B0cyk7XG4gICAgICAgICAgICBpZiAoZCkgcmV0dXJuIGQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGNWKGosIGspLFxuICAgICAgICAgICAgcC5pc0Z1bmN0aW9uKGoub3B0cy5zdGFydCkgJiYgai5vcHRzLnN0YXJ0LmNhbGwoYSwgaiksXG4gICAgICAgICAgICBwLmZ4LnRpbWVyKHAuZXh0ZW5kKGksIHsgYW5pbTogaiwgcXVldWU6IGoub3B0cy5xdWV1ZSwgZWxlbTogYSB9KSksXG4gICAgICAgICAgICBqXG4gICAgICAgICAgICAgICAgLnByb2dyZXNzKGoub3B0cy5wcm9ncmVzcylcbiAgICAgICAgICAgICAgICAuZG9uZShqLm9wdHMuZG9uZSwgai5vcHRzLmNvbXBsZXRlKVxuICAgICAgICAgICAgICAgIC5mYWlsKGoub3B0cy5mYWlsKVxuICAgICAgICAgICAgICAgIC5hbHdheXMoai5vcHRzLmFsd2F5cylcbiAgICAgICAgKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY1goYSwgYikge1xuICAgICAgICB2YXIgYywgZCwgZSwgZiwgZztcbiAgICAgICAgZm9yIChjIGluIGEpIHtcbiAgICAgICAgICAgIChkID0gcC5jYW1lbENhc2UoYykpLFxuICAgICAgICAgICAgICAgIChlID0gYltkXSksXG4gICAgICAgICAgICAgICAgKGYgPSBhW2NdKSxcbiAgICAgICAgICAgICAgICBwLmlzQXJyYXkoZikgJiYgKChlID0gZlsxXSksIChmID0gYVtjXSA9IGZbMF0pKSxcbiAgICAgICAgICAgICAgICBjICE9PSBkICYmICgoYVtkXSA9IGYpLCBkZWxldGUgYVtjXSksXG4gICAgICAgICAgICAgICAgKGcgPSBwLmNzc0hvb2tzW2RdKTtcbiAgICAgICAgICAgIGlmIChnICYmICdleHBhbmQnIGluIGcpIHtcbiAgICAgICAgICAgICAgICAoZiA9IGcuZXhwYW5kKGYpKSwgZGVsZXRlIGFbZF07XG4gICAgICAgICAgICAgICAgZm9yIChjIGluIGYpIGMgaW4gYSB8fCAoKGFbY10gPSBmW2NdKSwgKGJbY10gPSBlKSk7XG4gICAgICAgICAgICB9IGVsc2UgYltkXSA9IGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY1koYSwgYiwgYykge1xuICAgICAgICB2YXIgZCxcbiAgICAgICAgICAgIGUsXG4gICAgICAgICAgICBmLFxuICAgICAgICAgICAgZyxcbiAgICAgICAgICAgIGgsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIGssXG4gICAgICAgICAgICBsID0gdGhpcyxcbiAgICAgICAgICAgIG0gPSBhLnN0eWxlLFxuICAgICAgICAgICAgbiA9IHt9LFxuICAgICAgICAgICAgbyA9IFtdLFxuICAgICAgICAgICAgcSA9IGEubm9kZVR5cGUgJiYgYlooYSk7XG4gICAgICAgIGMucXVldWUgfHxcbiAgICAgICAgICAgICgoaiA9IHAuX3F1ZXVlSG9va3MoYSwgJ2Z4JykpLFxuICAgICAgICAgICAgai51bnF1ZXVlZCA9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgKChqLnVucXVldWVkID0gMCksXG4gICAgICAgICAgICAgICAgKGsgPSBqLmVtcHR5LmZpcmUpLFxuICAgICAgICAgICAgICAgIChqLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgai51bnF1ZXVlZCB8fCBrKCk7XG4gICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgai51bnF1ZXVlZCsrLFxuICAgICAgICAgICAgbC5hbHdheXMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgbC5hbHdheXMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGoudW5xdWV1ZWQtLSwgcC5xdWV1ZShhLCAnZngnKS5sZW5ndGggfHwgai5lbXB0eS5maXJlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICBhLm5vZGVUeXBlID09PSAxICYmXG4gICAgICAgICAgICAgICAgKCdoZWlnaHQnIGluIGIgfHwgJ3dpZHRoJyBpbiBiKSAmJlxuICAgICAgICAgICAgICAgICgoYy5vdmVyZmxvdyA9IFttLm92ZXJmbG93LCBtLm92ZXJmbG93WCwgbS5vdmVyZmxvd1ldKSxcbiAgICAgICAgICAgICAgICBwLmNzcyhhLCAnZGlzcGxheScpID09PSAnaW5saW5lJyAmJlxuICAgICAgICAgICAgICAgICAgICBwLmNzcyhhLCAnZmxvYXQnKSA9PT0gJ25vbmUnICYmXG4gICAgICAgICAgICAgICAgICAgICghcC5zdXBwb3J0LmlubGluZUJsb2NrTmVlZHNMYXlvdXQgfHxcbiAgICAgICAgICAgICAgICAgICAgY2MoYS5ub2RlTmFtZSkgPT09ICdpbmxpbmUnXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChtLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKG0uem9vbSA9IDEpKSksXG4gICAgICAgICAgICBjLm92ZXJmbG93ICYmXG4gICAgICAgICAgICAgICAgKChtLm92ZXJmbG93ID0gJ2hpZGRlbicpLFxuICAgICAgICAgICAgICAgIHAuc3VwcG9ydC5zaHJpbmtXcmFwQmxvY2tzIHx8XG4gICAgICAgICAgICAgICAgICAgIGwuZG9uZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIChtLm92ZXJmbG93ID0gYy5vdmVyZmxvd1swXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0ub3ZlcmZsb3dYID0gYy5vdmVyZmxvd1sxXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0ub3ZlcmZsb3dZID0gYy5vdmVyZmxvd1syXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgZm9yIChkIGluIGIpIHtcbiAgICAgICAgICAgIGYgPSBiW2RdO1xuICAgICAgICAgICAgaWYgKGNQLmV4ZWMoZikpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgYltkXTtcbiAgICAgICAgICAgICAgICBpZiAoZiA9PT0gKHEgPyAnaGlkZScgOiAnc2hvdycpKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBvLnB1c2goZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZyA9IG8ubGVuZ3RoO1xuICAgICAgICBpZiAoZykge1xuICAgICAgICAgICAgKGggPSBwLl9kYXRhKGEsICdmeHNob3cnKSB8fCBwLl9kYXRhKGEsICdmeHNob3cnLCB7fSkpLFxuICAgICAgICAgICAgICAgIHFcbiAgICAgICAgICAgICAgICAgICAgPyBwKGEpLnNob3coKVxuICAgICAgICAgICAgICAgICAgICA6IGwuZG9uZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcChhKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbC5kb25lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYjtcbiAgICAgICAgICAgICAgICAgICAgcC5yZW1vdmVEYXRhKGEsICdmeHNob3cnLCAhMCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoYiBpbiBuKSBwLnN0eWxlKGEsIGIsIG5bYl0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yIChkID0gMDsgZCA8IGc7IGQrKylcbiAgICAgICAgICAgICAgICAoZSA9IG9bZF0pLFxuICAgICAgICAgICAgICAgICAgICAoaSA9IGwuY3JlYXRlVHdlZW4oZSwgcSA/IGhbZV0gOiAwKSksXG4gICAgICAgICAgICAgICAgICAgIChuW2VdID0gaFtlXSB8fCBwLnN0eWxlKGEsIGUpKSxcbiAgICAgICAgICAgICAgICAgICAgZSBpbiBoIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoKGhbZV0gPSBpLnN0YXJ0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGkuZW5kID0gaS5zdGFydCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkuc3RhcnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID09PSAnd2lkdGgnIHx8IGUgPT09ICdoZWlnaHQnID8gMSA6IDApKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY1ooYSwgYiwgYywgZCwgZSkge1xuICAgICAgICByZXR1cm4gbmV3IGNaLnByb3RvdHlwZS5pbml0KGEsIGIsIGMsIGQsIGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjJChhLCBiKSB7XG4gICAgICAgIHZhciBjLFxuICAgICAgICAgICAgZCA9IHsgaGVpZ2h0OiBhIH0sXG4gICAgICAgICAgICBlID0gMDtcbiAgICAgICAgYiA9IGIgPyAxIDogMDtcbiAgICAgICAgZm9yICg7IGUgPCA0OyBlICs9IDIgLSBiKVxuICAgICAgICAgICAgKGMgPSBiVltlXSksIChkWydtYXJnaW4nICsgY10gPSBkWydwYWRkaW5nJyArIGNdID0gYSk7XG4gICAgICAgIHJldHVybiBiICYmIChkLm9wYWNpdHkgPSBkLndpZHRoID0gYSksIGQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRhKGEpIHtcbiAgICAgICAgcmV0dXJuIHAuaXNXaW5kb3coYSlcbiAgICAgICAgICAgID8gYVxuICAgICAgICAgICAgOiBhLm5vZGVUeXBlID09PSA5XG4gICAgICAgICAgICAgICAgPyBhLmRlZmF1bHRWaWV3IHx8IGEucGFyZW50V2luZG93XG4gICAgICAgICAgICAgICAgOiAhMTtcbiAgICB9XG4gICAgdmFyIGMsXG4gICAgICAgIGQsXG4gICAgICAgIGUgPSBhLmRvY3VtZW50LFxuICAgICAgICBmID0gYS5sb2NhdGlvbixcbiAgICAgICAgZyA9IGEubmF2aWdhdG9yLFxuICAgICAgICBoID0gYS5qUXVlcnksXG4gICAgICAgIGkgPSBhLiQsXG4gICAgICAgIGogPSBBcnJheS5wcm90b3R5cGUucHVzaCxcbiAgICAgICAgayA9IEFycmF5LnByb3RvdHlwZS5zbGljZSxcbiAgICAgICAgbCA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLFxuICAgICAgICBtID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcbiAgICAgICAgbiA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG4gICAgICAgIG8gPSBTdHJpbmcucHJvdG90eXBlLnRyaW0sXG4gICAgICAgIHAgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHAuZm4uaW5pdChhLCBiLCBjKTtcbiAgICAgICAgfSxcbiAgICAgICAgcSA9IC9bXFwtK10/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bXFwtK10/XFxkK3wpLy5zb3VyY2UsXG4gICAgICAgIHIgPSAvXFxTLyxcbiAgICAgICAgcyA9IC9cXHMrLyxcbiAgICAgICAgdCA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcbiAgICAgICAgdSA9IC9eKD86W14jPF0qKDxbXFx3XFxXXSs+KVtePl0qJHwjKFtcXHdcXC1dKikkKS8sXG4gICAgICAgIHYgPSAvXjwoXFx3KylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8sXG4gICAgICAgIHcgPSAvXltcXF0sOnt9XFxzXSokLyxcbiAgICAgICAgeCA9IC8oPzpefDp8LCkoPzpcXHMqXFxbKSsvZyxcbiAgICAgICAgeSA9IC9cXFxcKD86W1wiXFxcXFxcL2JmbnJ0XXx1W1xcZGEtZkEtRl17NH0pL2csXG4gICAgICAgIHogPSAvXCJbXlwiXFxcXFxcclxcbl0qXCJ8dHJ1ZXxmYWxzZXxudWxsfC0/KD86XFxkXFxkKlxcLnwpXFxkKyg/OltlRV1bXFwtK10/XFxkK3wpL2csXG4gICAgICAgIEEgPSAvXi1tcy0vLFxuICAgICAgICBCID0gLy0oW1xcZGEtel0pL2dpLFxuICAgICAgICBDID0gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIChiICsgJycpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIEQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGUuYWRkRXZlbnRMaXN0ZW5lclxuICAgICAgICAgICAgICAgID8gKGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIEQsICExKSwgcC5yZWFkeSgpKVxuICAgICAgICAgICAgICAgIDogZS5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnICYmXG4gICAgICAgICAgICAgICAgICAoZS5kZXRhY2hFdmVudCgnb25yZWFkeXN0YXRlY2hhbmdlJywgRCksIHAucmVhZHkoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIEUgPSB7fTtcbiAgICAocC5mbiA9IHAucHJvdG90eXBlID0ge1xuICAgICAgICBjb25zdHJ1Y3RvcjogcCxcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oYSwgYywgZCkge1xuICAgICAgICAgICAgdmFyIGYsIGcsIGgsIGk7XG4gICAgICAgICAgICBpZiAoIWEpIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgaWYgKGEubm9kZVR5cGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmNvbnRleHQgPSB0aGlzWzBdID0gYSksICh0aGlzLmxlbmd0aCA9IDEpLCB0aGlzO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgYS5jaGFyQXQoMCkgPT09ICc8JyAmJlxuICAgICAgICAgICAgICAgIGEuY2hhckF0KGEubGVuZ3RoIC0gMSkgPT09ICc+JyAmJlxuICAgICAgICAgICAgICAgIGEubGVuZ3RoID49IDNcbiAgICAgICAgICAgICAgICAgICAgPyAoZiA9IFtudWxsLCBhLCBudWxsXSlcbiAgICAgICAgICAgICAgICAgICAgOiAoZiA9IHUuZXhlYyhhKSk7XG4gICAgICAgICAgICAgICAgaWYgKGYgJiYgKGZbMV0gfHwgIWMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYyA9IGMgaW5zdGFuY2VvZiBwID8gY1swXSA6IGMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpID0gYyAmJiBjLm5vZGVUeXBlID8gYy5vd25lckRvY3VtZW50IHx8IGMgOiBlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYSA9IHAucGFyc2VIVE1MKGZbMV0sIGksICEwKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdi50ZXN0KGZbMV0pICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuaXNQbGFpbk9iamVjdChjKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHIuY2FsbChhLCBjLCAhMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5tZXJnZSh0aGlzLCBhKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgZyA9IGUuZ2V0RWxlbWVudEJ5SWQoZlsyXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnICYmIGcucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGcuaWQgIT09IGZbMl0pIHJldHVybiBkLmZpbmQoYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5sZW5ndGggPSAxKSwgKHRoaXNbMF0gPSBnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuY29udGV4dCA9IGUpLCAodGhpcy5zZWxlY3RvciA9IGEpLCB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gIWMgfHwgYy5qcXVlcnlcbiAgICAgICAgICAgICAgICAgICAgPyAoYyB8fCBkKS5maW5kKGEpXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5jb25zdHJ1Y3RvcihjKS5maW5kKGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHAuaXNGdW5jdGlvbihhKVxuICAgICAgICAgICAgICAgID8gZC5yZWFkeShhKVxuICAgICAgICAgICAgICAgIDogKGEuc2VsZWN0b3IgIT09IGIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAoKHRoaXMuc2VsZWN0b3IgPSBhLnNlbGVjdG9yKSxcbiAgICAgICAgICAgICAgICAgICAgICAodGhpcy5jb250ZXh0ID0gYS5jb250ZXh0KSksXG4gICAgICAgICAgICAgICAgICBwLm1ha2VBcnJheShhLCB0aGlzKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNlbGVjdG9yOiAnJyxcbiAgICAgICAganF1ZXJ5OiAnMS44LjInLFxuICAgICAgICBsZW5ndGg6IDAsXG4gICAgICAgIHNpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoO1xuICAgICAgICB9LFxuICAgICAgICB0b0FycmF5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBrLmNhbGwodGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgcmV0dXJuIGEgPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gdGhpcy50b0FycmF5KClcbiAgICAgICAgICAgICAgICA6IGEgPCAwXG4gICAgICAgICAgICAgICAgICAgID8gdGhpc1t0aGlzLmxlbmd0aCArIGFdXG4gICAgICAgICAgICAgICAgICAgIDogdGhpc1thXTtcbiAgICAgICAgfSxcbiAgICAgICAgcHVzaFN0YWNrOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICB2YXIgZCA9IHAubWVyZ2UodGhpcy5jb25zdHJ1Y3RvcigpLCBhKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgKGQucHJldk9iamVjdCA9IHRoaXMpLFxuICAgICAgICAgICAgICAgIChkLmNvbnRleHQgPSB0aGlzLmNvbnRleHQpLFxuICAgICAgICAgICAgICAgIGIgPT09ICdmaW5kJ1xuICAgICAgICAgICAgICAgICAgICA/IChkLnNlbGVjdG9yID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RvciArICh0aGlzLnNlbGVjdG9yID8gJyAnIDogJycpICsgYylcbiAgICAgICAgICAgICAgICAgICAgOiBiICYmXG4gICAgICAgICAgICAgICAgICAgICAgKGQuc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yICsgJy4nICsgYiArICcoJyArIGMgKyAnKScpLFxuICAgICAgICAgICAgICAgIGRcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIGVhY2g6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBwLmVhY2godGhpcywgYSwgYik7XG4gICAgICAgIH0sXG4gICAgICAgIHJlYWR5OiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICByZXR1cm4gcC5yZWFkeS5wcm9taXNlKCkuZG9uZShhKSwgdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZXE6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIHJldHVybiAoYSA9ICthKSwgYSA9PT0gLTEgPyB0aGlzLnNsaWNlKGEpIDogdGhpcy5zbGljZShhLCBhICsgMSk7XG4gICAgICAgIH0sXG4gICAgICAgIGZpcnN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVxKDApO1xuICAgICAgICB9LFxuICAgICAgICBsYXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVxKC0xKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2xpY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuICAgICAgICAgICAgICAgIGsuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAnc2xpY2UnLFxuICAgICAgICAgICAgICAgIGsuY2FsbChhcmd1bWVudHMpLmpvaW4oJywnKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgbWFwOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soXG4gICAgICAgICAgICAgICAgcC5tYXAodGhpcywgZnVuY3Rpb24oYiwgYykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5jYWxsKGIsIGMsIGIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKG51bGwpO1xuICAgICAgICB9LFxuICAgICAgICBwdXNoOiBqLFxuICAgICAgICBzb3J0OiBbXS5zb3J0LFxuICAgICAgICBzcGxpY2U6IFtdLnNwbGljZSxcbiAgICB9KSxcbiAgICAgICAgKHAuZm4uaW5pdC5wcm90b3R5cGUgPSBwLmZuKSxcbiAgICAgICAgKHAuZXh0ZW5kID0gcC5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhLFxuICAgICAgICAgICAgICAgIGMsXG4gICAgICAgICAgICAgICAgZCxcbiAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgIGYsXG4gICAgICAgICAgICAgICAgZyxcbiAgICAgICAgICAgICAgICBoID0gYXJndW1lbnRzWzBdIHx8IHt9LFxuICAgICAgICAgICAgICAgIGkgPSAxLFxuICAgICAgICAgICAgICAgIGogPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGsgPSAhMTtcbiAgICAgICAgICAgIHR5cGVvZiBoID09ICdib29sZWFuJyAmJlxuICAgICAgICAgICAgICAgICgoayA9IGgpLCAoaCA9IGFyZ3VtZW50c1sxXSB8fCB7fSksIChpID0gMikpLFxuICAgICAgICAgICAgICAgIHR5cGVvZiBoICE9ICdvYmplY3QnICYmICFwLmlzRnVuY3Rpb24oaCkgJiYgKGggPSB7fSksXG4gICAgICAgICAgICAgICAgaiA9PT0gaSAmJiAoKGggPSB0aGlzKSwgLS1pKTtcbiAgICAgICAgICAgIGZvciAoOyBpIDwgajsgaSsrKVxuICAgICAgICAgICAgICAgIGlmICgoYSA9IGFyZ3VtZW50c1tpXSkgIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjIGluIGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIChkID0gaFtjXSksIChlID0gYVtjXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaCA9PT0gZSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBrICYmIGUgJiYgKHAuaXNQbGFpbk9iamVjdChlKSB8fCAoZiA9IHAuaXNBcnJheShlKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKChmID0gITEpLCAoZyA9IGQgJiYgcC5pc0FycmF5KGQpID8gZCA6IFtdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IChnID0gZCAmJiBwLmlzUGxhaW5PYmplY3QoZCkgPyBkIDoge30pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhbY10gPSBwLmV4dGVuZChrLCBnLCBlKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBlICE9PSBiICYmIChoW2NdID0gZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBoO1xuICAgICAgICB9KSxcbiAgICAgICAgcC5leHRlbmQoe1xuICAgICAgICAgICAgbm9Db25mbGljdDogZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGEuJCA9PT0gcCAmJiAoYS4kID0gaSksXG4gICAgICAgICAgICAgICAgICAgIGIgJiYgYS5qUXVlcnkgPT09IHAgJiYgKGEualF1ZXJ5ID0gaCksXG4gICAgICAgICAgICAgICAgICAgIHBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzUmVhZHk6ICExLFxuICAgICAgICAgICAgcmVhZHlXYWl0OiAxLFxuICAgICAgICAgICAgaG9sZFJlYWR5OiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgYSA/IHAucmVhZHlXYWl0KysgOiBwLnJlYWR5KCEwKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWFkeTogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgIGlmIChhID09PSAhMCA/IC0tcC5yZWFkeVdhaXQgOiBwLmlzUmVhZHkpIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoIWUuYm9keSkgcmV0dXJuIHNldFRpbWVvdXQocC5yZWFkeSwgMSk7XG4gICAgICAgICAgICAgICAgcC5pc1JlYWR5ID0gITA7XG4gICAgICAgICAgICAgICAgaWYgKGEgIT09ICEwICYmIC0tcC5yZWFkeVdhaXQgPiAwKSByZXR1cm47XG4gICAgICAgICAgICAgICAgZC5yZXNvbHZlV2l0aChlLCBbcF0pLFxuICAgICAgICAgICAgICAgICAgICBwLmZuLnRyaWdnZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHAoZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcigncmVhZHknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vZmYoJ3JlYWR5Jyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNGdW5jdGlvbjogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwLnR5cGUoYSkgPT09ICdmdW5jdGlvbic7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNBcnJheTpcbiAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5IHx8XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcC50eXBlKGEpID09PSAnYXJyYXknO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1dpbmRvdzogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhICE9IG51bGwgJiYgYSA9PSBhLndpbmRvdztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc051bWVyaWM6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQoYSkpICYmIGlzRmluaXRlKGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGU6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYSA9PSBudWxsID8gU3RyaW5nKGEpIDogRVttLmNhbGwoYSldIHx8ICdvYmplY3QnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWEgfHwgcC50eXBlKGEpICE9PSAnb2JqZWN0JyB8fCBhLm5vZGVUeXBlIHx8IHAuaXNXaW5kb3coYSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmNvbnN0cnVjdG9yICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhbi5jYWxsKGEsICdjb25zdHJ1Y3RvcicpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhbi5jYWxsKGEuY29uc3RydWN0b3IucHJvdG90eXBlLCAnaXNQcm90b3R5cGVPZicpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChjKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGQ7XG4gICAgICAgICAgICAgICAgZm9yIChkIGluIGEpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkID09PSBiIHx8IG4uY2FsbChhLCBkKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGI7XG4gICAgICAgICAgICAgICAgZm9yIChiIGluIGEpIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFyc2VIVE1MOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFhIHx8IHR5cGVvZiBhICE9ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICA6ICh0eXBlb2YgYiA9PSAnYm9vbGVhbicgJiYgKChjID0gYiksIChiID0gMCkpLFxuICAgICAgICAgICAgICAgICAgICAgIChiID0gYiB8fCBlKSxcbiAgICAgICAgICAgICAgICAgICAgICAoZCA9IHYuZXhlYyhhKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBbYi5jcmVhdGVFbGVtZW50KGRbMV0pXVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgoZCA9IHAuYnVpbGRGcmFnbWVudChbYV0sIGIsIGMgPyBudWxsIDogW10pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLm1lcmdlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGQuY2FjaGVhYmxlID8gcC5jbG9uZShkLmZyYWdtZW50KSA6IGQuZnJhZ21lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2hpbGROb2Rlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXJzZUpTT046IGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWIgfHwgdHlwZW9mIGIgIT0gJ3N0cmluZycpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIGIgPSBwLnRyaW0oYik7XG4gICAgICAgICAgICAgICAgaWYgKGEuSlNPTiAmJiBhLkpTT04ucGFyc2UpIHJldHVybiBhLkpTT04ucGFyc2UoYik7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICB3LnRlc3QoXG4gICAgICAgICAgICAgICAgICAgICAgICBiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoeSwgJ0AnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKHosICddJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSh4LCAnJylcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbigncmV0dXJuICcgKyBiKSgpO1xuICAgICAgICAgICAgICAgIHAuZXJyb3IoJ0ludmFsaWQgSlNPTjogJyArIGIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhcnNlWE1MOiBmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQsIGU7XG4gICAgICAgICAgICAgICAgaWYgKCFjIHx8IHR5cGVvZiBjICE9ICdzdHJpbmcnKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhLkRPTVBhcnNlclxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKGUgPSBuZXcgRE9NUGFyc2VyKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoZCA9IGUucGFyc2VGcm9tU3RyaW5nKGMsICd0ZXh0L3htbCcpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKChkID0gbmV3IEFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxET00nKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChkLmFzeW5jID0gJ2ZhbHNlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQubG9hZFhNTChjKSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZikge1xuICAgICAgICAgICAgICAgICAgICBkID0gYjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgKCFkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhZC5kb2N1bWVudEVsZW1lbnQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3BhcnNlcmVycm9yJykubGVuZ3RoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgcC5lcnJvcignSW52YWxpZCBYTUw6ICcgKyBjKSxcbiAgICAgICAgICAgICAgICAgICAgZFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbm9vcDogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgICAgIGdsb2JhbEV2YWw6IGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgICAgICBiICYmXG4gICAgICAgICAgICAgICAgICAgIHIudGVzdChiKSAmJlxuICAgICAgICAgICAgICAgICAgICAoYS5leGVjU2NyaXB0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5ldmFsLmNhbGwoYSwgYik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KShiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYW1lbENhc2U6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5yZXBsYWNlKEEsICdtcy0nKS5yZXBsYWNlKEIsIEMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vZGVOYW1lOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgYS5ub2RlTmFtZSAmJiBhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IGIudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZWFjaDogZnVuY3Rpb24oYSwgYywgZCkge1xuICAgICAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICAgICAgICBmID0gMCxcbiAgICAgICAgICAgICAgICAgICAgZyA9IGEubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBoID0gZyA9PT0gYiB8fCBwLmlzRnVuY3Rpb24oYSk7XG4gICAgICAgICAgICAgICAgaWYgKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZSBpbiBhKSBpZiAoYy5hcHBseShhW2VdLCBkKSA9PT0gITEpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgZm9yICg7IGYgPCBnOyApIGlmIChjLmFwcGx5KGFbZisrXSwgZCkgPT09ICExKSBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChlIGluIGEpIGlmIChjLmNhbGwoYVtlXSwgZSwgYVtlXSkgPT09ICExKSBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IGYgPCBnOyApIGlmIChjLmNhbGwoYVtmXSwgZiwgYVtmKytdKSA9PT0gITEpIGJyZWFrO1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRyaW06XG4gICAgICAgICAgICAgICAgbyAmJiAhby5jYWxsKCfvu7/CoCcpXG4gICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSA9PSBudWxsID8gJycgOiBvLmNhbGwoYSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgPT0gbnVsbCA/ICcnIDogKGEgKyAnJykucmVwbGFjZSh0LCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1ha2VBcnJheTogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgIHZhciBjLFxuICAgICAgICAgICAgICAgICAgICBkID0gYiB8fCBbXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBhICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICgoYyA9IHAudHlwZShhKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmxlbmd0aCA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBjID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgYyA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgYyA9PT0gJ3JlZ2V4cCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHAuaXNXaW5kb3coYSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGouY2FsbChkLCBhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogcC5tZXJnZShkLCBhKSksXG4gICAgICAgICAgICAgICAgICAgIGRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluQXJyYXk6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZDtcbiAgICAgICAgICAgICAgICBpZiAoYikge1xuICAgICAgICAgICAgICAgICAgICBpZiAobCkgcmV0dXJuIGwuY2FsbChiLCBhLCBjKTtcbiAgICAgICAgICAgICAgICAgICAgKGQgPSBiLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoYyA9IGMgPyAoYyA8IDAgPyBNYXRoLm1heCgwLCBkICsgYykgOiBjKSA6IDApO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgYyA8IGQ7IGMrKykgaWYgKGMgaW4gYiAmJiBiW2NdID09PSBhKSByZXR1cm4gYztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1lcmdlOiBmdW5jdGlvbihhLCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBjLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgZSA9IGEubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBmID0gMDtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQgPT0gJ251bWJlcicpIGZvciAoOyBmIDwgZDsgZisrKSBhW2UrK10gPSBjW2ZdO1xuICAgICAgICAgICAgICAgIGVsc2Ugd2hpbGUgKGNbZl0gIT09IGIpIGFbZSsrXSA9IGNbZisrXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGEubGVuZ3RoID0gZSksIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ3JlcDogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgIHZhciBkLFxuICAgICAgICAgICAgICAgICAgICBlID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGYgPSAwLFxuICAgICAgICAgICAgICAgICAgICBnID0gYS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgYyA9ICEhYztcbiAgICAgICAgICAgICAgICBmb3IgKDsgZiA8IGc7IGYrKykgKGQgPSAhIWIoYVtmXSwgZikpLCBjICE9PSBkICYmIGUucHVzaChhW2ZdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXA6IGZ1bmN0aW9uKGEsIGMsIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgZixcbiAgICAgICAgICAgICAgICAgICAgZyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBoID0gMCxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGEubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBqID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGEgaW5zdGFuY2VvZiBwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoaSAhPT0gYiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpID09ICdudW1iZXInICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChpID4gMCAmJiBhWzBdICYmIGFbaSAtIDFdKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID09PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuaXNBcnJheShhKSkpO1xuICAgICAgICAgICAgICAgIGlmIChqKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaCA8IGk7IGgrKylcbiAgICAgICAgICAgICAgICAgICAgICAgIChlID0gYyhhW2hdLCBoLCBkKSksIGUgIT0gbnVsbCAmJiAoZ1tnLmxlbmd0aF0gPSBlKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGZvciAoZiBpbiBhKVxuICAgICAgICAgICAgICAgICAgICAgICAgKGUgPSBjKGFbZl0sIGYsIGQpKSwgZSAhPSBudWxsICYmIChnW2cubGVuZ3RoXSA9IGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBnLmNvbmNhdC5hcHBseShbXSwgZyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ3VpZDogMSxcbiAgICAgICAgICAgIHByb3h5OiBmdW5jdGlvbihhLCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQsIGUsIGY7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGMgPT0gJ3N0cmluZycgJiYgKChkID0gYVtjXSksIChjID0gYSksIChhID0gZCkpLFxuICAgICAgICAgICAgICAgICAgICBwLmlzRnVuY3Rpb24oYSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKChlID0gay5jYWxsKGFyZ3VtZW50cywgMikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoZiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEuYXBwbHkoYywgZS5jb25jYXQoay5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChmLmd1aWQgPSBhLmd1aWQgPSBhLmd1aWQgfHwgcC5ndWlkKyspLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBiXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhY2Nlc3M6IGZ1bmN0aW9uKGEsIGMsIGQsIGUsIGYsIGcsIGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICAgICAgaiA9IGQgPT0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgayA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGwgPSBhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpZiAoZCAmJiB0eXBlb2YgZCA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGsgaW4gZCkgcC5hY2Nlc3MoYSwgYywgaywgZFtrXSwgMSwgZywgZSk7XG4gICAgICAgICAgICAgICAgICAgIGYgPSAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZSAhPT0gYikge1xuICAgICAgICAgICAgICAgICAgICAoaSA9IGggPT09IGIgJiYgcC5pc0Z1bmN0aW9uKGUpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGogJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICgoaSA9IGMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaS5jYWxsKHAoYSksIGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IChjLmNhbGwoYSwgZSksIChjID0gbnVsbCkpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMpXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgayA8IGw7IGsrKylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjKGFba10sIGQsIGkgPyBlLmNhbGwoYVtrXSwgaywgYyhhW2tdLCBkKSkgOiBlLCBoKTtcbiAgICAgICAgICAgICAgICAgICAgZiA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmID8gYSA6IGogPyBjLmNhbGwoYSkgOiBsID8gYyhhWzBdLCBkKSA6IGc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbm93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgKHAucmVhZHkucHJvbWlzZSA9IGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgIGlmICghZCkge1xuICAgICAgICAgICAgICAgIGQgPSBwLkRlZmVycmVkKCk7XG4gICAgICAgICAgICAgICAgaWYgKGUucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykgc2V0VGltZW91dChwLnJlYWR5LCAxKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChlLmFkZEV2ZW50TGlzdGVuZXIpXG4gICAgICAgICAgICAgICAgICAgIGUuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIEQsICExKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHAucmVhZHksICExKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZS5hdHRhY2hFdmVudCgnb25yZWFkeXN0YXRlY2hhbmdlJywgRCksXG4gICAgICAgICAgICAgICAgICAgICAgICBhLmF0dGFjaEV2ZW50KCdvbmxvYWQnLCBwLnJlYWR5KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBhLmZyYW1lRWxlbWVudCA9PSBudWxsICYmIGUuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChmKSB7fVxuICAgICAgICAgICAgICAgICAgICBjICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBjLmRvU2Nyb2xsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gZygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXAuaXNSZWFkeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5kb1Njcm9sbCgnbGVmdCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChnLCA1MCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5yZWFkeSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZShiKTtcbiAgICAgICAgfSksXG4gICAgICAgIHAuZWFjaChcbiAgICAgICAgICAgICdCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0Jy5zcGxpdChcbiAgICAgICAgICAgICAgICAnICdcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgRVsnW29iamVjdCAnICsgYiArICddJ10gPSBiLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICksXG4gICAgICAgIChjID0gcChlKSk7XG4gICAgdmFyIEYgPSB7fTtcbiAgICAocC5DYWxsYmFja3MgPSBmdW5jdGlvbihhKSB7XG4gICAgICAgIGEgPSB0eXBlb2YgYSA9PSAnc3RyaW5nJyA/IEZbYV0gfHwgRyhhKSA6IHAuZXh0ZW5kKHt9LCBhKTtcbiAgICAgICAgdmFyIGMsXG4gICAgICAgICAgICBkLFxuICAgICAgICAgICAgZSxcbiAgICAgICAgICAgIGYsXG4gICAgICAgICAgICBnLFxuICAgICAgICAgICAgaCxcbiAgICAgICAgICAgIGkgPSBbXSxcbiAgICAgICAgICAgIGogPSAhYS5vbmNlICYmIFtdLFxuICAgICAgICAgICAgayA9IGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgICAgICAoYyA9IGEubWVtb3J5ICYmIGIpLFxuICAgICAgICAgICAgICAgICAgICAoZCA9ICEwKSxcbiAgICAgICAgICAgICAgICAgICAgKGggPSBmIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICAoZiA9IDApLFxuICAgICAgICAgICAgICAgICAgICAoZyA9IGkubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgKGUgPSAhMCk7XG4gICAgICAgICAgICAgICAgZm9yICg7IGkgJiYgaCA8IGc7IGgrKylcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlbaF0uYXBwbHkoYlswXSwgYlsxXSkgPT09ICExICYmIGEuc3RvcE9uRmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKGUgPSAhMSksXG4gICAgICAgICAgICAgICAgICAgIGkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBqLmxlbmd0aCAmJiBrKGouc2hpZnQoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoaSA9IFtdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGwuZGlzYWJsZSgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsID0ge1xuICAgICAgICAgICAgICAgIGFkZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IGkubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIGQoYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuZWFjaChiLCBmdW5jdGlvbihiLCBjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gcC50eXBlKGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID09PSAnZnVuY3Rpb24nICYmICghYS51bmlxdWUgfHwgIWwuaGFzKGMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpLnB1c2goYylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYyAmJiBjLmxlbmd0aCAmJiBlICE9PSAnc3RyaW5nJyAmJiBkKGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkoYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID8gKGcgPSBpLmxlbmd0aCkgOiBjICYmICgoZiA9IGIpLCBrKGMpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5lYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChjID0gcC5pbkFycmF5KGIsIGksIGMpKSA+IC0xKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zcGxpY2UoYywgMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSAmJiAoYyA8PSBnICYmIGctLSwgYyA8PSBoICYmIGgtLSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoYXM6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAuaW5BcnJheShhLCBpKSA+IC0xO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGkgPSBbXSksIHRoaXM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkaXNhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChpID0gaiA9IGMgPSBiKSwgdGhpcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbG9jazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoaiA9IGIpLCBjIHx8IGwuZGlzYWJsZSgpLCB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbG9ja2VkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFqO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmlyZVdpdGg6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIChiID0gYiB8fCBbXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoYiA9IFthLCBiLnNsaWNlID8gYi5zbGljZSgpIDogYl0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgaSAmJiAoIWQgfHwgaikgJiYgKGUgPyBqLnB1c2goYikgOiBrKGIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZpcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbC5maXJlV2l0aCh0aGlzLCBhcmd1bWVudHMpLCB0aGlzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmlyZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gISFkO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbDtcbiAgICB9KSxcbiAgICAgICAgcC5leHRlbmQoe1xuICAgICAgICAgICAgRGVmZXJyZWQ6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgYiA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVzb2x2ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RvbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuQ2FsbGJhY2tzKCdvbmNlIG1lbW9yeScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZXNvbHZlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZWplY3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmYWlsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLkNhbGxiYWNrcygnb25jZSBtZW1vcnknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVqZWN0ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbm90aWZ5JywgJ3Byb2dyZXNzJywgcC5DYWxsYmFja3MoJ21lbW9yeScpXSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgYyA9ICdwZW5kaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHdheXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLkRlZmVycmVkKGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuZWFjaChiLCBmdW5jdGlvbihiLCBkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBkWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gYVtiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlW2RbMV1dKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmlzRnVuY3Rpb24oZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGcuYXBwbHkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmlzRnVuY3Rpb24oYS5wcm9taXNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wcm9taXNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZG9uZShjLnJlc29sdmUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZhaWwoYy5yZWplY3QpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByb2dyZXNzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLm5vdGlmeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGNbZiArICdXaXRoJ10oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyA9PT0gZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFthXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjW2ZdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhID0gbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wcm9taXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZTogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhICE9IG51bGwgPyBwLmV4dGVuZChhLCBkKSA6IGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlID0ge307XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgKGQucGlwZSA9IGQudGhlbiksXG4gICAgICAgICAgICAgICAgICAgIHAuZWFjaChiLCBmdW5jdGlvbihhLCBmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZyA9IGZbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IGZbM107XG4gICAgICAgICAgICAgICAgICAgICAgICAoZFtmWzFdXSA9IGcuYWRkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcuYWRkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYlthIF4gMV1bMl0uZGlzYWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJbMl1bMl0ubG9ja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlW2ZbMF1dID0gZy5maXJlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZVtmWzBdICsgJ1dpdGgnXSA9IGcuZmlyZVdpdGgpO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgZC5wcm9taXNlKGUpLFxuICAgICAgICAgICAgICAgICAgICBhICYmIGEuY2FsbChlLCBlKSxcbiAgICAgICAgICAgICAgICAgICAgZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd2hlbjogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgIHZhciBiID0gMCxcbiAgICAgICAgICAgICAgICAgICAgYyA9IGsuY2FsbChhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgICAgICBkID0gYy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIGUgPSBkICE9PSAxIHx8IChhICYmIHAuaXNGdW5jdGlvbihhLnByb21pc2UpKSA/IGQgOiAwLFxuICAgICAgICAgICAgICAgICAgICBmID0gZSA9PT0gMSA/IGEgOiBwLkRlZmVycmVkKCksXG4gICAgICAgICAgICAgICAgICAgIGcgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChiW2FdID0gdGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjW2FdID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBrLmNhbGwoYXJndW1lbnRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPT09IGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZi5ub3RpZnlXaXRoKGIsIGMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IC0tZSB8fCBmLnJlc29sdmVXaXRoKGIsIGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaCxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgajtcbiAgICAgICAgICAgICAgICBpZiAoZCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgKGggPSBuZXcgQXJyYXkoZCkpLCAoaSA9IG5ldyBBcnJheShkKSksIChqID0gbmV3IEFycmF5KGQpKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IGIgPCBkOyBiKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBjW2JdICYmIHAuaXNGdW5jdGlvbihjW2JdLnByb21pc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjW2JdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByb21pc2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kb25lKGcoYiwgaiwgYykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZhaWwoZi5yZWplY3QpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByb2dyZXNzKGcoYiwgaSwgaCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAtLWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBlIHx8IGYucmVzb2x2ZVdpdGgoaiwgYyksIGYucHJvbWlzZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICAgIChwLnN1cHBvcnQgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYixcbiAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgIGQsXG4gICAgICAgICAgICAgICAgZixcbiAgICAgICAgICAgICAgICBnLFxuICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBqLFxuICAgICAgICAgICAgICAgIGssXG4gICAgICAgICAgICAgICAgbCxcbiAgICAgICAgICAgICAgICBtLFxuICAgICAgICAgICAgICAgIG4gPSBlLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzTmFtZScsICd0JyksXG4gICAgICAgICAgICAgICAgKG4uaW5uZXJIVE1MID1cbiAgICAgICAgICAgICAgICAgICAgXCIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT48aW5wdXQgdHlwZT0nY2hlY2tib3gnLz5cIiksXG4gICAgICAgICAgICAgICAgKGMgPSBuLmdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJykpLFxuICAgICAgICAgICAgICAgIChkID0gbi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYScpWzBdKSxcbiAgICAgICAgICAgICAgICAoZC5zdHlsZS5jc3NUZXh0ID0gJ3RvcDoxcHg7ZmxvYXQ6bGVmdDtvcGFjaXR5Oi41Jyk7XG4gICAgICAgICAgICBpZiAoIWMgfHwgIWMubGVuZ3RoKSByZXR1cm4ge307XG4gICAgICAgICAgICAoZiA9IGUuY3JlYXRlRWxlbWVudCgnc2VsZWN0JykpLFxuICAgICAgICAgICAgICAgIChnID0gZi5hcHBlbmRDaGlsZChlLmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpKSksXG4gICAgICAgICAgICAgICAgKGggPSBuLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbnB1dCcpWzBdKSxcbiAgICAgICAgICAgICAgICAoYiA9IHtcbiAgICAgICAgICAgICAgICAgICAgbGVhZGluZ1doaXRlc3BhY2U6IG4uZmlyc3RDaGlsZC5ub2RlVHlwZSA9PT0gMyxcbiAgICAgICAgICAgICAgICAgICAgdGJvZHk6ICFuLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0Ym9keScpLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgaHRtbFNlcmlhbGl6ZTogISFuLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdsaW5rJykubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogL3RvcC8udGVzdChkLmdldEF0dHJpYnV0ZSgnc3R5bGUnKSksXG4gICAgICAgICAgICAgICAgICAgIGhyZWZOb3JtYWxpemVkOiBkLmdldEF0dHJpYnV0ZSgnaHJlZicpID09PSAnL2EnLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAvXjAuNS8udGVzdChkLnN0eWxlLm9wYWNpdHkpLFxuICAgICAgICAgICAgICAgICAgICBjc3NGbG9hdDogISFkLnN0eWxlLmNzc0Zsb2F0LFxuICAgICAgICAgICAgICAgICAgICBjaGVja09uOiBoLnZhbHVlID09PSAnb24nLFxuICAgICAgICAgICAgICAgICAgICBvcHRTZWxlY3RlZDogZy5zZWxlY3RlZCxcbiAgICAgICAgICAgICAgICAgICAgZ2V0U2V0QXR0cmlidXRlOiBuLmNsYXNzTmFtZSAhPT0gJ3QnLFxuICAgICAgICAgICAgICAgICAgICBlbmN0eXBlOiAhIWUuY3JlYXRlRWxlbWVudCgnZm9ybScpLmVuY3R5cGUsXG4gICAgICAgICAgICAgICAgICAgIGh0bWw1Q2xvbmU6XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZUVsZW1lbnQoJ25hdicpLmNsb25lTm9kZSghMCkub3V0ZXJIVE1MICE9PVxuICAgICAgICAgICAgICAgICAgICAgICAgJzw6bmF2PjwvOm5hdj4nLFxuICAgICAgICAgICAgICAgICAgICBib3hNb2RlbDogZS5jb21wYXRNb2RlID09PSAnQ1NTMUNvbXBhdCcsXG4gICAgICAgICAgICAgICAgICAgIHN1Ym1pdEJ1YmJsZXM6ICEwLFxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VCdWJibGVzOiAhMCxcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNpbkJ1YmJsZXM6ICExLFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVFeHBhbmRvOiAhMCxcbiAgICAgICAgICAgICAgICAgICAgbm9DbG9uZUV2ZW50OiAhMCxcbiAgICAgICAgICAgICAgICAgICAgaW5saW5lQmxvY2tOZWVkc0xheW91dDogITEsXG4gICAgICAgICAgICAgICAgICAgIHNocmlua1dyYXBCbG9ja3M6ICExLFxuICAgICAgICAgICAgICAgICAgICByZWxpYWJsZU1hcmdpblJpZ2h0OiAhMCxcbiAgICAgICAgICAgICAgICAgICAgYm94U2l6aW5nUmVsaWFibGU6ICEwLFxuICAgICAgICAgICAgICAgICAgICBwaXhlbFBvc2l0aW9uOiAhMSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAoaC5jaGVja2VkID0gITApLFxuICAgICAgICAgICAgICAgIChiLm5vQ2xvbmVDaGVja2VkID0gaC5jbG9uZU5vZGUoITApLmNoZWNrZWQpLFxuICAgICAgICAgICAgICAgIChmLmRpc2FibGVkID0gITApLFxuICAgICAgICAgICAgICAgIChiLm9wdERpc2FibGVkID0gIWcuZGlzYWJsZWQpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkZWxldGUgbi50ZXN0O1xuICAgICAgICAgICAgfSBjYXRjaCAobykge1xuICAgICAgICAgICAgICAgIGIuZGVsZXRlRXhwYW5kbyA9ICExO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgIW4uYWRkRXZlbnRMaXN0ZW5lciAmJlxuICAgICAgICAgICAgICAgIG4uYXR0YWNoRXZlbnQgJiZcbiAgICAgICAgICAgICAgICBuLmZpcmVFdmVudCAmJlxuICAgICAgICAgICAgICAgIChuLmF0dGFjaEV2ZW50KFxuICAgICAgICAgICAgICAgICAgICAnb25jbGljaycsXG4gICAgICAgICAgICAgICAgICAgIChtID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiLm5vQ2xvbmVFdmVudCA9ICExO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgbi5jbG9uZU5vZGUoITApLmZpcmVFdmVudCgnb25jbGljaycpLFxuICAgICAgICAgICAgICAgIG4uZGV0YWNoRXZlbnQoJ29uY2xpY2snLCBtKSksXG4gICAgICAgICAgICAgICAgKGggPSBlLmNyZWF0ZUVsZW1lbnQoJ2lucHV0JykpLFxuICAgICAgICAgICAgICAgIChoLnZhbHVlID0gJ3QnKSxcbiAgICAgICAgICAgICAgICBoLnNldEF0dHJpYnV0ZSgndHlwZScsICdyYWRpbycpLFxuICAgICAgICAgICAgICAgIChiLnJhZGlvVmFsdWUgPSBoLnZhbHVlID09PSAndCcpLFxuICAgICAgICAgICAgICAgIGguc2V0QXR0cmlidXRlKCdjaGVja2VkJywgJ2NoZWNrZWQnKSxcbiAgICAgICAgICAgICAgICBoLnNldEF0dHJpYnV0ZSgnbmFtZScsICd0JyksXG4gICAgICAgICAgICAgICAgbi5hcHBlbmRDaGlsZChoKSxcbiAgICAgICAgICAgICAgICAoaSA9IGUuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpKSxcbiAgICAgICAgICAgICAgICBpLmFwcGVuZENoaWxkKG4ubGFzdENoaWxkKSxcbiAgICAgICAgICAgICAgICAoYi5jaGVja0Nsb25lID0gaVxuICAgICAgICAgICAgICAgICAgICAuY2xvbmVOb2RlKCEwKVxuICAgICAgICAgICAgICAgICAgICAuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuY2hlY2tlZCksXG4gICAgICAgICAgICAgICAgKGIuYXBwZW5kQ2hlY2tlZCA9IGguY2hlY2tlZCksXG4gICAgICAgICAgICAgICAgaS5yZW1vdmVDaGlsZChoKSxcbiAgICAgICAgICAgICAgICBpLmFwcGVuZENoaWxkKG4pO1xuICAgICAgICAgICAgaWYgKG4uYXR0YWNoRXZlbnQpXG4gICAgICAgICAgICAgICAgZm9yIChrIGluIHsgc3VibWl0OiAhMCwgY2hhbmdlOiAhMCwgZm9jdXNpbjogITAgfSlcbiAgICAgICAgICAgICAgICAgICAgKGogPSAnb24nICsgayksXG4gICAgICAgICAgICAgICAgICAgICAgICAobCA9IGogaW4gbiksXG4gICAgICAgICAgICAgICAgICAgICAgICBsIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG4uc2V0QXR0cmlidXRlKGosICdyZXR1cm47JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwgPSB0eXBlb2YgbltqXSA9PSAnZnVuY3Rpb24nKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoYltrICsgJ0J1YmJsZXMnXSA9IGwpO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBwKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgICAgICAgICAgZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGggPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwYWRkaW5nOjA7bWFyZ2luOjA7Ym9yZGVyOjA7ZGlzcGxheTpibG9jaztvdmVyZmxvdzpoaWRkZW47JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgICAgICAgICAgICAgICAgIGlmICghaSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAoYyA9IGUuY3JlYXRlRWxlbWVudCgnZGl2JykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGMuc3R5bGUuY3NzVGV4dCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Zpc2liaWxpdHk6aGlkZGVuO2JvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7cG9zaXRpb246c3RhdGljO3RvcDowO21hcmdpbi10b3A6MXB4JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBpLmluc2VydEJlZm9yZShjLCBpLmZpcnN0Q2hpbGQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGQgPSBlLmNyZWF0ZUVsZW1lbnQoJ2RpdicpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuYXBwZW5kQ2hpbGQoZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZC5pbm5lckhUTUwgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8dGFibGU+PHRyPjx0ZD48L3RkPjx0ZD50PC90ZD48L3RyPjwvdGFibGU+JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZiA9IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RkJykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGZbMF0uc3R5bGUuY3NzVGV4dCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BhZGRpbmc6MDttYXJnaW46MDtib3JkZXI6MDtkaXNwbGF5Om5vbmUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChsID0gZlswXS5vZmZzZXRIZWlnaHQgPT09IDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGZbMF0uc3R5bGUuZGlzcGxheSA9ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChmWzFdLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGIucmVsaWFibGVIaWRkZW5PZmZzZXRzID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsICYmIGZbMF0ub2Zmc2V0SGVpZ2h0ID09PSAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChkLmlubmVySFRNTCA9ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChkLnN0eWxlLmNzc1RleHQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7cGFkZGluZzoxcHg7Ym9yZGVyOjFweDtkaXNwbGF5OmJsb2NrO3dpZHRoOjRweDttYXJnaW4tdG9wOjElO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxJTsnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChiLmJveFNpemluZyA9IGQub2Zmc2V0V2lkdGggPT09IDQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGIuZG9lc05vdEluY2x1ZGVNYXJnaW5JbkJvZHlPZmZzZXQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkub2Zmc2V0VG9wICE9PSAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuZ2V0Q29tcHV0ZWRTdHlsZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoYi5waXhlbFBvc2l0aW9uID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGEuZ2V0Q29tcHV0ZWRTdHlsZShkLCBudWxsKSB8fCB7fSkudG9wICE9PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMSUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYi5ib3hTaXppbmdSZWxpYWJsZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuZ2V0Q29tcHV0ZWRTdHlsZShkLCBudWxsKSB8fCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICc0cHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLndpZHRoID09PSAnNHB4JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGcgPSBlLmNyZWF0ZUVsZW1lbnQoJ2RpdicpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZy5zdHlsZS5jc3NUZXh0ID0gZC5zdHlsZS5jc3NUZXh0ID0gaCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGcuc3R5bGUubWFyZ2luUmlnaHQgPSBnLnN0eWxlLndpZHRoID0gJzAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZC5zdHlsZS53aWR0aCA9ICcxcHgnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmFwcGVuZENoaWxkKGcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChiLnJlbGlhYmxlTWFyZ2luUmlnaHQgPSAhcGFyc2VGbG9hdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGEuZ2V0Q29tcHV0ZWRTdHlsZShnLCBudWxsKSB8fCB7fSkubWFyZ2luUmlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApKSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgZC5zdHlsZS56b29tICE9ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChkLmlubmVySFRNTCA9ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZC5zdHlsZS5jc3NUZXh0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aDoxcHg7cGFkZGluZzoxcHg7ZGlzcGxheTppbmxpbmU7em9vbToxJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGIuaW5saW5lQmxvY2tOZWVkc0xheW91dCA9IGQub2Zmc2V0V2lkdGggPT09IDMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZC5zdHlsZS5vdmVyZmxvdyA9ICd2aXNpYmxlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGQuaW5uZXJIVE1MID0gJzxkaXY+PC9kaXY+JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGQuZmlyc3RDaGlsZC5zdHlsZS53aWR0aCA9ICc1cHgnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYi5zaHJpbmtXcmFwQmxvY2tzID0gZC5vZmZzZXRXaWR0aCAhPT0gMyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMuc3R5bGUuem9vbSA9IDEpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGkucmVtb3ZlQ2hpbGQoYyksXG4gICAgICAgICAgICAgICAgICAgICAgICAoYyA9IGQgPSBmID0gZyA9IG51bGwpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGkucmVtb3ZlQ2hpbGQobiksXG4gICAgICAgICAgICAgICAgKGMgPSBkID0gZiA9IGcgPSBoID0gaSA9IG4gPSBudWxsKSxcbiAgICAgICAgICAgICAgICBiXG4gICAgICAgICAgICApO1xuICAgICAgICB9KSgpKTtcbiAgICB2YXIgSCA9IC8oPzpcXHtbXFxzXFxTXSpcXH18XFxbW1xcc1xcU10qXFxdKSQvLFxuICAgICAgICBJID0gLyhbQS1aXSkvZztcbiAgICBwLmV4dGVuZCh7XG4gICAgICAgIGNhY2hlOiB7fSxcbiAgICAgICAgZGVsZXRlZElkczogW10sXG4gICAgICAgIHV1aWQ6IDAsXG4gICAgICAgIGV4cGFuZG86ICdqUXVlcnknICsgKHAuZm4uanF1ZXJ5ICsgTWF0aC5yYW5kb20oKSkucmVwbGFjZSgvXFxEL2csICcnKSxcbiAgICAgICAgbm9EYXRhOiB7XG4gICAgICAgICAgICBlbWJlZDogITAsXG4gICAgICAgICAgICBvYmplY3Q6ICdjbHNpZDpEMjdDREI2RS1BRTZELTExY2YtOTZCOC00NDQ1NTM1NDAwMDAnLFxuICAgICAgICAgICAgYXBwbGV0OiAhMCxcbiAgICAgICAgfSxcbiAgICAgICAgaGFzRGF0YTogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAoYSA9IGEubm9kZVR5cGUgPyBwLmNhY2hlW2FbcC5leHBhbmRvXV0gOiBhW3AuZXhwYW5kb10pLFxuICAgICAgICAgICAgICAgICEhYSAmJiAhSyhhKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YTogZnVuY3Rpb24oYSwgYywgZCwgZSkge1xuICAgICAgICAgICAgaWYgKCFwLmFjY2VwdERhdGEoYSkpIHJldHVybjtcbiAgICAgICAgICAgIHZhciBmLFxuICAgICAgICAgICAgICAgIGcsXG4gICAgICAgICAgICAgICAgaCA9IHAuZXhwYW5kbyxcbiAgICAgICAgICAgICAgICBpID0gdHlwZW9mIGMgPT0gJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgaiA9IGEubm9kZVR5cGUsXG4gICAgICAgICAgICAgICAgayA9IGogPyBwLmNhY2hlIDogYSxcbiAgICAgICAgICAgICAgICBsID0gaiA/IGFbaF0gOiBhW2hdICYmIGg7XG4gICAgICAgICAgICBpZiAoKCFsIHx8ICFrW2xdIHx8ICghZSAmJiAha1tsXS5kYXRhKSkgJiYgaSAmJiBkID09PSBiKSByZXR1cm47XG4gICAgICAgICAgICBsIHx8IChqID8gKGFbaF0gPSBsID0gcC5kZWxldGVkSWRzLnBvcCgpIHx8IHAuZ3VpZCsrKSA6IChsID0gaCkpLFxuICAgICAgICAgICAgICAgIGtbbF0gfHwgKChrW2xdID0ge30pLCBqIHx8IChrW2xdLnRvSlNPTiA9IHAubm9vcCkpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjID09ICdvYmplY3QnIHx8IHR5cGVvZiBjID09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAgICAgZVxuICAgICAgICAgICAgICAgICAgICA/IChrW2xdID0gcC5leHRlbmQoa1tsXSwgYykpXG4gICAgICAgICAgICAgICAgICAgIDogKGtbbF0uZGF0YSA9IHAuZXh0ZW5kKGtbbF0uZGF0YSwgYykpO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAoZiA9IGtbbF0pLFxuICAgICAgICAgICAgICAgIGUgfHwgKGYuZGF0YSB8fCAoZi5kYXRhID0ge30pLCAoZiA9IGYuZGF0YSkpLFxuICAgICAgICAgICAgICAgIGQgIT09IGIgJiYgKGZbcC5jYW1lbENhc2UoYyldID0gZCksXG4gICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICAgICA/ICgoZyA9IGZbY10pLCBnID09IG51bGwgJiYgKGcgPSBmW3AuY2FtZWxDYXNlKGMpXSkpXG4gICAgICAgICAgICAgICAgICAgIDogKGcgPSBmKSxcbiAgICAgICAgICAgICAgICBnXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVEYXRhOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICBpZiAoIXAuYWNjZXB0RGF0YShhKSkgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGQsXG4gICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgIGcgPSBhLm5vZGVUeXBlLFxuICAgICAgICAgICAgICAgIGggPSBnID8gcC5jYWNoZSA6IGEsXG4gICAgICAgICAgICAgICAgaSA9IGcgPyBhW3AuZXhwYW5kb10gOiBwLmV4cGFuZG87XG4gICAgICAgICAgICBpZiAoIWhbaV0pIHJldHVybjtcbiAgICAgICAgICAgIGlmIChiKSB7XG4gICAgICAgICAgICAgICAgZCA9IGMgPyBoW2ldIDogaFtpXS5kYXRhO1xuICAgICAgICAgICAgICAgIGlmIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHAuaXNBcnJheShiKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKGIgaW4gZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKGIgPSBbYl0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoKGIgPSBwLmNhbWVsQ2FzZShiKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiIGluIGQgPyAoYiA9IFtiXSkgOiAoYiA9IGIuc3BsaXQoJyAnKSkpKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChlID0gMCwgZiA9IGIubGVuZ3RoOyBlIDwgZjsgZSsrKSBkZWxldGUgZFtiW2VdXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYyA/IEsgOiBwLmlzRW1wdHlPYmplY3QpKGQpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGhbaV0uZGF0YTtcbiAgICAgICAgICAgICAgICBpZiAoIUsoaFtpXSkpIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdcbiAgICAgICAgICAgICAgICA/IHAuY2xlYW5EYXRhKFthXSwgITApXG4gICAgICAgICAgICAgICAgOiBwLnN1cHBvcnQuZGVsZXRlRXhwYW5kbyB8fCBoICE9IGgud2luZG93XG4gICAgICAgICAgICAgICAgICAgID8gZGVsZXRlIGhbaV1cbiAgICAgICAgICAgICAgICAgICAgOiAoaFtpXSA9IG51bGwpO1xuICAgICAgICB9LFxuICAgICAgICBfZGF0YTogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgcmV0dXJuIHAuZGF0YShhLCBiLCBjLCAhMCk7XG4gICAgICAgIH0sXG4gICAgICAgIGFjY2VwdERhdGE6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIHZhciBiID0gYS5ub2RlTmFtZSAmJiBwLm5vRGF0YVthLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldO1xuICAgICAgICAgICAgcmV0dXJuICFiIHx8IChiICE9PSAhMCAmJiBhLmdldEF0dHJpYnV0ZSgnY2xhc3NpZCcpID09PSBiKTtcbiAgICAgICAgfSxcbiAgICB9KSxcbiAgICAgICAgcC5mbi5leHRlbmQoe1xuICAgICAgICAgICAgZGF0YTogZnVuY3Rpb24oYSwgYykge1xuICAgICAgICAgICAgICAgIHZhciBkLFxuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgICAgICBnLFxuICAgICAgICAgICAgICAgICAgICBoLFxuICAgICAgICAgICAgICAgICAgICBpID0gdGhpc1swXSxcbiAgICAgICAgICAgICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGsgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgayA9IHAuZGF0YShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpLm5vZGVUeXBlID09PSAxICYmICFwLl9kYXRhKGksICdwYXJzZWRBdHRycycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IGkuYXR0cmlidXRlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGggPSBmLmxlbmd0aDsgaiA8IGg7IGorKylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGcgPSBmW2pdLm5hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZy5pbmRleE9mKCdkYXRhLScpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChnID0gcC5jYW1lbENhc2UoZy5zdWJzdHJpbmcoNSkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKKGksIGcsIGtbZ10pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLl9kYXRhKGksICdwYXJzZWRBdHRycycsICEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBhID09ICdvYmplY3QnXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwLmRhdGEodGhpcywgYSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgOiAoKGQgPSBhLnNwbGl0KCcuJywgMikpLFxuICAgICAgICAgICAgICAgICAgICAgIChkWzFdID0gZFsxXSA/ICcuJyArIGRbMV0gOiAnJyksXG4gICAgICAgICAgICAgICAgICAgICAgKGUgPSBkWzFdICsgJyEnKSxcbiAgICAgICAgICAgICAgICAgICAgICBwLmFjY2VzcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgPT09IGIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGsgPSB0aGlzLnRyaWdnZXJIYW5kbGVyKCdnZXREYXRhJyArIGUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9PT0gYiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChrID0gcC5kYXRhKGksIGEpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChrID0gSihpLCBhLCBrKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrID09PSBiICYmIGRbMV0gPyB0aGlzLmRhdGEoZFswXSkgOiBrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkWzFdID0gYyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IHAodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIudHJpZ2dlckhhbmRsZXIoJ3NldERhdGEnICsgZSwgZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmRhdGEodGhpcywgYSwgYyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnRyaWdnZXJIYW5kbGVyKCdjaGFuZ2VEYXRhJyArIGUsIGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgITFcbiAgICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW1vdmVEYXRhOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcC5yZW1vdmVEYXRhKHRoaXMsIGEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICAgIHAuZXh0ZW5kKHtcbiAgICAgICAgICAgIHF1ZXVlOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQ7XG4gICAgICAgICAgICAgICAgaWYgKGEpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAoYiA9IChiIHx8ICdmeCcpICsgJ3F1ZXVlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZCA9IHAuX2RhdGEoYSwgYikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICghZCB8fCBwLmlzQXJyYXkoYylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoZCA9IHAuX2RhdGEoYSwgYiwgcC5tYWtlQXJyYXkoYykpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGQucHVzaChjKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBkIHx8IFtdXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVxdWV1ZTogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgIGIgPSBiIHx8ICdmeCc7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBwLnF1ZXVlKGEsIGIpLFxuICAgICAgICAgICAgICAgICAgICBkID0gYy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIGUgPSBjLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgICAgIGYgPSBwLl9xdWV1ZUhvb2tzKGEsIGIpLFxuICAgICAgICAgICAgICAgICAgICBnID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwLmRlcXVldWUoYSwgYik7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZSA9PT0gJ2lucHJvZ3Jlc3MnICYmICgoZSA9IGMuc2hpZnQoKSksIGQtLSksXG4gICAgICAgICAgICAgICAgICAgIGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChiID09PSAnZngnICYmIGMudW5zaGlmdCgnaW5wcm9ncmVzcycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGYuc3RvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuY2FsbChhLCBnLCBmKSksXG4gICAgICAgICAgICAgICAgICAgICFkICYmIGYgJiYgZi5lbXB0eS5maXJlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3F1ZXVlSG9va3M6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IGIgKyAncXVldWVIb29rcyc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgcC5fZGF0YShhLCBjKSB8fFxuICAgICAgICAgICAgICAgICAgICBwLl9kYXRhKGEsIGMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtcHR5OiBwLkNhbGxiYWNrcygnb25jZSBtZW1vcnknKS5hZGQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5yZW1vdmVEYXRhKGEsIGIgKyAncXVldWUnLCAhMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAucmVtb3ZlRGF0YShhLCBjLCAhMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICAgIHAuZm4uZXh0ZW5kKHtcbiAgICAgICAgICAgIHF1ZXVlOiBmdW5jdGlvbihhLCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAyO1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhICE9ICdzdHJpbmcnICYmICgoYyA9IGEpLCAoYSA9ICdmeCcpLCBkLS0pLFxuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoIDwgZFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBwLnF1ZXVlKHRoaXNbMF0sIGEpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGMgPT09IGJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IHAucXVldWUodGhpcywgYSwgYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5fcXVldWVIb29rcyh0aGlzLCBhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9PT0gJ2Z4JyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYlswXSAhPT0gJ2lucHJvZ3Jlc3MnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmRlcXVldWUodGhpcywgYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVxdWV1ZTogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHAuZGVxdWV1ZSh0aGlzLCBhKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWxheTogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIChhID0gcC5meCA/IHAuZnguc3BlZWRzW2FdIHx8IGEgOiBhKSxcbiAgICAgICAgICAgICAgICAgICAgKGIgPSBiIHx8ICdmeCcpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlKGIsIGZ1bmN0aW9uKGIsIGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0gc2V0VGltZW91dChiLCBhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGVhclF1ZXVlOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucXVldWUoYSB8fCAnZngnLCBbXSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvbWlzZTogZnVuY3Rpb24oYSwgYykge1xuICAgICAgICAgICAgICAgIHZhciBkLFxuICAgICAgICAgICAgICAgICAgICBlID0gMSxcbiAgICAgICAgICAgICAgICAgICAgZiA9IHAuRGVmZXJyZWQoKSxcbiAgICAgICAgICAgICAgICAgICAgZyA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGggPSB0aGlzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLS1lIHx8IGYucmVzb2x2ZVdpdGgoZywgW2ddKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0eXBlb2YgYSAhPSAnc3RyaW5nJyAmJiAoKGMgPSBhKSwgKGEgPSBiKSksIChhID0gYSB8fCAnZngnKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaC0tKVxuICAgICAgICAgICAgICAgICAgICAoZCA9IHAuX2RhdGEoZ1toXSwgYSArICdxdWV1ZUhvb2tzJykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZCAmJiBkLmVtcHR5ICYmIChlKyssIGQuZW1wdHkuYWRkKGkpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSgpLCBmLnByb21pc2UoYyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB2YXIgTCxcbiAgICAgICAgTSxcbiAgICAgICAgTixcbiAgICAgICAgTyA9IC9bXFx0XFxyXFxuXS9nLFxuICAgICAgICBQID0gL1xcci9nLFxuICAgICAgICBRID0gL14oPzpidXR0b258aW5wdXQpJC9pLFxuICAgICAgICBSID0gL14oPzpidXR0b258aW5wdXR8b2JqZWN0fHNlbGVjdHx0ZXh0YXJlYSkkL2ksXG4gICAgICAgIFMgPSAvXmEoPzpyZWF8KSQvaSxcbiAgICAgICAgVCA9IC9eKD86YXV0b2ZvY3VzfGF1dG9wbGF5fGFzeW5jfGNoZWNrZWR8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWR8c2VsZWN0ZWQpJC9pLFxuICAgICAgICBVID0gcC5zdXBwb3J0LmdldFNldEF0dHJpYnV0ZTtcbiAgICBwLmZuLmV4dGVuZCh7XG4gICAgICAgIGF0dHI6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBwLmFjY2Vzcyh0aGlzLCBwLmF0dHIsIGEsIGIsIGFyZ3VtZW50cy5sZW5ndGggPiAxKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlQXR0cjogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwLnJlbW92ZUF0dHIodGhpcywgYSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJvcDogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIHAuYWNjZXNzKHRoaXMsIHAucHJvcCwgYSwgYiwgYXJndW1lbnRzLmxlbmd0aCA+IDEpO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVQcm9wOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIChhID0gcC5wcm9wRml4W2FdIHx8IGEpLFxuICAgICAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzW2FdID0gYiksIGRlbGV0ZSB0aGlzW2FdO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChjKSB7fVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBhZGRDbGFzczogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgdmFyIGIsIGMsIGQsIGUsIGYsIGcsIGg7XG4gICAgICAgICAgICBpZiAocC5pc0Z1bmN0aW9uKGEpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICAgICAgICBwKHRoaXMpLmFkZENsYXNzKGEuY2FsbCh0aGlzLCBiLCB0aGlzLmNsYXNzTmFtZSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGEgJiYgdHlwZW9mIGEgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBiID0gYS5zcGxpdChzKTtcbiAgICAgICAgICAgICAgICBmb3IgKGMgPSAwLCBkID0gdGhpcy5sZW5ndGg7IGMgPCBkOyBjKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXNbY107XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLm5vZGVUeXBlID09PSAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlLmNsYXNzTmFtZSAmJiBiLmxlbmd0aCA9PT0gMSkgZS5jbGFzc05hbWUgPSBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9ICcgJyArIGUuY2xhc3NOYW1lICsgJyAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZyA9IDAsIGggPSBiLmxlbmd0aDsgZyA8IGg7IGcrKylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZi5pbmRleE9mKCcgJyArIGJbZ10gKyAnICcpIDwgMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGYgKz0gYltnXSArICcgJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5jbGFzc05hbWUgPSBwLnRyaW0oZik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICB2YXIgYywgZCwgZSwgZiwgZywgaCwgaTtcbiAgICAgICAgICAgIGlmIChwLmlzRnVuY3Rpb24oYSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgICAgICAgIHAodGhpcykucmVtb3ZlQ2xhc3MoYS5jYWxsKHRoaXMsIGIsIHRoaXMuY2xhc3NOYW1lKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoKGEgJiYgdHlwZW9mIGEgPT0gJ3N0cmluZycpIHx8IGEgPT09IGIpIHtcbiAgICAgICAgICAgICAgICBjID0gKGEgfHwgJycpLnNwbGl0KHMpO1xuICAgICAgICAgICAgICAgIGZvciAoaCA9IDAsIGkgPSB0aGlzLmxlbmd0aDsgaCA8IGk7IGgrKykge1xuICAgICAgICAgICAgICAgICAgICBlID0gdGhpc1toXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUubm9kZVR5cGUgPT09IDEgJiYgZS5jbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgPSAoJyAnICsgZS5jbGFzc05hbWUgKyAnICcpLnJlcGxhY2UoTywgJyAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZiA9IDAsIGcgPSBjLmxlbmd0aDsgZiA8IGc7IGYrKylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZC5pbmRleE9mKCcgJyArIGNbZl0gKyAnICcpID49IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBkLnJlcGxhY2UoJyAnICsgY1tmXSArICcgJywgJyAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuY2xhc3NOYW1lID0gYSA/IHAudHJpbShkKSA6ICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICB2YXIgYyA9IHR5cGVvZiBhLFxuICAgICAgICAgICAgICAgIGQgPSB0eXBlb2YgYiA9PSAnYm9vbGVhbic7XG4gICAgICAgICAgICByZXR1cm4gcC5pc0Z1bmN0aW9uKGEpXG4gICAgICAgICAgICAgICAgPyB0aGlzLmVhY2goZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgICAgICAgICAgIHAodGhpcykudG9nZ2xlQ2xhc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEuY2FsbCh0aGlzLCBjLCB0aGlzLmNsYXNzTmFtZSwgYiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJcbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICA6IHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcgPSBwKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IGIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gYS5zcGxpdChzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChlID0gaVtmKytdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoID0gZCA/IGggOiAhZy5oYXNDbGFzcyhlKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ1toID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKGUpO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJ3VuZGVmaW5lZCcgfHwgYyA9PT0gJ2Jvb2xlYW4nKSB0aGlzLmNsYXNzTmFtZSAmJiBwLl9kYXRhKHRoaXMsICdfX2NsYXNzTmFtZV9fJywgdGhpcy5jbGFzc05hbWUpLCAodGhpcy5jbGFzc05hbWUgPSB0aGlzLmNsYXNzTmFtZSB8fCBhID09PSAhMSA/ICcnIDogcC5fZGF0YSh0aGlzLCAnX19jbGFzc05hbWVfXycpIHx8ICcnKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBoYXNDbGFzczogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgdmFyIGIgPSAnICcgKyBhICsgJyAnLFxuICAgICAgICAgICAgICAgIGMgPSAwLFxuICAgICAgICAgICAgICAgIGQgPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAoOyBjIDwgZDsgYysrKVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tjXS5ub2RlVHlwZSA9PT0gMSAmJlxuICAgICAgICAgICAgICAgICAgICAoJyAnICsgdGhpc1tjXS5jbGFzc05hbWUgKyAnICcpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZShPLCAnICcpXG4gICAgICAgICAgICAgICAgICAgICAgICAuaW5kZXhPZihiKSA+PSAwXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgdmFyIGMsXG4gICAgICAgICAgICAgICAgZCxcbiAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgIGYgPSB0aGlzWzBdO1xuICAgICAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGYpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAoYyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC52YWxIb29rc1tmLnR5cGVdIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC52YWxIb29rc1tmLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgJiYgJ2dldCcgaW4gYyAmJiAoZCA9IGMuZ2V0KGYsICd2YWx1ZScpKSAhPT0gYlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKChkID0gZi52YWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgZCA9PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZC5yZXBsYWNlKFAsICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZCA9PSBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgKGUgPSBwLmlzRnVuY3Rpb24oYSkpLFxuICAgICAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmLFxuICAgICAgICAgICAgICAgICAgICAgICAgZyA9IHAodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm5vZGVUeXBlICE9PSAxKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGUgPyAoZiA9IGEuY2FsbCh0aGlzLCBkLCBnLnZhbCgpKSkgOiAoZiA9IGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZiA9PSBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoZiA9ICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHlwZW9mIGYgPT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoZiArPSAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBwLmlzQXJyYXkoZikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZiA9IHAubWFwKGYsIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgPT0gbnVsbCA/ICcnIDogYSArICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChjID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLnZhbEhvb2tzW3RoaXMudHlwZV0gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLnZhbEhvb2tzW3RoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWMgfHwgISgnc2V0JyBpbiBjKSB8fCBjLnNldCh0aGlzLCBmLCAndmFsdWUnKSA9PT0gYilcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBmO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgIH0pLFxuICAgICAgICBwLmV4dGVuZCh7XG4gICAgICAgICAgICB2YWxIb29rczoge1xuICAgICAgICAgICAgICAgIG9wdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gYS5hdHRyaWJ1dGVzLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFiIHx8IGIuc3BlY2lmaWVkID8gYS52YWx1ZSA6IGEudGV4dDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBhLnNlbGVjdGVkSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSBhLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGEudHlwZSA9PT0gJ3NlbGVjdC1vbmUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGYgPCAwKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIChjID0gaSA/IGYgOiAwKSwgKGQgPSBpID8gZiArIDEgOiBoLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgYyA8IGQ7IGMrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBoW2NdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zZWxlY3RlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocC5zdXBwb3J0Lm9wdERpc2FibGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICFlLmRpc2FibGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUuZ2V0QXR0cmlidXRlKCdkaXNhYmxlZCcpID09PSBudWxsKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIWUucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIXAubm9kZU5hbWUoZS5wYXJlbnROb2RlLCAnb3B0Z3JvdXAnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9IHAoZSkudmFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpKSByZXR1cm4gYjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZy5wdXNoKGIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpICYmICFnLmxlbmd0aCAmJiBoLmxlbmd0aCA/IHAoaFtmXSkudmFsKCkgOiBnO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gcC5tYWtlQXJyYXkoYik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAoYSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ29wdGlvbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5pbkFycmF5KHAodGhpcykudmFsKCksIGMpID49IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMubGVuZ3RoIHx8IChhLnNlbGVjdGVkSW5kZXggPSAtMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY1xuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF0dHJGbjoge30sXG4gICAgICAgICAgICBhdHRyOiBmdW5jdGlvbihhLCBjLCBkLCBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGYsXG4gICAgICAgICAgICAgICAgICAgIGcsXG4gICAgICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLm5vZGVUeXBlO1xuICAgICAgICAgICAgICAgIGlmICghYSB8fCBpID09PSAzIHx8IGkgPT09IDggfHwgaSA9PT0gMikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmIChlICYmIHAuaXNGdW5jdGlvbihwLmZuW2NdKSkgcmV0dXJuIHAoYSlbY10oZCk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhLmdldEF0dHJpYnV0ZSA9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAucHJvcChhLCBjLCBkKTtcbiAgICAgICAgICAgICAgICAoaCA9IGkgIT09IDEgfHwgIXAuaXNYTUxEb2MoYSkpLFxuICAgICAgICAgICAgICAgICAgICBoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoKGMgPSBjLnRvTG93ZXJDYXNlKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGcgPSBwLmF0dHJIb29rc1tjXSB8fCAoVC50ZXN0KGMpID8gTSA6IEwpKSk7XG4gICAgICAgICAgICAgICAgaWYgKGQgIT09IGIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAucmVtb3ZlQXR0cihhLCBjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZyAmJiAnc2V0JyBpbiBnICYmIGggJiYgKGYgPSBnLnNldChhLCBkLCBjKSkgIT09IGJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZlxuICAgICAgICAgICAgICAgICAgICAgICAgOiAoYS5zZXRBdHRyaWJ1dGUoYywgZCArICcnKSwgZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBnICYmICdnZXQnIGluIGcgJiYgaCAmJiAoZiA9IGcuZ2V0KGEsIGMpKSAhPT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICA/IGZcbiAgICAgICAgICAgICAgICAgICAgOiAoKGYgPSBhLmdldEF0dHJpYnV0ZShjKSksIGYgPT09IG51bGwgPyBiIDogZik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVtb3ZlQXR0cjogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgIHZhciBjLFxuICAgICAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgICAgICBnID0gMDtcbiAgICAgICAgICAgICAgICBpZiAoYiAmJiBhLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGQgPSBiLnNwbGl0KHMpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgZyA8IGQubGVuZ3RoOyBnKyspXG4gICAgICAgICAgICAgICAgICAgICAgICAoZSA9IGRbZ10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChjID0gcC5wcm9wRml4W2VdIHx8IGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZiA9IFQudGVzdChlKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgfHwgcC5hdHRyKGEsIGUsICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5yZW1vdmVBdHRyaWJ1dGUoVSA/IGUgOiBjKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiAmJiBjIGluIGEgJiYgKGFbY10gPSAhMSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhdHRySG9va3M6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFEudGVzdChhLm5vZGVOYW1lKSAmJiBhLnBhcmVudE5vZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5lcnJvcihcInR5cGUgcHJvcGVydHkgY2FuJ3QgYmUgY2hhbmdlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFwLnN1cHBvcnQucmFkaW9WYWx1ZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPT09ICdyYWRpbycgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLm5vZGVOYW1lKGEsICdpbnB1dCcpXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCBiKSwgYyAmJiAoYS52YWx1ZSA9IGMpLCBiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEwgJiYgcC5ub2RlTmFtZShhLCAnYnV0dG9uJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IEwuZ2V0KGEsIGIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiIGluIGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTCAmJiBwLm5vZGVOYW1lKGEsICdidXR0b24nKSkgcmV0dXJuIEwuc2V0KGEsIGIsIGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYS52YWx1ZSA9IGI7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9wRml4OiB7XG4gICAgICAgICAgICAgICAgdGFiaW5kZXg6ICd0YWJJbmRleCcsXG4gICAgICAgICAgICAgICAgcmVhZG9ubHk6ICdyZWFkT25seScsXG4gICAgICAgICAgICAgICAgZm9yOiAnaHRtbEZvcicsXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdjbGFzc05hbWUnLFxuICAgICAgICAgICAgICAgIG1heGxlbmd0aDogJ21heExlbmd0aCcsXG4gICAgICAgICAgICAgICAgY2VsbHNwYWNpbmc6ICdjZWxsU3BhY2luZycsXG4gICAgICAgICAgICAgICAgY2VsbHBhZGRpbmc6ICdjZWxsUGFkZGluZycsXG4gICAgICAgICAgICAgICAgcm93c3BhbjogJ3Jvd1NwYW4nLFxuICAgICAgICAgICAgICAgIGNvbHNwYW46ICdjb2xTcGFuJyxcbiAgICAgICAgICAgICAgICB1c2VtYXA6ICd1c2VNYXAnLFxuICAgICAgICAgICAgICAgIGZyYW1lYm9yZGVyOiAnZnJhbWVCb3JkZXInLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRlZGl0YWJsZTogJ2NvbnRlbnRFZGl0YWJsZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvcDogZnVuY3Rpb24oYSwgYywgZCkge1xuICAgICAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgICAgICBnLFxuICAgICAgICAgICAgICAgICAgICBoID0gYS5ub2RlVHlwZTtcbiAgICAgICAgICAgICAgICBpZiAoIWEgfHwgaCA9PT0gMyB8fCBoID09PSA4IHx8IGggPT09IDIpIHJldHVybjtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAoZyA9IGggIT09IDEgfHwgIXAuaXNYTUxEb2MoYSkpLFxuICAgICAgICAgICAgICAgICAgICBnICYmICgoYyA9IHAucHJvcEZpeFtjXSB8fCBjKSwgKGYgPSBwLnByb3BIb29rc1tjXSkpLFxuICAgICAgICAgICAgICAgICAgICBkICE9PSBiXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGYgJiYgJ3NldCcgaW4gZiAmJiAoZSA9IGYuc2V0KGEsIGQsIGMpKSAhPT0gYlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKGFbY10gPSBkKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBmICYmICdnZXQnIGluIGYgJiYgKGUgPSBmLmdldChhLCBjKSkgIT09IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGFbY11cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb3BIb29rczoge1xuICAgICAgICAgICAgICAgIHRhYkluZGV4OiB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBhLmdldEF0dHJpYnV0ZU5vZGUoJ3RhYmluZGV4Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyAmJiBjLnNwZWNpZmllZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcGFyc2VJbnQoYy52YWx1ZSwgMTApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBSLnRlc3QoYS5ub2RlTmFtZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChTLnRlc3QoYS5ub2RlTmFtZSkgJiYgYS5ocmVmKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgKE0gPSB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGEsIGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCxcbiAgICAgICAgICAgICAgICAgICAgZSA9IHAucHJvcChhLCBjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZSA9PT0gITAgfHxcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBlICE9ICdib29sZWFuJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKGQgPSBhLmdldEF0dHJpYnV0ZU5vZGUoYykpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBkLm5vZGVWYWx1ZSAhPT0gITEpXG4gICAgICAgICAgICAgICAgICAgID8gYy50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgIDogYjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBiID09PSAhMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBwLnJlbW92ZUF0dHIoYSwgYylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKChkID0gcC5wcm9wRml4W2NdIHx8IGMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkIGluIGEgJiYgKGFbZF0gPSAhMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEuc2V0QXR0cmlidXRlKGMsIGMudG9Mb3dlckNhc2UoKSkpLFxuICAgICAgICAgICAgICAgICAgICBjXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICBVIHx8XG4gICAgICAgICAgICAoKE4gPSB7IG5hbWU6ICEwLCBpZDogITAsIGNvb3JkczogITAgfSksXG4gICAgICAgICAgICAoTCA9IHAudmFsSG9va3MuYnV0dG9uID0ge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oYSwgYykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIChkID0gYS5nZXRBdHRyaWJ1dGVOb2RlKGMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgJiYgKE5bY10gPyBkLnZhbHVlICE9PSAnJyA6IGQuc3BlY2lmaWVkKSA/IGQudmFsdWUgOiBiXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBhLmdldEF0dHJpYnV0ZU5vZGUoYyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChkID0gZS5jcmVhdGVBdHRyaWJ1dGUoYykpLCBhLnNldEF0dHJpYnV0ZU5vZGUoZCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGQudmFsdWUgPSBiICsgJycpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgcC5lYWNoKFsnd2lkdGgnLCAnaGVpZ2h0J10sIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICBwLmF0dHJIb29rc1tiXSA9IHAuZXh0ZW5kKHAuYXR0ckhvb2tzW2JdLCB7XG4gICAgICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24oYSwgYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgPT09ICcnKSByZXR1cm4gYS5zZXRBdHRyaWJ1dGUoYiwgJ2F1dG8nKSwgYztcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKHAuYXR0ckhvb2tzLmNvbnRlbnRlZGl0YWJsZSA9IHtcbiAgICAgICAgICAgICAgICBnZXQ6IEwuZ2V0LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgICAgICBiID09PSAnJyAmJiAoYiA9ICdmYWxzZScpLCBMLnNldChhLCBiLCBjKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICBwLnN1cHBvcnQuaHJlZk5vcm1hbGl6ZWQgfHxcbiAgICAgICAgICAgIHAuZWFjaChbJ2hyZWYnLCAnc3JjJywgJ3dpZHRoJywgJ2hlaWdodCddLCBmdW5jdGlvbihhLCBjKSB7XG4gICAgICAgICAgICAgICAgcC5hdHRySG9va3NbY10gPSBwLmV4dGVuZChwLmF0dHJIb29rc1tjXSwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0gYS5nZXRBdHRyaWJ1dGUoYywgMik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZCA9PT0gbnVsbCA/IGIgOiBkO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSksXG4gICAgICAgIHAuc3VwcG9ydC5zdHlsZSB8fFxuICAgICAgICAgICAgKHAuYXR0ckhvb2tzLnN0eWxlID0ge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5zdHlsZS5jc3NUZXh0LnRvTG93ZXJDYXNlKCkgfHwgYjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGEuc3R5bGUuY3NzVGV4dCA9IGIgKyAnJyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBwLnN1cHBvcnQub3B0U2VsZWN0ZWQgfHxcbiAgICAgICAgICAgIChwLnByb3BIb29rcy5zZWxlY3RlZCA9IHAuZXh0ZW5kKHAucHJvcEhvb2tzLnNlbGVjdGVkLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiID0gYS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgYiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChiLnNlbGVjdGVkSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5wYXJlbnROb2RlICYmIGIucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICBwLnN1cHBvcnQuZW5jdHlwZSB8fCAocC5wcm9wRml4LmVuY3R5cGUgPSAnZW5jb2RpbmcnKSxcbiAgICAgICAgcC5zdXBwb3J0LmNoZWNrT24gfHxcbiAgICAgICAgICAgIHAuZWFjaChbJ3JhZGlvJywgJ2NoZWNrYm94J10sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHAudmFsSG9va3NbdGhpc10gPSB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEuZ2V0QXR0cmlidXRlKCd2YWx1ZScpID09PSBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnb24nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgcC5lYWNoKFsncmFkaW8nLCAnY2hlY2tib3gnXSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBwLnZhbEhvb2tzW3RoaXNdID0gcC5leHRlbmQocC52YWxIb29rc1t0aGlzXSwge1xuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICBpZiAocC5pc0FycmF5KGIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChhLmNoZWNrZWQgPSBwLmluQXJyYXkocChhKS52YWwoKSwgYikgPj0gMCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB2YXIgViA9IC9eKD86dGV4dGFyZWF8aW5wdXR8c2VsZWN0KSQvaSxcbiAgICAgICAgVyA9IC9eKFteXFwuXSp8KSg/OlxcLiguKyl8KSQvLFxuICAgICAgICBYID0gLyg/Ol58XFxzKWhvdmVyKFxcLlxcUyt8KVxcYi8sXG4gICAgICAgIFkgPSAvXmtleS8sXG4gICAgICAgIFogPSAvXig/Om1vdXNlfGNvbnRleHRtZW51KXxjbGljay8sXG4gICAgICAgICQgPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG4gICAgICAgIF8gPSBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICByZXR1cm4gcC5ldmVudC5zcGVjaWFsLmhvdmVyXG4gICAgICAgICAgICAgICAgPyBhXG4gICAgICAgICAgICAgICAgOiBhLnJlcGxhY2UoWCwgJ21vdXNlZW50ZXIkMSBtb3VzZWxlYXZlJDEnKTtcbiAgICAgICAgfTtcbiAgICAocC5ldmVudCA9IHtcbiAgICAgICAgYWRkOiBmdW5jdGlvbihhLCBjLCBkLCBlLCBmKSB7XG4gICAgICAgICAgICB2YXIgZywgaCwgaSwgaiwgaywgbCwgbSwgbiwgbywgcSwgcjtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBhLm5vZGVUeXBlID09PSAzIHx8XG4gICAgICAgICAgICAgICAgYS5ub2RlVHlwZSA9PT0gOCB8fFxuICAgICAgICAgICAgICAgICFjIHx8XG4gICAgICAgICAgICAgICAgIWQgfHxcbiAgICAgICAgICAgICAgICAhKGcgPSBwLl9kYXRhKGEpKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGQuaGFuZGxlciAmJiAoKG8gPSBkKSwgKGQgPSBvLmhhbmRsZXIpLCAoZiA9IG8uc2VsZWN0b3IpKSxcbiAgICAgICAgICAgICAgICBkLmd1aWQgfHwgKGQuZ3VpZCA9IHAuZ3VpZCsrKSxcbiAgICAgICAgICAgICAgICAoaSA9IGcuZXZlbnRzKSxcbiAgICAgICAgICAgICAgICBpIHx8IChnLmV2ZW50cyA9IGkgPSB7fSksXG4gICAgICAgICAgICAgICAgKGggPSBnLmhhbmRsZSksXG4gICAgICAgICAgICAgICAgaCB8fFxuICAgICAgICAgICAgICAgICAgICAoKGcuaGFuZGxlID0gaCA9IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgcCAhPSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICghYSB8fCBwLmV2ZW50LnRyaWdnZXJlZCAhPT0gYS50eXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcC5ldmVudC5kaXNwYXRjaC5hcHBseShoLmVsZW0sIGFyZ3VtZW50cylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGI7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAoaC5lbGVtID0gYSkpLFxuICAgICAgICAgICAgICAgIChjID0gcC50cmltKF8oYykpLnNwbGl0KCcgJykpO1xuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAoayA9IFcuZXhlYyhjW2pdKSB8fCBbXSksXG4gICAgICAgICAgICAgICAgICAgIChsID0ga1sxXSksXG4gICAgICAgICAgICAgICAgICAgIChtID0gKGtbMl0gfHwgJycpLnNwbGl0KCcuJykuc29ydCgpKSxcbiAgICAgICAgICAgICAgICAgICAgKHIgPSBwLmV2ZW50LnNwZWNpYWxbbF0gfHwge30pLFxuICAgICAgICAgICAgICAgICAgICAobCA9IChmID8gci5kZWxlZ2F0ZVR5cGUgOiByLmJpbmRUeXBlKSB8fCBsKSxcbiAgICAgICAgICAgICAgICAgICAgKHIgPSBwLmV2ZW50LnNwZWNpYWxbbF0gfHwge30pLFxuICAgICAgICAgICAgICAgICAgICAobiA9IHAuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ1R5cGU6IGtbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGd1aWQ6IGQuZ3VpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkc0NvbnRleHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgJiYgcC5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KGYpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogbS5qb2luKCcuJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgb1xuICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKHEgPSBpW2xdKTtcbiAgICAgICAgICAgICAgICBpZiAoIXEpIHtcbiAgICAgICAgICAgICAgICAgICAgKHEgPSBpW2xdID0gW10pLCAocS5kZWxlZ2F0ZUNvdW50ID0gMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghci5zZXR1cCB8fCByLnNldHVwLmNhbGwoYSwgZSwgbSwgaCkgPT09ICExKVxuICAgICAgICAgICAgICAgICAgICAgICAgYS5hZGRFdmVudExpc3RlbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhLmFkZEV2ZW50TGlzdGVuZXIobCwgaCwgITEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhLmF0dGFjaEV2ZW50ICYmIGEuYXR0YWNoRXZlbnQoJ29uJyArIGwsIGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByLmFkZCAmJlxuICAgICAgICAgICAgICAgICAgICAoci5hZGQuY2FsbChhLCBuKSxcbiAgICAgICAgICAgICAgICAgICAgbi5oYW5kbGVyLmd1aWQgfHwgKG4uaGFuZGxlci5ndWlkID0gZC5ndWlkKSksXG4gICAgICAgICAgICAgICAgICAgIGYgPyBxLnNwbGljZShxLmRlbGVnYXRlQ291bnQrKywgMCwgbikgOiBxLnB1c2gobiksXG4gICAgICAgICAgICAgICAgICAgIChwLmV2ZW50Lmdsb2JhbFtsXSA9ICEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGEgPSBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBnbG9iYWw6IHt9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUpIHtcbiAgICAgICAgICAgIHZhciBmLFxuICAgICAgICAgICAgICAgIGcsXG4gICAgICAgICAgICAgICAgaCxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIGosXG4gICAgICAgICAgICAgICAgayxcbiAgICAgICAgICAgICAgICBsLFxuICAgICAgICAgICAgICAgIG0sXG4gICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgIHEsXG4gICAgICAgICAgICAgICAgciA9IHAuaGFzRGF0YShhKSAmJiBwLl9kYXRhKGEpO1xuICAgICAgICAgICAgaWYgKCFyIHx8ICEobSA9IHIuZXZlbnRzKSkgcmV0dXJuO1xuICAgICAgICAgICAgYiA9IHAudHJpbShfKGIgfHwgJycpKS5zcGxpdCgnICcpO1xuICAgICAgICAgICAgZm9yIChmID0gMDsgZiA8IGIubGVuZ3RoOyBmKyspIHtcbiAgICAgICAgICAgICAgICAoZyA9IFcuZXhlYyhiW2ZdKSB8fCBbXSksIChoID0gaSA9IGdbMV0pLCAoaiA9IGdbMl0pO1xuICAgICAgICAgICAgICAgIGlmICghaCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGggaW4gbSkgcC5ldmVudC5yZW1vdmUoYSwgaCArIGJbZl0sIGMsIGQsICEwKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIChuID0gcC5ldmVudC5zcGVjaWFsW2hdIHx8IHt9KSxcbiAgICAgICAgICAgICAgICAgICAgKGggPSAoZCA/IG4uZGVsZWdhdGVUeXBlIDogbi5iaW5kVHlwZSkgfHwgaCksXG4gICAgICAgICAgICAgICAgICAgIChvID0gbVtoXSB8fCBbXSksXG4gICAgICAgICAgICAgICAgICAgIChrID0gby5sZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICAoaiA9IGpcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcoXnxcXFxcLiknICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdCgnLicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zb3J0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJ1xcXFwuKD86LipcXFxcLnwpJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcoXFxcXC58JCknXG4gICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbCk7XG4gICAgICAgICAgICAgICAgZm9yIChsID0gMDsgbCA8IG8ubGVuZ3RoOyBsKyspXG4gICAgICAgICAgICAgICAgICAgIChxID0gb1tsXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZSB8fCBpID09PSBxLm9yaWdUeXBlKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICghYyB8fCBjLmd1aWQgPT09IHEuZ3VpZCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIWogfHwgai50ZXN0KHEubmFtZXNwYWNlKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIWQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9PT0gcS5zZWxlY3RvciB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZCA9PT0gJyoqJyAmJiBxLnNlbGVjdG9yKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoby5zcGxpY2UobC0tLCAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxLnNlbGVjdG9yICYmIG8uZGVsZWdhdGVDb3VudC0tLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ucmVtb3ZlICYmIG4ucmVtb3ZlLmNhbGwoYSwgcSkpO1xuICAgICAgICAgICAgICAgIG8ubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGsgIT09IG8ubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICgoIW4udGVhcmRvd24gfHwgbi50ZWFyZG93bi5jYWxsKGEsIGosIHIuaGFuZGxlKSA9PT0gITEpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBwLnJlbW92ZUV2ZW50KGEsIGgsIHIuaGFuZGxlKSxcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1baF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcC5pc0VtcHR5T2JqZWN0KG0pICYmXG4gICAgICAgICAgICAgICAgKGRlbGV0ZSByLmhhbmRsZSwgcC5yZW1vdmVEYXRhKGEsICdldmVudHMnLCAhMCkpO1xuICAgICAgICB9LFxuICAgICAgICBjdXN0b21FdmVudDogeyBnZXREYXRhOiAhMCwgc2V0RGF0YTogITAsIGNoYW5nZURhdGE6ICEwIH0sXG4gICAgICAgIHRyaWdnZXI6IGZ1bmN0aW9uKGMsIGQsIGYsIGcpIHtcbiAgICAgICAgICAgIGlmICghZiB8fCAoZi5ub2RlVHlwZSAhPT0gMyAmJiBmLm5vZGVUeXBlICE9PSA4KSkge1xuICAgICAgICAgICAgICAgIHZhciBoLFxuICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICBqLFxuICAgICAgICAgICAgICAgICAgICBrLFxuICAgICAgICAgICAgICAgICAgICBsLFxuICAgICAgICAgICAgICAgICAgICBtLFxuICAgICAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgICAgICBxLFxuICAgICAgICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICAgICAgICBzID0gYy50eXBlIHx8IGMsXG4gICAgICAgICAgICAgICAgICAgIHQgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoJC50ZXN0KHMgKyBwLmV2ZW50LnRyaWdnZXJlZCkpIHJldHVybjtcbiAgICAgICAgICAgICAgICBzLmluZGV4T2YoJyEnKSA+PSAwICYmICgocyA9IHMuc2xpY2UoMCwgLTEpKSwgKGkgPSAhMCkpLFxuICAgICAgICAgICAgICAgICAgICBzLmluZGV4T2YoJy4nKSA+PSAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoKHQgPSBzLnNwbGl0KCcuJykpLCAocyA9IHQuc2hpZnQoKSksIHQuc29ydCgpKTtcbiAgICAgICAgICAgICAgICBpZiAoKCFmIHx8IHAuZXZlbnQuY3VzdG9tRXZlbnRbc10pICYmICFwLmV2ZW50Lmdsb2JhbFtzXSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIChjID1cbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGMgPT0gJ29iamVjdCdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gY1twLmV4cGFuZG9dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXcgcC5FdmVudChzLCBjKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXcgcC5FdmVudChzKSksXG4gICAgICAgICAgICAgICAgICAgIChjLnR5cGUgPSBzKSxcbiAgICAgICAgICAgICAgICAgICAgKGMuaXNUcmlnZ2VyID0gITApLFxuICAgICAgICAgICAgICAgICAgICAoYy5leGNsdXNpdmUgPSBpKSxcbiAgICAgICAgICAgICAgICAgICAgKGMubmFtZXNwYWNlID0gdC5qb2luKCcuJykpLFxuICAgICAgICAgICAgICAgICAgICAoYy5uYW1lc3BhY2VfcmUgPSBjLm5hbWVzcGFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyhefFxcXFwuKScgKyB0LmpvaW4oJ1xcXFwuKD86LipcXFxcLnwpJykgKyAnKFxcXFwufCQpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAobSA9IHMuaW5kZXhPZignOicpIDwgMCA/ICdvbicgKyBzIDogJycpO1xuICAgICAgICAgICAgICAgIGlmICghZikge1xuICAgICAgICAgICAgICAgICAgICBoID0gcC5jYWNoZTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChqIGluIGgpXG4gICAgICAgICAgICAgICAgICAgICAgICBoW2pdLmV2ZW50cyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhbal0uZXZlbnRzW3NdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5ldmVudC50cmlnZ2VyKGMsIGQsIGhbal0uaGFuZGxlLmVsZW0sICEwKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAoYy5yZXN1bHQgPSBiKSxcbiAgICAgICAgICAgICAgICAgICAgYy50YXJnZXQgfHwgKGMudGFyZ2V0ID0gZiksXG4gICAgICAgICAgICAgICAgICAgIChkID0gZCAhPSBudWxsID8gcC5tYWtlQXJyYXkoZCkgOiBbXSksXG4gICAgICAgICAgICAgICAgICAgIGQudW5zaGlmdChjKSxcbiAgICAgICAgICAgICAgICAgICAgKG4gPSBwLmV2ZW50LnNwZWNpYWxbc10gfHwge30pO1xuICAgICAgICAgICAgICAgIGlmIChuLnRyaWdnZXIgJiYgbi50cmlnZ2VyLmFwcGx5KGYsIGQpID09PSAhMSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHEgPSBbW2YsIG4uYmluZFR5cGUgfHwgc11dO1xuICAgICAgICAgICAgICAgIGlmICghZyAmJiAhbi5ub0J1YmJsZSAmJiAhcC5pc1dpbmRvdyhmKSkge1xuICAgICAgICAgICAgICAgICAgICAociA9IG4uZGVsZWdhdGVUeXBlIHx8IHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGsgPSAkLnRlc3QociArIHMpID8gZiA6IGYucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobCA9IGY7IGs7IGsgPSBrLnBhcmVudE5vZGUpIHEucHVzaChbaywgcl0pLCAobCA9IGspO1xuICAgICAgICAgICAgICAgICAgICBsID09PSAoZi5vd25lckRvY3VtZW50IHx8IGUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBxLnB1c2goW2wuZGVmYXVsdFZpZXcgfHwgbC5wYXJlbnRXaW5kb3cgfHwgYSwgcl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgcS5sZW5ndGggJiYgIWMuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTsgaisrKVxuICAgICAgICAgICAgICAgICAgICAoayA9IHFbal1bMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGMudHlwZSA9IHFbal1bMV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgKG8gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwLl9kYXRhKGssICdldmVudHMnKSB8fCB7fSlbYy50eXBlXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuX2RhdGEoaywgJ2hhbmRsZScpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gJiYgby5hcHBseShrLCBkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChvID0gbSAmJiBrW21dKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmFjY2VwdERhdGEoaykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLmFwcGx5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgby5hcHBseShrLCBkKSA9PT0gITEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgKGMudHlwZSA9IHMpLFxuICAgICAgICAgICAgICAgICAgICAhZyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIWMuaXNEZWZhdWx0UHJldmVudGVkKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICghbi5fZGVmYXVsdCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uX2RlZmF1bHQuYXBwbHkoZi5vd25lckRvY3VtZW50LCBkKSA9PT0gITEpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAocyAhPT0gJ2NsaWNrJyB8fCAhcC5ub2RlTmFtZShmLCAnYScpKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgcC5hY2NlcHREYXRhKGYpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBtICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBmW3NdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoKHMgIT09ICdmb2N1cycgJiYgcyAhPT0gJ2JsdXInKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMudGFyZ2V0Lm9mZnNldFdpZHRoICE9PSAwKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIXAuaXNXaW5kb3coZikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICgobCA9IGZbbV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbCAmJiAoZlttXSA9IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHAuZXZlbnQudHJpZ2dlcmVkID0gcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBmW3NdKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAocC5ldmVudC50cmlnZ2VyZWQgPSBiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGwgJiYgKGZbbV0gPSBsKSksXG4gICAgICAgICAgICAgICAgICAgIGMucmVzdWx0XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgIGMgPSBwLmV2ZW50LmZpeChjIHx8IGEuZXZlbnQpO1xuICAgICAgICAgICAgdmFyIGQsXG4gICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgIGcsXG4gICAgICAgICAgICAgICAgaCxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIGosXG4gICAgICAgICAgICAgICAgbCxcbiAgICAgICAgICAgICAgICBtLFxuICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgbyA9IChwLl9kYXRhKHRoaXMsICdldmVudHMnKSB8fCB7fSlbYy50eXBlXSB8fCBbXSxcbiAgICAgICAgICAgICAgICBxID0gby5kZWxlZ2F0ZUNvdW50LFxuICAgICAgICAgICAgICAgIHIgPSBrLmNhbGwoYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICBzID0gIWMuZXhjbHVzaXZlICYmICFjLm5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICB0ID0gcC5ldmVudC5zcGVjaWFsW2MudHlwZV0gfHwge30sXG4gICAgICAgICAgICAgICAgdSA9IFtdO1xuICAgICAgICAgICAgKHJbMF0gPSBjKSwgKGMuZGVsZWdhdGVUYXJnZXQgPSB0aGlzKTtcbiAgICAgICAgICAgIGlmICh0LnByZURpc3BhdGNoICYmIHQucHJlRGlzcGF0Y2guY2FsbCh0aGlzLCBjKSA9PT0gITEpIHJldHVybjtcbiAgICAgICAgICAgIGlmIChxICYmICghYy5idXR0b24gfHwgYy50eXBlICE9PSAnY2xpY2snKSlcbiAgICAgICAgICAgICAgICBmb3IgKGYgPSBjLnRhcmdldDsgZiAhPSB0aGlzOyBmID0gZi5wYXJlbnROb2RlIHx8IHRoaXMpXG4gICAgICAgICAgICAgICAgICAgIGlmIChmLmRpc2FibGVkICE9PSAhMCB8fCBjLnR5cGUgIT09ICdjbGljaycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIChoID0ge30pLCAoaiA9IFtdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZCA9IDA7IGQgPCBxOyBkKyspXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwgPSBvW2RdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0gPSBsLnNlbGVjdG9yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaFttXSA9PT0gYiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhbbV0gPSBsLm5lZWRzQ29udGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcChtLCB0aGlzKS5pbmRleChmKSA+PSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBwLmZpbmQobSwgdGhpcywgbnVsbCwgW2ZdKS5sZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoW21dICYmIGoucHVzaChsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGoubGVuZ3RoICYmIHUucHVzaCh7IGVsZW06IGYsIG1hdGNoZXM6IGogfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG8ubGVuZ3RoID4gcSAmJiB1LnB1c2goeyBlbGVtOiB0aGlzLCBtYXRjaGVzOiBvLnNsaWNlKHEpIH0pO1xuICAgICAgICAgICAgZm9yIChkID0gMDsgZCA8IHUubGVuZ3RoICYmICFjLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7IGQrKykge1xuICAgICAgICAgICAgICAgIChpID0gdVtkXSksIChjLmN1cnJlbnRUYXJnZXQgPSBpLmVsZW0pO1xuICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgIGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICBlIDwgaS5tYXRjaGVzLmxlbmd0aCAmJiAhYy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpO1xuICAgICAgICAgICAgICAgICAgICBlKytcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgbCA9IGkubWF0Y2hlc1tlXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgcyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKCFjLm5hbWVzcGFjZSAmJiAhbC5uYW1lc3BhY2UpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoYy5uYW1lc3BhY2VfcmUgJiYgYy5uYW1lc3BhY2VfcmUudGVzdChsLm5hbWVzcGFjZSkpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIChjLmRhdGEgPSBsLmRhdGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjLmhhbmRsZU9iaiA9IGwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChnID0gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocC5ldmVudC5zcGVjaWFsW2wub3JpZ1R5cGVdIHx8IHt9KS5oYW5kbGUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbC5oYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5hcHBseShpLmVsZW0sIHIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnICE9PSBiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoYy5yZXN1bHQgPSBnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZyA9PT0gITEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjLnByZXZlbnREZWZhdWx0KCksIGMuc3RvcFByb3BhZ2F0aW9uKCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdC5wb3N0RGlzcGF0Y2ggJiYgdC5wb3N0RGlzcGF0Y2guY2FsbCh0aGlzLCBjKSwgYy5yZXN1bHQ7XG4gICAgICAgIH0sXG4gICAgICAgIHByb3BzOiAnYXR0ckNoYW5nZSBhdHRyTmFtZSByZWxhdGVkTm9kZSBzcmNFbGVtZW50IGFsdEtleSBidWJibGVzIGNhbmNlbGFibGUgY3RybEtleSBjdXJyZW50VGFyZ2V0IGV2ZW50UGhhc2UgbWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaCcuc3BsaXQoXG4gICAgICAgICAgICAnICdcbiAgICAgICAgKSxcbiAgICAgICAgZml4SG9va3M6IHt9LFxuICAgICAgICBrZXlIb29rczoge1xuICAgICAgICAgICAgcHJvcHM6ICdjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlJy5zcGxpdCgnICcpLFxuICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgYS53aGljaCA9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoYS53aGljaCA9IGIuY2hhckNvZGUgIT0gbnVsbCA/IGIuY2hhckNvZGUgOiBiLmtleUNvZGUpLFxuICAgICAgICAgICAgICAgICAgICBhXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIG1vdXNlSG9va3M6IHtcbiAgICAgICAgICAgIHByb3BzOiAnYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIGZyb21FbGVtZW50IG9mZnNldFggb2Zmc2V0WSBwYWdlWCBwYWdlWSBzY3JlZW5YIHNjcmVlblkgdG9FbGVtZW50Jy5zcGxpdChcbiAgICAgICAgICAgICAgICAnICdcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uKGEsIGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCxcbiAgICAgICAgICAgICAgICAgICAgZixcbiAgICAgICAgICAgICAgICAgICAgZyxcbiAgICAgICAgICAgICAgICAgICAgaCA9IGMuYnV0dG9uLFxuICAgICAgICAgICAgICAgICAgICBpID0gYy5mcm9tRWxlbWVudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBhLnBhZ2VYID09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuY2xpZW50WCAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoKGQgPSBhLnRhcmdldC5vd25lckRvY3VtZW50IHx8IGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGYgPSBkLmRvY3VtZW50RWxlbWVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZyA9IGQuYm9keSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoYS5wYWdlWCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5jbGllbnRYICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGYgJiYgZi5zY3JvbGxMZWZ0KSB8fCAoZyAmJiBnLnNjcm9sbExlZnQpIHx8IDApIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGYgJiYgZi5jbGllbnRMZWZ0KSB8fCAoZyAmJiBnLmNsaWVudExlZnQpIHx8IDApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChhLnBhZ2VZID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmNsaWVudFkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoZiAmJiBmLnNjcm9sbFRvcCkgfHwgKGcgJiYgZy5zY3JvbGxUb3ApIHx8IDApIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGYgJiYgZi5jbGllbnRUb3ApIHx8IChnICYmIGcuY2xpZW50VG9wKSB8fCAwKSkpLFxuICAgICAgICAgICAgICAgICAgICAhYS5yZWxhdGVkVGFyZ2V0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoYS5yZWxhdGVkVGFyZ2V0ID0gaSA9PT0gYS50YXJnZXQgPyBjLnRvRWxlbWVudCA6IGkpLFxuICAgICAgICAgICAgICAgICAgICAhYS53aGljaCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgaCAhPT0gYiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKGEud2hpY2ggPSBoICYgMSA/IDEgOiBoICYgMiA/IDMgOiBoICYgNCA/IDIgOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgYVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBmaXg6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIGlmIChhW3AuZXhwYW5kb10pIHJldHVybiBhO1xuICAgICAgICAgICAgdmFyIGIsXG4gICAgICAgICAgICAgICAgYyxcbiAgICAgICAgICAgICAgICBkID0gYSxcbiAgICAgICAgICAgICAgICBmID0gcC5ldmVudC5maXhIb29rc1thLnR5cGVdIHx8IHt9LFxuICAgICAgICAgICAgICAgIGcgPSBmLnByb3BzID8gdGhpcy5wcm9wcy5jb25jYXQoZi5wcm9wcykgOiB0aGlzLnByb3BzO1xuICAgICAgICAgICAgYSA9IHAuRXZlbnQoZCk7XG4gICAgICAgICAgICBmb3IgKGIgPSBnLmxlbmd0aDsgYjsgKSAoYyA9IGdbLS1iXSksIChhW2NdID0gZFtjXSk7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIGEudGFyZ2V0IHx8IChhLnRhcmdldCA9IGQuc3JjRWxlbWVudCB8fCBlKSxcbiAgICAgICAgICAgICAgICBhLnRhcmdldC5ub2RlVHlwZSA9PT0gMyAmJiAoYS50YXJnZXQgPSBhLnRhcmdldC5wYXJlbnROb2RlKSxcbiAgICAgICAgICAgICAgICAoYS5tZXRhS2V5ID0gISFhLm1ldGFLZXkpLFxuICAgICAgICAgICAgICAgIGYuZmlsdGVyID8gZi5maWx0ZXIoYSwgZCkgOiBhXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBzcGVjaWFsOiB7XG4gICAgICAgICAgICBsb2FkOiB7IG5vQnViYmxlOiAhMCB9LFxuICAgICAgICAgICAgZm9jdXM6IHsgZGVsZWdhdGVUeXBlOiAnZm9jdXNpbicgfSxcbiAgICAgICAgICAgIGJsdXI6IHsgZGVsZWdhdGVUeXBlOiAnZm9jdXNvdXQnIH0sXG4gICAgICAgICAgICBiZWZvcmV1bmxvYWQ6IHtcbiAgICAgICAgICAgICAgICBzZXR1cDogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgICAgICBwLmlzV2luZG93KHRoaXMpICYmICh0aGlzLm9uYmVmb3JldW5sb2FkID0gYyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0ZWFyZG93bjogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uYmVmb3JldW5sb2FkID09PSBiICYmICh0aGlzLm9uYmVmb3JldW5sb2FkID0gbnVsbCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHNpbXVsYXRlOiBmdW5jdGlvbihhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICB2YXIgZSA9IHAuZXh0ZW5kKG5ldyBwLkV2ZW50KCksIGMsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBhLFxuICAgICAgICAgICAgICAgIGlzU2ltdWxhdGVkOiAhMCxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiB7fSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZCA/IHAuZXZlbnQudHJpZ2dlcihlLCBudWxsLCBiKSA6IHAuZXZlbnQuZGlzcGF0Y2guY2FsbChiLCBlKSxcbiAgICAgICAgICAgICAgICBlLmlzRGVmYXVsdFByZXZlbnRlZCgpICYmIGMucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSxcbiAgICB9KSxcbiAgICAgICAgKHAuZXZlbnQuaGFuZGxlID0gcC5ldmVudC5kaXNwYXRjaCksXG4gICAgICAgIChwLnJlbW92ZUV2ZW50ID0gZS5yZW1vdmVFdmVudExpc3RlbmVyXG4gICAgICAgICAgICA/IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgICAgIGEucmVtb3ZlRXZlbnRMaXN0ZW5lciAmJiBhLnJlbW92ZUV2ZW50TGlzdGVuZXIoYiwgYywgITEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBkID0gJ29uJyArIGI7XG4gICAgICAgICAgICAgICAgICBhLmRldGFjaEV2ZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBhW2RdID09ICd1bmRlZmluZWQnICYmIChhW2RdID0gbnVsbCksXG4gICAgICAgICAgICAgICAgICAgICAgYS5kZXRhY2hFdmVudChkLCBjKSk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAocC5FdmVudCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgcC5FdmVudClcbiAgICAgICAgICAgICAgICBhICYmIGEudHlwZVxuICAgICAgICAgICAgICAgICAgICA/ICgodGhpcy5vcmlnaW5hbEV2ZW50ID0gYSksXG4gICAgICAgICAgICAgICAgICAgICAgKHRoaXMudHlwZSA9IGEudHlwZSksXG4gICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgYS5kZWZhdWx0UHJldmVudGVkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEucmV0dXJuVmFsdWUgPT09ICExIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIChhLmdldFByZXZlbnREZWZhdWx0ICYmIGEuZ2V0UHJldmVudERlZmF1bHQoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYmJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYmEpKVxuICAgICAgICAgICAgICAgICAgICA6ICh0aGlzLnR5cGUgPSBhKSxcbiAgICAgICAgICAgICAgICAgICAgYiAmJiBwLmV4dGVuZCh0aGlzLCBiKSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMudGltZVN0YW1wID0gKGEgJiYgYS50aW1lU3RhbXApIHx8IHAubm93KCkpLFxuICAgICAgICAgICAgICAgICAgICAodGhpc1twLmV4cGFuZG9dID0gITApO1xuICAgICAgICAgICAgZWxzZSByZXR1cm4gbmV3IHAuRXZlbnQoYSwgYik7XG4gICAgICAgIH0pLFxuICAgICAgICAocC5FdmVudC5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBiYjtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMub3JpZ2luYWxFdmVudDtcbiAgICAgICAgICAgICAgICBpZiAoIWEpIHJldHVybjtcbiAgICAgICAgICAgICAgICBhLnByZXZlbnREZWZhdWx0ID8gYS5wcmV2ZW50RGVmYXVsdCgpIDogKGEucmV0dXJuVmFsdWUgPSAhMSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gYmI7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKCFhKSByZXR1cm47XG4gICAgICAgICAgICAgICAgYS5zdG9wUHJvcGFnYXRpb24gJiYgYS5zdG9wUHJvcGFnYXRpb24oKSwgKGEuY2FuY2VsQnViYmxlID0gITApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgKHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSBiYiksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNEZWZhdWx0UHJldmVudGVkOiBiYSxcbiAgICAgICAgICAgIGlzUHJvcGFnYXRpb25TdG9wcGVkOiBiYSxcbiAgICAgICAgICAgIGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiBiYSxcbiAgICAgICAgfSksXG4gICAgICAgIHAuZWFjaCh7IG1vdXNlZW50ZXI6ICdtb3VzZW92ZXInLCBtb3VzZWxlYXZlOiAnbW91c2VvdXQnIH0sIGZ1bmN0aW9uKFxuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIGJcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBwLmV2ZW50LnNwZWNpYWxbYV0gPSB7XG4gICAgICAgICAgICAgICAgZGVsZWdhdGVUeXBlOiBiLFxuICAgICAgICAgICAgICAgIGJpbmRUeXBlOiBiLFxuICAgICAgICAgICAgICAgIGhhbmRsZTogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGEucmVsYXRlZFRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBhLmhhbmRsZU9iaixcbiAgICAgICAgICAgICAgICAgICAgICAgIGcgPSBmLnNlbGVjdG9yO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWUgfHwgKGUgIT09IGQgJiYgIXAuY29udGFpbnMoZCwgZSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgKGEudHlwZSA9IGYub3JpZ1R5cGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjID0gZi5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhLnR5cGUgPSBiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICBwLnN1cHBvcnQuc3VibWl0QnViYmxlcyB8fFxuICAgICAgICAgICAgKHAuZXZlbnQuc3BlY2lhbC5zdWJtaXQgPSB7XG4gICAgICAgICAgICAgICAgc2V0dXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocC5ub2RlTmFtZSh0aGlzLCAnZm9ybScpKSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgICAgIHAuZXZlbnQuYWRkKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjbGljay5fc3VibWl0IGtleXByZXNzLl9zdWJtaXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gYS50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5ub2RlTmFtZShjLCAnaW5wdXQnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5ub2RlTmFtZShjLCAnYnV0dG9uJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGMuZm9ybVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFwLl9kYXRhKGQsICdfc3VibWl0X2F0dGFjaGVkJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHAuZXZlbnQuYWRkKGQsICdzdWJtaXQuX3N1Ym1pdCcsIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuX3N1Ym1pdF9idWJibGUgPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuX2RhdGEoZCwgJ19zdWJtaXRfYXR0YWNoZWQnLCAhMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcG9zdERpc3BhdGNoOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgIGEuX3N1Ym1pdF9idWJibGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChkZWxldGUgYS5fc3VibWl0X2J1YmJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Tm9kZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFhLmlzVHJpZ2dlciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuZXZlbnQuc2ltdWxhdGUoJ3N1Ym1pdCcsIHRoaXMucGFyZW50Tm9kZSwgYSwgITApKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRlYXJkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHAubm9kZU5hbWUodGhpcywgJ2Zvcm0nKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICBwLmV2ZW50LnJlbW92ZSh0aGlzLCAnLl9zdWJtaXQnKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgIHAuc3VwcG9ydC5jaGFuZ2VCdWJibGVzIHx8XG4gICAgICAgICAgICAocC5ldmVudC5zcGVjaWFsLmNoYW5nZSA9IHtcbiAgICAgICAgICAgICAgICBzZXR1cDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChWLnRlc3QodGhpcy5ub2RlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdjaGVja2JveCcgfHwgdGhpcy50eXBlID09PSAncmFkaW8nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuZXZlbnQuYWRkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncHJvcGVydHljaGFuZ2UuX2NoYW5nZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEub3JpZ2luYWxFdmVudC5wcm9wZXJ0eU5hbWUgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoZWNrZWQnICYmICh0aGlzLl9qdXN0X2NoYW5nZWQgPSAhMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmV2ZW50LmFkZCh0aGlzLCAnY2xpY2suX2NoYW5nZScsIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2p1c3RfY2hhbmdlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFhLmlzVHJpZ2dlciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLl9qdXN0X2NoYW5nZWQgPSAhMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5ldmVudC5zaW11bGF0ZSgnY2hhbmdlJywgdGhpcywgYSwgITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwLmV2ZW50LmFkZCh0aGlzLCAnYmVmb3JlYWN0aXZhdGUuX2NoYW5nZScsIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gYS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBWLnRlc3QoYi5ub2RlTmFtZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhcC5fZGF0YShiLCAnX2NoYW5nZV9hdHRhY2hlZCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHAuZXZlbnQuYWRkKGIsICdjaGFuZ2UuX2NoYW5nZScsIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhYS5pc1NpbXVsYXRlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWEuaXNUcmlnZ2VyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmV2ZW50LnNpbXVsYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFuZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Tm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICEwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuX2RhdGEoYiwgJ19jaGFuZ2VfYXR0YWNoZWQnLCAhMCkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhhbmRsZTogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IGEudGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzICE9PSBiIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBhLmlzU2ltdWxhdGVkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBhLmlzVHJpZ2dlciB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKGIudHlwZSAhPT0gJ3JhZGlvJyAmJiBiLnR5cGUgIT09ICdjaGVja2JveCcpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBwLmV2ZW50LnJlbW92ZSh0aGlzLCAnLl9jaGFuZ2UnKSwgIVYudGVzdCh0aGlzLm5vZGVOYW1lKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgcC5zdXBwb3J0LmZvY3VzaW5CdWJibGVzIHx8XG4gICAgICAgICAgICBwLmVhY2goeyBmb2N1czogJ2ZvY3VzaW4nLCBibHVyOiAnZm9jdXNvdXQnIH0sIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGQgPSBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwLmV2ZW50LnNpbXVsYXRlKGIsIGEudGFyZ2V0LCBwLmV2ZW50LmZpeChhKSwgITApO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHAuZXZlbnQuc3BlY2lhbFtiXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgc2V0dXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYysrID09PSAwICYmIGUuYWRkRXZlbnRMaXN0ZW5lcihhLCBkLCAhMCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRlYXJkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC0tYyA9PT0gMCAmJiBlLnJlbW92ZUV2ZW50TGlzdGVuZXIoYSwgZCwgITApO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgcC5mbi5leHRlbmQoe1xuICAgICAgICAgICAgb246IGZ1bmN0aW9uKGEsIGMsIGQsIGUsIGYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZywgaDtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGEgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGMgIT0gJ3N0cmluZycgJiYgKChkID0gZCB8fCBjKSwgKGMgPSBiKSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaCBpbiBhKSB0aGlzLm9uKGgsIGMsIGQsIGFbaF0sIGYpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZCA9PSBudWxsICYmIGUgPT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICA/ICgoZSA9IGMpLCAoZCA9IGMgPSBiKSlcbiAgICAgICAgICAgICAgICAgICAgOiBlID09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGMgPT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoKGUgPSBkKSwgKGQgPSBiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoKGUgPSBkKSwgKGQgPSBjKSwgKGMgPSBiKSkpO1xuICAgICAgICAgICAgICAgIGlmIChlID09PSAhMSkgZSA9IGJhO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFlKSByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBmID09PSAxICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoKGcgPSBlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChlID0gZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwKCkub2ZmKGEpLCBnLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLmd1aWQgPSBnLmd1aWQgfHwgKGcuZ3VpZCA9IHAuZ3VpZCsrKSkpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwLmV2ZW50LmFkZCh0aGlzLCBhLCBlLCBkLCBjKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uZTogZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9uKGEsIGIsIGMsIGQsIDEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9mZjogZnVuY3Rpb24oYSwgYywgZCkge1xuICAgICAgICAgICAgICAgIHZhciBlLCBmO1xuICAgICAgICAgICAgICAgIGlmIChhICYmIGEucHJldmVudERlZmF1bHQgJiYgYS5oYW5kbGVPYmopXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAoZSA9IGEuaGFuZGxlT2JqKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHAoYS5kZWxlZ2F0ZVRhcmdldCkub2ZmKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUubmFtZXNwYWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZS5vcmlnVHlwZSArICcuJyArIGUubmFtZXNwYWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZS5vcmlnVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnNlbGVjdG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGEgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChmIGluIGEpIHRoaXMub2ZmKGYsIGMsIGFbZl0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGMgPT09ICExIHx8IHR5cGVvZiBjID09ICdmdW5jdGlvbicpIChkID0gYyksIChjID0gYik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgZCA9PT0gITEgJiYgKGQgPSBiYSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAuZXZlbnQucmVtb3ZlKHRoaXMsIGEsIGQsIGMpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmluZDogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9uKGEsIG51bGwsIGIsIGMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVuYmluZDogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9mZihhLCBudWxsLCBiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaXZlOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHAodGhpcy5jb250ZXh0KS5vbihhLCB0aGlzLnNlbGVjdG9yLCBiLCBjKSwgdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaWU6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcCh0aGlzLmNvbnRleHQpLm9mZihhLCB0aGlzLnNlbGVjdG9yIHx8ICcqKicsIGIpLCB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbihhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub24oYiwgYSwgYywgZCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW5kZWxlZ2F0ZTogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5vZmYoYSwgJyoqJylcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLm9mZihiLCBhIHx8ICcqKicsIGMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRyaWdnZXI6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBwLmV2ZW50LnRyaWdnZXIoYSwgYiwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpc1swXSkgcmV0dXJuIHAuZXZlbnQudHJpZ2dlcihhLCBiLCB0aGlzWzBdLCAhMCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGIgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgICAgIGMgPSBhLmd1aWQgfHwgcC5ndWlkKyssXG4gICAgICAgICAgICAgICAgICAgIGQgPSAwLFxuICAgICAgICAgICAgICAgICAgICBlID0gZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSAocC5fZGF0YSh0aGlzLCAnbGFzdFRvZ2dsZScgKyBhLmd1aWQpIHx8IDApICUgZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5fZGF0YSh0aGlzLCAnbGFzdFRvZ2dsZScgKyBhLmd1aWQsIGUgKyAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnByZXZlbnREZWZhdWx0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYltlXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8ICExXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGUuZ3VpZCA9IGM7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGQgPCBiLmxlbmd0aCkgYltkKytdLmd1aWQgPSBjO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsaWNrKGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhvdmVyOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubW91c2VlbnRlcihhKS5tb3VzZWxlYXZlKGIgfHwgYSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgcC5lYWNoKFxuICAgICAgICAgICAgJ2JsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIGNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnUnLnNwbGl0KFxuICAgICAgICAgICAgICAgICcgJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAocC5mbltiXSA9IGZ1bmN0aW9uKGEsIGMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPT0gbnVsbCAmJiAoKGMgPSBhKSwgKGEgPSBudWxsKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5vbihiLCBudWxsLCBhLCBjKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy50cmlnZ2VyKGIpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIFkudGVzdChiKSAmJiAocC5ldmVudC5maXhIb29rc1tiXSA9IHAuZXZlbnQua2V5SG9va3MpLFxuICAgICAgICAgICAgICAgICAgICBaLnRlc3QoYikgJiYgKHAuZXZlbnQuZml4SG9va3NbYl0gPSBwLmV2ZW50Lm1vdXNlSG9va3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICApLFxuICAgICAgICAoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgZnVuY3Rpb24gYmMoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgICAgIChjID0gYyB8fCBbXSksIChiID0gYiB8fCByKTtcbiAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgZixcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgaixcbiAgICAgICAgICAgICAgICAgICAgayA9IGIubm9kZVR5cGU7XG4gICAgICAgICAgICAgICAgaWYgKCFhIHx8IHR5cGVvZiBhICE9ICdzdHJpbmcnKSByZXR1cm4gYztcbiAgICAgICAgICAgICAgICBpZiAoayAhPT0gMSAmJiBrICE9PSA5KSByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgaSA9IGcoYik7XG4gICAgICAgICAgICAgICAgaWYgKCFpICYmICFkKVxuICAgICAgICAgICAgICAgICAgICBpZiAoKGUgPSBQLmV4ZWMoYSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChqID0gZVsxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoayA9PT0gOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gYi5nZXRFbGVtZW50QnlJZChqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmIHx8ICFmLnBhcmVudE5vZGUpIHJldHVybiBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZi5pZCA9PT0gaikgcmV0dXJuIGMucHVzaChmKSwgYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLm93bmVyRG9jdW1lbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGYgPSBiLm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaikpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgoYiwgZikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZi5pZCA9PT0galxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMucHVzaChmKSwgYztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LmFwcGx5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeC5jYWxsKGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYSksIDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaiA9IGVbM10pICYmIF8gJiYgYi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdy5hcHBseShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHguY2FsbChiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoaiksIDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBicChhLnJlcGxhY2UoTCwgJyQxJyksIGIsIGMsIGQsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYmQoYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjID0gYi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyA9PT0gJ2lucHV0JyAmJiBiLnR5cGUgPT09IGE7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGJlKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjID09PSAnaW5wdXQnIHx8IGMgPT09ICdidXR0b24nKSAmJiBiLnR5cGUgPT09IGE7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGJmKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geihmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAoYiA9ICtiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHooZnVuY3Rpb24oYywgZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gYShbXSwgYy5sZW5ndGgsIGIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gZi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGctLSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY1soZSA9IGZbZ10pXSAmJiAoY1tlXSA9ICEoZFtlXSA9IGNbZV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBiZyhhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgaWYgKGEgPT09IGIpIHJldHVybiBjO1xuICAgICAgICAgICAgICAgIHZhciBkID0gYS5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICB3aGlsZSAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZCA9PT0gYikgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICBkID0gZC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBiaChhLCBiKSB7XG4gICAgICAgICAgICAgICAgdmFyIGMsXG4gICAgICAgICAgICAgICAgICAgIGQsXG4gICAgICAgICAgICAgICAgICAgIGYsXG4gICAgICAgICAgICAgICAgICAgIGcsXG4gICAgICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgIGosXG4gICAgICAgICAgICAgICAgICAgIGsgPSBDW29dW2FdO1xuICAgICAgICAgICAgICAgIGlmIChrKSByZXR1cm4gYiA/IDAgOiBrLnNsaWNlKDApO1xuICAgICAgICAgICAgICAgIChoID0gYSksIChpID0gW10pLCAoaiA9IGUucHJlRmlsdGVyKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWMgfHwgKGQgPSBNLmV4ZWMoaCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgZCAmJiAoaCA9IGguc2xpY2UoZFswXS5sZW5ndGgpKSwgaS5wdXNoKChmID0gW10pKTtcbiAgICAgICAgICAgICAgICAgICAgYyA9ICExO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGQgPSBOLmV4ZWMoaCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgZi5wdXNoKChjID0gbmV3IHEoZC5zaGlmdCgpKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoID0gaC5zbGljZShjLmxlbmd0aCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjLnR5cGUgPSBkWzBdLnJlcGxhY2UoTCwgJyAnKSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoZyBpbiBlLmZpbHRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIChkID0gV1tnXS5leGVjKGgpKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICghaltnXSB8fCAoZCA9IGpbZ10oZCwgciwgITApKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZi5wdXNoKChjID0gbmV3IHEoZC5zaGlmdCgpKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoID0gaC5zbGljZShjLmxlbmd0aCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjLnR5cGUgPSBnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYy5tYXRjaGVzID0gZCkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWMpIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYiA/IGgubGVuZ3RoIDogaCA/IGJjLmVycm9yKGEpIDogQyhhLCBpKS5zbGljZSgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGJpKGEsIGIsIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IGIuZGlyLFxuICAgICAgICAgICAgICAgICAgICBmID0gZCAmJiBiLmRpciA9PT0gJ3BhcmVudE5vZGUnLFxuICAgICAgICAgICAgICAgICAgICBnID0gdSsrO1xuICAgICAgICAgICAgICAgIHJldHVybiBiLmZpcnN0XG4gICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24oYiwgYywgZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGIgPSBiW2VdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmIHx8IGIubm9kZVR5cGUgPT09IDEpIHJldHVybiBhKGIsIGMsIGQpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBmdW5jdGlvbihiLCBkLCBoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaiA9IHQgKyAnICcgKyBnICsgJyAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBqICsgYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgoYiA9IGJbZV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmIHx8IGIubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpID0gYltvXSkgPT09IGspIHJldHVybiBiLnNpenNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGkgPT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuaW5kZXhPZihqKSA9PT0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiLnNpenNldCkgcmV0dXJuIGI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiW29dID0gaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhKGIsIGQsIGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoYi5zaXpzZXQgPSAhMCksIGI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnNpenNldCA9ICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgoYiA9IGJbZV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmIHx8IGIubm9kZVR5cGUgPT09IDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhKGIsIGQsIGgpKSByZXR1cm4gYjtcbiAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYmooYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhLmxlbmd0aCA+IDFcbiAgICAgICAgICAgICAgICAgICAgPyBmdW5jdGlvbihiLCBjLCBkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gYS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChlLS0pIGlmICghYVtlXShiLCBjLCBkKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IGFbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBiayhhLCBiLCBjLCBkLCBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGYsXG4gICAgICAgICAgICAgICAgICAgIGcgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgaCA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgaiA9IGIgIT0gbnVsbDtcbiAgICAgICAgICAgICAgICBmb3IgKDsgaCA8IGk7IGgrKylcbiAgICAgICAgICAgICAgICAgICAgaWYgKChmID0gYVtoXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWMgfHwgYyhmLCBkLCBlKSkgZy5wdXNoKGYpLCBqICYmIGIucHVzaChoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGJsKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBkICYmICFkW29dICYmIChkID0gYmwoZCkpLFxuICAgICAgICAgICAgICAgICAgICBlICYmICFlW29dICYmIChlID0gYmwoZSwgZikpLFxuICAgICAgICAgICAgICAgICAgICB6KGZ1bmN0aW9uKGYsIGcsIGgsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmICYmIGUpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBnLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gZiB8fCBibyhiIHx8ICcqJywgaC5ub2RlVHlwZSA/IFtoXSA6IGgsIFtdLCBmKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxID0gYSAmJiAoZiB8fCAhYikgPyBiayhwLCBtLCBhLCBoLCBpKSA6IHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGMgPyAoZSB8fCAoZiA/IGEgOiBvIHx8IGQpID8gW10gOiBnKSA6IHE7XG4gICAgICAgICAgICAgICAgICAgICAgICBjICYmIGMocSwgciwgaCwgaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsID0gYmsociwgbikpLCBkKGwsIFtdLCBoLCBpKSwgKGogPSBsLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGotLSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChrID0gbFtqXSkpIHJbbltqXV0gPSAhKHFbbltqXV0gPSBrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaiA9IGEgJiYgci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGotLSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChrID0gcltqXSkpIGZbbVtqXV0gPSAhKGdbbVtqXV0gPSBrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAociA9IGJrKHIgPT09IGcgPyByLnNwbGljZShvLCByLmxlbmd0aCkgOiByKSksIGUgPyBlKG51bGwsIGcsIHIsIGkpIDogdy5hcHBseShnLCByKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYm0oYSkge1xuICAgICAgICAgICAgICAgIHZhciBiLFxuICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgICAgICBmID0gYS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIGcgPSBlLnJlbGF0aXZlW2FbMF0udHlwZV0sXG4gICAgICAgICAgICAgICAgICAgIGggPSBnIHx8IGUucmVsYXRpdmVbJyAnXSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IGcgPyAxIDogMCxcbiAgICAgICAgICAgICAgICAgICAgaiA9IGJpKFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhID09PSBiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAhMFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBrID0gYmkoXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkuY2FsbChiLCBhKSA+IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAhMFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBtID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oYSwgYywgZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICghZyAmJiAoZCB8fCBjICE9PSBsKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChiID0gYykubm9kZVR5cGUgPyBqKGEsIGMsIGQpIDogayhhLCBjLCBkKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGY7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgaWYgKChjID0gZS5yZWxhdGl2ZVthW2ldLnR5cGVdKSkgbSA9IFtiaShiaihtKSwgYyldO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBlLmZpbHRlclthW2ldLnR5cGVdLmFwcGx5KG51bGwsIGFbaV0ubWF0Y2hlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY1tvXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSArK2k7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IGQgPCBmOyBkKyspIGlmIChlLnJlbGF0aXZlW2FbZF0udHlwZV0pIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBibChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA+IDEgJiYgYmoobSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPiAxICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKDAsIGkgLSAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKEwsICckMScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpIDwgZCAmJiBibShhLnNsaWNlKGksIGQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA8IGYgJiYgYm0oKGEgPSBhLnNsaWNlKGQpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPCBmICYmIGEuam9pbignJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5wdXNoKGMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJqKG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYm4oYSwgYikge1xuICAgICAgICAgICAgICAgIHZhciBkID0gYi5sZW5ndGggPiAwLFxuICAgICAgICAgICAgICAgICAgICBmID0gYS5sZW5ndGggPiAwLFxuICAgICAgICAgICAgICAgICAgICBnID0gZnVuY3Rpb24oaCwgaSwgaiwgaywgbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gJzAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSBoICYmIFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBtICE9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeiA9IGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGYgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuZmluZC5UQUcoJyonLCAobSAmJiBpLnBhcmVudE5vZGUpIHx8IGkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCID0gKHQgKz0geiA9PSBudWxsID8gMSA6IE1hdGguRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ICYmICgobCA9IGkgIT09IHIgJiYgaSksIChjID0gZy5lbCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IChuID0gQVt1XSkgIT0gbnVsbDsgdSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGYgJiYgbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG8gPSAwOyAocCA9IGFbb10pOyBvKyspXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocChuLCBpLCBqKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsucHVzaChuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSAmJiAoKHQgPSBCKSwgKGMgPSArK2cuZWwpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZCAmJiAoKG4gPSAhcCAmJiBuKSAmJiBzLS0sIGggJiYgeC5wdXNoKG4pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHMgKz0gdTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkICYmIHUgIT09IHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG8gPSAwOyAocCA9IGJbb10pOyBvKyspIHAoeCwgcSwgaSwgaik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMgPiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHUtLSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAheFt1XSAmJiAhcVt1XSAmJiAocVt1XSA9IHYuY2FsbChrKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEgPSBiayhxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy5hcHBseShrLCBxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyArIGIubGVuZ3RoID4gMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmMudW5pcXVlU29ydChrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5ICYmICgodCA9IEIpLCAobCA9IHopKSwgeDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGcuZWwgPSAwKSwgZCA/IHooZykgOiBnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYm8oYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gMCxcbiAgICAgICAgICAgICAgICAgICAgZiA9IGIubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAoOyBlIDwgZjsgZSsrKSBiYyhhLCBiW2VdLCBjLCBkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGJwKGEsIGIsIGMsIGQsIGYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZyxcbiAgICAgICAgICAgICAgICAgICAgaCxcbiAgICAgICAgICAgICAgICAgICAgaixcbiAgICAgICAgICAgICAgICAgICAgayxcbiAgICAgICAgICAgICAgICAgICAgbCxcbiAgICAgICAgICAgICAgICAgICAgbSA9IGJoKGEpLFxuICAgICAgICAgICAgICAgICAgICBuID0gbS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKCFkICYmIG0ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGggPSBtWzBdID0gbVswXS5zbGljZSgwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgaC5sZW5ndGggPiAyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoaiA9IGhbMF0pLnR5cGUgPT09ICdJRCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGIubm9kZVR5cGUgPT09IDkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFmICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnJlbGF0aXZlW2hbMV0udHlwZV1cbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiID0gZS5maW5kLklEKGoubWF0Y2hlc1swXS5yZXBsYWNlKFYsICcnKSwgYiwgZilbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWIpIHJldHVybiBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGEuc2xpY2UoaC5zaGlmdCgpLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm9yIChnID0gVy5QT1MudGVzdChhKSA/IC0xIDogaC5sZW5ndGggLSAxOyBnID49IDA7IGctLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaiA9IGhbZ107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5yZWxhdGl2ZVsoayA9IGoudHlwZSldKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgobCA9IGUuZmluZFtrXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZCA9IGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqLm1hdGNoZXNbMF0ucmVwbGFjZShWLCAnJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoUi50ZXN0KGhbMF0udHlwZSkgJiYgYi5wYXJlbnROb2RlKSB8fCBiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLnNwbGljZShnLCAxKSwgKGEgPSBkLmxlbmd0aCAmJiBoLmpvaW4oJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhKSByZXR1cm4gdy5hcHBseShjLCB4LmNhbGwoZCwgMCkpLCBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkoYSwgbSkoZCwgYiwgZiwgYywgUi50ZXN0KGEpKSwgYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGJxKCkge31cbiAgICAgICAgICAgIHZhciBjLFxuICAgICAgICAgICAgICAgIGQsXG4gICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgIGcsXG4gICAgICAgICAgICAgICAgaCxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIGosXG4gICAgICAgICAgICAgICAgayxcbiAgICAgICAgICAgICAgICBsLFxuICAgICAgICAgICAgICAgIG0gPSAhMCxcbiAgICAgICAgICAgICAgICBuID0gJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgICAgICAgbyA9ICgnc2l6Y2FjaGUnICsgTWF0aC5yYW5kb20oKSkucmVwbGFjZSgnLicsICcnKSxcbiAgICAgICAgICAgICAgICBxID0gU3RyaW5nLFxuICAgICAgICAgICAgICAgIHIgPSBhLmRvY3VtZW50LFxuICAgICAgICAgICAgICAgIHMgPSByLmRvY3VtZW50RWxlbWVudCxcbiAgICAgICAgICAgICAgICB0ID0gMCxcbiAgICAgICAgICAgICAgICB1ID0gMCxcbiAgICAgICAgICAgICAgICB2ID0gW10ucG9wLFxuICAgICAgICAgICAgICAgIHcgPSBbXS5wdXNoLFxuICAgICAgICAgICAgICAgIHggPSBbXS5zbGljZSxcbiAgICAgICAgICAgICAgICB5ID1cbiAgICAgICAgICAgICAgICAgICAgW10uaW5kZXhPZiB8fFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IHRoaXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IGIgPCBjOyBiKyspIGlmICh0aGlzW2JdID09PSBhKSByZXR1cm4gYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB6ID0gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGFbb10gPSBiID09IG51bGwgfHwgYiksIGE7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBBID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBiID0gW107XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB6KGZ1bmN0aW9uKGMsIGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5wdXNoKGMpID4gZS5jYWNoZUxlbmd0aCAmJiBkZWxldGUgYVtiLnNoaWZ0KCldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhW2NdID0gZClcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGEpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgQiA9IEEoKSxcbiAgICAgICAgICAgICAgICBDID0gQSgpLFxuICAgICAgICAgICAgICAgIEQgPSBBKCksXG4gICAgICAgICAgICAgICAgRSA9ICdbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXScsXG4gICAgICAgICAgICAgICAgRiA9ICcoPzpcXFxcXFxcXC58Wy1cXFxcd118W15cXFxceDAwLVxcXFx4YTBdKSsnLFxuICAgICAgICAgICAgICAgIEcgPSBGLnJlcGxhY2UoJ3cnLCAndyMnKSxcbiAgICAgICAgICAgICAgICBIID0gJyhbKl4kfCF+XT89KScsXG4gICAgICAgICAgICAgICAgSSA9XG4gICAgICAgICAgICAgICAgICAgICdcXFxcWycgK1xuICAgICAgICAgICAgICAgICAgICBFICtcbiAgICAgICAgICAgICAgICAgICAgJyooJyArXG4gICAgICAgICAgICAgICAgICAgIEYgK1xuICAgICAgICAgICAgICAgICAgICAnKScgK1xuICAgICAgICAgICAgICAgICAgICBFICtcbiAgICAgICAgICAgICAgICAgICAgJyooPzonICtcbiAgICAgICAgICAgICAgICAgICAgSCArXG4gICAgICAgICAgICAgICAgICAgIEUgK1xuICAgICAgICAgICAgICAgICAgICAnKig/OihbXFwnXCJdKSgoPzpcXFxcXFxcXC58W15cXFxcXFxcXF0pKj8pXFxcXDN8KCcgK1xuICAgICAgICAgICAgICAgICAgICBHICtcbiAgICAgICAgICAgICAgICAgICAgJyl8KXwpJyArXG4gICAgICAgICAgICAgICAgICAgIEUgK1xuICAgICAgICAgICAgICAgICAgICAnKlxcXFxdJyxcbiAgICAgICAgICAgICAgICBKID1cbiAgICAgICAgICAgICAgICAgICAgJzooJyArXG4gICAgICAgICAgICAgICAgICAgIEYgK1xuICAgICAgICAgICAgICAgICAgICAnKSg/OlxcXFwoKD86KFtcXCdcIl0pKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXSkqPylcXFxcMnwoW14oKVtcXFxcXV0qfCg/Oig/OicgK1xuICAgICAgICAgICAgICAgICAgICBJICtcbiAgICAgICAgICAgICAgICAgICAgJyl8W146XXxcXFxcXFxcXC4pKnwuKikpXFxcXCl8KScsXG4gICAgICAgICAgICAgICAgSyA9XG4gICAgICAgICAgICAgICAgICAgICc6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoJyArXG4gICAgICAgICAgICAgICAgICAgIEUgK1xuICAgICAgICAgICAgICAgICAgICAnKigoPzotXFxcXGQpP1xcXFxkKiknICtcbiAgICAgICAgICAgICAgICAgICAgRSArXG4gICAgICAgICAgICAgICAgICAgICcqXFxcXCl8KSg/PVteLV18JCknLFxuICAgICAgICAgICAgICAgIEwgPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyBFICsgJyt8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopJyArIEUgKyAnKyQnLFxuICAgICAgICAgICAgICAgICAgICAnZydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIE0gPSBuZXcgUmVnRXhwKCdeJyArIEUgKyAnKiwnICsgRSArICcqJyksXG4gICAgICAgICAgICAgICAgTiA9IG5ldyBSZWdFeHAoJ14nICsgRSArICcqKFtcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGY+K35dKScgKyBFICsgJyonKSxcbiAgICAgICAgICAgICAgICBPID0gbmV3IFJlZ0V4cChKKSxcbiAgICAgICAgICAgICAgICBQID0gL14oPzojKFtcXHdcXC1dKyl8KFxcdyspfFxcLihbXFx3XFwtXSspKSQvLFxuICAgICAgICAgICAgICAgIFEgPSAvXjpub3QvLFxuICAgICAgICAgICAgICAgIFIgPSAvW1xceDIwXFx0XFxyXFxuXFxmXSpbK35dLyxcbiAgICAgICAgICAgICAgICBTID0gLzpub3RcXCgkLyxcbiAgICAgICAgICAgICAgICBUID0gL2hcXGQvaSxcbiAgICAgICAgICAgICAgICBVID0gL2lucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24vaSxcbiAgICAgICAgICAgICAgICBWID0gL1xcXFwoPyFcXFxcKS9nLFxuICAgICAgICAgICAgICAgIFcgPSB7XG4gICAgICAgICAgICAgICAgICAgIElEOiBuZXcgUmVnRXhwKCdeIygnICsgRiArICcpJyksXG4gICAgICAgICAgICAgICAgICAgIENMQVNTOiBuZXcgUmVnRXhwKCdeXFxcXC4oJyArIEYgKyAnKScpLFxuICAgICAgICAgICAgICAgICAgICBOQU1FOiBuZXcgUmVnRXhwKCdeXFxcXFtuYW1lPVtcXCdcIl0/KCcgKyBGICsgJylbXFwnXCJdP1xcXFxdJyksXG4gICAgICAgICAgICAgICAgICAgIFRBRzogbmV3IFJlZ0V4cCgnXignICsgRi5yZXBsYWNlKCd3JywgJ3cqJykgKyAnKScpLFxuICAgICAgICAgICAgICAgICAgICBBVFRSOiBuZXcgUmVnRXhwKCdeJyArIEkpLFxuICAgICAgICAgICAgICAgICAgICBQU0VVRE86IG5ldyBSZWdFeHAoJ14nICsgSiksXG4gICAgICAgICAgICAgICAgICAgIFBPUzogbmV3IFJlZ0V4cChLLCAnaScpLFxuICAgICAgICAgICAgICAgICAgICBDSElMRDogbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgICAgICdeOihvbmx5fG50aHxmaXJzdHxsYXN0KS1jaGlsZCg/OlxcXFwoJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcqKD86KFsrLV18KScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcqKFxcXFxkKyl8KSknICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnKlxcXFwpfCknLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIG5lZWRzQ29udGV4dDogbmV3IFJlZ0V4cCgnXicgKyBFICsgJypbPit+XXwnICsgSywgJ2knKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFggPSBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiID0gci5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhKGIpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgWSA9IFgoZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgYS5hcHBlbmRDaGlsZChyLmNyZWF0ZUNvbW1lbnQoJycpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICFhLmdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJykubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgWiA9IFgoZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgKGEuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYS5maXJzdENoaWxkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGEuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUgIT09IG4gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCdocmVmJykgPT09ICcjJ1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICQgPSBYKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgYS5pbm5lckhUTUwgPSAnPHNlbGVjdD48L3NlbGVjdD4nO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IHR5cGVvZiBhLmxhc3RDaGlsZC5nZXRBdHRyaWJ1dGUoJ211bHRpcGxlJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiICE9PSAnYm9vbGVhbicgJiYgYiAhPT0gJ3N0cmluZyc7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgXyA9IFgoZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgKGEuaW5uZXJIVE1MID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIjxkaXYgY2xhc3M9J2hpZGRlbiBlJz48L2Rpdj48ZGl2IGNsYXNzPSdoaWRkZW4nPjwvZGl2PlwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICFhLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICFhLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2UnKS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICExXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoKGEubGFzdENoaWxkLmNsYXNzTmFtZSA9ICdlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2UnKS5sZW5ndGggPT09IDIpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgYmEgPSBYKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgKGEuaWQgPSBvICsgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoYS5pbm5lckhUTUwgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiPGEgbmFtZT0nXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiJz48L2E+PGRpdiBuYW1lPSdcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCInPjwvZGl2PlwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuaW5zZXJ0QmVmb3JlKGEsIHMuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHIuZ2V0RWxlbWVudHNCeU5hbWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuZ2V0RWxlbWVudHNCeU5hbWUobykubGVuZ3RoID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIgKyByLmdldEVsZW1lbnRzQnlOYW1lKG8gKyAwKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoZCA9ICFyLmdldEVsZW1lbnRCeUlkKG8pKSwgcy5yZW1vdmVDaGlsZChhKSwgYjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgeC5jYWxsKHMuY2hpbGROb2RlcywgMClbMF0ubm9kZVR5cGU7XG4gICAgICAgICAgICB9IGNhdGNoIChiYikge1xuICAgICAgICAgICAgICAgIHggPSBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgKGIgPSB0aGlzW2FdKTsgYSsrKSBjLnB1c2goYik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoYmMubWF0Y2hlcyA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYmMoYSwgbnVsbCwgbnVsbCwgYik7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAoYmMubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmMoYiwgbnVsbCwgbnVsbCwgW2FdKS5sZW5ndGggPiAwO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIChmID0gYmMuZ2V0VGV4dCA9IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjID0gJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBhLm5vZGVUeXBlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgPT09IDEgfHwgZSA9PT0gOSB8fCBlID09PSAxMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYS50ZXh0Q29udGVudCA9PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChhID0gYS5maXJzdENoaWxkOyBhOyBhID0gYS5uZXh0U2libGluZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyArPSBmKGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlID09PSAzIHx8IGUgPT09IDQpIHJldHVybiBhLm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGZvciAoOyAoYiA9IGFbZF0pOyBkKyspIGMgKz0gZihiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgKGcgPSBiYy5pc1hNTCA9IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBhICYmIChhLm93bmVyRG9jdW1lbnQgfHwgYSkuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYiA/IGIubm9kZU5hbWUgIT09ICdIVE1MJyA6ICExO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIChoID0gYmMuY29udGFpbnMgPSBzLmNvbnRhaW5zXG4gICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gYiAmJiBiLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID09PSBkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhIShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5ub2RlVHlwZSA9PT0gMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuY29udGFpbnMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmNvbnRhaW5zKGQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IHMuY29tcGFyZURvY3VtZW50UG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIgJiYgISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSAmIDE2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGIgPSBiLnBhcmVudE5vZGUpKSBpZiAoYiA9PT0gYSkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAoYmMuYXR0ciA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGMsXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gZyhhKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgfHwgKGIgPSBiLnRvTG93ZXJDYXNlKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGMgPSBlLmF0dHJIYW5kbGVbYl0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjKGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkIHx8ICRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhLmdldEF0dHJpYnV0ZShiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgoYyA9IGEuZ2V0QXR0cmlidXRlTm9kZShiKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHR5cGVvZiBhW2JdID09ICdib29sZWFuJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhW2JdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGMuc3BlY2lmaWVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbClcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAoZSA9IGJjLnNlbGVjdG9ycyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVMZW5ndGg6IDUwLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVQc2V1ZG86IHosXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoOiBXLFxuICAgICAgICAgICAgICAgICAgICBhdHRySGFuZGxlOiBaXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHt9XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5nZXRBdHRyaWJ1dGUoJ2hyZWYnLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEuZ2V0QXR0cmlidXRlKCd0eXBlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmaW5kOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBJRDogZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYi5nZXRFbGVtZW50QnlJZCAhPT0gbiAmJiAhYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGIuZ2V0RWxlbWVudEJ5SWQoYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkICYmIGQucGFyZW50Tm9kZSA/IFtkXSA6IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGEsIGMsIGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGMuZ2V0RWxlbWVudEJ5SWQgIT09IG4gJiYgIWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBjLmdldEVsZW1lbnRCeUlkKGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlLmlkID09PSBhIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBuICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmdldEF0dHJpYnV0ZU5vZGUoJ2lkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudmFsdWUgPT09IGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBbZV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFRBRzogWVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYi5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBiLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhID09PSAnKicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IChkID0gY1tmXSk7IGYrKylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQubm9kZVR5cGUgPT09IDEgJiYgZS5wdXNoKGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgTkFNRTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBiLmdldEVsZW1lbnRzQnlOYW1lICE9PSBuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIuZ2V0RWxlbWVudHNCeU5hbWUobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIENMQVNTOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBuICYmICFjKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgJz4nOiB7IGRpcjogJ3BhcmVudE5vZGUnLCBmaXJzdDogITAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICcgJzogeyBkaXI6ICdwYXJlbnROb2RlJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJysnOiB7IGRpcjogJ3ByZXZpb3VzU2libGluZycsIGZpcnN0OiAhMCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ34nOiB7IGRpcjogJ3ByZXZpb3VzU2libGluZycgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcHJlRmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBVFRSOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFbMV0gPSBhWzFdLnJlcGxhY2UoViwgJycpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFbM10gPSAoYVs0XSB8fCBhWzVdIHx8ICcnKS5yZXBsYWNlKFYsICcnKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbMl0gPT09ICd+PScgJiYgKGFbM10gPSAnICcgKyBhWzNdICsgJyAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5zbGljZSgwLCA0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgQ0hJTEQ6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYVsxXSA9IGFbMV0udG9Mb3dlckNhc2UoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbMV0gPT09ICdudGgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChhWzJdIHx8IGJjLmVycm9yKGFbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYVszXSA9ICsoYVszXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhWzRdICsgKGFbNV0gfHwgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMiAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhWzJdID09PSAnZXZlbicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbMl0gPT09ICdvZGQnKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYVs0XSA9ICsoYVs2XSArIGFbN10gfHwgYVsyXSA9PT0gJ29kZCcpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYVsyXSAmJiBiYy5lcnJvcihhWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUFNFVURPOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIsIGM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFcuQ0hJTEQudGVzdChhWzBdKSkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFbM10pIGFbMl0gPSBhWzNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChiID0gYVs0XSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE8udGVzdChiKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMgPSBiaChiLCAhMCkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5pbmRleE9mKCcpJywgYi5sZW5ndGggLSBjKSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5sZW5ndGgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGIgPSBiLnNsaWNlKDAsIGMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhWzBdID0gYVswXS5zbGljZSgwLCBjKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFbMl0gPSBiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5zbGljZSgwLCAzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgSUQ6IGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYSA9IGEucmVwbGFjZShWLCAnJykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYi5nZXRBdHRyaWJ1dGUoJ2lkJykgPT09IGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhID0gYS5yZXBsYWNlKFYsICcnKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYi5nZXRBdHRyaWJ1dGVOb2RlICE9PSBuICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5nZXRBdHRyaWJ1dGVOb2RlKCdpZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMgJiYgYy52YWx1ZSA9PT0gYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgVEFHOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgPT09ICcqJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgoYSA9IGEucmVwbGFjZShWLCAnJykudG9Mb3dlckNhc2UoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5ub2RlTmFtZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgQ0xBU1M6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IEJbb11bYV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGIgPSBCKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyhefCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnKScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnKCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnfCQpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYi50ZXN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuY2xhc3NOYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgYS5nZXRBdHRyaWJ1dGUgIT09IG4gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuZ2V0QXR0cmlidXRlKCdjbGFzcycpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgQVRUUjogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihkLCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmID0gYmMuYXR0cihkLCBhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYgPT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBiID09PSAnIT0nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICgoZiArPSAnJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID09PSAnPSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGYgPT09IGNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09ICchPSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBmICE9PSBjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gJ149J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjICYmIGYuaW5kZXhPZihjKSA9PT0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAnKj0nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLmluZGV4T2YoYykgPiAtMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gJyQ9J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLnN1YnN0cihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZi5sZW5ndGggLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApID09PSBjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gJ349J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5pbmRleE9mKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApID4gLTFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gJ3w9J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZiA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLnN1YnN0cihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMubGVuZ3RoICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy0nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAhMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgQ0hJTEQ6IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSA9PT0gJ250aCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBhLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjID09PSAxICYmIGQgPT09IDApIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gZi5maXJzdENoaWxkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9IGIubmV4dFNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYi5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhID09PSBiKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlIC09IGQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9PT0gYyB8fCAoZSAlIGMgPT09IDAgJiYgZSAvIGMgPj0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnb25seSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmaXJzdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChjID0gYy5wcmV2aW91c1NpYmxpbmcpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYy5ub2RlVHlwZSA9PT0gMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSA9PT0gJ2ZpcnN0JykgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGFzdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChjID0gYy5uZXh0U2libGluZykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjLm5vZGVUeXBlID09PSAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUFNFVURPOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wc2V1ZG9zW2FdIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnNldEZpbHRlcnNbYS50b0xvd2VyQ2FzZSgpXSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmMuZXJyb3IoJ3Vuc3VwcG9ydGVkIHBzZXVkbzogJyArIGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkW29dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZChiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGQubGVuZ3RoID4gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoKGMgPSBbYSwgYSwgJycsIGJdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8geihmdW5jdGlvbihhLCBjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gZChhLCBiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gZi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZy0tKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlID0geS5jYWxsKGEsIGZbZ10pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFbZV0gPSAhKGNbZV0gPSBmW2ddKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkKGEsIDAsIGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcHNldWRvczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm90OiB6KGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBpKGEucmVwbGFjZShMLCAnJDEnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRbb11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB6KGZ1bmN0aW9uKGEsIGIsIGMsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gZChhLCBudWxsLCBlLCBbXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gYS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChoLS0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGYgPSBnW2hdKSkgYVtoXSA9ICEoYltoXSA9IGYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZnVuY3Rpb24oYSwgZSwgZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGJbMF0gPSBhKSwgZChiLCBudWxsLCBmLCBjKSwgIWMucG9wKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXM6IHooZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiYyhhLCBiKS5sZW5ndGggPiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zOiB6KGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIudGV4dENvbnRlbnQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLmlubmVyVGV4dCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYoYilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkuaW5kZXhPZihhKSA+IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLmRpc2FibGVkID09PSAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLmRpc2FibGVkID09PSAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGIgPT09ICdpbnB1dCcgJiYgISFhLmNoZWNrZWQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChiID09PSAnb3B0aW9uJyAmJiAhIWEuc2VsZWN0ZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEucGFyZW50Tm9kZSAmJiBhLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5zZWxlY3RlZCA9PT0gITBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhZS5wc2V1ZG9zLmVtcHR5KGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtcHR5OiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGEuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLm5vZGVOYW1lID4gJ0AnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYiA9IGEubm9kZVR5cGUpID09PSAzIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID09PSA0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGEubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXI6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVC50ZXN0KGEubm9kZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiwgYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGIgPSBhLnR5cGUpID09PSAndGV4dCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChjID0gYS5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSkgPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy50b0xvd2VyQ2FzZSgpID09PSBiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaW86IGJkKCdyYWRpbycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3g6IGJkKCdjaGVja2JveCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZTogYmQoJ2ZpbGUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBiZCgncGFzc3dvcmQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiBiZCgnaW1hZ2UnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdDogYmUoJ3N1Ym1pdCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXQ6IGJlKCdyZXNldCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGIgPT09ICdpbnB1dCcgJiYgYS50eXBlID09PSAnYnV0dG9uJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9PT0gJ2J1dHRvbidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFUudGVzdChhLm5vZGVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1czogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gYS5vd25lckRvY3VtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPT09IGIuYWN0aXZlRWxlbWVudCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIWIuaGFzRm9jdXMgfHwgYi5oYXNGb2N1cygpKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoISFhLnR5cGUgfHwgISFhLmhyZWYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSA9PT0gYS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3Q6IGJmKGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0OiBiZihmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtiIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVxOiBiZihmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtjIDwgMCA/IGMgKyBiIDogY107XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW46IGJmKGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBkID0gMDsgZCA8IGI7IGQgKz0gMikgYS5wdXNoKGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBvZGQ6IGJmKGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBkID0gMTsgZCA8IGI7IGQgKz0gMikgYS5wdXNoKGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBsdDogYmYoZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGQgPSBjIDwgMCA/IGMgKyBiIDogYzsgLS1kID49IDA7IClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5wdXNoKGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBndDogYmYoZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGQgPSBjIDwgMCA/IGMgKyBiIDogYzsgKytkIDwgYjsgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnB1c2goZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAoaiA9IHMuY29tcGFyZURvY3VtZW50UG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgPyBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhID09PSBiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICgoayA9ICEwKSwgMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKCFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpICYgNClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAxO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhID09PSBiKSByZXR1cm4gKGsgPSAhMCksIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhLnNvdXJjZUluZGV4ICYmIGIuc291cmNlSW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcgPSBhLnBhcmVudE5vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gYi5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnID09PSBoKSByZXR1cm4gYmcoYSwgYik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZykgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWgpIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaSkgZS51bnNoaWZ0KGkpLCAoaSA9IGkucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaSkgZi51bnNoaWZ0KGkpLCAoaSA9IGkucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIChjID0gZS5sZW5ndGgpLCAoZCA9IGYubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjICYmIGogPCBkOyBqKyspXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZVtqXSAhPT0gZltqXSkgcmV0dXJuIGJnKGVbal0sIGZbal0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaiA9PT0gYyA/IGJnKGEsIGZbal0sIC0xKSA6IGJnKGVbal0sIGIsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIFswLCAwXS5zb3J0KGopLFxuICAgICAgICAgICAgICAgIChtID0gIWspLFxuICAgICAgICAgICAgICAgIChiYy51bmlxdWVTb3J0ID0gZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYixcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSAxO1xuICAgICAgICAgICAgICAgICAgICAoayA9IG0pLCBhLnNvcnQoaik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrKVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IChiID0gYVtjXSk7IGMrKylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID09PSBhW2MgLSAxXSAmJiBhLnNwbGljZShjLS0sIDEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAoYmMuZXJyb3IgPSBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICdTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiAnICsgYVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIChpID0gYmMuY29tcGlsZSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGMsXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmID0gRFtvXVthXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiIHx8IChiID0gYmgoYSkpLCAoYyA9IGIubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChjLS0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGYgPSBibShiW2NdKSksIGZbb10gPyBkLnB1c2goZikgOiBlLnB1c2goZik7XG4gICAgICAgICAgICAgICAgICAgICAgICBmID0gRChhLCBibihlLCBkKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgci5xdWVyeVNlbGVjdG9yQWxsICYmXG4gICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBicCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gLyd8XFxcXC9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSAvXFw9W1xceDIwXFx0XFxyXFxuXFxmXSooW14nXCJcXF1dKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcXS9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBbJzpmb2N1cyddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBbJzphY3RpdmUnLCAnOmZvY3VzJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMubWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMub01hdGNoZXNTZWxlY3RvciB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLm1zTWF0Y2hlc1NlbGVjdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgWChmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGEuaW5uZXJIVE1MID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI8c2VsZWN0PjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tzZWxlY3RlZF0nKS5sZW5ndGggfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXFxcXFsnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcqKD86Y2hlY2tlZHxkaXNhYmxlZHxpc21hcHxtdWx0aXBsZXxyZWFkb25seXxzZWxlY3RlZHx2YWx1ZSknXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnF1ZXJ5U2VsZWN0b3JBbGwoJzpjaGVja2VkJykubGVuZ3RoIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnB1c2goJzpjaGVja2VkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBYKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGEuaW5uZXJIVE1MID0gXCI8cCB0ZXN0PScnPjwvcD5cIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbdGVzdF49JyddXCIpLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaCgnWypeJF09JyArIEUgKyAnKig/OlwiXCJ8XFwnXFwnKScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGEuaW5uZXJIVE1MID0gXCI8aW5wdXQgdHlwZT0naGlkZGVuJy8+XCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5xdWVyeVNlbGVjdG9yQWxsKCc6ZW5hYmxlZCcpLmxlbmd0aCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaCgnOmVuYWJsZWQnLCAnOmRpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUgPSBuZXcgUmVnRXhwKGUuam9pbignfCcpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGJwID0gZnVuY3Rpb24oYSwgZCwgZiwgZywgaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWcgJiYgIWggJiYgKCFlIHx8ICFlLnRlc3QoYSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSAhMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gZC5ub2RlVHlwZSA9PT0gOSAmJiBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQubm9kZVR5cGUgPT09IDEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdvYmplY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaSA9IGJoKGEpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGsgPSBkLmdldEF0dHJpYnV0ZSgnaWQnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKGwgPSBrLnJlcGxhY2UoYywgJ1xcXFwkJicpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkLnNldEF0dHJpYnV0ZSgnaWQnLCBsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwgPSBcIltpZD0nXCIgKyBsICsgXCInXSBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChqID0gaS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChqLS0pIGlbal0gPSBsICsgaVtqXS5qb2luKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobSA9IChSLnRlc3QoYSkgJiYgZC5wYXJlbnROb2RlKSB8fCBkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG4gPSBpLmpvaW4oJywnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdy5hcHBseShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHguY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5xdWVyeVNlbGVjdG9yQWxsKG4pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayB8fCBkLnJlbW92ZUF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIoYSwgZCwgZiwgZywgaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoWChmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gaC5jYWxsKGIsICdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaC5jYWxsKGIsIFwiW3Rlc3QhPScnXTpzaXp6bGVcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYucHVzaCgnIT0nLCBKKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGMpIHt9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZiA9IG5ldyBSZWdFeHAoZi5qb2luKCd8JykpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGJjLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKGIsIGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBjLnJlcGxhY2UoZCwgXCI9JyQxJ11cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWcoYikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhZi50ZXN0KGMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCFlIHx8ICFlLnRlc3QoYykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBoLmNhbGwoYiwgYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChiLmRvY3VtZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGopIHt9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmMoYywgbnVsbCwgbnVsbCwgW2JdKS5sZW5ndGggPiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKCksXG4gICAgICAgICAgICAgICAgKGUucHNldWRvcy5udGggPSBlLnBzZXVkb3MuZXEpLFxuICAgICAgICAgICAgICAgIChlLmZpbHRlcnMgPSBicS5wcm90b3R5cGUgPSBlLnBzZXVkb3MpLFxuICAgICAgICAgICAgICAgIChlLnNldEZpbHRlcnMgPSBuZXcgYnEoKSksXG4gICAgICAgICAgICAgICAgKGJjLmF0dHIgPSBwLmF0dHIpLFxuICAgICAgICAgICAgICAgIChwLmZpbmQgPSBiYyksXG4gICAgICAgICAgICAgICAgKHAuZXhwciA9IGJjLnNlbGVjdG9ycyksXG4gICAgICAgICAgICAgICAgKHAuZXhwclsnOiddID0gcC5leHByLnBzZXVkb3MpLFxuICAgICAgICAgICAgICAgIChwLnVuaXF1ZSA9IGJjLnVuaXF1ZVNvcnQpLFxuICAgICAgICAgICAgICAgIChwLnRleHQgPSBiYy5nZXRUZXh0KSxcbiAgICAgICAgICAgICAgICAocC5pc1hNTERvYyA9IGJjLmlzWE1MKSxcbiAgICAgICAgICAgICAgICAocC5jb250YWlucyA9IGJjLmNvbnRhaW5zKTtcbiAgICAgICAgfSkoYSk7XG4gICAgdmFyIGJjID0gL1VudGlsJC8sXG4gICAgICAgIGJkID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG4gICAgICAgIGJlID0gL14uW146I1xcW1xcLixdKiQvLFxuICAgICAgICBiZiA9IHAuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQsXG4gICAgICAgIGJnID0geyBjaGlsZHJlbjogITAsIGNvbnRlbnRzOiAhMCwgbmV4dDogITAsIHByZXY6ICEwIH07XG4gICAgcC5mbi5leHRlbmQoe1xuICAgICAgICBmaW5kOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICB2YXIgYixcbiAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgIGQsXG4gICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgIGcsXG4gICAgICAgICAgICAgICAgaCA9IHRoaXM7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGEgIT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHAoYSkuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGIgPSAwLCBjID0gaC5sZW5ndGg7IGIgPCBjOyBiKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocC5jb250YWlucyhoW2JdLCB0aGlzKSkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZyA9IHRoaXMucHVzaFN0YWNrKCcnLCAnZmluZCcsIGEpO1xuICAgICAgICAgICAgZm9yIChiID0gMCwgYyA9IHRoaXMubGVuZ3RoOyBiIDwgYzsgYisrKSB7XG4gICAgICAgICAgICAgICAgKGQgPSBnLmxlbmd0aCksIHAuZmluZChhLCB0aGlzW2JdLCBnKTtcbiAgICAgICAgICAgICAgICBpZiAoYiA+IDApXG4gICAgICAgICAgICAgICAgICAgIGZvciAoZSA9IGQ7IGUgPCBnLmxlbmd0aDsgZSsrKVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChmID0gMDsgZiA8IGQ7IGYrKylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ1tmXSA9PT0gZ1tlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnLnNwbGljZShlLS0sIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZztcbiAgICAgICAgfSxcbiAgICAgICAgaGFzOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICB2YXIgYixcbiAgICAgICAgICAgICAgICBjID0gcChhLCB0aGlzKSxcbiAgICAgICAgICAgICAgICBkID0gYy5sZW5ndGg7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZm9yIChiID0gMDsgYiA8IGQ7IGIrKykgaWYgKHAuY29udGFpbnModGhpcywgY1tiXSkpIHJldHVybiAhMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBub3Q6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayhiaih0aGlzLCBhLCAhMSksICdub3QnLCBhKTtcbiAgICAgICAgfSxcbiAgICAgICAgZmlsdGVyOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soYmoodGhpcywgYSwgITApLCAnZmlsdGVyJywgYSk7XG4gICAgICAgIH0sXG4gICAgICAgIGlzOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICEhYSAmJlxuICAgICAgICAgICAgICAgICh0eXBlb2YgYSA9PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICA/IGJmLnRlc3QoYSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcChhLCB0aGlzLmNvbnRleHQpLmluZGV4KHRoaXNbMF0pID49IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcC5maWx0ZXIoYSwgdGhpcykubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZmlsdGVyKGEpLmxlbmd0aCA+IDApXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBjbG9zZXN0OiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICB2YXIgYyxcbiAgICAgICAgICAgICAgICBkID0gMCxcbiAgICAgICAgICAgICAgICBlID0gdGhpcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgZiA9IFtdLFxuICAgICAgICAgICAgICAgIGcgPVxuICAgICAgICAgICAgICAgICAgICBiZi50ZXN0KGEpIHx8IHR5cGVvZiBhICE9ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHAoYSwgYiB8fCB0aGlzLmNvbnRleHQpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgICAgICBmb3IgKDsgZCA8IGU7IGQrKykge1xuICAgICAgICAgICAgICAgIGMgPSB0aGlzW2RdO1xuICAgICAgICAgICAgICAgIHdoaWxlIChjICYmIGMub3duZXJEb2N1bWVudCAmJiBjICE9PSBiICYmIGMubm9kZVR5cGUgIT09IDExKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnID8gZy5pbmRleChjKSA+IC0xIDogcC5maW5kLm1hdGNoZXNTZWxlY3RvcihjLCBhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZi5wdXNoKGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYyA9IGMucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIChmID0gZi5sZW5ndGggPiAxID8gcC51bmlxdWUoZikgOiBmKSxcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2hTdGFjayhmLCAnY2xvc2VzdCcsIGEpXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBpbmRleDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgcmV0dXJuIGFcbiAgICAgICAgICAgICAgICA/IHR5cGVvZiBhID09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgID8gcC5pbkFycmF5KHRoaXNbMF0sIHAoYSkpXG4gICAgICAgICAgICAgICAgICAgIDogcC5pbkFycmF5KGEuanF1ZXJ5ID8gYVswXSA6IGEsIHRoaXMpXG4gICAgICAgICAgICAgICAgOiB0aGlzWzBdICYmIHRoaXNbMF0ucGFyZW50Tm9kZVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMucHJldkFsbCgpLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICA6IC0xO1xuICAgICAgICB9LFxuICAgICAgICBhZGQ6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHZhciBjID1cbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGEgPT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcChhLCBiKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBwLm1ha2VBcnJheShhICYmIGEubm9kZVR5cGUgPyBbYV0gOiBhKSxcbiAgICAgICAgICAgICAgICBkID0gcC5tZXJnZSh0aGlzLmdldCgpLCBjKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayhiaChjWzBdKSB8fCBiaChkWzBdKSA/IGQgOiBwLnVuaXF1ZShkKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFkZEJhY2s6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZChcbiAgICAgICAgICAgICAgICBhID09IG51bGwgPyB0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKGEpXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgIH0pLFxuICAgICAgICAocC5mbi5hbmRTZWxmID0gcC5mbi5hZGRCYWNrKSxcbiAgICAgICAgcC5lYWNoKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhcmVudDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IGEucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIgJiYgYi5ub2RlVHlwZSAhPT0gMTEgPyBiIDogbnVsbDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBhcmVudHM6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAuZGlyKGEsICdwYXJlbnROb2RlJyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAuZGlyKGEsICdwYXJlbnROb2RlJywgYyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiaShhLCAnbmV4dFNpYmxpbmcnKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHByZXY6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJpKGEsICdwcmV2aW91c1NpYmxpbmcnKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG5leHRBbGw6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAuZGlyKGEsICduZXh0U2libGluZycpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcHJldkFsbDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcC5kaXIoYSwgJ3ByZXZpb3VzU2libGluZycpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbmV4dFVudGlsOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwLmRpcihhLCAnbmV4dFNpYmxpbmcnLCBjKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHByZXZVbnRpbDogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcC5kaXIoYSwgJ3ByZXZpb3VzU2libGluZycsIGMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2libGluZ3M6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAuc2libGluZygoYS5wYXJlbnROb2RlIHx8IHt9KS5maXJzdENoaWxkLCBhKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwLnNpYmxpbmcoYS5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbnRlbnRzOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwLm5vZGVOYW1lKGEsICdpZnJhbWUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBhLmNvbnRlbnREb2N1bWVudCB8fCBhLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcC5tZXJnZShbXSwgYS5jaGlsZE5vZGVzKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICBwLmZuW2FdID0gZnVuY3Rpb24oYywgZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHAubWFwKHRoaXMsIGIsIGMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgYmMudGVzdChhKSB8fCAoZCA9IGMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZCAmJiB0eXBlb2YgZCA9PSAnc3RyaW5nJyAmJiAoZSA9IHAuZmlsdGVyKGQsIGUpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChlID0gdGhpcy5sZW5ndGggPiAxICYmICFiZ1thXSA/IHAudW5pcXVlKGUpIDogZSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxlbmd0aCA+IDEgJiYgYmQudGVzdChhKSAmJiAoZSA9IGUucmV2ZXJzZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaFN0YWNrKGUsIGEsIGsuY2FsbChhcmd1bWVudHMpLmpvaW4oJywnKSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICApLFxuICAgICAgICBwLmV4dGVuZCh7XG4gICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBjICYmIChhID0gJzpub3QoJyArIGEgKyAnKScpLFxuICAgICAgICAgICAgICAgICAgICBiLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBwLmZpbmQubWF0Y2hlc1NlbGVjdG9yKGJbMF0sIGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBbYlswXV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHAuZmluZC5tYXRjaGVzKGEsIGIpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaXI6IGZ1bmN0aW9uKGEsIGMsIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBmID0gYVtjXTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgICAgICAgICAgIGYgJiZcbiAgICAgICAgICAgICAgICAgICAgZi5ub2RlVHlwZSAhPT0gOSAmJlxuICAgICAgICAgICAgICAgICAgICAoZCA9PT0gYiB8fCBmLm5vZGVUeXBlICE9PSAxIHx8ICFwKGYpLmlzKGQpKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgZi5ub2RlVHlwZSA9PT0gMSAmJiBlLnB1c2goZiksIChmID0gZltjXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2libGluZzogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgIHZhciBjID0gW107XG4gICAgICAgICAgICAgICAgZm9yICg7IGE7IGEgPSBhLm5leHRTaWJsaW5nKVxuICAgICAgICAgICAgICAgICAgICBhLm5vZGVUeXBlID09PSAxICYmIGEgIT09IGIgJiYgYy5wdXNoKGEpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgdmFyIGJsID1cbiAgICAgICAgICAgICdhYmJyfGFydGljbGV8YXNpZGV8YXVkaW98YmRpfGNhbnZhc3xkYXRhfGRhdGFsaXN0fGRldGFpbHN8ZmlnY2FwdGlvbnxmaWd1cmV8Zm9vdGVyfGhlYWRlcnxoZ3JvdXB8bWFya3xtZXRlcnxuYXZ8b3V0cHV0fHByb2dyZXNzfHNlY3Rpb258c3VtbWFyeXx0aW1lfHZpZGVvJyxcbiAgICAgICAgYm0gPSAvIGpRdWVyeVxcZCs9XCIoPzpudWxsfFxcZCspXCIvZyxcbiAgICAgICAgYm4gPSAvXlxccysvLFxuICAgICAgICBibyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6XSspW14+XSopXFwvPi9naSxcbiAgICAgICAgYnAgPSAvPChbXFx3Ol0rKS8sXG4gICAgICAgIGJxID0gLzx0Ym9keS9pLFxuICAgICAgICBiciA9IC88fCYjP1xcdys7LyxcbiAgICAgICAgYnMgPSAvPCg/OnNjcmlwdHxzdHlsZXxsaW5rKS9pLFxuICAgICAgICBidCA9IC88KD86c2NyaXB0fG9iamVjdHxlbWJlZHxvcHRpb258c3R5bGUpL2ksXG4gICAgICAgIGJ1ID0gbmV3IFJlZ0V4cCgnPCg/OicgKyBibCArICcpW1xcXFxzLz5dJywgJ2knKSxcbiAgICAgICAgYnYgPSAvXig/OmNoZWNrYm94fHJhZGlvKSQvLFxuICAgICAgICBidyA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG4gICAgICAgIGJ4ID0gL1xcLyhqYXZhfGVjbWEpc2NyaXB0L2ksXG4gICAgICAgIGJ5ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3xcXC1cXC0pfFtcXF1cXC1dezJ9PlxccyokL2csXG4gICAgICAgIGJ6ID0ge1xuICAgICAgICAgICAgb3B0aW9uOiBbMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsICc8L3NlbGVjdD4nXSxcbiAgICAgICAgICAgIGxlZ2VuZDogWzEsICc8ZmllbGRzZXQ+JywgJzwvZmllbGRzZXQ+J10sXG4gICAgICAgICAgICB0aGVhZDogWzEsICc8dGFibGU+JywgJzwvdGFibGU+J10sXG4gICAgICAgICAgICB0cjogWzIsICc8dGFibGU+PHRib2R5PicsICc8L3Rib2R5PjwvdGFibGU+J10sXG4gICAgICAgICAgICB0ZDogWzMsICc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+J10sXG4gICAgICAgICAgICBjb2w6IFsyLCAnPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAgICAgICAgICAgYXJlYTogWzEsICc8bWFwPicsICc8L21hcD4nXSxcbiAgICAgICAgICAgIF9kZWZhdWx0OiBbMCwgJycsICcnXSxcbiAgICAgICAgfSxcbiAgICAgICAgYkEgPSBiayhlKSxcbiAgICAgICAgYkIgPSBiQS5hcHBlbmRDaGlsZChlLmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcbiAgICAoYnoub3B0Z3JvdXAgPSBiei5vcHRpb24pLFxuICAgICAgICAoYnoudGJvZHkgPSBiei50Zm9vdCA9IGJ6LmNvbGdyb3VwID0gYnouY2FwdGlvbiA9IGJ6LnRoZWFkKSxcbiAgICAgICAgKGJ6LnRoID0gYnoudGQpLFxuICAgICAgICBwLnN1cHBvcnQuaHRtbFNlcmlhbGl6ZSB8fCAoYnouX2RlZmF1bHQgPSBbMSwgJ1g8ZGl2PicsICc8L2Rpdj4nXSksXG4gICAgICAgIHAuZm4uZXh0ZW5kKHtcbiAgICAgICAgICAgIHRleHQ6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcC5hY2Nlc3MoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhID09PSBiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBwLnRleHQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZW1wdHkoKS5hcHBlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpc1swXSAmJiB0aGlzWzBdLm93bmVyRG9jdW1lbnQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLmNyZWF0ZVRleHROb2RlKGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3cmFwQWxsOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgaWYgKHAuaXNGdW5jdGlvbihhKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwKHRoaXMpLndyYXBBbGwoYS5jYWxsKHRoaXMsIGIpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBwKGEsIHRoaXNbMF0ub3duZXJEb2N1bWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lcSgwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNsb25lKCEwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1swXS5wYXJlbnROb2RlICYmIGIuaW5zZXJ0QmVmb3JlKHRoaXNbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgYlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5maXJzdENoaWxkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmZpcnN0Q2hpbGQubm9kZVR5cGUgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGEuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3cmFwSW5uZXI6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcC5pc0Z1bmN0aW9uKGEpXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5lYWNoKGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcCh0aGlzKS53cmFwSW5uZXIoYS5jYWxsKHRoaXMsIGIpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBwKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGIuY29udGVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYy5sZW5ndGggPyBjLndyYXBBbGwoYSkgOiBiLmFwcGVuZChhKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3cmFwOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGIgPSBwLmlzRnVuY3Rpb24oYSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICAgICAgICAgIHAodGhpcykud3JhcEFsbChiID8gYS5jYWxsKHRoaXMsIGMpIDogYSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW53cmFwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQoKVxuICAgICAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAubm9kZU5hbWUodGhpcywgJ2JvZHknKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAodGhpcykucmVwbGFjZVdpdGgodGhpcy5jaGlsZE5vZGVzKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVuZCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFwcGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLCAhMCwgZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoYSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJlcGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLCAhMCwgZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0QmVmb3JlKGEsIHRoaXMuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmVmb3JlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWJoKHRoaXNbMF0pKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsICExLCBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHAuY2xlYW4oYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuICAgICAgICAgICAgICAgICAgICAgICAgcC5tZXJnZShhLCB0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdiZWZvcmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RvclxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhZnRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFiaCh0aGlzWzBdKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLCAhMSwgZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCB0aGlzLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBwLmNsZWFuKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayhcbiAgICAgICAgICAgICAgICAgICAgICAgIHAubWVyZ2UodGhpcywgYSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnYWZ0ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RvclxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYyxcbiAgICAgICAgICAgICAgICAgICAgZCA9IDA7XG4gICAgICAgICAgICAgICAgZm9yICg7IChjID0gdGhpc1tkXSkgIT0gbnVsbDsgZCsrKVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWEgfHwgcC5maWx0ZXIoYSwgW2NdKS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAhYiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMubm9kZVR5cGUgPT09IDEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocC5jbGVhbkRhdGEoYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmNsZWFuRGF0YShbY10pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnBhcmVudE5vZGUgJiYgYy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgICAgICAgICAgYiA9IDA7XG4gICAgICAgICAgICAgICAgZm9yICg7IChhID0gdGhpc1tiXSkgIT0gbnVsbDsgYisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGEubm9kZVR5cGUgPT09IDEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHAuY2xlYW5EYXRhKGEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKSk7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChhLmZpcnN0Q2hpbGQpIGEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xvbmU6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAoYSA9IGEgPT0gbnVsbCA/ICExIDogYSksXG4gICAgICAgICAgICAgICAgICAgIChiID0gYiA9PSBudWxsID8gYSA6IGIpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwLmNsb25lKHRoaXMsIGEsIGIpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaHRtbDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwLmFjY2VzcyhcbiAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSB0aGlzWzBdIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhID09PSBiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjLm5vZGVUeXBlID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYy5pbm5lckhUTUwucmVwbGFjZShibSwgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYSA9PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFicy50ZXN0KGEpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHAuc3VwcG9ydC5odG1sU2VyaWFsaXplIHx8ICFidS50ZXN0KGEpKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwLnN1cHBvcnQubGVhZGluZ1doaXRlc3BhY2UgfHwgIWJuLnRlc3QoYSkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIWJ6WyhicC5leGVjKGEpIHx8IFsnJywgJyddKVsxXS50b0xvd2VyQ2FzZSgpXVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGEucmVwbGFjZShibywgJzwkMT48LyQyPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBkIDwgZTsgZCsrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMgPSB0aGlzW2RdIHx8IHt9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLm5vZGVUeXBlID09PSAxICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwLmNsZWFuRGF0YShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYy5pbm5lckhUTUwgPSBhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGYpIHt9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjICYmIHRoaXMuZW1wdHkoKS5hcHBlbmQoYSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcGxhY2VXaXRoOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJoKHRoaXNbMF0pXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5wdXNoU3RhY2soXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwKHAuaXNGdW5jdGlvbihhKSA/IGEoKSA6IGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlcGxhY2VXaXRoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzXG4gICAgICAgICAgICAgICAgICAgIDogcC5pc0Z1bmN0aW9uKGEpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuZWFjaChmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IHAodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGMuaHRtbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5yZXBsYWNlV2l0aChhLmNhbGwodGhpcywgYiwgZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAodHlwZW9mIGEgIT0gJ3N0cmluZycgJiYgKGEgPSBwKGEpLmRldGFjaCgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSB0aGlzLm5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwKHRoaXMpLnJlbW92ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPyBwKGIpLmJlZm9yZShhKSA6IHAoYykuYXBwZW5kKGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGV0YWNoOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlKGEsICEwKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkb21NYW5pcDogZnVuY3Rpb24oYSwgYywgZCkge1xuICAgICAgICAgICAgICAgIGEgPSBbXS5jb25jYXQuYXBwbHkoW10sIGEpO1xuICAgICAgICAgICAgICAgIHZhciBlLFxuICAgICAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgICAgICBnLFxuICAgICAgICAgICAgICAgICAgICBoLFxuICAgICAgICAgICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgICAgICAgICAgaiA9IGFbMF0sXG4gICAgICAgICAgICAgICAgICAgIGsgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IHRoaXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgIXAuc3VwcG9ydC5jaGVja0Nsb25lICYmXG4gICAgICAgICAgICAgICAgICAgIGwgPiAxICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBqID09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIGJ3LnRlc3QoailcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwKHRoaXMpLmRvbU1hbmlwKGEsIGMsIGQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAocC5pc0Z1bmN0aW9uKGopKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmID0gcCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChhWzBdID0gai5jYWxsKHRoaXMsIGUsIGMgPyBmLmh0bWwoKSA6IGIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLmRvbU1hbmlwKGEsIGMsIGQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAodGhpc1swXSkge1xuICAgICAgICAgICAgICAgICAgICAoZSA9IHAuYnVpbGRGcmFnbWVudChhLCB0aGlzLCBrKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZyA9IGUuZnJhZ21lbnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGYgPSBnLmZpcnN0Q2hpbGQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZy5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSAmJiAoZyA9IGYpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGMgJiYgcC5ub2RlTmFtZShmLCAndHInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaCA9IGUuY2FjaGVhYmxlIHx8IGwgLSAxOyBpIDwgbDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyAmJiBwLm5vZGVOYW1lKHRoaXNbaV0sICd0YWJsZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGJDKHRoaXNbaV0sICd0Ym9keScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXNbaV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPT09IGggPyBnIDogcC5jbG9uZShnLCAhMCwgITApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAoZyA9IGYgPSBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGsubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5lYWNoKGssIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5zcmNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcC5hamF4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBwLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYi5zcmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0dFVCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdzY3JpcHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzeW5jOiAhMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWw6ICExLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93czogITAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogcC5lcnJvcignbm8gYWpheCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHAuZ2xvYmFsRXZhbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnRleHQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnRleHRDb250ZW50IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5pbm5lckhUTUwgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5yZXBsYWNlKGJ5LCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIucGFyZW50Tm9kZSAmJiBiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICAgIChwLmJ1aWxkRnJhZ21lbnQgPSBmdW5jdGlvbihhLCBjLCBkKSB7XG4gICAgICAgICAgICB2YXIgZixcbiAgICAgICAgICAgICAgICBnLFxuICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgaSA9IGFbMF07XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIChjID0gYyB8fCBlKSxcbiAgICAgICAgICAgICAgICAoYyA9ICghYy5ub2RlVHlwZSAmJiBjWzBdKSB8fCBjKSxcbiAgICAgICAgICAgICAgICAoYyA9IGMub3duZXJEb2N1bWVudCB8fCBjKSxcbiAgICAgICAgICAgICAgICBhLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaSA9PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICBpLmxlbmd0aCA8IDUxMiAmJlxuICAgICAgICAgICAgICAgICAgICBjID09PSBlICYmXG4gICAgICAgICAgICAgICAgICAgIGkuY2hhckF0KDApID09PSAnPCcgJiZcbiAgICAgICAgICAgICAgICAgICAgIWJ0LnRlc3QoaSkgJiZcbiAgICAgICAgICAgICAgICAgICAgKHAuc3VwcG9ydC5jaGVja0Nsb25lIHx8ICFidy50ZXN0KGkpKSAmJlxuICAgICAgICAgICAgICAgICAgICAocC5zdXBwb3J0Lmh0bWw1Q2xvbmUgfHwgIWJ1LnRlc3QoaSkpICYmXG4gICAgICAgICAgICAgICAgICAgICgoZyA9ICEwKSwgKGYgPSBwLmZyYWdtZW50c1tpXSksIChoID0gZiAhPT0gYikpLFxuICAgICAgICAgICAgICAgIGYgfHxcbiAgICAgICAgICAgICAgICAgICAgKChmID0gYy5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkpLFxuICAgICAgICAgICAgICAgICAgICBwLmNsZWFuKGEsIGMsIGYsIGQpLFxuICAgICAgICAgICAgICAgICAgICBnICYmIChwLmZyYWdtZW50c1tpXSA9IGggJiYgZikpLFxuICAgICAgICAgICAgICAgIHsgZnJhZ21lbnQ6IGYsIGNhY2hlYWJsZTogZyB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9KSxcbiAgICAgICAgKHAuZnJhZ21lbnRzID0ge30pLFxuICAgICAgICBwLmVhY2goXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXBwZW5kVG86ICdhcHBlbmQnLFxuICAgICAgICAgICAgICAgIHByZXBlbmRUbzogJ3ByZXBlbmQnLFxuICAgICAgICAgICAgICAgIGluc2VydEJlZm9yZTogJ2JlZm9yZScsXG4gICAgICAgICAgICAgICAgaW5zZXJ0QWZ0ZXI6ICdhZnRlcicsXG4gICAgICAgICAgICAgICAgcmVwbGFjZUFsbDogJ3JlcGxhY2VXaXRoJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcC5mblthXSA9IGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGcgPSBwKGMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaCA9IGcubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXNbMF0ucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgKGkgPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkubm9kZVR5cGUgPT09IDExICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgaCA9PT0gMVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ1tiXSh0aGlzWzBdKSwgdGhpcztcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IGUgPCBoOyBlKyspXG4gICAgICAgICAgICAgICAgICAgICAgICAoZCA9IChlID4gMCA/IHRoaXMuY2xvbmUoITApIDogdGhpcykuZ2V0KCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAoZ1tlXSlbYl0oZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGYgPSBmLmNvbmNhdChkKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayhmLCBhLCBnLnNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICApLFxuICAgICAgICBwLmV4dGVuZCh7XG4gICAgICAgICAgICBjbG9uZTogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgIHZhciBkLCBlLCBmLCBnO1xuICAgICAgICAgICAgICAgIHAuc3VwcG9ydC5odG1sNUNsb25lIHx8XG4gICAgICAgICAgICAgICAgcC5pc1hNTERvYyhhKSB8fFxuICAgICAgICAgICAgICAgICFidS50ZXN0KCc8JyArIGEubm9kZU5hbWUgKyAnPicpXG4gICAgICAgICAgICAgICAgICAgID8gKGcgPSBhLmNsb25lTm9kZSghMCkpXG4gICAgICAgICAgICAgICAgICAgIDogKChiQi5pbm5lckhUTUwgPSBhLm91dGVySFRNTCksXG4gICAgICAgICAgICAgICAgICAgICAgYkIucmVtb3ZlQ2hpbGQoKGcgPSBiQi5maXJzdENoaWxkKSkpO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgKCFwLnN1cHBvcnQubm9DbG9uZUV2ZW50IHx8ICFwLnN1cHBvcnQubm9DbG9uZUNoZWNrZWQpICYmXG4gICAgICAgICAgICAgICAgICAgIChhLm5vZGVUeXBlID09PSAxIHx8IGEubm9kZVR5cGUgPT09IDExKSAmJlxuICAgICAgICAgICAgICAgICAgICAhcC5pc1hNTERvYyhhKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBiRShhLCBnKSwgKGQgPSBiRihhKSksIChlID0gYkYoZykpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGYgPSAwOyBkW2ZdOyArK2YpIGVbZl0gJiYgYkUoZFtmXSwgZVtmXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChiKSB7XG4gICAgICAgICAgICAgICAgICAgIGJEKGEsIGcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgKGQgPSBiRihhKSksIChlID0gYkYoZykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChmID0gMDsgZFtmXTsgKytmKSBiRChkW2ZdLCBlW2ZdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gKGQgPSBlID0gbnVsbCksIGc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xlYW46IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZixcbiAgICAgICAgICAgICAgICAgICAgZyxcbiAgICAgICAgICAgICAgICAgICAgaCxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgaixcbiAgICAgICAgICAgICAgICAgICAgayxcbiAgICAgICAgICAgICAgICAgICAgbCxcbiAgICAgICAgICAgICAgICAgICAgbSxcbiAgICAgICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICAgICAgcSxcbiAgICAgICAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgICAgICAgcyA9IGIgPT09IGUgJiYgYkEsXG4gICAgICAgICAgICAgICAgICAgIHQgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoIWIgfHwgdHlwZW9mIGIuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCA9PSAndW5kZWZpbmVkJykgYiA9IGU7XG4gICAgICAgICAgICAgICAgZm9yIChmID0gMDsgKGggPSBhW2ZdKSAhPSBudWxsOyBmKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGggPT0gJ251bWJlcicgJiYgKGggKz0gJycpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWgpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGggPT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWJyLnRlc3QoaCkpIGggPSBiLmNyZWF0ZVRleHROb2RlKGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHMgPSBzIHx8IGJrKGIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwgPSBiLmNyZWF0ZUVsZW1lbnQoJ2RpdicpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5hcHBlbmRDaGlsZChsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGggPSBoLnJlcGxhY2UoYm8sICc8JDE+PC8kMj4nKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpID0gKGJwLmV4ZWMoaCkgfHwgWycnLCAnJ10pWzFdLnRvTG93ZXJDYXNlKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaiA9IGJ6W2ldIHx8IGJ6Ll9kZWZhdWx0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGsgPSBqWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwuaW5uZXJIVE1MID0galsxXSArIGggKyBqWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoay0tKSBsID0gbC5sYXN0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwLnN1cHBvcnQudGJvZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0gPSBicS50ZXN0KGgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChuID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID09PSAndGFibGUnICYmICFtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbC5maXJzdENoaWxkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbC5maXJzdENoaWxkLmNoaWxkTm9kZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBqWzFdID09PSAnPHRhYmxlPicgJiYgIW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbC5jaGlsZE5vZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFtdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChnID0gbi5sZW5ndGggLSAxOyBnID49IDA7IC0tZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAubm9kZU5hbWUobltnXSwgJ3Rib2R5JykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhbltnXS5jaGlsZE5vZGVzLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5bZ10ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuW2ddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIXAuc3VwcG9ydC5sZWFkaW5nV2hpdGVzcGFjZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibi50ZXN0KGgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwuaW5zZXJ0QmVmb3JlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5jcmVhdGVUZXh0Tm9kZShibi5leGVjKGgpWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwuZmlyc3RDaGlsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaCA9IGwuY2hpbGROb2RlcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaC5ub2RlVHlwZSA/IHQucHVzaChoKSA6IHAubWVyZ2UodCwgaCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGwgJiYgKGggPSBsID0gcyA9IG51bGwpO1xuICAgICAgICAgICAgICAgIGlmICghcC5zdXBwb3J0LmFwcGVuZENoZWNrZWQpXG4gICAgICAgICAgICAgICAgICAgIGZvciAoZiA9IDA7IChoID0gdFtmXSkgIT0gbnVsbDsgZisrKVxuICAgICAgICAgICAgICAgICAgICAgICAgcC5ub2RlTmFtZShoLCAnaW5wdXQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYkcoaClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHR5cGVvZiBoLmdldEVsZW1lbnRzQnlUYWdOYW1lICE9ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmdyZXAoaC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKSwgYkcpO1xuICAgICAgICAgICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgICAgICAgICAgIHEgPSBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWEudHlwZSB8fCBieC50ZXN0KGEudHlwZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBkLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEucGFyZW50Tm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjLmFwcGVuZENoaWxkKGEpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGYgPSAwOyAoaCA9IHRbZl0pICE9IG51bGw7IGYrKylcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcC5ub2RlTmFtZShoLCAnc2NyaXB0JykgfHwgIXEoaCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5hcHBlbmRDaGlsZChoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGguZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgociA9IHAuZ3JlcChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLm1lcmdlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zcGxpY2UuYXBwbHkodCwgW2YgKyAxLCAwXS5jb25jYXQocikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGYgKz0gci5sZW5ndGgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xlYW5EYXRhOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgdmFyIGMsXG4gICAgICAgICAgICAgICAgICAgIGQsXG4gICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgIGYsXG4gICAgICAgICAgICAgICAgICAgIGcgPSAwLFxuICAgICAgICAgICAgICAgICAgICBoID0gcC5leHBhbmRvLFxuICAgICAgICAgICAgICAgICAgICBpID0gcC5jYWNoZSxcbiAgICAgICAgICAgICAgICAgICAgaiA9IHAuc3VwcG9ydC5kZWxldGVFeHBhbmRvLFxuICAgICAgICAgICAgICAgICAgICBrID0gcC5ldmVudC5zcGVjaWFsO1xuICAgICAgICAgICAgICAgIGZvciAoOyAoZSA9IGFbZ10pICE9IG51bGw7IGcrKylcbiAgICAgICAgICAgICAgICAgICAgaWYgKGIgfHwgcC5hY2NlcHREYXRhKGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoZCA9IGVbaF0pLCAoYyA9IGQgJiYgaVtkXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjLmV2ZW50cylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChmIGluIGMuZXZlbnRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga1tmXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcC5ldmVudC5yZW1vdmUoZSwgZilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHAucmVtb3ZlRXZlbnQoZSwgZiwgYy5oYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlbZF0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlbGV0ZSBpW2RdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGRlbGV0ZSBlW2hdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUucmVtb3ZlQXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlLnJlbW92ZUF0dHJpYnV0ZShoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKGVbaF0gPSBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5kZWxldGVkSWRzLnB1c2goZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGEsIGI7XG4gICAgICAgICAgICAocC51YU1hdGNoID0gZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgIGEgPSBhLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdmFyIGIgPVxuICAgICAgICAgICAgICAgICAgICAvKGNocm9tZSlbIFxcL10oW1xcdy5dKykvLmV4ZWMoYSkgfHxcbiAgICAgICAgICAgICAgICAgICAgLyh3ZWJraXQpWyBcXC9dKFtcXHcuXSspLy5leGVjKGEpIHx8XG4gICAgICAgICAgICAgICAgICAgIC8ob3BlcmEpKD86Lip2ZXJzaW9ufClbIFxcL10oW1xcdy5dKykvLmV4ZWMoYSkgfHxcbiAgICAgICAgICAgICAgICAgICAgLyhtc2llKSAoW1xcdy5dKykvLmV4ZWMoYSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKGEuaW5kZXhPZignY29tcGF0aWJsZScpIDwgMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgLyhtb3ppbGxhKSg/Oi4qPyBydjooW1xcdy5dKyl8KS8uZXhlYyhhKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgW107XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgYnJvd3NlcjogYlsxXSB8fCAnJywgdmVyc2lvbjogYlsyXSB8fCAnMCcgfTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIChhID0gcC51YU1hdGNoKGcudXNlckFnZW50KSksXG4gICAgICAgICAgICAgICAgKGIgPSB7fSksXG4gICAgICAgICAgICAgICAgYS5icm93c2VyICYmICgoYlthLmJyb3dzZXJdID0gITApLCAoYi52ZXJzaW9uID0gYS52ZXJzaW9uKSksXG4gICAgICAgICAgICAgICAgYi5jaHJvbWUgPyAoYi53ZWJraXQgPSAhMCkgOiBiLndlYmtpdCAmJiAoYi5zYWZhcmkgPSAhMCksXG4gICAgICAgICAgICAgICAgKHAuYnJvd3NlciA9IGIpLFxuICAgICAgICAgICAgICAgIChwLnN1YiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBhKGIsIGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgYS5mbi5pbml0KGIsIGMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHAuZXh0ZW5kKCEwLCBhLCB0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChhLnN1cGVyY2xhc3MgPSB0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChhLmZuID0gYS5wcm90b3R5cGUgPSB0aGlzKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGEuZm4uY29uc3RydWN0b3IgPSBhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChhLnN1YiA9IHRoaXMuc3ViKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChhLmZuLmluaXQgPSBmdW5jdGlvbiBjKGMsIGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkIGluc3RhbmNlb2YgcCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIShkIGluc3RhbmNlb2YgYSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkID0gYShkKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuZm4uaW5pdC5jYWxsKHRoaXMsIGMsIGQsIGIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGEuZm4uaW5pdC5wcm90b3R5cGUgPSBhLmZuKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBhKGUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSkoKTtcbiAgICB2YXIgYkgsXG4gICAgICAgIGJJLFxuICAgICAgICBiSixcbiAgICAgICAgYksgPSAvYWxwaGFcXChbXildKlxcKS9pLFxuICAgICAgICBiTCA9IC9vcGFjaXR5PShbXildKikvLFxuICAgICAgICBiTSA9IC9eKHRvcHxyaWdodHxib3R0b218bGVmdCkkLyxcbiAgICAgICAgYk4gPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG4gICAgICAgIGJPID0gL15tYXJnaW4vLFxuICAgICAgICBiUCA9IG5ldyBSZWdFeHAoJ14oJyArIHEgKyAnKSguKikkJywgJ2knKSxcbiAgICAgICAgYlEgPSBuZXcgUmVnRXhwKCdeKCcgKyBxICsgJykoPyFweClbYS16JV0rJCcsICdpJyksXG4gICAgICAgIGJSID0gbmV3IFJlZ0V4cCgnXihbLStdKT0oJyArIHEgKyAnKScsICdpJyksXG4gICAgICAgIGJTID0ge30sXG4gICAgICAgIGJUID0geyBwb3NpdGlvbjogJ2Fic29sdXRlJywgdmlzaWJpbGl0eTogJ2hpZGRlbicsIGRpc3BsYXk6ICdibG9jaycgfSxcbiAgICAgICAgYlUgPSB7IGxldHRlclNwYWNpbmc6IDAsIGZvbnRXZWlnaHQ6IDQwMCB9LFxuICAgICAgICBiViA9IFsnVG9wJywgJ1JpZ2h0JywgJ0JvdHRvbScsICdMZWZ0J10sXG4gICAgICAgIGJXID0gWydXZWJraXQnLCAnTycsICdNb3onLCAnbXMnXSxcbiAgICAgICAgYlggPSBwLmZuLnRvZ2dsZTtcbiAgICBwLmZuLmV4dGVuZCh7XG4gICAgICAgIGNzczogZnVuY3Rpb24oYSwgYykge1xuICAgICAgICAgICAgcmV0dXJuIHAuYWNjZXNzKFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oYSwgYywgZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZCAhPT0gYiA/IHAuc3R5bGUoYSwgYywgZCkgOiBwLmNzcyhhLCBjKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgYyxcbiAgICAgICAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gYiQodGhpcywgITApO1xuICAgICAgICB9LFxuICAgICAgICBoaWRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBiJCh0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICB2YXIgYyA9IHR5cGVvZiBhID09ICdib29sZWFuJztcbiAgICAgICAgICAgIHJldHVybiBwLmlzRnVuY3Rpb24oYSkgJiYgcC5pc0Z1bmN0aW9uKGIpXG4gICAgICAgICAgICAgICAgPyBiWC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgICAgICAgICAgOiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgKGMgPyBhIDogYloodGhpcykpID8gcCh0aGlzKS5zaG93KCkgOiBwKHRoaXMpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH0pLFxuICAgICAgICBwLmV4dGVuZCh7XG4gICAgICAgICAgICBjc3NIb29rczoge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gYkgoYSwgJ29wYWNpdHknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyA9PT0gJycgPyAnMScgOiBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY3NzTnVtYmVyOiB7XG4gICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6ICEwLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICEwLFxuICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6ICEwLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6ICEwLFxuICAgICAgICAgICAgICAgIG9ycGhhbnM6ICEwLFxuICAgICAgICAgICAgICAgIHdpZG93czogITAsXG4gICAgICAgICAgICAgICAgekluZGV4OiAhMCxcbiAgICAgICAgICAgICAgICB6b29tOiAhMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjc3NQcm9wczogeyBmbG9hdDogcC5zdXBwb3J0LmNzc0Zsb2F0ID8gJ2Nzc0Zsb2F0JyA6ICdzdHlsZUZsb2F0JyB9LFxuICAgICAgICAgICAgc3R5bGU6IGZ1bmN0aW9uKGEsIGMsIGQsIGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWEgfHwgYS5ub2RlVHlwZSA9PT0gMyB8fCBhLm5vZGVUeXBlID09PSA4IHx8ICFhLnN0eWxlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgdmFyIGYsXG4gICAgICAgICAgICAgICAgICAgIGcsXG4gICAgICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBwLmNhbWVsQ2FzZShjKSxcbiAgICAgICAgICAgICAgICAgICAgaiA9IGEuc3R5bGU7XG4gICAgICAgICAgICAgICAgKGMgPSBwLmNzc1Byb3BzW2ldIHx8IChwLmNzc1Byb3BzW2ldID0gYlkoaiwgaSkpKSxcbiAgICAgICAgICAgICAgICAgICAgKGggPSBwLmNzc0hvb2tzW2NdIHx8IHAuY3NzSG9va3NbaV0pO1xuICAgICAgICAgICAgICAgIGlmIChkID09PSBiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaCAmJiAnZ2V0JyBpbiBoICYmIChmID0gaC5nZXQoYSwgITEsIGUpKSAhPT0gYlxuICAgICAgICAgICAgICAgICAgICAgICAgPyBmXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGpbY107XG4gICAgICAgICAgICAgICAgKGcgPSB0eXBlb2YgZCksXG4gICAgICAgICAgICAgICAgICAgIGcgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoZiA9IGJSLmV4ZWMoZCkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoKGQgPSAoZlsxXSArIDEpICogZlsyXSArIHBhcnNlRmxvYXQocC5jc3MoYSwgYykpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChnID0gJ251bWJlcicpKTtcbiAgICAgICAgICAgICAgICBpZiAoZCA9PSBudWxsIHx8IChnID09PSAnbnVtYmVyJyAmJiBpc05hTihkKSkpIHJldHVybjtcbiAgICAgICAgICAgICAgICBnID09PSAnbnVtYmVyJyAmJiAhcC5jc3NOdW1iZXJbaV0gJiYgKGQgKz0gJ3B4Jyk7XG4gICAgICAgICAgICAgICAgaWYgKCFoIHx8ICEoJ3NldCcgaW4gaCkgfHwgKGQgPSBoLnNldChhLCBkLCBlKSkgIT09IGIpXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqW2NdID0gZDtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoaykge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjc3M6IGZ1bmN0aW9uKGEsIGMsIGQsIGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZixcbiAgICAgICAgICAgICAgICAgICAgZyxcbiAgICAgICAgICAgICAgICAgICAgaCxcbiAgICAgICAgICAgICAgICAgICAgaSA9IHAuY2FtZWxDYXNlKGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIChjID0gcC5jc3NQcm9wc1tpXSB8fCAocC5jc3NQcm9wc1tpXSA9IGJZKGEuc3R5bGUsIGkpKSksXG4gICAgICAgICAgICAgICAgICAgIChoID0gcC5jc3NIb29rc1tjXSB8fCBwLmNzc0hvb2tzW2ldKSxcbiAgICAgICAgICAgICAgICAgICAgaCAmJiAnZ2V0JyBpbiBoICYmIChmID0gaC5nZXQoYSwgITAsIGUpKSxcbiAgICAgICAgICAgICAgICAgICAgZiA9PT0gYiAmJiAoZiA9IGJIKGEsIGMpKSxcbiAgICAgICAgICAgICAgICAgICAgZiA9PT0gJ25vcm1hbCcgJiYgYyBpbiBiVSAmJiAoZiA9IGJVW2NdKSxcbiAgICAgICAgICAgICAgICAgICAgZCB8fCBlICE9PSBiXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICgoZyA9IHBhcnNlRmxvYXQoZikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkIHx8IHAuaXNOdW1lcmljKGcpID8gZyB8fCAwIDogZilcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3dhcDogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgIHZhciBkLFxuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICBmID0ge307XG4gICAgICAgICAgICAgICAgZm9yIChlIGluIGIpIChmW2VdID0gYS5zdHlsZVtlXSksIChhLnN0eWxlW2VdID0gYltlXSk7XG4gICAgICAgICAgICAgICAgZCA9IGMuY2FsbChhKTtcbiAgICAgICAgICAgICAgICBmb3IgKGUgaW4gYikgYS5zdHlsZVtlXSA9IGZbZV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgYS5nZXRDb21wdXRlZFN0eWxlXG4gICAgICAgICAgICA/IChiSCA9IGZ1bmN0aW9uKGIsIGMpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBkLFxuICAgICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgICAgZixcbiAgICAgICAgICAgICAgICAgICAgICBnLFxuICAgICAgICAgICAgICAgICAgICAgIGggPSBhLmdldENvbXB1dGVkU3R5bGUoYiwgbnVsbCksXG4gICAgICAgICAgICAgICAgICAgICAgaSA9IGIuc3R5bGU7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgIGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKChkID0gaFtjXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQgPT09ICcnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhcC5jb250YWlucyhiLm93bmVyRG9jdW1lbnQsIGIpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZCA9IHAuc3R5bGUoYiwgYykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBiUS50ZXN0KGQpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiTy50ZXN0KGMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGUgPSBpLndpZHRoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmID0gaS5taW5XaWR0aCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZyA9IGkubWF4V2lkdGgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkubWluV2lkdGggPSBpLm1heFdpZHRoID0gaS53aWR0aCA9IGQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGQgPSBoLndpZHRoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpLndpZHRoID0gZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5taW5XaWR0aCA9IGYpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkubWF4V2lkdGggPSBnKSkpLFxuICAgICAgICAgICAgICAgICAgICAgIGRcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA6IGUuZG9jdW1lbnRFbGVtZW50LmN1cnJlbnRTdHlsZSAmJlxuICAgICAgICAgICAgICAoYkggPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYyxcbiAgICAgICAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgICAgICAgIGUgPSBhLmN1cnJlbnRTdHlsZSAmJiBhLmN1cnJlbnRTdHlsZVtiXSxcbiAgICAgICAgICAgICAgICAgICAgICBmID0gYS5zdHlsZTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgZSA9PSBudWxsICYmIGYgJiYgZltiXSAmJiAoZSA9IGZbYl0pLFxuICAgICAgICAgICAgICAgICAgICAgIGJRLnRlc3QoZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIWJNLnRlc3QoYikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKChjID0gZi5sZWZ0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGQgPSBhLnJ1bnRpbWVTdHlsZSAmJiBhLnJ1bnRpbWVTdHlsZS5sZWZ0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZCAmJiAoYS5ydW50aW1lU3R5bGUubGVmdCA9IGEuY3VycmVudFN0eWxlLmxlZnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoZi5sZWZ0ID0gYiA9PT0gJ2ZvbnRTaXplJyA/ICcxZW0nIDogZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChlID0gZi5waXhlbExlZnQgKyAncHgnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGYubGVmdCA9IGMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkICYmIChhLnJ1bnRpbWVTdHlsZS5sZWZ0ID0gZCkpLFxuICAgICAgICAgICAgICAgICAgICAgIGUgPT09ICcnID8gJ2F1dG8nIDogZVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgIHAuZWFjaChbJ2hlaWdodCcsICd3aWR0aCddLCBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICBwLmNzc0hvb2tzW2JdID0ge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oYSwgYywgZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLm9mZnNldFdpZHRoID09PSAwICYmIGJOLnRlc3QoYkgoYSwgJ2Rpc3BsYXknKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHAuc3dhcChhLCBiVCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNiKGEsIGIsIGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGNiKGEsIGIsIGQpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihhLCBjLCBkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiXyhcbiAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY2EoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5zdXBwb3J0LmJveFNpemluZyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmNzcyhhLCAnYm94U2l6aW5nJykgPT09ICdib3JkZXItYm94J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgcC5zdXBwb3J0Lm9wYWNpdHkgfHxcbiAgICAgICAgICAgIChwLmNzc0hvb2tzLm9wYWNpdHkgPSB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiTC50ZXN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgKGIgJiYgYS5jdXJyZW50U3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGEuY3VycmVudFN0eWxlLmZpbHRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYS5zdHlsZS5maWx0ZXIpIHx8ICcnXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gMC4wMSAqIHBhcnNlRmxvYXQoUmVnRXhwLiQxKSArICcnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcxJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJyc7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBhLnN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGEuY3VycmVudFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZSA9IHAuaXNOdW1lcmljKGIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnYWxwaGEob3BhY2l0eT0nICsgYiAqIDEwMCArICcpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBmID0gKGQgJiYgZC5maWx0ZXIpIHx8IGMuZmlsdGVyIHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICBjLnpvb20gPSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBiID49IDEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHAudHJpbShmLnJlcGxhY2UoYkssICcnKSkgPT09ICcnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBjLnJlbW92ZUF0dHJpYnV0ZVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMucmVtb3ZlQXR0cmlidXRlKCdmaWx0ZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkICYmICFkLmZpbHRlcikgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGMuZmlsdGVyID0gYksudGVzdChmKSA/IGYucmVwbGFjZShiSywgZSkgOiBmICsgJyAnICsgZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgIHAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBwLnN1cHBvcnQucmVsaWFibGVNYXJnaW5SaWdodCB8fFxuICAgICAgICAgICAgICAgIChwLmNzc0hvb2tzLm1hcmdpblJpZ2h0ID0ge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwLnN3YXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiKSByZXR1cm4gYkgoYSwgJ21hcmdpblJpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAhcC5zdXBwb3J0LnBpeGVsUG9zaXRpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgcC5mbi5wb3NpdGlvbiAmJlxuICAgICAgICAgICAgICAgICAgICBwLmVhY2goWyd0b3AnLCAnbGVmdCddLCBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwLmNzc0hvb2tzW2JdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oYSwgYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBiSChhLCBiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiUS50ZXN0KGQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBwKGEpLnBvc2l0aW9uKClbYl0gKyAncHgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSxcbiAgICAgICAgcC5leHByICYmXG4gICAgICAgICAgICBwLmV4cHIuZmlsdGVycyAmJlxuICAgICAgICAgICAgKChwLmV4cHIuZmlsdGVycy5oaWRkZW4gPSBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgKGEub2Zmc2V0V2lkdGggPT09IDAgJiYgYS5vZmZzZXRIZWlnaHQgPT09IDApIHx8XG4gICAgICAgICAgICAgICAgICAgICghcC5zdXBwb3J0LnJlbGlhYmxlSGlkZGVuT2Zmc2V0cyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKChhLnN0eWxlICYmIGEuc3R5bGUuZGlzcGxheSkgfHwgYkgoYSwgJ2Rpc3BsYXknKSkgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25vbmUnKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIChwLmV4cHIuZmlsdGVycy52aXNpYmxlID0gZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhcC5leHByLmZpbHRlcnMuaGlkZGVuKGEpO1xuICAgICAgICAgICAgfSkpLFxuICAgICAgICBwLmVhY2goeyBtYXJnaW46ICcnLCBwYWRkaW5nOiAnJywgYm9yZGVyOiAnV2lkdGgnIH0sIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIChwLmNzc0hvb2tzW2EgKyBiXSA9IHtcbiAgICAgICAgICAgICAgICBleHBhbmQ6IGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gdHlwZW9mIGMgPT0gJ3N0cmluZycgPyBjLnNwbGl0KCcgJykgOiBbY10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmID0ge307XG4gICAgICAgICAgICAgICAgICAgIGZvciAoZCA9IDA7IGQgPCA0OyBkKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBmW2EgKyBiVltkXSArIGJdID0gZVtkXSB8fCBlW2QgLSAyXSB8fCBlWzBdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgYk8udGVzdChhKSB8fCAocC5jc3NIb29rc1thICsgYl0uc2V0ID0gYl8pO1xuICAgICAgICB9KTtcbiAgICB2YXIgY2QgPSAvJTIwL2csXG4gICAgICAgIGNlID0gL1xcW1xcXSQvLFxuICAgICAgICBjZiA9IC9cXHI/XFxuL2csXG4gICAgICAgIGNnID0gL14oPzpjb2xvcnxkYXRlfGRhdGV0aW1lfGRhdGV0aW1lLWxvY2FsfGVtYWlsfGhpZGRlbnxtb250aHxudW1iZXJ8cGFzc3dvcmR8cmFuZ2V8c2VhcmNofHRlbHx0ZXh0fHRpbWV8dXJsfHdlZWspJC9pLFxuICAgICAgICBjaCA9IC9eKD86c2VsZWN0fHRleHRhcmVhKS9pO1xuICAgIHAuZm4uZXh0ZW5kKHtcbiAgICAgICAgc2VyaWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwLnBhcmFtKHRoaXMuc2VyaWFsaXplQXJyYXkoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50cyA/IHAubWFrZUFycmF5KHRoaXMuZWxlbWVudHMpIDogdGhpcztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmFtZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIXRoaXMuZGlzYWJsZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmNoZWNrZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaC50ZXN0KHRoaXMubm9kZU5hbWUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2cudGVzdCh0aGlzLnR5cGUpKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjID0gcCh0aGlzKS52YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMgPT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHAuaXNBcnJheShjKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcC5tYXAoYywgZnVuY3Rpb24oYSwgYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGIubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGEucmVwbGFjZShjZiwgJ1xcclxcbicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogeyBuYW1lOiBiLm5hbWUsIHZhbHVlOiBjLnJlcGxhY2UoY2YsICdcXHJcXG4nKSB9O1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmdldCgpO1xuICAgICAgICB9LFxuICAgIH0pLFxuICAgICAgICAocC5wYXJhbSA9IGZ1bmN0aW9uKGEsIGMpIHtcbiAgICAgICAgICAgIHZhciBkLFxuICAgICAgICAgICAgICAgIGUgPSBbXSxcbiAgICAgICAgICAgICAgICBmID0gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAoYiA9IHAuaXNGdW5jdGlvbihiKSA/IGIoKSA6IGIgPT0gbnVsbCA/ICcnIDogYiksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZVtlLmxlbmd0aF0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChhKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJz0nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoYikpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjID09PSBiICYmIChjID0gcC5hamF4U2V0dGluZ3MgJiYgcC5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWwpO1xuICAgICAgICAgICAgaWYgKHAuaXNBcnJheShhKSB8fCAoYS5qcXVlcnkgJiYgIXAuaXNQbGFpbk9iamVjdChhKSkpXG4gICAgICAgICAgICAgICAgcC5lYWNoKGEsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBmKHRoaXMubmFtZSwgdGhpcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlbHNlIGZvciAoZCBpbiBhKSBjaShkLCBhW2RdLCBjLCBmKTtcbiAgICAgICAgICAgIHJldHVybiBlLmpvaW4oJyYnKS5yZXBsYWNlKGNkLCAnKycpO1xuICAgICAgICB9KTtcbiAgICB2YXIgY2osXG4gICAgICAgIGNrLFxuICAgICAgICBjbCA9IC8jLiokLyxcbiAgICAgICAgY20gPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKilcXHI/JC9nbSxcbiAgICAgICAgY24gPSAvXig/OmFib3V0fGFwcHxhcHBcXC1zdG9yYWdlfC4rXFwtZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG4gICAgICAgIGNvID0gL14oPzpHRVR8SEVBRCkkLyxcbiAgICAgICAgY3AgPSAvXlxcL1xcLy8sXG4gICAgICAgIGNxID0gL1xcPy8sXG4gICAgICAgIGNyID0gLzxzY3JpcHRcXGJbXjxdKig/Oig/ITxcXC9zY3JpcHQ+KTxbXjxdKikqPFxcL3NjcmlwdD4vZ2ksXG4gICAgICAgIGNzID0gLyhbPyZdKV89W14mXSovLFxuICAgICAgICBjdCA9IC9eKFtcXHdcXCtcXC5cXC1dKzopKD86XFwvXFwvKFteXFwvPyM6XSopKD86OihcXGQrKXwpfCkvLFxuICAgICAgICBjdSA9IHAuZm4ubG9hZCxcbiAgICAgICAgY3YgPSB7fSxcbiAgICAgICAgY3cgPSB7fSxcbiAgICAgICAgY3ggPSBbJyovJ10gKyBbJyonXTtcbiAgICB0cnkge1xuICAgICAgICBjayA9IGYuaHJlZjtcbiAgICB9IGNhdGNoIChjeSkge1xuICAgICAgICAoY2sgPSBlLmNyZWF0ZUVsZW1lbnQoJ2EnKSksIChjay5ocmVmID0gJycpLCAoY2sgPSBjay5ocmVmKTtcbiAgICB9XG4gICAgKGNqID0gY3QuZXhlYyhjay50b0xvd2VyQ2FzZSgpKSB8fCBbXSksXG4gICAgICAgIChwLmZuLmxvYWQgPSBmdW5jdGlvbihhLCBjLCBkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGEgIT0gJ3N0cmluZycgJiYgY3UpIHJldHVybiBjdS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmxlbmd0aCkgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgIGcsXG4gICAgICAgICAgICAgICAgaCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgaSA9IGEuaW5kZXhPZignICcpO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBpID49IDAgJiYgKChlID0gYS5zbGljZShpLCBhLmxlbmd0aCkpLCAoYSA9IGEuc2xpY2UoMCwgaSkpKSxcbiAgICAgICAgICAgICAgICBwLmlzRnVuY3Rpb24oYylcbiAgICAgICAgICAgICAgICAgICAgPyAoKGQgPSBjKSwgKGMgPSBiKSlcbiAgICAgICAgICAgICAgICAgICAgOiBjICYmIHR5cGVvZiBjID09ICdvYmplY3QnICYmIChmID0gJ1BPU1QnKSxcbiAgICAgICAgICAgICAgICBwXG4gICAgICAgICAgICAgICAgICAgIC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGYsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2h0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZCAmJiBoLmVhY2goZCwgZyB8fCBbYS5yZXNwb25zZVRleHQsIGIsIGFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIChnID0gYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLmh0bWwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcCgnPGRpdj4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChhLnJlcGxhY2UoY3IsICcnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICApO1xuICAgICAgICB9KSxcbiAgICAgICAgcC5lYWNoKFxuICAgICAgICAgICAgJ2FqYXhTdGFydCBhamF4U3RvcCBhamF4Q29tcGxldGUgYWpheEVycm9yIGFqYXhTdWNjZXNzIGFqYXhTZW5kJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnICdcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcC5mbltiXSA9IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub24oYiwgYSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKSxcbiAgICAgICAgcC5lYWNoKFsnZ2V0JywgJ3Bvc3QnXSwgZnVuY3Rpb24oYSwgYykge1xuICAgICAgICAgICAgcFtjXSA9IGZ1bmN0aW9uKGEsIGQsIGUsIGYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBwLmlzRnVuY3Rpb24oZCkgJiYgKChmID0gZiB8fCBlKSwgKGUgPSBkKSwgKGQgPSBiKSksXG4gICAgICAgICAgICAgICAgICAgIHAuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogZixcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIHAuZXh0ZW5kKHtcbiAgICAgICAgICAgIGdldFNjcmlwdDogZnVuY3Rpb24oYSwgYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwLmdldChhLCBiLCBjLCAnc2NyaXB0Jyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0SlNPTjogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwLmdldChhLCBiLCBjLCAnanNvbicpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFqYXhTZXR1cDogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGIgPyBjQihhLCBwLmFqYXhTZXR0aW5ncykgOiAoKGIgPSBhKSwgKGEgPSBwLmFqYXhTZXR0aW5ncykpLFxuICAgICAgICAgICAgICAgICAgICBjQihhLCBiKSxcbiAgICAgICAgICAgICAgICAgICAgYVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWpheFNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjayxcbiAgICAgICAgICAgICAgICBpc0xvY2FsOiBjbi50ZXN0KGNqWzFdKSxcbiAgICAgICAgICAgICAgICBnbG9iYWw6ICEwLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04JyxcbiAgICAgICAgICAgICAgICBwcm9jZXNzRGF0YTogITAsXG4gICAgICAgICAgICAgICAgYXN5bmM6ICEwLFxuICAgICAgICAgICAgICAgIGFjY2VwdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgeG1sOiAnYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbCcsXG4gICAgICAgICAgICAgICAgICAgIGh0bWw6ICd0ZXh0L2h0bWwnLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAndGV4dC9wbGFpbicsXG4gICAgICAgICAgICAgICAgICAgIGpzb246ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHQnLFxuICAgICAgICAgICAgICAgICAgICAnKic6IGN4LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29udGVudHM6IHsgeG1sOiAveG1sLywgaHRtbDogL2h0bWwvLCBqc29uOiAvanNvbi8gfSxcbiAgICAgICAgICAgICAgICByZXNwb25zZUZpZWxkczogeyB4bWw6ICdyZXNwb25zZVhNTCcsIHRleHQ6ICdyZXNwb25zZVRleHQnIH0sXG4gICAgICAgICAgICAgICAgY29udmVydGVyczoge1xuICAgICAgICAgICAgICAgICAgICAnKiB0ZXh0JzogYS5TdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0IGh0bWwnOiAhMCxcbiAgICAgICAgICAgICAgICAgICAgJ3RleHQganNvbic6IHAucGFyc2VKU09OLFxuICAgICAgICAgICAgICAgICAgICAndGV4dCB4bWwnOiBwLnBhcnNlWE1MLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmxhdE9wdGlvbnM6IHsgY29udGV4dDogITAsIHVybDogITAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhamF4UHJlZmlsdGVyOiBjeihjdiksXG4gICAgICAgICAgICBhamF4VHJhbnNwb3J0OiBjeihjdyksXG4gICAgICAgICAgICBhamF4OiBmdW5jdGlvbihhLCBjKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24geShhLCBjLCBmLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrLFxuICAgICAgICAgICAgICAgICAgICAgICAgcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHQsXG4gICAgICAgICAgICAgICAgICAgICAgICB1LFxuICAgICAgICAgICAgICAgICAgICAgICAgdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBjO1xuICAgICAgICAgICAgICAgICAgICBpZiAodiA9PT0gMikgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAodiA9IDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaCAmJiBjbGVhclRpbWVvdXQoaCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoZyA9IGIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGUgPSBpIHx8ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICh4LnJlYWR5U3RhdGUgPSBhID4gMCA/IDQgOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGYgJiYgKHUgPSBjQyhsLCB4LCBmKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoYSA+PSAyMDAgJiYgYSA8IDMwMCkgfHwgYSA9PT0gMzA0KVxuICAgICAgICAgICAgICAgICAgICAgICAgbC5pZk1vZGlmaWVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCh3ID0geC5nZXRSZXNwb25zZUhlYWRlcignTGFzdC1Nb2RpZmllZCcpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ICYmIChwLmxhc3RNb2RpZmllZFtkXSA9IHcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh3ID0geC5nZXRSZXNwb25zZUhlYWRlcignRXRhZycpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ICYmIChwLmV0YWdbZF0gPSB3KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9PT0gMzA0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKCh5ID0gJ25vdG1vZGlmaWVkJyksIChrID0gITApKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgoayA9IGNEKGwsIHUpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoeSA9IGsuc3RhdGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzID0gay5kYXRhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodCA9IGsuZXJyb3IpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChrID0gIXQpKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0geTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgheSB8fCBhKSAoeSA9ICdlcnJvcicpLCBhIDwgMCAmJiAoYSA9IDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICh4LnN0YXR1cyA9IGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHguc3RhdHVzVGV4dCA9IChjIHx8IHkpICsgJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAga1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gby5yZXNvbHZlV2l0aChtLCBbcywgeSwgeF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBvLnJlamVjdFdpdGgobSwgW3gsIHksIHRdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHguc3RhdHVzQ29kZShyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChyID0gYiksXG4gICAgICAgICAgICAgICAgICAgICAgICBqICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi50cmlnZ2VyKCdhamF4JyArIChrID8gJ1N1Y2Nlc3MnIDogJ0Vycm9yJyksIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA/IHMgOiB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgcS5maXJlV2l0aChtLCBbeCwgeV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgaiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChuLnRyaWdnZXIoJ2FqYXhDb21wbGV0ZScsIFt4LCBsXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1wLmFjdGl2ZSB8fCBwLmV2ZW50LnRyaWdnZXIoJ2FqYXhTdG9wJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0eXBlb2YgYSA9PSAnb2JqZWN0JyAmJiAoKGMgPSBhKSwgKGEgPSBiKSksIChjID0gYyB8fCB7fSk7XG4gICAgICAgICAgICAgICAgdmFyIGQsXG4gICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgIGYsXG4gICAgICAgICAgICAgICAgICAgIGcsXG4gICAgICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgIGosXG4gICAgICAgICAgICAgICAgICAgIGssXG4gICAgICAgICAgICAgICAgICAgIGwgPSBwLmFqYXhTZXR1cCh7fSwgYyksXG4gICAgICAgICAgICAgICAgICAgIG0gPSBsLmNvbnRleHQgfHwgbCxcbiAgICAgICAgICAgICAgICAgICAgbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICBtICE9PSBsICYmIChtLm5vZGVUeXBlIHx8IG0gaW5zdGFuY2VvZiBwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcChtKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogcC5ldmVudCxcbiAgICAgICAgICAgICAgICAgICAgbyA9IHAuRGVmZXJyZWQoKSxcbiAgICAgICAgICAgICAgICAgICAgcSA9IHAuQ2FsbGJhY2tzKCdvbmNlIG1lbW9yeScpLFxuICAgICAgICAgICAgICAgICAgICByID0gbC5zdGF0dXNDb2RlIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICB0ID0ge30sXG4gICAgICAgICAgICAgICAgICAgIHUgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgdiA9IDAsXG4gICAgICAgICAgICAgICAgICAgIHcgPSAnY2FuY2VsZWQnLFxuICAgICAgICAgICAgICAgICAgICB4ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZHlTdGF0ZTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBhLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhID0gdVtjXSA9IHVbY10gfHwgYSksICh0W2FdID0gYik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHYgPT09IDIgPyBlIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChjID0gY20uZXhlYyhlKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZltjWzFdLnRvTG93ZXJDYXNlKCldID0gY1syXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gZlthLnRvTG93ZXJDYXNlKCldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyA9PT0gYiA/IG51bGwgOiBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdiB8fCAobC5taW1lVHlwZSA9IGEpLCB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0OiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChhID0gYSB8fCB3KSwgZyAmJiBnLmFib3J0KGEpLCB5KDAsIGEpLCB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBvLnByb21pc2UoeCksXG4gICAgICAgICAgICAgICAgICAgICh4LnN1Y2Nlc3MgPSB4LmRvbmUpLFxuICAgICAgICAgICAgICAgICAgICAoeC5lcnJvciA9IHguZmFpbCksXG4gICAgICAgICAgICAgICAgICAgICh4LmNvbXBsZXRlID0gcS5hZGQpLFxuICAgICAgICAgICAgICAgICAgICAoeC5zdGF0dXNDb2RlID0gZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodiA8IDIpIGZvciAoYiBpbiBhKSByW2JdID0gW3JbYl0sIGFbYl1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgKGIgPSBhW3guc3RhdHVzXSksIHguYWx3YXlzKGIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAobC51cmwgPSAoKGEgfHwgbC51cmwpICsgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZShjbCwgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZShjcCwgY2pbMV0gKyAnLy8nKSksXG4gICAgICAgICAgICAgICAgICAgIChsLmRhdGFUeXBlcyA9IHBcbiAgICAgICAgICAgICAgICAgICAgICAgIC50cmltKGwuZGF0YVR5cGUgfHwgJyonKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdChzKSksXG4gICAgICAgICAgICAgICAgICAgIGwuY3Jvc3NEb21haW4gPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKChpID0gY3QuZXhlYyhsLnVybC50b0xvd2VyQ2FzZSgpKSB8fCAhMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAobC5jcm9zc0RvbWFpbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuam9pbignOicpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGlbM10gPyAnJyA6IGlbMV0gPT09ICdodHRwOicgPyA4MCA6IDQ0MykgIT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNqLmpvaW4oJzonKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2pbM11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjalsxXSA9PT0gJ2h0dHA6J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDgwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogNDQzKSkpLFxuICAgICAgICAgICAgICAgICAgICBsLmRhdGEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGwucHJvY2Vzc0RhdGEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBsLmRhdGEgIT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChsLmRhdGEgPSBwLnBhcmFtKGwuZGF0YSwgbC50cmFkaXRpb25hbCkpLFxuICAgICAgICAgICAgICAgICAgICBjQShjdiwgbCwgYywgeCk7XG4gICAgICAgICAgICAgICAgaWYgKHYgPT09IDIpIHJldHVybiB4O1xuICAgICAgICAgICAgICAgIChqID0gbC5nbG9iYWwpLFxuICAgICAgICAgICAgICAgICAgICAobC50eXBlID0gbC50eXBlLnRvVXBwZXJDYXNlKCkpLFxuICAgICAgICAgICAgICAgICAgICAobC5oYXNDb250ZW50ID0gIWNvLnRlc3QobC50eXBlKSksXG4gICAgICAgICAgICAgICAgICAgIGogJiYgcC5hY3RpdmUrKyA9PT0gMCAmJiBwLmV2ZW50LnRyaWdnZXIoJ2FqYXhTdGFydCcpO1xuICAgICAgICAgICAgICAgIGlmICghbC5oYXNDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGwuZGF0YSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKChsLnVybCArPSAoY3EudGVzdChsLnVybCkgPyAnJicgOiAnPycpICsgbC5kYXRhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBsLmRhdGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGQgPSBsLnVybCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsLmNhY2hlID09PSAhMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHogPSBwLm5vdygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEEgPSBsLnVybC5yZXBsYWNlKGNzLCAnJDFfPScgKyB6KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGwudXJsID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQSA9PT0gbC51cmxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoY3EudGVzdChsLnVybCkgPyAnJicgOiAnPycpICsgJ189JyArIHpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKChsLmRhdGEgJiYgbC5oYXNDb250ZW50ICYmIGwuY29udGVudFR5cGUgIT09ICExKSB8fFxuICAgICAgICAgICAgICAgICAgICBjLmNvbnRlbnRUeXBlKSAmJlxuICAgICAgICAgICAgICAgICAgICB4LnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsIGwuY29udGVudFR5cGUpLFxuICAgICAgICAgICAgICAgICAgICBsLmlmTW9kaWZpZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICgoZCA9IGQgfHwgbC51cmwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcC5sYXN0TW9kaWZpZWRbZF0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LnNldFJlcXVlc3RIZWFkZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdJZi1Nb2RpZmllZC1TaW5jZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAubGFzdE1vZGlmaWVkW2RdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHAuZXRhZ1tkXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHguc2V0UmVxdWVzdEhlYWRlcignSWYtTm9uZS1NYXRjaCcsIHAuZXRhZ1tkXSkpLFxuICAgICAgICAgICAgICAgICAgICB4LnNldFJlcXVlc3RIZWFkZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAnQWNjZXB0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGwuZGF0YVR5cGVzWzBdICYmIGwuYWNjZXB0c1tsLmRhdGFUeXBlc1swXV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGwuYWNjZXB0c1tsLmRhdGFUeXBlc1swXV0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwuZGF0YVR5cGVzWzBdICE9PSAnKidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcsICcgKyBjeCArICc7IHE9MC4wMSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbC5hY2NlcHRzWycqJ11cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBmb3IgKGsgaW4gbC5oZWFkZXJzKSB4LnNldFJlcXVlc3RIZWFkZXIoaywgbC5oZWFkZXJzW2tdKTtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICFsLmJlZm9yZVNlbmQgfHxcbiAgICAgICAgICAgICAgICAgICAgKGwuYmVmb3JlU2VuZC5jYWxsKG0sIHgsIGwpICE9PSAhMSAmJiB2ICE9PSAyKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB3ID0gJ2Fib3J0JztcbiAgICAgICAgICAgICAgICAgICAgZm9yIChrIGluIHsgc3VjY2VzczogMSwgZXJyb3I6IDEsIGNvbXBsZXRlOiAxIH0pIHhba10obFtrXSk7XG4gICAgICAgICAgICAgICAgICAgIGcgPSBjQShjdywgbCwgYywgeCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZykgeSgtMSwgJ05vIFRyYW5zcG9ydCcpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICh4LnJlYWR5U3RhdGUgPSAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqICYmIG4udHJpZ2dlcignYWpheFNlbmQnLCBbeCwgbF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwuYXN5bmMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbC50aW1lb3V0ID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LmFib3J0KCd0aW1lb3V0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGwudGltZW91dCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodiA9IDEpLCBnLnNlbmQodCwgeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChCKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHYgPCAyKSB5KC0xLCBCKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHRocm93IEI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB4LmFib3J0KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWN0aXZlOiAwLFxuICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiB7fSxcbiAgICAgICAgICAgIGV0YWc6IHt9LFxuICAgICAgICB9KTtcbiAgICB2YXIgY0UgPSBbXSxcbiAgICAgICAgY0YgPSAvXFw/LyxcbiAgICAgICAgY0cgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vLFxuICAgICAgICBjSCA9IHAubm93KCk7XG4gICAgcC5hamF4U2V0dXAoe1xuICAgICAgICBqc29ucDogJ2NhbGxiYWNrJyxcbiAgICAgICAganNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGNFLnBvcCgpIHx8IHAuZXhwYW5kbyArICdfJyArIGNIKys7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXNbYV0gPSAhMCksIGE7XG4gICAgICAgIH0sXG4gICAgfSksXG4gICAgICAgIHAuYWpheFByZWZpbHRlcignanNvbiBqc29ucCcsIGZ1bmN0aW9uKGMsIGQsIGUpIHtcbiAgICAgICAgICAgIHZhciBmLFxuICAgICAgICAgICAgICAgIGcsXG4gICAgICAgICAgICAgICAgaCxcbiAgICAgICAgICAgICAgICBpID0gYy5kYXRhLFxuICAgICAgICAgICAgICAgIGogPSBjLnVybCxcbiAgICAgICAgICAgICAgICBrID0gYy5qc29ucCAhPT0gITEsXG4gICAgICAgICAgICAgICAgbCA9IGsgJiYgY0cudGVzdChqKSxcbiAgICAgICAgICAgICAgICBtID1cbiAgICAgICAgICAgICAgICAgICAgayAmJlxuICAgICAgICAgICAgICAgICAgICAhbCAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgaSA9PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICAhKGMuY29udGVudFR5cGUgfHwgJycpLmluZGV4T2YoXG4gICAgICAgICAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xuICAgICAgICAgICAgICAgICAgICApICYmXG4gICAgICAgICAgICAgICAgICAgIGNHLnRlc3QoaSk7XG4gICAgICAgICAgICBpZiAoYy5kYXRhVHlwZXNbMF0gPT09ICdqc29ucCcgfHwgbCB8fCBtKVxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIChmID0gYy5qc29ucENhbGxiYWNrID0gcC5pc0Z1bmN0aW9uKGMuanNvbnBDYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYy5qc29ucENhbGxiYWNrKClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYy5qc29ucENhbGxiYWNrKSxcbiAgICAgICAgICAgICAgICAgICAgKGcgPSBhW2ZdKSxcbiAgICAgICAgICAgICAgICAgICAgbFxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoYy51cmwgPSBqLnJlcGxhY2UoY0csICckMScgKyBmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKGMuZGF0YSA9IGkucmVwbGFjZShjRywgJyQxJyArIGYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogayAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMudXJsICs9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNGLnRlc3QoaikgPyAnJicgOiAnPycpICsgYy5qc29ucCArICc9JyArIGYpLFxuICAgICAgICAgICAgICAgICAgICAoYy5jb252ZXJ0ZXJzWydzY3JpcHQganNvbiddID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaCB8fCBwLmVycm9yKGYgKyAnIHdhcyBub3QgY2FsbGVkJyksIGhbMF07XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAoYy5kYXRhVHlwZXNbMF0gPSAnanNvbicpLFxuICAgICAgICAgICAgICAgICAgICAoYVtmXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaCA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGUuYWx3YXlzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKGFbZl0gPSBnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjW2ZdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoYy5qc29ucENhbGxiYWNrID0gZC5qc29ucENhbGxiYWNrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY0UucHVzaChmKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaCAmJiBwLmlzRnVuY3Rpb24oZykgJiYgZyhoWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaCA9IGcgPSBiKTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICdzY3JpcHQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgfSksXG4gICAgICAgIHAuYWpheFNldHVwKHtcbiAgICAgICAgICAgIGFjY2VwdHM6IHtcbiAgICAgICAgICAgICAgICBzY3JpcHQ6XG4gICAgICAgICAgICAgICAgICAgICd0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudHM6IHsgc2NyaXB0OiAvamF2YXNjcmlwdHxlY21hc2NyaXB0LyB9LFxuICAgICAgICAgICAgY29udmVydGVyczoge1xuICAgICAgICAgICAgICAgICd0ZXh0IHNjcmlwdCc6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAuZ2xvYmFsRXZhbChhKSwgYTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICAgIHAuYWpheFByZWZpbHRlcignc2NyaXB0JywgZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgYS5jYWNoZSA9PT0gYiAmJiAoYS5jYWNoZSA9ICExKSxcbiAgICAgICAgICAgICAgICBhLmNyb3NzRG9tYWluICYmICgoYS50eXBlID0gJ0dFVCcpLCAoYS5nbG9iYWwgPSAhMSkpO1xuICAgICAgICB9KSxcbiAgICAgICAgcC5hamF4VHJhbnNwb3J0KCdzY3JpcHQnLCBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICBpZiAoYS5jcm9zc0RvbWFpbikge1xuICAgICAgICAgICAgICAgIHZhciBjLFxuICAgICAgICAgICAgICAgICAgICBkID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGUuaGVhZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzZW5kOiBmdW5jdGlvbihmLCBnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoYyA9IGUuY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjLmFzeW5jID0gJ2FzeW5jJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5zY3JpcHRDaGFyc2V0ICYmIChjLmNoYXJzZXQgPSBhLnNjcmlwdENoYXJzZXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjLnNyYyA9IGEudXJsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYy5vbmxvYWQgPSBjLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKGEsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWMucmVhZHlTdGF0ZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL2xvYWRlZHxjb21wbGV0ZS8udGVzdChjLnJlYWR5U3RhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjLm9ubG9hZCA9IGMub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCAmJiBjLnBhcmVudE5vZGUgJiYgZC5yZW1vdmVDaGlsZChjKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYyA9IGIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgfHwgZygyMDAsICdzdWNjZXNzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5pbnNlcnRCZWZvcmUoYywgZC5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYyAmJiBjLm9ubG9hZCgwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB2YXIgY0ksXG4gICAgICAgIGNKID0gYS5BY3RpdmVYT2JqZWN0XG4gICAgICAgICAgICA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYSBpbiBjSSkgY0lbYV0oMCwgMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogITEsXG4gICAgICAgIGNLID0gMDtcbiAgICAocC5hamF4U2V0dGluZ3MueGhyID0gYS5BY3RpdmVYT2JqZWN0XG4gICAgICAgID8gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiAoIXRoaXMuaXNMb2NhbCAmJiBjTCgpKSB8fCBjTSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgOiBjTCksXG4gICAgICAgIChmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICBwLmV4dGVuZChwLnN1cHBvcnQsIHtcbiAgICAgICAgICAgICAgICBhamF4OiAhIWEsXG4gICAgICAgICAgICAgICAgY29yczogISFhICYmICd3aXRoQ3JlZGVudGlhbHMnIGluIGEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkocC5hamF4U2V0dGluZ3MueGhyKCkpLFxuICAgICAgICBwLnN1cHBvcnQuYWpheCAmJlxuICAgICAgICAgICAgcC5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWMuY3Jvc3NEb21haW4gfHwgcC5zdXBwb3J0LmNvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kOiBmdW5jdGlvbihlLCBmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBjLnhocigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMudXNlcm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpLm9wZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuYXN5bmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMudXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMucGFzc3dvcmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaS5vcGVuKGMudHlwZSwgYy51cmwsIGMuYXN5bmMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjLnhockZpZWxkcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChoIGluIGMueGhyRmllbGRzKSBpW2hdID0gYy54aHJGaWVsZHNbaF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5taW1lVHlwZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm92ZXJyaWRlTWltZVR5cGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vdmVycmlkZU1pbWVUeXBlKGMubWltZVR5cGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhYy5jcm9zc0RvbWFpbiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWVbJ1gtUmVxdWVzdGVkLVdpdGgnXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGVbJ1gtUmVxdWVzdGVkLVdpdGgnXSA9ICdYTUxIdHRwUmVxdWVzdCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaCBpbiBlKSBpLnNldFJlcXVlc3RIZWFkZXIoaCwgZVtoXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoaikge31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNlbmQoKGMuaGFzQ29udGVudCAmJiBjLmRhdGEpIHx8IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZCA9IGZ1bmN0aW9uKGEsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoLCBqLCBrLCBsLCBtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCAmJiAoZSB8fCBpLnJlYWR5U3RhdGUgPT09IDQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkID0gYiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChpLm9ucmVhZHlzdGF0ZWNoYW5nZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAubm9vcCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY0ogJiYgZGVsZXRlIGNJW2ddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnJlYWR5U3RhdGUgIT09IDQgJiYgaS5hYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoID0gaS5zdGF0dXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChrID0gaS5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGwgPSB7fSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0gPSBpLnJlc3BvbnNlWE1MKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uZG9jdW1lbnRFbGVtZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsLnhtbCA9IG0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsLnRleHQgPSBpLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGEpIHt9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGogPSBpLnN0YXR1c1RleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaiA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuaXNMb2NhbCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWMuY3Jvc3NEb21haW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChoID0gbC50ZXh0ID8gMjAwIDogNDA0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaCA9PT0gMTIyMyAmJiAoaCA9IDIwNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSB8fCBmKC0xLCBvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgJiYgZihoLCBqLCBsLCBrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuYXN5bmNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gaS5yZWFkeVN0YXRlID09PSA0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzZXRUaW1lb3V0KGQsIDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoKGcgPSArK2NLKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNKICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNJIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoY0kgPSB7fSksIHAoYSkudW5sb2FkKGNKKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNJW2ddID0gZCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkub25yZWFkeXN0YXRlY2hhbmdlID0gZCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhYm9ydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZCAmJiBkKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB2YXIgY04sXG4gICAgICAgIGNPLFxuICAgICAgICBjUCA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcbiAgICAgICAgY1EgPSBuZXcgUmVnRXhwKCdeKD86KFstK10pPXwpKCcgKyBxICsgJykoW2EteiVdKikkJywgJ2knKSxcbiAgICAgICAgY1IgPSAvcXVldWVIb29rcyQvLFxuICAgICAgICBjUyA9IFtjWV0sXG4gICAgICAgIGNUID0ge1xuICAgICAgICAgICAgJyonOiBbXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy5jcmVhdGVUd2VlbihhLCBiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBjUS5leGVjKGIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZyA9IGUuY3VyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBoID0gK2cgfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgaiA9IDIwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgKGMgPSArZlsyXSksIChkID0gZlszXSB8fCAocC5jc3NOdW1iZXJbYV0gPyAnJyA6ICdweCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkICE9PSAncHgnICYmIGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gcC5jc3MoZS5lbGVtLCBhLCAhMCkgfHwgYyB8fCAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpID0gaSB8fCAnLjUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoID0gaCAvIGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5zdHlsZShlLmVsZW0sIGEsIGggKyBkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaSAhPT0gKGkgPSBlLmN1cigpIC8gZykgJiYgaSAhPT0gMSAmJiAtLWopO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKGUudW5pdCA9IGQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlLnN0YXJ0ID0gaCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUuZW5kID0gZlsxXSA/IGggKyAoZlsxXSArIDEpICogYyA6IGMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9O1xuICAgIChwLkFuaW1hdGlvbiA9IHAuZXh0ZW5kKGNXLCB7XG4gICAgICAgIHR3ZWVuZXI6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHAuaXNGdW5jdGlvbihhKSA/ICgoYiA9IGEpLCAoYSA9IFsnKiddKSkgOiAoYSA9IGEuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgICB2YXIgYyxcbiAgICAgICAgICAgICAgICBkID0gMCxcbiAgICAgICAgICAgICAgICBlID0gYS5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKDsgZCA8IGU7IGQrKylcbiAgICAgICAgICAgICAgICAoYyA9IGFbZF0pLCAoY1RbY10gPSBjVFtjXSB8fCBbXSksIGNUW2NdLnVuc2hpZnQoYik7XG4gICAgICAgIH0sXG4gICAgICAgIHByZWZpbHRlcjogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgYiA/IGNTLnVuc2hpZnQoYSkgOiBjUy5wdXNoKGEpO1xuICAgICAgICB9LFxuICAgIH0pKSxcbiAgICAgICAgKHAuVHdlZW4gPSBjWiksXG4gICAgICAgIChjWi5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICBjb25zdHJ1Y3RvcjogY1osXG4gICAgICAgICAgICBpbml0OiBmdW5jdGlvbihhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgICAgICAgICAgICAgKHRoaXMuZWxlbSA9IGEpLFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5wcm9wID0gYyksXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmVhc2luZyA9IGUgfHwgJ3N3aW5nJyksXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLm9wdGlvbnMgPSBiKSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCkpLFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5lbmQgPSBkKSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMudW5pdCA9IGYgfHwgKHAuY3NzTnVtYmVyW2NdID8gJycgOiAncHgnKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY3VyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IGNaLnByb3BIb29rc1t0aGlzLnByb3BdO1xuICAgICAgICAgICAgICAgIHJldHVybiBhICYmIGEuZ2V0XG4gICAgICAgICAgICAgICAgICAgID8gYS5nZXQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgOiBjWi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KHRoaXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJ1bjogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgIHZhciBiLFxuICAgICAgICAgICAgICAgICAgICBjID0gY1oucHJvcEhvb2tzW3RoaXMucHJvcF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICh0aGlzLnBvcyA9IGIgPSBwLmVhc2luZ1t0aGlzLmVhc2luZ10oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICh0aGlzLnBvcyA9IGIgPSBhKSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMubm93ID0gKHRoaXMuZW5kIC0gdGhpcy5zdGFydCkgKiBiICsgdGhpcy5zdGFydCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zdGVwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBjICYmIGMuc2V0ID8gYy5zZXQodGhpcykgOiBjWi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICAoY1oucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gY1oucHJvdG90eXBlKSxcbiAgICAgICAgKGNaLnByb3BIb29rcyA9IHtcbiAgICAgICAgICAgIF9kZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5lbGVtW2EucHJvcF0gPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKCEhYS5lbGVtLnN0eWxlICYmIGEuZWxlbS5zdHlsZVthLnByb3BdICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICgoYiA9IHAuY3NzKGEuZWxlbSwgYS5wcm9wLCAhMSwgJycpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIWIgfHwgYiA9PT0gJ2F1dG8nID8gMCA6IGIpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGEuZWxlbVthLnByb3BdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICAgIHAuZnguc3RlcFthLnByb3BdXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHAuZnguc3RlcFthLnByb3BdKGEpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGEuZWxlbS5zdHlsZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAoYS5lbGVtLnN0eWxlW3AuY3NzUHJvcHNbYS5wcm9wXV0gIT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5jc3NIb29rc1thLnByb3BdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcC5zdHlsZShhLmVsZW0sIGEucHJvcCwgYS5ub3cgKyBhLnVuaXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoYS5lbGVtW2EucHJvcF0gPSBhLm5vdyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICAoY1oucHJvcEhvb2tzLnNjcm9sbFRvcCA9IGNaLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgYS5lbGVtLm5vZGVUeXBlICYmXG4gICAgICAgICAgICAgICAgICAgIGEuZWxlbS5wYXJlbnROb2RlICYmXG4gICAgICAgICAgICAgICAgICAgIChhLmVsZW1bYS5wcm9wXSA9IGEubm93KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICBwLmVhY2goWyd0b2dnbGUnLCAnc2hvdycsICdoaWRlJ10sIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHZhciBjID0gcC5mbltiXTtcbiAgICAgICAgICAgIHAuZm5bYl0gPSBmdW5jdGlvbihkLCBlLCBmKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQgPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgZCA9PSAnYm9vbGVhbicgfHxcbiAgICAgICAgICAgICAgICAgICAgKCFhICYmIHAuaXNGdW5jdGlvbihkKSAmJiBwLmlzRnVuY3Rpb24oZSkpXG4gICAgICAgICAgICAgICAgICAgID8gYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5hbmltYXRlKGMkKGIsICEwKSwgZCwgZSwgZik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgcC5mbi5leHRlbmQoe1xuICAgICAgICAgICAgZmFkZVRvOiBmdW5jdGlvbihhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGJaKVxuICAgICAgICAgICAgICAgICAgICAuY3NzKCdvcGFjaXR5JywgMClcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAuZW5kKClcbiAgICAgICAgICAgICAgICAgICAgLmFuaW1hdGUoeyBvcGFjaXR5OiBiIH0sIGEsIGMsIGQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFuaW1hdGU6IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IHAuaXNFbXB0eU9iamVjdChhKSxcbiAgICAgICAgICAgICAgICAgICAgZiA9IHAuc3BlZWQoYiwgYywgZCksXG4gICAgICAgICAgICAgICAgICAgIGcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gY1codGhpcywgcC5leHRlbmQoe30sIGEpLCBmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgJiYgYi5zdG9wKCEwKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZSB8fCBmLnF1ZXVlID09PSAhMVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuZWFjaChnKVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMucXVldWUoZi5xdWV1ZSwgZyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oYSwgYywgZCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IGEuc3RvcDtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGEuc3RvcCwgYihkKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhICE9ICdzdHJpbmcnICYmICgoZCA9IGMpLCAoYyA9IGEpLCAoYSA9IGIpKSxcbiAgICAgICAgICAgICAgICAgICAgYyAmJiBhICE9PSAhMSAmJiB0aGlzLnF1ZXVlKGEgfHwgJ2Z4JywgW10pLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9ICEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBhICE9IG51bGwgJiYgYSArICdxdWV1ZUhvb2tzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gcC50aW1lcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZyA9IHAuX2RhdGEodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYykgZ1tjXSAmJiBnW2NdLnN0b3AgJiYgZShnW2NdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGMgaW4gZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ1tjXSAmJiBnW2NdLnN0b3AgJiYgY1IudGVzdChjKSAmJiBlKGdbY10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjID0gZi5sZW5ndGg7IGMtLTsgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZbY10uZWxlbSA9PT0gdGhpcyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYSA9PSBudWxsIHx8IGZbY10ucXVldWUgPT09IGEpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmW2NdLmFuaW0uc3RvcChkKSwgKGIgPSAhMSksIGYuc3BsaWNlKGMsIDEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChiIHx8ICFkKSAmJiBwLmRlcXVldWUodGhpcywgYSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICBwLmVhY2goXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2xpZGVEb3duOiBjJCgnc2hvdycpLFxuICAgICAgICAgICAgICAgIHNsaWRlVXA6IGMkKCdoaWRlJyksXG4gICAgICAgICAgICAgICAgc2xpZGVUb2dnbGU6IGMkKCd0b2dnbGUnKSxcbiAgICAgICAgICAgICAgICBmYWRlSW46IHsgb3BhY2l0eTogJ3Nob3cnIH0sXG4gICAgICAgICAgICAgICAgZmFkZU91dDogeyBvcGFjaXR5OiAnaGlkZScgfSxcbiAgICAgICAgICAgICAgICBmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6ICd0b2dnbGUnIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgIHAuZm5bYV0gPSBmdW5jdGlvbihhLCBjLCBkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGUoYiwgYSwgYywgZCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKSxcbiAgICAgICAgKHAuc3BlZWQgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICB2YXIgZCA9XG4gICAgICAgICAgICAgICAgYSAmJiB0eXBlb2YgYSA9PSAnb2JqZWN0J1xuICAgICAgICAgICAgICAgICAgICA/IHAuZXh0ZW5kKHt9LCBhKVxuICAgICAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGMgfHwgKCFjICYmIGIpIHx8IChwLmlzRnVuY3Rpb24oYSkgJiYgYSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IChjICYmIGIpIHx8IChiICYmICFwLmlzRnVuY3Rpb24oYikgJiYgYiksXG4gICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGQuZHVyYXRpb24gPSBwLmZ4Lm9mZlxuICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgIDogdHlwZW9mIGQuZHVyYXRpb24gPT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICAgICAgPyBkLmR1cmF0aW9uXG4gICAgICAgICAgICAgICAgICAgIDogZC5kdXJhdGlvbiBpbiBwLmZ4LnNwZWVkc1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBwLmZ4LnNwZWVkc1tkLmR1cmF0aW9uXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBwLmZ4LnNwZWVkcy5fZGVmYXVsdDtcbiAgICAgICAgICAgIGlmIChkLnF1ZXVlID09IG51bGwgfHwgZC5xdWV1ZSA9PT0gITApIGQucXVldWUgPSAnZngnO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAoZC5vbGQgPSBkLmNvbXBsZXRlKSxcbiAgICAgICAgICAgICAgICAoZC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBwLmlzRnVuY3Rpb24oZC5vbGQpICYmIGQub2xkLmNhbGwodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnF1ZXVlICYmIHAuZGVxdWV1ZSh0aGlzLCBkLnF1ZXVlKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBkXG4gICAgICAgICAgICApO1xuICAgICAgICB9KSxcbiAgICAgICAgKHAuZWFzaW5nID0ge1xuICAgICAgICAgICAgbGluZWFyOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3dpbmc6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMC41IC0gTWF0aC5jb3MoYSAqIE1hdGguUEkpIC8gMjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICAocC50aW1lcnMgPSBbXSksXG4gICAgICAgIChwLmZ4ID0gY1oucHJvdG90eXBlLmluaXQpLFxuICAgICAgICAocC5meC50aWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgICAgICBiID0gcC50aW1lcnMsXG4gICAgICAgICAgICAgICAgYyA9IDA7XG4gICAgICAgICAgICBmb3IgKDsgYyA8IGIubGVuZ3RoOyBjKyspXG4gICAgICAgICAgICAgICAgKGEgPSBiW2NdKSwgIWEoKSAmJiBiW2NdID09PSBhICYmIGIuc3BsaWNlKGMtLSwgMSk7XG4gICAgICAgICAgICBiLmxlbmd0aCB8fCBwLmZ4LnN0b3AoKTtcbiAgICAgICAgfSksXG4gICAgICAgIChwLmZ4LnRpbWVyID0gZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgYSgpICYmXG4gICAgICAgICAgICAgICAgcC50aW1lcnMucHVzaChhKSAmJlxuICAgICAgICAgICAgICAgICFjTyAmJlxuICAgICAgICAgICAgICAgIChjTyA9IHNldEludGVydmFsKHAuZngudGljaywgcC5meC5pbnRlcnZhbCkpO1xuICAgICAgICB9KSxcbiAgICAgICAgKHAuZnguaW50ZXJ2YWwgPSAxMyksXG4gICAgICAgIChwLmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoY08pLCAoY08gPSBudWxsKTtcbiAgICAgICAgfSksXG4gICAgICAgIChwLmZ4LnNwZWVkcyA9IHsgc2xvdzogNjAwLCBmYXN0OiAyMDAsIF9kZWZhdWx0OiA0MDAgfSksXG4gICAgICAgIChwLmZ4LnN0ZXAgPSB7fSksXG4gICAgICAgIHAuZXhwciAmJlxuICAgICAgICAgICAgcC5leHByLmZpbHRlcnMgJiZcbiAgICAgICAgICAgIChwLmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcC5ncmVwKHAudGltZXJzLCBmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhID09PSBiLmVsZW07XG4gICAgICAgICAgICAgICAgfSkubGVuZ3RoO1xuICAgICAgICAgICAgfSk7XG4gICAgdmFyIGNfID0gL14oPzpib2R5fGh0bWwpJC9pO1xuICAgIChwLmZuLm9mZnNldCA9IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gYSA9PT0gYlxuICAgICAgICAgICAgICAgID8gdGhpc1xuICAgICAgICAgICAgICAgIDogdGhpcy5lYWNoKGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwLm9mZnNldC5zZXRPZmZzZXQodGhpcywgYSwgYik7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgdmFyIGMsXG4gICAgICAgICAgICBkLFxuICAgICAgICAgICAgZSxcbiAgICAgICAgICAgIGYsXG4gICAgICAgICAgICBnLFxuICAgICAgICAgICAgaCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqID0geyB0b3A6IDAsIGxlZnQ6IDAgfSxcbiAgICAgICAgICAgIGsgPSB0aGlzWzBdLFxuICAgICAgICAgICAgbCA9IGsgJiYgay5vd25lckRvY3VtZW50O1xuICAgICAgICBpZiAoIWwpIHJldHVybjtcbiAgICAgICAgcmV0dXJuIChkID0gbC5ib2R5KSA9PT0ga1xuICAgICAgICAgICAgPyBwLm9mZnNldC5ib2R5T2Zmc2V0KGspXG4gICAgICAgICAgICA6ICgoYyA9IGwuZG9jdW1lbnRFbGVtZW50KSxcbiAgICAgICAgICAgICAgcC5jb250YWlucyhjLCBrKVxuICAgICAgICAgICAgICAgICAgPyAodHlwZW9mIGsuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICE9ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoaiA9IGsuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLFxuICAgICAgICAgICAgICAgICAgICAoZSA9IGRhKGwpKSxcbiAgICAgICAgICAgICAgICAgICAgKGYgPSBjLmNsaWVudFRvcCB8fCBkLmNsaWVudFRvcCB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgKGcgPSBjLmNsaWVudExlZnQgfHwgZC5jbGllbnRMZWZ0IHx8IDApLFxuICAgICAgICAgICAgICAgICAgICAoaCA9IGUucGFnZVlPZmZzZXQgfHwgYy5zY3JvbGxUb3ApLFxuICAgICAgICAgICAgICAgICAgICAoaSA9IGUucGFnZVhPZmZzZXQgfHwgYy5zY3JvbGxMZWZ0KSxcbiAgICAgICAgICAgICAgICAgICAgeyB0b3A6IGoudG9wICsgaCAtIGYsIGxlZnQ6IGoubGVmdCArIGkgLSBnIH0pXG4gICAgICAgICAgICAgICAgICA6IGopO1xuICAgIH0pLFxuICAgICAgICAocC5vZmZzZXQgPSB7XG4gICAgICAgICAgICBib2R5T2Zmc2V0OiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGIgPSBhLm9mZnNldFRvcCxcbiAgICAgICAgICAgICAgICAgICAgYyA9IGEub2Zmc2V0TGVmdDtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBwLnN1cHBvcnQuZG9lc05vdEluY2x1ZGVNYXJnaW5JbkJvZHlPZmZzZXQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICgoYiArPSBwYXJzZUZsb2F0KHAuY3NzKGEsICdtYXJnaW5Ub3AnKSkgfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoYyArPSBwYXJzZUZsb2F0KHAuY3NzKGEsICdtYXJnaW5MZWZ0JykpIHx8IDApKSxcbiAgICAgICAgICAgICAgICAgICAgeyB0b3A6IGIsIGxlZnQ6IGMgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0T2Zmc2V0OiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBwLmNzcyhhLCAncG9zaXRpb24nKTtcbiAgICAgICAgICAgICAgICBkID09PSAnc3RhdGljJyAmJiAoYS5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZScpO1xuICAgICAgICAgICAgICAgIHZhciBlID0gcChhKSxcbiAgICAgICAgICAgICAgICAgICAgZiA9IGUub2Zmc2V0KCksXG4gICAgICAgICAgICAgICAgICAgIGcgPSBwLmNzcyhhLCAndG9wJyksXG4gICAgICAgICAgICAgICAgICAgIGggPSBwLmNzcyhhLCAnbGVmdCcpLFxuICAgICAgICAgICAgICAgICAgICBpID1cbiAgICAgICAgICAgICAgICAgICAgICAgIChkID09PSAnYWJzb2x1dGUnIHx8IGQgPT09ICdmaXhlZCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBwLmluQXJyYXkoJ2F1dG8nLCBbZywgaF0pID4gLTEsXG4gICAgICAgICAgICAgICAgICAgIGogPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgayA9IHt9LFxuICAgICAgICAgICAgICAgICAgICBsLFxuICAgICAgICAgICAgICAgICAgICBtO1xuICAgICAgICAgICAgICAgIGlcbiAgICAgICAgICAgICAgICAgICAgPyAoKGsgPSBlLnBvc2l0aW9uKCkpLCAobCA9IGsudG9wKSwgKG0gPSBrLmxlZnQpKVxuICAgICAgICAgICAgICAgICAgICA6ICgobCA9IHBhcnNlRmxvYXQoZykgfHwgMCksIChtID0gcGFyc2VGbG9hdChoKSB8fCAwKSksXG4gICAgICAgICAgICAgICAgICAgIHAuaXNGdW5jdGlvbihiKSAmJiAoYiA9IGIuY2FsbChhLCBjLCBmKSksXG4gICAgICAgICAgICAgICAgICAgIGIudG9wICE9IG51bGwgJiYgKGoudG9wID0gYi50b3AgLSBmLnRvcCArIGwpLFxuICAgICAgICAgICAgICAgICAgICBiLmxlZnQgIT0gbnVsbCAmJiAoai5sZWZ0ID0gYi5sZWZ0IC0gZi5sZWZ0ICsgbSksXG4gICAgICAgICAgICAgICAgICAgICd1c2luZycgaW4gYiA/IGIudXNpbmcuY2FsbChhLCBqKSA6IGUuY3NzKGopO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICAgIHAuZm4uZXh0ZW5kKHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXNbMF0pIHJldHVybjtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXNbMF0sXG4gICAgICAgICAgICAgICAgICAgIGIgPSB0aGlzLm9mZnNldFBhcmVudCgpLFxuICAgICAgICAgICAgICAgICAgICBjID0gdGhpcy5vZmZzZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgZCA9IGNfLnRlc3QoYlswXS5ub2RlTmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8geyB0b3A6IDAsIGxlZnQ6IDAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBiLm9mZnNldCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIChjLnRvcCAtPSBwYXJzZUZsb2F0KHAuY3NzKGEsICdtYXJnaW5Ub3AnKSkgfHwgMCksXG4gICAgICAgICAgICAgICAgICAgIChjLmxlZnQgLT0gcGFyc2VGbG9hdChwLmNzcyhhLCAnbWFyZ2luTGVmdCcpKSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgKGQudG9wICs9IHBhcnNlRmxvYXQocC5jc3MoYlswXSwgJ2JvcmRlclRvcFdpZHRoJykpIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICAoZC5sZWZ0ICs9IHBhcnNlRmxvYXQocC5jc3MoYlswXSwgJ2JvcmRlckxlZnRXaWR0aCcpKSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgeyB0b3A6IGMudG9wIC0gZC50b3AsIGxlZnQ6IGMubGVmdCAtIGQubGVmdCB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLm9mZnNldFBhcmVudCB8fCBlLmJvZHk7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFjXy50ZXN0KGEubm9kZU5hbWUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBwLmNzcyhhLCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYydcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGEub2Zmc2V0UGFyZW50O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSB8fCBlLmJvZHk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgcC5lYWNoKFxuICAgICAgICAgICAgeyBzY3JvbGxMZWZ0OiAncGFnZVhPZmZzZXQnLCBzY3JvbGxUb3A6ICdwYWdlWU9mZnNldCcgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKGEsIGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IC9ZLy50ZXN0KGMpO1xuICAgICAgICAgICAgICAgIHAuZm5bYV0gPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwLmFjY2VzcyhcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihhLCBlLCBmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGcgPSBkYShhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZiA9PT0gYilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYyBpbiBnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBnW2NdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBnLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtlXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhW2VdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBnLnNjcm9sbFRvKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID8gcChnKS5zY3JvbGxMZWZ0KCkgOiBmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID8gZiA6IHAoZykuc2Nyb2xsVG9wKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKGFbZV0gPSBmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKSxcbiAgICAgICAgcC5lYWNoKHsgSGVpZ2h0OiAnaGVpZ2h0JywgV2lkdGg6ICd3aWR0aCcgfSwgZnVuY3Rpb24oYSwgYykge1xuICAgICAgICAgICAgcC5lYWNoKFxuICAgICAgICAgICAgICAgIHsgcGFkZGluZzogJ2lubmVyJyArIGEsIGNvbnRlbnQ6IGMsICcnOiAnb3V0ZXInICsgYSB9LFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcC5mbltlXSA9IGZ1bmN0aW9uKGUsIGYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZCB8fCB0eXBlb2YgZSAhPSAnYm9vbGVhbicpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlID09PSAhMCB8fCBmID09PSAhMCA/ICdtYXJnaW4nIDogJ2JvcmRlcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAuYWNjZXNzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oYywgZCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAuaXNXaW5kb3coYylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbJ2NsaWVudCcgKyBhXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjLm5vZGVUeXBlID09PSA5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoKGYgPSBjLmRvY3VtZW50RWxlbWVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmJvZHlbJ3Njcm9sbCcgKyBhXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmWydzY3JvbGwnICsgYV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5ib2R5WydvZmZzZXQnICsgYV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZlsnb2Zmc2V0JyArIGFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZbJ2NsaWVudCcgKyBhXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUgPT09IGJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBwLmNzcyhjLCBkLCBlLCBoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHAuc3R5bGUoYywgZCwgZSwgaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcgPyBlIDogYixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSksXG4gICAgICAgIChhLmpRdWVyeSA9IGEuJCA9IHApLFxuICAgICAgICB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgIGRlZmluZS5hbWQgJiZcbiAgICAgICAgICAgIGRlZmluZS5hbWQualF1ZXJ5ICYmXG4gICAgICAgICAgICBkZWZpbmUoJ2pxdWVyeScsIFtdLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcDtcbiAgICAgICAgICAgIH0pO1xufSkod2luZG93KTtcbiIsIi8qKlxuICogY3JlYXRlcyBhbmQgYWRkcyBhIGZ1bmN0aW9uIGFzIHRoZSBkZWZhdWx0IGVycm9yIGhhbmRsZXIgZm9yIGpRdWVyeSBhamF4IG9wZXJhdGlvbnNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgJCA9IHJlcXVpcmUoJy4vanF1ZXJ5JyksXG4gICAgICAgIHdlYlNlcnZpY2UgPSAnLy93ZWJhcHBzLmNpdHkuYWMudWsvbWF0cml4L3NlcnZpY2VzL2pRdWVyeUVycm9yLnBocCcsXG4gICAgICAgIG5vdGlmeSA9IGZ1bmN0aW9uKGV2ZW50LCBqcVhIUiwgYWpheFNldHRpbmdzLCBlcnJvclRocm93bikge1xuICAgICAgICAgICAgLy9pbnNlcnQgYW4gXCJpbWFnZVwiIHdoaWNoIGhhcyBhIHdlYiBzZXJ2aWNlIGFzIHRoZSBzcmMsXG4gICAgICAgICAgICAvL3RoZSB3ZWIgc2VydmljZSBzZW5kcyBlbWFpbCB0byB1Y3Mtd2VidGVhbVxuICAgICAgICAgICAgJCgnPGltZyAvPicsIHtcbiAgICAgICAgICAgICAgICBzcmM6XG4gICAgICAgICAgICAgICAgICAgIHdlYlNlcnZpY2UgK1xuICAgICAgICAgICAgICAgICAgICAnP3U9JyArXG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZShkb2N1bWVudC5sb2NhdGlvbi5ocmVmKSArXG4gICAgICAgICAgICAgICAgICAgICcmcz0nICtcbiAgICAgICAgICAgICAgICAgICAgZXNjYXBlKGFqYXhTZXR0aW5ncy51cmwpICtcbiAgICAgICAgICAgICAgICAgICAgJyZ0PScgK1xuICAgICAgICAgICAgICAgICAgICBhamF4U2V0dGluZ3MudHlwZSArXG4gICAgICAgICAgICAgICAgICAgICcmZT0nICtcbiAgICAgICAgICAgICAgICAgICAgZXNjYXBlKGVycm9yVGhyb3duKSxcbiAgICAgICAgICAgICAgICBzdHlsZTogJ2Rpc3BsYXk6IG5vbmUnLFxuICAgICAgICAgICAgfSkuYXBwZW5kVG8oJyNmb290ZXInKTtcbiAgICAgICAgfTtcblxuICAgIC8vcmVnaXN0ZXIgdGhpcyBhcyBhIGdsb2JhbCBhamF4IGV2ZW50IGhhbmRsZXJcbiAgICAkKGZ1bmN0aW9uKCkge1xuICAgICAgICAkKGRvY3VtZW50KS5hamF4RXJyb3Iobm90aWZ5KTtcbiAgICB9KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgJCA9IHJlcXVpcmUoJy4vanF1ZXJ5JyksXG4gICAgICAgIGRlYnVnID0gcmVxdWlyZSgnLi4vdXRpbHMvZGVidWcnKSxcbiAgICAgICAgY3VzdG9tQUpBWCA9IHJlcXVpcmUoJy4vZnVuY3MvY3VzdG9tLWFqYXgnKSxcbiAgICAgICAgdmlld3BvcnRDaGFuZ2VkID0gcmVxdWlyZSgnLi9mdW5jcy92aWV3cG9ydC1jaGFuZ2VkJyksXG4gICAgICAgIGNyZWF0ZUdhbGxlcnkgPSByZXF1aXJlKCcuL2Z1bmNzL2NyZWF0ZS1nYWxsZXJ5JyksXG4gICAgICAgIGNyZWF0ZVNsaWRlciA9IHJlcXVpcmUoJy4vZnVuY3MvY3JlYXRlLXNsaWRlcicpLFxuICAgICAgICBnZXRXaW5kb3dXaWR0aCA9IHJlcXVpcmUoJy4vZnVuY3MvZ2V0LXdpbmRvdy13aWR0aCcpLFxuICAgICAgICBpbml0RHJvcGRvd25zID0gcmVxdWlyZSgnLi9mdW5jcy9pbml0LWRyb3Bkb3ducycpLFxuICAgICAgICBpbml0RHluYW1pY0dtYXAgPSByZXF1aXJlKCcuL2Z1bmNzL2luaXQtZHluYW1pYy1tYXAnKSxcbiAgICAgICAgaW5pdEF6TGlzdGluZyA9IHJlcXVpcmUoJy4vZnVuY3MvYXotbGlzdGluZycpLFxuICAgICAgICBpbWFnZUFjY29yZGlvbiA9IHJlcXVpcmUoJy4vZnVuY3MvaW1hZ2UtYWNjb3JkaW9uJyksXG4gICAgICAgIGluaXRTZWVNb3JlID0gcmVxdWlyZSgnLi9mdW5jcy9pbml0LXNlZS1tb3JlJyksXG4gICAgICAgIGltYWdlQ3JlZGl0YXRpb24gPSByZXF1aXJlKCcuL2Z1bmNzL2ltYWdlLWNyZWRpdGF0aW9uJyksXG4gICAgICAgIGluaXRQbGFjZWhvbGRlckhhbGxiYWNrID0gcmVxdWlyZSgnLi9mdW5jcy9wbGFjZWhvbGRlci1mYWxsYmFjaycpLFxuICAgICAgICBpbml0SW1hZ2VDYXJvdXNlbCA9IHJlcXVpcmUoJy4vZnVuY3MvaW5pdC1pbWFnZS1jYXJvdXNlbCcpLFxuICAgICAgICBpbml0V2hpdGVDYXJkcyA9IHJlcXVpcmUoJy4vZnVuY3MvaW5pdC13aGl0ZS1jYXJkcycpLFxuICAgICAgICBzZWFyY2hBdXRvQ29tcGxldGUgPSByZXF1aXJlKCcuL2Z1bmNzL3NlYXJjaC1hdXRvY29tcGxldGUnKSxcbiAgICAgICAgaW5pdE5ld3NFdmVudHNTdHJpcCA9IHJlcXVpcmUoJy4vZnVuY3MvaW5pdC1uZXdzLWV2ZW50cy1zdHJpcCcpLFxuICAgICAgICBpbml0Q29va2llTm90aWNlID0gcmVxdWlyZSgnLi4vdXRpbHMvaW5pdC1jb29raWUtbm90aWNlJyksXG4gICAgICAgIGhlYWRlclByaW1hcnlOYXYgPSByZXF1aXJlKCcuL2Z1bmNzL2hlYWRlci1wcmltYXJ5LW5hdicpLFxuICAgICAgICBoZWFkZXJOYXZzID0gcmVxdWlyZSgnLi9mdW5jcy9oZWFkZXItbmF2cycpLFxuICAgICAgICBmb290ZXIgPSByZXF1aXJlKCcuL2Z1bmNzL2Zvb3RlcicpLFxuICAgICAgICBwb3B1cERpYWxvZyA9IHJlcXVpcmUoJy4vZnVuY3MvcG9wdXAtZGlhbG9nJyksXG4gICAgICAgIHNjcm9sbFRvID0gcmVxdWlyZSgnLi4vdXRpbHMvc2Nyb2xsLXRvJyksXG4gICAgICAgIHJlc3BvbnNpdmVUYWJsZXMgPSByZXF1aXJlKCcuL2Z1bmNzL3Jlc3BvbnNpdmUtdGFibGVzJyksXG4gICAgICAgIGN5Y2xpY1BvcHVwID0gcmVxdWlyZSgnLi9mdW5jcy9jeWNsaWMtcG9wdXAnKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYWluIENJVFkgd3JhcHBlciBvYmplY3RcbiAgICAgKiBAdmVyc2lvbiAkUmV2aXNpb246IDYyOTEgJCAoJERhdGU6IDIwMTItMDktMDUgMTY6MDY6MzAgKzAxMDAgKFdlZCwgMDUgU2VwIDIwMTIpICQpXG4gICAgICogQGF1dGhvciBDaXR5IFdlYiBUZWFtXG4gICAgICovXG4gICAgdmFyIENJVFkgPSAoZnVuY3Rpb24odykge1xuICAgICAgICAndXNlIHN0cmljdCc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBvYmplY3QgdG8gaG9sZCBhbGwgbG9hZGFibGUgc2NyaXB0cywgYWRkIGFuIG9iamVjdCBoZXJlIHRvIGFsbG93IGl0J3MgbG9hZGluZyBpbiBhIHBhZ2VcbiAgICAgICAgICpcbiAgICAgICAgICogRWFjaCBjaGlsZCBvYmplY3QgaGFzIHRocmVlIHByb3BlcnRpZXM6XG4gICAgICAgICAqICAgZGVzY3JpcHRpb246IGEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIHNjcmlwdFxuICAgICAgICAgKiAgICAgICAgICAgc3JjOiB0aGUgZmlsZW5hbWUgb2YgdGhlIHNjcmlwdFxuICAgICAgICAgKiAgICAgICBbYXN5bmNdOiBXaGV0aGVyIHRvIGxvYWQgdGhlIHNjcmlwdCBhc3luY2hyb25vdXNseSAoYXNzdW1lZCBmYWxzZSB1bmxlc3MgZ2l2ZW4pXG4gICAgICAgICAqXG4gICAgICAgICAqIEB2YXIgT2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICB2YXIgc2NyaXB0cyA9IHtcbiAgICAgICAgICAgICAgICBnb29nbGVNYXBzQXBpOiB7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnZ29vZ2xlIG1hcHMgYXBpJyxcbiAgICAgICAgICAgICAgICAgICAgc3JjOlxuICAgICAgICAgICAgICAgICAgICAgICAgJ2h0dHBzOi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5QnZnNnIxeDJaUktQQXNjZVZhS1BsZzZ0TzIwUWlCRHBvJnNlbnNvcj1mYWxzZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmbG93cGxheWVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnaW5jbHVkZSBmbG93cGxheWVyIGZvciBwYWdlcyB3aXRoIHZpZGVvcycsXG4gICAgICAgICAgICAgICAgICAgIHNyYzogJ2xpYi9mbG93cGxheWVyL2Zsb3dwbGF5ZXItMy4yLjQubWluLmpzJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZsb3dwbGF5ZXJFbWJlZDoge1xuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0VtYmVkIGNvZGUgZm9yIGZsb3dwbGF5ZXInLFxuICAgICAgICAgICAgICAgICAgICBzcmM6ICdsaWIvZmxvd3BsYXllci9mbG93cGxheWVyLmVtYmVkLTMuMC4zLm1pbi5qcycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzd2ZvYmplY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdzd2ZvYmplY3QgZm9yIHlvdXR1YmUgdmlkZW8ocyknLFxuICAgICAgICAgICAgICAgICAgICBzcmM6ICdsaWIvc3dmb2JqZWN0L3N3Zm9iamVjdC5qcycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoaWdoY2hhcnRzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnSlF1ZXJ5IGNoYXJ0aW5nIHBsdWdpbicsXG4gICAgICAgICAgICAgICAgICAgIHNyYzogJ2xpYi9qcXVlcnkvcGx1Z2lucy9oaWdoY2hhcnRzL2hpZ2hjaGFydHMtNC0xLTQuanMnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgalZlY3Rvck1hcDoge1xuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ2pRdWVyeSBwbHVnaW4gZm9yIFNWRyB3b3JsZCBtYXAnLFxuICAgICAgICAgICAgICAgICAgICBzcmM6XG4gICAgICAgICAgICAgICAgICAgICAgICAnbGliL2pxdWVyeS9wbHVnaW5zL3ZlY3Rvci1tYXAvanF1ZXJ5LnZlY3Rvci1tYXAubWluLmpzJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHdvcmxkTWFwOiB7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnbWFwIHN2ZycsXG4gICAgICAgICAgICAgICAgICAgIHNyYzogJ2xpYi9qcXVlcnkvcGx1Z2lucy92ZWN0b3ItbWFwL3dvcmxkLWVuLmpzJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ1aWxkaW5nVGhlVmlzaW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnYnVpbGRpbmcgdGhlIHZpc2lvbiBzcGVjaWZpYyBzY3JpcHRzJyxcbiAgICAgICAgICAgICAgICAgICAgc3JjOiAnYnVpbGRpbmdUaGVWaXNpb24uanMnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGlicmFyeToge1xuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ2xpYnJhcnkgc2l0ZSBzY3JpcHRzJyxcbiAgICAgICAgICAgICAgICAgICAgc3JjOiAnbGlicmFyeS5qcycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0NvbXB1dGVyIFJvb20gc2l0ZSBzY3JpcHRzJyxcbiAgICAgICAgICAgICAgICAgICAgc3JjOiAnbG9jYXRpb24uanMnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAgICAgICAgICogR0xPQkFMIFZBUklBQkxFU1xuICAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgbG9jYXRpb24gb2YgZXh0ZXJuYWwgc2NyaXB0cyAod2l0aCB0cmFpbGluZyBzbGFzaClcbiAgICAgICAgICAgICAqIEB2YXIgU3RyaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNyY1ByZWZpeCA9XG4gICAgICAgICAgICAgICAgJy8vJyArXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWVcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL3d3d3xpbnRyYW5ldC8sICdzMScpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdjYXNzLicsICcnKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnY2l0eXNwb3J0Lm9yZy51aycsICdjaXR5LmFjLnVrJykgK1xuICAgICAgICAgICAgICAgICcvY2l0eXIvanMvJyxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIHZlcnNpb24gbnVtYmVyIHRvIHByZXBlbmQgdG8gdGhlIGZpbGUgbmFtZSwgc2V0IGluIHBhZ2VcbiAgICAgICAgICAgICAqIEB2YXIgU3RyaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZlcnNpb24gPSB3LmNpdHlWZXJzaW9uIHx8ICcxMjM0NTY3ODkuJyxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTGF6eWxvYWQgZnVuY3Rpb24sIGluamVjdHMgYSA8c2NyaXB0PiBlbGVtZW50IGludG8gdGhlIHBhZ2UgaGVhZFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIG5vdyBwcm94aWVzIHRvIHllcG5vcGVcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0ganNIYW5kbGU6IFRoZSBPYmplY3QgZnJvbSBDSVRZLnNjcmlwdHMgdG8gbG9hZFxuICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGNhbGxiYWNrOiBUaGUgbmFtZSBvZiB0aGUgY2FsbGJhY2sgdG8gYmUgZXhlY3V0ZWQgYWZ0ZXIgdGhpcyBzY3JpcHQgaGFzIGxvYWRlZFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsb2FkID0gZnVuY3Rpb24oanNIYW5kbGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgLy93b3JrIG91dCBmdWxsIHBhdGhcbiAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcmlwdCA9IHNjcmlwdHNbanNIYW5kbGVdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgvXmh0dHBzPzpcXC9cXC8vLnRlc3Qoc2NyaXB0LnNyYykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzY3JpcHQuc3JjO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyY1ByZWZpeCArXG4gICAgICAgICAgICAgICAgICAgICAgICAoL3BsdWdpbnN8bGliLy50ZXN0KHNjcmlwdC5zcmMpID8gJycgOiAnbW9kdWxlcy8nKSArXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JpcHQuc3JjXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSkoKTtcblxuICAgICAgICAgICAgICAgIHllcG5vcGUoe1xuICAgICAgICAgICAgICAgICAgICBsb2FkOiBwYXRoLFxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0VmVyc2lvbiA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gdjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICAgICAgICAgKiBVU0VGVUwgR0xPQkFMIEZVTkNUSU9OU1xuICAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTdHVmZiBuZWVkZWQgb24gZXZlcnlwYWdlIC0gZXhwbG9yZSBjaXR5LCBsb2dpbiBldGMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluaXRQYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyICRib2R5ID0gJCgnYm9keScpLFxuICAgICAgICAgICAgICAgICAgICAkZm9ybSA9ICRib2R5LmZpbmQoJyNzZWFyY2gsICNoZWFkZXJfX3NlYXJjaF9fZm9ybScpLFxuICAgICAgICAgICAgICAgICAgICAkc2VhcmNoRm9ybSA9ICRib2R5LmZpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIi5zZWFyY2gtZm9ybVtkYXRhLWF1dG9jb21wbGV0ZS1zdGF0dXMhPSdvZmYnXVwiXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICRzZWFyY2hGb3JtUXVlcnkgPSAkc2VhcmNoRm9ybS5maW5kKCcuc2VhcmNoLWZvcm1fX3F1ZXJ5JyksXG4gICAgICAgICAgICAgICAgICAgICRxdWVyeSA9ICRmb3JtLmZpbmQoJyNxdWVyeScpLFxuICAgICAgICAgICAgICAgICAgICBpbmRleEZvcm0gPSAkKCcjZmItcXVlcnlmb3JtJyksXG4gICAgICAgICAgICAgICAgICAgIGluZGV4UXVlcnkgPSAkKCcjc2VhcmNoLXF1ZXJ5JywgaW5kZXhGb3JtKSxcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoUGFnZUF1dG9Db21wbGV0ZUNvbGxlY3Rpb24gPVxuICAgICAgICAgICAgICAgICAgICAgICAgJGJvZHkuYXR0cignaWQnKSA9PT0gJ2ludHJhbmV0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ2ludHJhbmV0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ21haW4tYWxsJyxcbiAgICAgICAgICAgICAgICAgICAgJGdhbGxlcmllcyA9ICQoJyNjb250ZW50JykuZmluZCgnLmdhbGxlcnknKSxcbiAgICAgICAgICAgICAgICAgICAgYXpMaXN0aW5ncyA9ICQoJy5hei1zaW5nbGUtcGFnZScpLFxuICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGVDb2xsZWN0aW9uID0gJHNlYXJjaEZvcm0uYXR0cihcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLWNvbGxlY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIC8vIG5hdmlnYXRpb25cblxuICAgICAgICAgICAgICAgICAgICAkcHJpbWFyeU5hdiA9ICQoJyNwcmltYXJ5LW5hdicpLFxuICAgICAgICAgICAgICAgICAgICAkc2Vjb25kYXJ5TmF2ID0gJCgnI3NlY29uZGFyeS1uYXYnKSxcbiAgICAgICAgICAgICAgICAgICAgJHNlY29uZGFyeU5hdkxpcyA9ICQoJyNzZWNvbmRhcnktbmF2ID4gbGknKSxcbiAgICAgICAgICAgICAgICAgICAgJGNhcm91c2VsT2JqID0gJCgnI3Byb21vLWFyZWEnKSwgLy9jYXJvdXNlbCBjb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gVUkgZWxlbWVudHNcbiAgICAgICAgICAgICAgICAgICAgJGFjY29yZGlvbnMgPSAkYm9keS5maW5kKCcuYWNjb3JkaW9uJyksXG4gICAgICAgICAgICAgICAgICAgICRyZXNwb25zaXZlVGFicyA9ICRib2R5LmZpbmQoJy5yZXNwb25zaXZlLXRhYnMnKSxcbiAgICAgICAgICAgICAgICAgICAgLy8gbWlzYy5cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFVybCA9ICRwcmltYXJ5TmF2LmRhdGEoJ3VybCcpIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBtb2RpZnlTZWNOYXYgPSBjdXJyZW50VXJsLmluZGV4T2YoJy9teS1jb3VudHJ5LycpIDwgMDtcbiAgICAgICAgICAgICAgICAvL2VuZCBpbml0UGFnZSB2YXJzXG5cbiAgICAgICAgICAgICAgICAvLyBzdmcgZmFsbGJhY2tcbiAgICAgICAgICAgICAgICBpZiAoIU1vZGVybml6ci5zdmcpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnI2hlYWRlcl9fbG9nbyBpbWcnKS5hdHRyKCdzcmMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyYycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoJy5zdmcnLCAnLnBuZycpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBoZWFkZXJQcmltYXJ5TmF2KCk7XG4gICAgICAgICAgICAgICAgaGVhZGVyTmF2cygpO1xuICAgICAgICAgICAgICAgIGZvb3RlcigpO1xuICAgICAgICAgICAgICAgICRyZXNwb25zaXZlVGFicy5hY2NvcmRpb25UYWJzKCk7XG4gICAgICAgICAgICAgICAgaW5pdERyb3Bkb3ducygpO1xuICAgICAgICAgICAgICAgIGluaXRBekxpc3RpbmcoYXpMaXN0aW5ncyk7XG4gICAgICAgICAgICAgICAgaW1hZ2VBY2NvcmRpb24oKTtcbiAgICAgICAgICAgICAgICBpbml0U2VlTW9yZSgpO1xuICAgICAgICAgICAgICAgIGluaXRXaGl0ZUNhcmRzKCk7XG4gICAgICAgICAgICAgICAgaW5pdE5ld3NFdmVudHNTdHJpcCgpO1xuICAgICAgICAgICAgICAgIGNyZWF0ZVNsaWRlcigkY2Fyb3VzZWxPYmopO1xuICAgICAgICAgICAgICAgIGluaXRQbGFjZWhvbGRlckhhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgaW5pdEltYWdlQ2Fyb3VzZWwoKTtcbiAgICAgICAgICAgICAgICBpbml0Q29va2llTm90aWNlKCQpO1xuICAgICAgICAgICAgICAgIHBvcHVwRGlhbG9nKCk7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2l2ZVRhYmxlcygpO1xuICAgICAgICAgICAgICAgIGN5Y2xpY1BvcHVwKCk7XG4gICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byB3YWl0IGZvciB0aGUgRE9NIHRvIGJlIG1vZGlmaWVkIGJlZm9yZVxuICAgICAgICAgICAgICAgIC8vIHRyYXZlcnNpbmcgZm9yIEltYWdlIENyZWRpdHNcbiAgICAgICAgICAgICAgICBpbWFnZUNyZWRpdGF0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAkZ2FsbGVyaWVzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUdhbGxlcnkoJCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL3NvbWUgaGVscGVyIHN0dWZmIHRvIHN0eWxlIHByaW1hcnkgbmF2aWdhdGlvblxuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRVcmwuaW5kZXhPZignLy93d3cuY2l0eS5hYy51ay9uZXdzJykgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAkc2Vjb25kYXJ5TmF2LmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGlmeVNlY05hdikge1xuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgc2Vjb25kYXJ5LW5hdi1zaWJsaW5ncyB0byBzZWNvbmRhcnktbmF2IG9ubHkgaWYgd2UgaGF2ZSBzb21lXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJ29sI3NlY29uZGFyeS1uYXYgPiBsaTpsYXN0ID4gYScpLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnb2wjc2Vjb25kYXJ5LW5hdi1zaWJsaW5ncycpLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBsaW5rIHRvIHRoaXMgcGFnZSBpc24ndCBpbiBzZWNvbmRhcnktbmF2LXNpYmxpbmdzLCBqdXN0IGFkZCB0aGUgc2libGluZ3NcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCdvbCNzZWNvbmRhcnktbmF2LXNpYmxpbmdzIGEnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHJlZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvQXJyYXkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaW5kZXhPZihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJ29sI3NlY29uZGFyeS1uYXYgPiBsaTpsYXN0ID4gYScpWzBdLmhyZWZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA9PT0gLTFcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJ29sI3NlY29uZGFyeS1uYXYnKS5hcHBlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJzxsaT4nKS5odG1sKCQoJ29sI3NlY29uZGFyeS1uYXYtc2libGluZ3MnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UgcmVwbGFjZSB0aGUgc2Vjb25kYXJ5IG5hdiBjb21wbGV0ZWx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnb2wjc2Vjb25kYXJ5LW5hdiA+IGxpOmxhc3QnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW1wdHkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCQoJ29sI3NlY29uZGFyeS1uYXYtc2libGluZ3MnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAkKCdvbCNwcmltYXJ5LW5hdiBsaSwgb2wjc2Vjb25kYXJ5LW5hdiBsaScpLnJlbW92ZUNsYXNzKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3NlbGVjdGVkJ1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAkKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ29sI3ByaW1hcnktbmF2IGFbaHJlZj1cIicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRVcmwgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcIl0sIG9sI3NlY29uZGFyeS1uYXYgYVtocmVmPVwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFVybCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiXSdcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgnbGknKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICRwcmltYXJ5TmF2LmZpbmQoJy5jdXJyZW50JykubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2Vjb25kYXJ5TmF2LmZpbmQoJy5zZWxlY3RlZCcpLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vd2UgYXJlIG9uIHRoZSBob21lIHBhZ2Ugb2YgdGhlIHNlY3Rpb24gc28gaGlkZSBzZWNvbmRhcnkgbmF2IGFuZCBhZGQgaGVscGVyIGNsYXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2Vjb25kYXJ5TmF2LmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRwcmltYXJ5TmF2LmFkZENsYXNzKCd0b3AtbGV2ZWwnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vaGlkZSBzZWNvbmRhcnkgbGV2ZWwgaWYgZW1wdHlcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzZWNvbmRhcnlOYXZMaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2Vjb25kYXJ5TmF2LmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2Vjb25kYXJ5IG5hdiBpcyBkZWZpbml0ZWx5IHNob3dpbmcsIGFkZCBzb21lIGNsYXNzZXMgdG8gaGVscCBzdHlsaW5nXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgd2UgaGF2ZSBzZWNvbmRhcnktbmF2LXNpYmxpbmdzIHRoZSBwcmV2b3VzIGxpIGVsZW1lbnQgd2lsbCBiZSB0aGUgcGFyZW50IGZyb20gb25lIGxldmVsIHVwXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlLmcuIGh0dHA6Ly93d3cuY2l0eS5hYy51ay9hcnRzLXNvY2lhbC1zY2llbmNlcy9qb3VybmFsaXNtL3N0dWRlbnQtd29yay9jaXR5LWpvdXJuYWxpc20tc3R1ZGVudC1ieWxpbmVzL2phbnVhcnktMjAxMi90ZXN0LWxldmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjc2Vjb25kYXJ5LW5hdi1zaWJsaW5ncycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByZXYoJ2xpJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2VuZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSBjdXJyZW50IHBhZ2UgaXMgcGFydCBvZiB0aGUgYnJlYWRjcnVtYiBpdHMgcHJldmlvdXMgc2libGluZyByZWd1aXJlcyBhIGNsYXNzIG9mIFwic2VsZWN0ZWQtam9pblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBvbmx5IHdhbnQgdGhpcyB0byBoYXBwZW4gb24gZGlyZWN0IGNoaWxkcmVuIG9mICRzZWNvbmRhcnlOYXZcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGUuZyBodHRwOi8vd3d3LmNpdHkuYWMudWsvYXJ0cy1zb2NpYWwtc2NpZW5jZXMvam91cm5hbGlzbS9zdHVkZW50LXdvcmsvY2l0eS1qb3VybmFsaXNtLXN0dWRlbnQtYnlsaW5lcy9qYW51YXJ5LTIwMTJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzZWNvbmRhcnlOYXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnPiBsaS5zZWxlY3RlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByZXYoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2VsZWN0ZWQtam9pbicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNlY29uZGFyeU5hdi5maW5kKCcuc2VsZWN0ZWQnKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCBhIGNsYXNzIG9mIFwiLnBhcmVudFwiIHRvIGFjdGl2ZSBlbGVtZW50IGluIHByaW1hcnkgbmF2IHNvIHdlIGNhbiB1bi1ib2xkIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHByaW1hcnlOYXYuZmluZCgnLmN1cnJlbnQnKS5hZGRDbGFzcygncGFyZW50Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBpbml0YWxpc2UgYW55IGFjY29yZGlvbnMgZm91bmRcbiAgICAgICAgICAgICAgICAkYWNjb3JkaW9ucy5hY2NvcmRpb24oe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHRTdHlsZTogJ2NvbnRlbnQnLFxuICAgICAgICAgICAgICAgICAgICBjb2xsYXBzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGljb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXI6ICd1aS1pY29uLXRyaWFuZ2xlLTEtcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJTZWxlY3RlZDogJ3VpLWljb24tdHJpYW5nbGUtMS1uJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG8odWkubmV3SGVhZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vc2V0IHVwIGF1dG9jb21wbGV0ZSBvbiBzZWFyY2ggYm94XG4gICAgICAgICAgICAgICAgc2VhcmNoQXV0b0NvbXBsZXRlKFxuICAgICAgICAgICAgICAgICAgICAkZm9ybSxcbiAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hQYWdlQXV0b0NvbXBsZXRlQ29sbGVjdGlvblxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAvL3NldCB1cCBhdXRvY29tcGxldGUgb24gc2VhcmNoIGJveCBvbiBtYWluIHNlYXJjaCBwYWdlXG4gICAgICAgICAgICAgICAgc2VhcmNoQXV0b0NvbXBsZXRlKFxuICAgICAgICAgICAgICAgICAgICBpbmRleEZvcm0sXG4gICAgICAgICAgICAgICAgICAgIGluZGV4UXVlcnksXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFBhZ2VBdXRvQ29tcGxldGVDb2xsZWN0aW9uXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIC8vc2V0IHVwIGF1dG9jb21wbGV0ZSBvbiBzZWFyY2ggYm94IG9uIGludHJhbmV0IG1haW4gc2VhcmNoIHBhZ2VcbiAgICAgICAgICAgICAgICBzZWFyY2hBdXRvQ29tcGxldGUoXG4gICAgICAgICAgICAgICAgICAgICRzZWFyY2hGb3JtLFxuICAgICAgICAgICAgICAgICAgICAkc2VhcmNoRm9ybVF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGVDb2xsZWN0aW9uXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIC8vIGNhdGNoIGFueSB2aWRlb3MgdGhhdCBoYXZlIGJlZW4gbWFudWFsbHkgaW5wdXRcbiAgICAgICAgICAgICAgICAkKFwiaWZyYW1lW3NyYyo9J3lvdXR1YmUnXVwiKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlkV2lkdGggPSAkZWxlbWVudC5vdXRlcldpZHRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAkcGFyZW50ID0gJGVsZW1lbnQucGFyZW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZG9uJ3QgZG91YmxlIHdyYXAgYW4gaWZyYW1lXG4gICAgICAgICAgICAgICAgICAgIGlmICghJHBhcmVudC5oYXNDbGFzcygnZW1iZWQtY29udGFpbmVyJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBlbGFzdGljIG9iamVjdHMsIHdlIG5lZWQgMiAoISkgd3JhcHBlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICRlbGVtZW50LndyYXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJlbWJlZC13cmFwcGVyXCIgc3R5bGU9XCJ3aWR0aDonICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkV2lkdGggK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncHhcIj48ZGl2IGNsYXNzPVwiZW1iZWQtY29udGFpbmVyXCI+PC9kaXY+PC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaW5pdER5bmFtaWNHbWFwKCQoJyNkeW5hbWljLWdtYXAnKSk7XG5cbiAgICAgICAgICAgICAgICAvLyBoaWRlL3Nob3cgZnVuY3Rpb25hbGl0eSBmb3IgdW5pdCBsaXN0cyAoZXhhbXBsZSBvbiBzdWJqZWN0IGFyZWEgcGFnZXMpXG4gICAgICAgICAgICAgICAgJCgnLnVuaXQtbGlzdHMgLnVuaXQtbGlzdHMtdGl0bGUnKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudHMoJy51bml0LWxpc3RzJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC50b2dnbGVDbGFzcygndW5pdC1saXN0cy1leHBhbmRlZCcpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy9oaWRlL3Nob3cgb3RoZXIgYW1vdW50IGFuZCBwYXNzIHRoZSBjb3JyZWN0IHZhbHVlIG9uIENpdHkgRnV0dXJlIEZ1bmQgcGFnZVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgJCgnI2Z1dHVyZS1mdW5kLWZvcm1zJykubGVuZ3RoID09PSAxIHx8XG4gICAgICAgICAgICAgICAgICAgICQoJyNyYWNpbmctZm9ybScpLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAkKCcjY2ZmLXJlZ3VsYXItZG9uYXRpb24gaW5wdXRbdHlwZT1yYWRpb10nKS5jbGljayhcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRFbGVtZW50ID0gJCh0aGlzKS5wYXJlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuZG9uYXRlLWFwcGVhbCcpLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudEVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCcuZG9uYXRpb24tb3RoZXItb3B0aW9uJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5pcygnOmNoZWNrZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRFbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmRvbmF0aW9uLW90aGVyLWFtb3VudCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnaW5wdXQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ25hbWUnLCAncmVndWxhcl9hbW91bnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRFbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmRvbmF0aW9uLW90aGVyLWFtb3VudCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnaW5wdXQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ25hbWUnLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd2YWx1ZScsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICQoJyNjZmYtc2luZ2xlLWRvbmF0aW9uIGlucHV0W3R5cGU9cmFkaW9dJykuY2xpY2soXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50RWxlbWVudCA9ICQodGhpcykucGFyZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRFbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmRvbmF0aW9uLW90aGVyLW9wdGlvbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaXMoJzpjaGVja2VkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50RWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5kb25hdGlvbi1vdGhlci1hbW91bnQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ2lucHV0JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCduYW1lJywgJ3RmYV9BbW91bnR5b3V3aXNodG9kJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50RWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5kb25hdGlvbi1vdGhlci1hbW91bnQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ2lucHV0JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCduYW1lJywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigndmFsdWUnLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICQoJy5tZWRpYS1yaWJib24gLmVtYmVkLWNvbnRhaW5lcicpLnZpZGVvUHJldmlldyh7XG4gICAgICAgICAgICAgICAgICAgIHNob3dJbmZvOiAwLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICQoJy53aWRnZXQtY29udGVudCAuZW1iZWQtY29udGFpbmVyJykudmlkZW9QcmV2aWV3KCk7XG4gICAgICAgICAgICAgICAgJCgnLmludGVybmF0aW9uYWwtbG9uZG9uIC5lbWJlZC1jb250YWluZXInKS52aWRlb1ByZXZpZXcoKTtcbiAgICAgICAgICAgICAgICAkKCcuc29jaWFsLXdhbGwgLmVtYmVkLWNvbnRhaW5lcicpLnZpZGVvUHJldmlldygpO1xuICAgICAgICAgICAgICAgICQoXG4gICAgICAgICAgICAgICAgICAgICcuZW1iZWQtY29udGFpbmVyLmVtYmVkLWNvbnRhaW5lci0tZGVmYXVsdC15dC1wcmV2aWV3J1xuICAgICAgICAgICAgICAgICkudmlkZW9QcmV2aWV3KCk7XG4gICAgICAgICAgICB9LCAvL2VuZCBpbml0UGFnZVxuICAgICAgICAgICAgb2JqZWN0U2l6ZSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBzaXplID0gMCxcbiAgICAgICAgICAgICAgICAgICAga2V5O1xuXG4gICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSArPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGaW5kcyBhbnkgdmlkIGltYWdlcyBvbiBhIHBhZ2UgYW5kIHJlcGxhY2VzIHRoZW0gd2l0aCBlaXRoZXIgYSBZb3VUdWJlIGlmcmFtZSBvciBTV0ZPYmplY3QgZm9yIEZNUyB2aWRzXG4gICAgICAgICAgICAgKiBAcmV0dXJuOiBVbmRlZmluZWRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmlkZW9zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyICR5b3V0dWJlVmlkcyA9ICQoJ2ltZy55b3V0dWJlJyksXG4gICAgICAgICAgICAgICAgICAgICRmbXNWaWRzID0gJCgnaW1nLmZtcycpLFxuICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogUmVwbGFjZXMgYW4gaW1hZ2UgZWxlbWVudCB3aXRoIFlvdVR1YmUgaUZyYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW06IHtPYmplY3R9IDogJGVsIC0galF1ZXJ5IG9iamVjdCBmb3IgeW91VHViZSBpbWFnZXMgdG8gYmUgcmVwbGFjZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEByZXR1bjoge1VuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBlbWJlZFlvdXR1YmUgPSBmdW5jdGlvbigkeW91dHViZVZpZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICR5b3V0dWJlVmlkcy5lYWNoKGZ1bmN0aW9uKGksIGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRlbCA9ICQoZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRXaWR0aCA9IDUwMCwgLy8gZGVmYXVsdCB3aWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRIZWlnaHQgPSAzMjAsIC8vIGRlZmF1bHQgaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvSUQgPSAkZWwuYXR0cignaWQnKS5yZXBsYWNlKCd2aWRfJywgJycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVsLnJlcGxhY2VXaXRoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImVtYmVkLXdyYXBwZXJcIj48ZGl2IGNsYXNzPVwiZW1iZWQtY29udGFpbmVyXCI+PGlmcmFtZSBoZWlnaHQ9JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRIZWlnaHQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyB3aWR0aD0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRXaWR0aCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIHNyYz1cIi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9JRCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIj9yZWw9MCZ3bW9kZT10cmFuc3BhcmVudFxcXCIgZnJhbWVib3JkZXI9JzAnIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT48L2Rpdj48L2Rpdj5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIFJlcGxhY2VzIGFuIGltYWdlIGVsZW1lbnQgd2l0aCBTV0YgT2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW06IHtPYmplY3R9IDogJGVsIC0galF1ZXJ5IG9iamVjdCBmb3IgYWxsIGZtcyBpbWFnZXMgdG8gYmUgcmVwbGFjZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEByZXR1bjoge1VuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBlbWJlZEZtcyA9IGZ1bmN0aW9uKCRmbXNWaWRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BsYXNoSW1hZ2VzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc3NTdGFuZGFyZDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy8vczEuY2l0eS5hYy51ay9pL2Zsb3dwbGF5ZXItY2Fzcy5qcGc/dj04MTA1JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNzUmV0aW5hOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaXR5U3RhbmRhcmQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcvL3MxLmNpdHkuYWMudWsvaS9mbG93cGxheWVyLWNpdHkuanBnP3Y9ODEwNScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2l0eVJlbnRpbmE6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJGZtc1ZpZHMuZWFjaChmdW5jdGlvbihpLCBlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZWwgPSAkKGVsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkV2lkdGggPSA2ODcsIC8vZGVmYXVsdCB3aWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRIZWlnaHQgPSA0MTksIC8vIGRlZmF1bHQgaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsSWQgPSAkZWwuYXR0cignaWQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkSWQgPSBlbElkLnJlcGxhY2UoJ3ZpZF8nLCAnJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3NJbnN0YWxsID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcvL3MxLmNpdHkuYWMudWsvanMvc3dmb2JqZWN0L2V4cHJlc3NJbnN0YWxsLnN3ZicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYXNodGFyZ2V0dmVyc2lvbiA9ICc5LjAuMjgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGFzaHZhcnMgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvd1NjcmlwdEFjY2VzczogJ2Fsd2F5cycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvd2Z1bGxzY3JlZW46ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdtb2RlOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICd2aWRwbGF5ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHZpZElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGxhc2hJbWFnZSA9IENJVFkuaXNDYXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHNwbGFzaEltYWdlcy5jYXNzU3RhbmRhcmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogc3BsYXNoSW1hZ2VzLmNpdHlTdGFuZGFyZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dmQ2FsbEJhY2sgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGUucmVmKS53cmFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZW1iZWQtd3JhcHBlclwiIHN0eWxlPVwid2lkdGg6JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZFdpZHRoICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3B4XCI+PGRpdiBjbGFzcz1cImVtYmVkLWNvbnRhaW5lclwiPjwvZGl2PjwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIHZpZGVvIGlzIGluY2x1ZGVkIGluIHRoZSBjb3Vyc2UgZGVzY3JpcHRpb24gZGl2IG9mIGEgY291cnNlIE4gcGFnZSwgd2lkdGggbmVlZHMgdG8gYmUgNDE5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZWwucGFyZW50cygnLmNvdXJzZS1kZXNjcmlwdGlvbicpLmxlbmd0aCAhPT0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRXaWR0aCA9IDQxOTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3ZpZHMgaGF2ZSBkaWZmZXJlbnQgc2l6ZXMgZGVwZW5kaW5nIG9uIHRoZSBzaXplIG9mIHRoZSBjb250ZW50IGRpdiBhbmQgaWYgdGhleSBhcmUgd2lkZXNjcmVlbiBvbiBzcXVhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGVsLmhhc0NsYXNzKCd3aWRlc2NyZWVuJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkSGVpZ2h0ID0gdmlkV2lkdGggKiAwLjYxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZFdpZHRoID0gNTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRIZWlnaHQgPSAzMjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhc3dmb2JqZWN0Lmhhc0ZsYXNoUGxheWVyVmVyc2lvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYXNodGFyZ2V0dmVyc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZXhwbGFpbiB3aHkgdGhlcmUgaXMgbm8gdmlkZW9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVsLmFmdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxwIGNsYXNzPVwibm90aWNlLW1lc3NhZ2VcIj48aSBjbGFzcz1cImZhIGZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlXCIgc3R5bGU9XCJjb2xvciA6ICNDQ0NDMDBcIj48L2k+IFlvdSBuZWVkIHRvIGhhdmUgZmxhc2ggcGxheWVyICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYXNodGFyZ2V0dmVyc2lvbiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBvciBncmVhdGVyIGluc3RhbGxlZCB0byBzZWUgdGhlIHZpZGVvLjwvcD4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHA+PGEgaHJlZj1cImh0dHA6Ly9nZXQuYWRvYmUuY29tL2ZsYXNocGxheWVyL1wiPkdldCBGbGFzaCBQbGF5ZXI8L2E+PC9wPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbmZpZyBoYXMgdG8gYmUgaW4gYSBzdHJpbmcgYW5kIGtleSBhbmQgdmFsdWVzIGhhdmUgdG8gYmUgXCJxdW90ZWRcIiAtIG5pZ2h0bWFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zdHJ1Y3QgYWxsIHRoZSB2YXJpYWJsZXMgdG8gcGFzcyB0byB0aGUgcGxheWVyIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpZWQgdG8gbWFrZSB0aGlzIGEgcHJvcGVyIGpzb24gYXJyYXksIGRpZG4ndCB3b3JrIDooXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElFIGRvZXNuJ3QgbGlrZSBkb3VibGUgcXVvdGVzIGhlcmUgc28gaWdub3JlIEpTSGludCBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGFzaHZhcnMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ7J2NsaXAnOiB7J3Byb3ZpZGVyJzogJ3J0bXAnfSwgJ3BsYXlsaXN0JzogW3sndXJsJzonXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BsYXNoSW1hZ2UgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCInLCAnYXV0b1BsYXknOiB0cnVlfSwgeyd1cmwnOiAnXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkSWQucmVwbGFjZSgndmlkXycsICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIi9IaV9iYW5kd2lkdGgnLCAnYXV0b1BsYXknOiBmYWxzZSwgJ3NjYWxpbmcnOiAnZml0J31dLCAncGx1Z2lucyc6IHsncnRtcCc6IHsndXJsJzogJy8vczEuY2l0eS5hYy51ay9qcy9mbG93cGxheWVyL2Zsb3dwbGF5ZXIucnRtcC0zLjIuMy5zd2YnLCAnbmV0Q29ubmVjdGlvblVybCc6ICdydG1wOi8vbWVkaWEuY2l0eS5hYy51ay9mbG93cGxheWVyJywgJ29iamVjdEVuY29kaW5nJzogJzAnLCAncHJveHlUeXBlJzogJ25vbmUnIH0sICdjb250cm9scyc6IHsndXJsJzogJ2Zsb3dwbGF5ZXIuY29udHJvbHMuc3dmJ30gfSB9XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5pdGlhdGUgdGhlIHBsYXllclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2ZvYmplY3QuZW1iZWRTV0YoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLy9zMS5jaXR5LmFjLnVrL2pzL2Zsb3dwbGF5ZXIvZmxvd3BsYXllci0zLjIuNi5zd2YnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkSGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzkuMC4wJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3NJbnN0YWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBjb25maWc6IGZsYXNodmFycyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2ZDYWxsQmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gLy9lbmQgaGFzIGZsYXNoIGlmXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmICgkeW91dHViZVZpZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGVtYmVkWW91dHViZSgkeW91dHViZVZpZHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoJGZtc1ZpZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHllcG5vcGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZDogc2NyaXB0cy5zd2ZvYmplY3Quc3JjLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYmVkRm1zKCRmbXNWaWRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIC8vIGVuZCB2aWRlb3NcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhpcyBpcyBvdXIgeWVwbm9wZSBmaWx0ZXJcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBzcGxpY2VzIGluIHRoZSB2ZXJzaW9uIHN0cmluZyB3ZSBoYXZlIHNldCB1cCBpbiBzZXRWZXJzaW9uXG4gICAgICAgICAgICAgKiBwcmVwZW5kcyB0aGUgY29ycmVjdCBzMSBkb21haW4sIHdoZXJlIGl0IGhhc24ndCBiZWVuIHByb3ZpZGVkXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTi5CLiB3aWxsIGZhaWwgaWYgd2UgaGF2ZSBhbiBzMSB0b3AgbGV2ZWwgZm9sZGVyIGNvbnRhaW5pbmdcbiAgICAgICAgICAgICAqIGRvdHMgKHNlZSBjb21tZW50IGJlbG93KVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgeWVwbm9wZUZpbHRlciA9IGZ1bmN0aW9uKHJlc291cmNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvYywgbGFzdEl0ZW07XG5cbiAgICAgICAgICAgICAgICAvKiBJZiB3ZSBhcmUgbG9hZGluZyBpbiBhbiBhYnNvbHV0ZSB1cmwsIGRvbid0IHRvdWNoIGl0XG4gICAgICAgICAgICAgICAgICAgICAqIHRoaXMgaXMgdGhlIHJlZ2V4IHdoaWNoIGZhaWxzIG9uIGEgdG9wIGxldmVsIGZvbGRlciB3aXRoIGRvdHNcbiAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICogbWF0Y2hlczpcbiAgICAgICAgICAgICAgICAgICAgICogaHR0cDovL3d3dy5leHRlcm5hbC5jb20vc2NyaXB0cy9zY3JpcHQuanNcbiAgICAgICAgICAgICAgICAgICAgICogd3d3LmV4dGVybmFsLmNvbS9zY3JpcHRzL3NjcmlwdC5qc1xuICAgICAgICAgICAgICAgICAgICAgKiBhYnNvbHV0ZS53aXRoLm1hbnkuc3ViLmRvbWFpbnMuZG9tYWluLmNvbS9zY3JpcHRzL3NjcmlwdC5qc1xuICAgICAgICAgICAgICAgICAgICAgKiBodHRwczovL2Fic291bHRlLndpdGgubWFueS5zdWIuZG9tYWlucy5kb21haW4uY29tL3NjcmlwdHMvc2NyaXB0LmpzXG4gICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAqIGRvZXNuJ3QgbWF0Y2g6XG4gICAgICAgICAgICAgICAgICAgICAqIG1vZHVsZXMvdGVzdC5qc1xuICAgICAgICAgICAgICAgICAgICAgKiBsaWIvc3ViZGlyL3NjcmlwdC5qc1xuICAgICAgICAgICAgICAgICAgICAgKiBsaWIvc3ViZGlyLjEyMy9zY3JpcHQuanNcbiAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICogd2lsbCBtYXRjaCB3aGVuIHdlIGRvbid0IHdhbnQgdG86XG4gICAgICAgICAgICAgICAgICAgICAqIHRvcGxldmVsLndpdGguZG90cy9zY3JpcHQuanNcbiAgICAgICAgICAgICAgICAgICAgICogbGliLnYyL2pxdWVyeS9zY3JpcHQuanNcbiAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICogSSB0aGluayBpdCdzIGFuIHVubGlrZWx5IGlzc3VlLCBidXQgaWYgYW55b25lIGNhbiB0d2VhayB0aGUgcmVnZXhcbiAgICAgICAgICAgICAgICAgICAgICogdG8gcHJldmVudCB0aGlzIHBsZWFzZSBkby5cbiAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKC9eKGh0dHBzPzpcXC9cXC8pPyhbXlxcLy5dK1xcLikrW15cXC9dK1xcLy8udGVzdChyZXNvdXJjZS51cmwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvdXJjZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsb2MgPVxuICAgICAgICAgICAgICAgICAgICAvL2FscmVhZHkgY29udGFpbnMgczE/IC0gZG9uJ3QgYWRkIHByZWZpeFxuICAgICAgICAgICAgICAgICAgICAoKC9zMS8udGVzdChyZXNvdXJjZS51cmwpID8gJycgOiBzcmNQcmVmaXgpICsgcmVzb3VyY2UudXJsKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3NwbGl0IGZvciBzcGxpY2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KCcvJyk7XG5cbiAgICAgICAgICAgICAgICAvL3NwbGljZSBpbiB2ZXJzaW9uXG4gICAgICAgICAgICAgICAgbGFzdEl0ZW0gPSBsb2MubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICBsb2NbbGFzdEl0ZW1dID0gdmVyc2lvbiArIGxvY1tsYXN0SXRlbV07XG5cbiAgICAgICAgICAgICAgICByZXNvdXJjZS51cmwgPSBsb2Muam9pbignLycpO1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgb24gcHJvZCBhbmQgd2UgYXJlIGxvYWRpbmcgYSBtb2R1bGUvLmpzIGZpbGVcbiAgICAgICAgICAgICAgICAvLyB3ZSB3YW50IC5taW4uanMgcmF0aGVyIHRoYW4gLmpzXG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAvczFcXC5jaXR5Ly50ZXN0KHJlc291cmNlLnVybCkgJiZcbiAgICAgICAgICAgICAgICAgICAgIS9qc1xcL2xpYi8udGVzdChyZXNvdXJjZS51cmwpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc291cmNlLnVybCA9IHJlc291cmNlLnVybC5yZXBsYWNlKC9qcyQvLCAnbWluLmpzJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSW5pdGlhbGlzYXRpb24gZnVuY3Rpb24sIGNhbGxlZCBpbW1lZGlhdGVseSBhZnRlciBDSVRZIGRlY2xhcmF0aW9uIGJlbG93XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZygnQ0lUWSByZWFkeSAod2UgYXJlIGluICcgKyBkb2N1bWVudC5jb21wYXRNb2RlICsgJyknKTtcblxuICAgICAgICAgICAgICAgIHllcG5vcGUuYWRkRmlsdGVyKHllcG5vcGVGaWx0ZXIpO1xuXG4gICAgICAgICAgICAgICAgaW5pdFBhZ2UoKTtcblxuICAgICAgICAgICAgICAgIC8vLy8gbGlicmFyeSBob21lIHBhZ2Ugb3BlbmluZyB0aW1lc1xuICAgICAgICAgICAgICAgIGlmICgkKCcjbGlicmFyeScpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB5ZXBub3BlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWQ6ICdtb2R1bGVzL2xpYnJhcnkvbGlicmFyeS5qcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoJ2xvYWRlZCBsaWJyYXJ5IGRhdGVwaWNrZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHRoZSBmb2xsb3dpbmcgbmVlZHMgZG9tcmVhZHlcbiAgICAgICAgICAgICAgICAkKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgdXAgYW55IHZpZGVvcyBvbiBwYWdlXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvcygpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vYmlsZSBicm93c2VyIGNsaWNrIGRlbGF5IGZpeFxuICAgICAgICAgICAgICAgICAgICAvL2luaXRGYXN0Q2xpY2t0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogIFRoaXMgbGl0ZXJhbCBkZWZpbmVzIHdoYXQgbWV0aG9kcyB0byBtYWtlIHB1YmxpY2x5IGFjY2Vzc2libGVcbiAgICAgICAgICogIG91dHNpdGUgQ0lUWVxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluaXQ6IGluaXQsXG4gICAgICAgICAgICBsb2FkOiBsb2FkLFxuICAgICAgICAgICAgZGVidWc6IGRlYnVnLFxuICAgICAgICAgICAgc2V0VmVyc2lvbjogc2V0VmVyc2lvbixcbiAgICAgICAgICAgIHNlYXJjaEF1dG9Db21wbGV0ZTogc2VhcmNoQXV0b0NvbXBsZXRlLFxuICAgICAgICAgICAgb2JqZWN0U2l6ZTogb2JqZWN0U2l6ZSxcbiAgICAgICAgICAgIGdldFdpbmRvd1dpZHRoOiBnZXRXaW5kb3dXaWR0aCxcbiAgICAgICAgICAgIGN1c3RvbUFKQVg6IGN1c3RvbUFKQVgsXG4gICAgICAgICAgICBpbWFnZUNyZWRpdGF0aW9uOiBpbWFnZUNyZWRpdGF0aW9uLFxuICAgICAgICAgICAgLy90aGlzIHdpbGwgYmUgdXNlZnVsIGluIG1vZHVsZXNcbiAgICAgICAgICAgIHMxU2VydmVyOiBzcmNQcmVmaXgsXG4gICAgICAgIH07XG4gICAgfSkod2luZG93KTsgLy9lbmQgQ0lUWVxuXG4gICAgd2luZG93LkNJVFkgPSBDSVRZO1xuXG4gICAgcmV0dXJuIENJVFk7XG59KSgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gICAgLy8gd2Ugb25seSBuZWVkIHRoaXMgc3R1ZmYgb24gYSBkZXNrdG9wIHNpemVkIGJyb3dzZXJcbiAgICB2YXIgJCA9IHJlcXVpcmUoJy4uL2pxdWVyeScpLFxuICAgICAgICAkYm9keSA9ICQoJ2JvZHknKSxcbiAgICAgICAgJHF1ZXJ5ID0gJCgnI3NlYXJjaCAjcXVlcnknKSxcbiAgICAgICAgYnJlYWtwb2ludHMgPSByZXF1aXJlKCcuL2JyZWFrcG9pbnRzJyksXG4gICAgICAgIGJvdW5kRHJvcEV2ZW50cyA9IGZhbHNlLFxuICAgICAgICBiaW5kTWVnYURkRXZlbnRzID0gZnVuY3Rpb24oJG1lZ2FMaW5rcywgJG5hdkxpcywgJGRyb3BzKSB7XG4gICAgICAgICAgICBpZiAoIWJvdW5kRHJvcEV2ZW50cykge1xuICAgICAgICAgICAgICAgIC8vYXR0YWNoIGNsaWNrLCBrZXlkb3duIGFuZCBmb2N1cyBoYW5kbGVyXG4gICAgICAgICAgICAgICAgJG1lZ2FMaW5rcy5vbignY2xpY2sga2V5ZG93biBmb2N1cycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICR0YXJnZXQgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJGxpID0gJHRhcmdldC5jbG9zZXN0KCdsaScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJGRyb3AgPSAkbGkuZmluZCgnLmRyb3AnKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGJvdW5kIHRoZSBldmVudCwgYnV0IGFyZSBub3cgb24gc21hbGxlciB3aWR0aCB3ZSBkb24ndCB3YW50IHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIHNob3cgdGhlIG1lZ2EgZHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgaWYgKENJVFkuZ2V0V2luZG93V2lkdGgod2luZG93KSA8IGJyZWFrcG9pbnRzLmRlc2t0b3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vd2hhdCB0eXBlIG9mIGV2ZW50IHdhcyBmaXJlZD9cbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gJ2tleWRvd24nICYmIGUua2V5Q29kZSAhPT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgYSBrZXlwcmVzcyBldmVudCBidXQgYnV0dG9uIGhpdCB3YXNuJ3QgZW50ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnR5cGUgPT09ICdmb2N1cycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWx3YXlzIGtpbGwgYWxsIGRyb3AgZG93bnMgd2hlbiBhIG1lZ2FMaW5rIHJlY2VpdmVzIGZvY3VzIHRoZW4gZHJvcCBvdXQgb2YgZm5cbiAgICAgICAgICAgICAgICAgICAgICAgICRuYXZMaXMucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGRyb3BzLmhpZGUoKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvL2lmIHdlIGFyZSBoZXJlIHRoZW4gdGhlIGV2ZW50IGlzIGVpdGhlciBhIGNsaWNrIG9yIFwiZW50ZXJcIiBrZXlwcmVzc1xuXG4gICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGFsbCBhY3RpdmUgY2xhc3MgZnJvbSBhbGwgb3RoZXIgbGlua3NcbiAgICAgICAgICAgICAgICAgICAgJG5hdkxpcy5ub3QoJGxpWzBdKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgICRkcm9wc1xuICAgICAgICAgICAgICAgICAgICAgICAgLm5vdCgkZHJvcFswXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgICRsaS50b2dnbGVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgICRkcm9wLnRvZ2dsZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgJGRyb3Auc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBvbiBibHVyIG9mIGxhc3QgbWVnYSBsaW5rIChzZWFyY2ggaW5wdXQgcXVlcnkgd2lsbCBiZSBmb2N1c3NlZCksIGNsb3NlXG4gICAgICAgICAgICAgICAgLy8gYW55IG9wZW4gZHJvcCBkb3duXG4gICAgICAgICAgICAgICAgJHF1ZXJ5Lm9uKCdmb2N1cycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkbmF2TGlzLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgJGRyb3BzLmhpZGUoKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvL2Rvbid0IHByb3BvZ2F0ZSBjbGlja3MgaW5zaWRlIG1lZ2EgbWVudXNcbiAgICAgICAgICAgICAgICAkZHJvcHMub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy9jbG9zZSBhbnkgb3BlbiBtZWdhIG1lbnVzIHdoZW4gcGFnZSBpcyBjbGlja2VkXG4gICAgICAgICAgICAgICAgJGJvZHkub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICRkcm9wcy5yZW1vdmVDbGFzcygnYWN0aXZlJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAkbmF2TGlzLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGJvdW5kRHJvcEV2ZW50cyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICByZXR1cm4gYmluZE1lZ2FEZEV2ZW50cztcbn0pKCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICB0aGluOiA0ODAsXG4gICAgbWVkaXVtOiA3NjgsXG4gICAgd2lkZTogOTgwLFxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciAkID0gcmVxdWlyZSgnLi4vanF1ZXJ5JyksXG4gICAgICAgIHZpZXdwb3J0Q2hhbmdlZCA9IHJlcXVpcmUoJy4uL2Z1bmNzL3ZpZXdwb3J0LWNoYW5nZWQnKSxcbiAgICAgICAgZ2V0V2luZG93V2lkdGggPSByZXF1aXJlKCcuLi9mdW5jcy9nZXQtd2luZG93LXdpZHRoJyksXG4gICAgICAgIGJpbmRNZWdhRGRFdmVudHMgPSByZXF1aXJlKCcuL2JpbmQtbWVnYS1ldmVudHMnKSxcbiAgICAgICAgJHdpbmRvdyA9ICQod2luZG93KSxcbiAgICAgICAgJGJvZHkgPSAkKCdib2R5JyksXG4gICAgICAgICRnbG9iYWxOYXYgPSAkYm9keS5maW5kKCcjZ2xvYmFsLW5hdjEnKSxcbiAgICAgICAgJG5hdkxpcyA9ICRnbG9iYWxOYXYuY2hpbGRyZW4oJ2xpJyksXG4gICAgICAgICRtZWdhTGlua3MgPSAkZ2xvYmFsTmF2LmZpbmQoJy5tZWdhJyksXG4gICAgICAgICRkcm9wcyA9ICRnbG9iYWxOYXYuZmluZCgnLmRyb3AnKSxcbiAgICAgICAgJHJlc3BvbnNpdmVUb2dnbGVycyA9ICQoJy5yZXNwb25zaXZlLXRvZ2dsZXInKSxcbiAgICAgICAgJHRvZ2dsZWVzID0gJCgnLnRvZ2dsZScpLFxuICAgICAgICAkdXRpbE5hdiA9ICQoJyN1dGlsLW5hdicpLFxuICAgICAgICBicmVha3BvaW50cyA9IHJlcXVpcmUoJy4vYnJlYWtwb2ludHMnKSxcbiAgICAgICAgb25SZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh2aWV3cG9ydENoYW5nZWQoKSkge1xuICAgICAgICAgICAgICAgIHZhciBuZXdXaWR0aCA9IGdldFdpbmRvd1dpZHRoKHdpbmRvdyk7XG5cbiAgICAgICAgICAgICAgICBpZiAobmV3V2lkdGggPj0gYnJlYWtwb2ludHMud2lkZSkge1xuICAgICAgICAgICAgICAgICAgICAvL2JpZyB0byBzbWFsbD9cbiAgICAgICAgICAgICAgICAgICAgJGJvZHlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2NyZWVuLXdpZGUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzY3JlZW4tdGhpbiBzY3JlZW4tbWVkaXVtJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSBnb2luZyB0byBkZXNrdG9wIHNpemUsXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gYmluZCB0aGUgZXZlbnQgaGFuZGxlcnNcbiAgICAgICAgICAgICAgICAgICAgYmluZE1lZ2FEZEV2ZW50cygkbWVnYUxpbmtzLCAkbmF2TGlzLCAkZHJvcHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNsb3NlIGFueSBvcGVuZXJzIHdoaWNoIHdlcmUgb3BlbiBiZWZvcmUgd2lkdGggY2hhbmdlXG4gICAgICAgICAgICAgICAgICAgICRyZXNwb25zaXZlVG9nZ2xlcnMucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAkdG9nZ2xlZXMucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAkdXRpbE5hdi5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuZXdXaWR0aCA+PSBicmVha3BvaW50cy5tZWRpdW0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy9zbWFsbCB0byBiaWc/XG4gICAgICAgICAgICAgICAgICAgICRib2R5XG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NjcmVlbi1tZWRpdW0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzY3JlZW4tdGhpbiBzY3JlZW4td2lkZScpO1xuICAgICAgICAgICAgICAgICAgICAkdXRpbE5hdi5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgICRkcm9wcy5yZW1vdmVDbGFzcygnYWN0aXZlJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAkbmF2TGlzLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkYm9keVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzY3JlZW4tdGhpbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NjcmVlbi1tZWRpdW0gc2NyZWVuLXdpZGUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICR3aW5kb3cucmVzaXplKG9uUmVzaXplKTtcbiAgICAgICAgICAgICR3aW5kb3cucmVzaXplKCk7XG5cbiAgICAgICAgICAgIC8vIGF0dGFjaCBjbGljayBldmVudHMgb24gbW9iaWxlIG5hdmlnYXRpb24gdG9nZ2xlcnNcbiAgICAgICAgICAgICRyZXNwb25zaXZlVG9nZ2xlcnMub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciAkc2VsZiA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICR0b2dnbGUgPSAkc2VsZi5uZXh0KCcudG9nZ2xlJyk7XG5cbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgJHNlbGYudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICR0b2dnbGUudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGluaXQgdGhlIGdsb2JhbCBuYXZpZ2F0aW9uIGRyb3AgZG93bnNcbiAgICAgICAgICAgICRkcm9wcy5oaWRlKCk7XG5cbiAgICAgICAgICAgIGlmIChnZXRXaW5kb3dXaWR0aCh3aW5kb3cpIDwgYnJlYWtwb2ludHMud2lkZSkge1xuICAgICAgICAgICAgICAgICR1dGlsTmF2XG4gICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbignbGknKVxuICAgICAgICAgICAgICAgICAgICAuY2xvbmUoKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oJGdsb2JhbE5hdik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICByZXR1cm4gaW5pdDtcbn0pKCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgJCA9IHJlcXVpcmUoJy4vanF1ZXJ5JyksXG4gICAgICAgIGRlYnVnID0gcmVxdWlyZSgnLi4vdXRpbHMvZGVidWcnKSxcbiAgICAgICAgY3JlYXRlR2FsbGVyeSA9IHJlcXVpcmUoJy4vZnVuY3MvY3JlYXRlLWdhbGxlcnknKSxcbiAgICAgICAgZG93bmxvYWRGaWxlVHlwZXMgPSByZXF1aXJlKCcuL2Z1bmNzL2Rvd25sb2FkLWZpbGUtdHlwZXMnKSxcbiAgICAgICAgdmlld3BvcnRDaGFuZ2VkID0gcmVxdWlyZSgnLi9mdW5jcy92aWV3cG9ydC1jaGFuZ2VkJyksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBvYmplY3QgdG8gaG9sZCBnb29nbGUgbWFwcyBtYXJrZXJzXG4gICAgICAgICAqL1xuICAgICAgICBnb29nbGVNYXBzTWFya2VycyA9IHt9LFxuICAgICAgICAvKipcbiAgICAgICAgICogb3ZlcmxheSBwYW5lIGZvciBtYXBcbiAgICAgICAgICovXG4gICAgICAgIG1hcE92ZXJsYXlQYW5lID0gbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIFdoYXQgbmVlZHMgdG8gaGFwcGVuIGFmdGVyIGEgYnhzbGlkZXIgY2Fyb3VzZWwgaGFzIGZpbmlzaGVkIGxvYWRpbmc6XG4gICAgICAgICAqIDEuIGluamVjdCBjb250cm9scyBpbnRvIEB3aWRnZXQuIGZpbmRzIGRlZmF1bHQgYnhzbGlkZXIgY29udHJvbHMsIHJlcGxhY2Ugd2l0aCBmb250IGF3ZXNvbWUgaWNvbnMgYW5kIGFwcGVuZCBpbiB3aWRnZXRcbiAgICAgICAgICogMi4gYWRkIHNjcm9sbGFibGUgY2xhc3MgdG8gd2lkZ2V0IGNvbnRlbnRcbiAgICAgICAgICogMy4gcmVtb3ZlIGxvYWRpbmcgc3Bpbm5lclxuICAgICAgICAgKiBAcGFyYW0galF1ZXJ5IHdpZGdldDogYSBqcXVlcnkgd3JhcHBlZCAud2lkZ2V0IChuZWVkZWQgZm9yIHdpZGdldCBjb250cm9scylcbiAgICAgICAgICogQHBhcmFtIHN0cmluZyBtaWRkbGVCdXR0b25UZXh0OiB3aGF0IHRvIHdyaXRlIG9uIHRoZSBtaWRkbGUgYnV0dG9uIChkZWZhdWx0cyB0byBcIkFsbFwiKSAobmVlZGVkIGZvciB3aWRnZXQgY29udHJvbHMpXG4gICAgICAgICAqIEBwYXJhbSBzdHJpbmcgYWxsTGluazogdGhlIFwiYWxsXCIgbWlkZGxlIGJ1dHRvbiBocmVmIChuZWVkZWQgZm9yIHdpZGdldCBjb250cm9scylcbiAgICAgICAgICovXG4gICAgICAgIGFmdGVyQnhTbGlkZXJMb2FkZWQgPSBmdW5jdGlvbih3aWRnZXQsIGFsbExpbmssIG1pZGRsZUJ1dHRvblRleHQpIHtcbiAgICAgICAgICAgIHZhciBsZWZ0V2lkZ2V0QnV0dG9uID0gJzxpIGNsYXNzPVwiIGZhIGZhLWNhcmV0LWxlZnRcIj48L2k+JyxcbiAgICAgICAgICAgICAgICByaWdodFdpZGdldEJ1dHRvbiA9ICc8aSBjbGFzcz1cIiBmYSBmYS1jYXJldC1yaWdodFwiPjwvaT4nLFxuICAgICAgICAgICAgICAgIC8vIGNhcm91c2VsIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgcHJldmlvdXNCdXR0b24gPSB3aWRnZXQuZmluZCgnLmJ4LXByZXYnKSxcbiAgICAgICAgICAgICAgICBuZXh0QnV0dG9uID0gd2lkZ2V0LmZpbmQoJy5ieC1uZXh0JyksXG4gICAgICAgICAgICAgICAgaW5wdXRNaWRkbGVCdXR0b25UZXh0ID0gbWlkZGxlQnV0dG9uVGV4dFxuICAgICAgICAgICAgICAgICAgICA/IG1pZGRsZUJ1dHRvblRleHRcbiAgICAgICAgICAgICAgICAgICAgOiAnQWxsJztcblxuICAgICAgICAgICAgcHJldmlvdXNCdXR0b24uZW1wdHkoKS5hcHBlbmQobGVmdFdpZGdldEJ1dHRvbik7XG4gICAgICAgICAgICBuZXh0QnV0dG9uLmVtcHR5KCkuYXBwZW5kKHJpZ2h0V2lkZ2V0QnV0dG9uKTtcbiAgICAgICAgICAgIC8vYWRkIHRoZSBcImFsbFwiIGJ1dHRvbiBiZXR3ZWVuIHByZXZpb3VzIGFuZCBuZXh0IGJ1dHRvbnMgaWYgaXQgaXMgbmVlZGVkXG4gICAgICAgICAgICBpZiAoYWxsTGluaykge1xuICAgICAgICAgICAgICAgIHByZXZpb3VzQnV0dG9uLmFmdGVyKFxuICAgICAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxsTGluayArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXCIgY2xhc3M9XCJieC1hbGxcIiA+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dE1pZGRsZUJ1dHRvblRleHQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzwvYT4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpZGdldC5maW5kKCcuYngtY29udHJvbHMtZGlyZWN0aW9uJykuYXBwZW5kVG8od2lkZ2V0KTtcbiAgICAgICAgICAgIHdpZGdldC5jaGlsZHJlbignaDInKS5hZGRDbGFzcygnY29udHJvbHMtZGlyZWN0aW9uJyk7XG5cbiAgICAgICAgICAgIC8vYWRkIGNsYXNzXG4gICAgICAgICAgICB3aWRnZXQuZmluZCgnLndpZGdldC1jb250ZW50JykuYWRkQ2xhc3MoJ3Njcm9sbGFibGUnKTtcblxuICAgICAgICAgICAgLy9yZW1vdmUgd2lkZ2V0IGxvYWRpbmcgc3Bpbm5lclxuICAgICAgICAgICAgd2lkZ2V0XG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCd3aWRnZXQtbG9hZGluZycpXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKCcubG9hZGluZy1mYS1pY29uJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBuZXdzIHdpZGdldFxuICAgICAgICAgKi9cbiAgICAgICAgaW5pdE5ld3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuZXdzV2lkZ2V0ID0gJCgnI25ld3Mtd2lkZ2V0JyksXG4gICAgICAgICAgICAgICAgbmV3c0xpc3QgPSBuZXdzV2lkZ2V0LmZpbmQoJyNuZXdzLXJlc3VsdHMnKSxcbiAgICAgICAgICAgICAgICBhbGxMaW5rID0gJy8vd3d3LmNpdHkuYWMudWsvbmV3cycsXG4gICAgICAgICAgICAgICAgc2hvd0Ftb3VudCA9IDM7XG5cbiAgICAgICAgICAgIC8vcmVmb3JtYXQgdGhlIGNvbnRlbnQgaW50byBjb2x1bW4gc2l6ZXMgYmFzZWQgb24gZGV0ZXJtaW5lZCBzaXplLCBpZiB0aGVyZSBhcmUgbW9yZSB0aGFuIHNob3dBbW91bnQgaXRlbXNcbiAgICAgICAgICAgIGlmICgkKCcjbmV3cy1yZXN1bHRzID4gLmFydGljbGUnKS5zaXplKCkgPiBzaG93QW1vdW50KSB7XG4gICAgICAgICAgICAgICAgLy9zZXQgdXAgc29ydGFibGVcbiAgICAgICAgICAgICAgICBuZXdzTGlzdC53cmFwQ2hpbGRyZW4oe1xuICAgICAgICAgICAgICAgICAgICBjaGlsZEVsZW06ICcuYXJ0aWNsZScsXG4gICAgICAgICAgICAgICAgICAgIHNldHM6IHNob3dBbW91bnQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy9sYXVuY2ggYnhzbGlkZXJcbiAgICAgICAgICAgICAgICBuZXdzTGlzdC5ieFNsaWRlcih7XG4gICAgICAgICAgICAgICAgICAgIGF1dG86IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBhdXRvQ29udHJvbHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBwYXVzZTogMTUwMDAsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9Ib3ZlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcGFnZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUxvb3A6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBoaWRlQ29udHJvbE9uRW5kOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhZGFwdGl2ZUhlaWdodDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgb25TbGlkZXJMb2FkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyQnhTbGlkZXJMb2FkZWQobmV3c1dpZGdldCwgYWxsTGluayk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vcmVtb3ZlIHdpZGdldCBsb2FkaW5nIHNwaW5uZXIsIGNhc2Ugd2hlcmUgdGhlIGNhcm91c2VsIGlzbid0IG5lZWRlZFxuICAgICAgICAgICAgICAgIG5ld3NXaWRnZXRcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCd3aWRnZXQtbG9hZGluZycpXG4gICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbignLmxvYWRpbmctZmEtaWNvbicpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGV2ZW50cyB3aWRnZXRcbiAgICAgICAgICovXG4gICAgICAgIGluaXRFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBldmVudHNXaWRnZXQgPSAkKCcjZXZlbnRzLXdpZGdldCcpLFxuICAgICAgICAgICAgICAgIGV2ZW50c0xpc3QgPSAkKCcjZXZlbnRzLXJlc3VsdHMnKSxcbiAgICAgICAgICAgICAgICBhbGxMaW5rID0gJy8vd3d3LmNpdHkuYWMudWsvZXZlbnRzJyxcbiAgICAgICAgICAgICAgICBzaG93QW1vdW50ID0gMztcblxuICAgICAgICAgICAgLy9jbGljayBhbnl3aGVyZSBvbiBldmVudFxuICAgICAgICAgICAgJCgnLnZldmVudCcsIGV2ZW50c0xpc3QpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ2EnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignaHJlZicpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoJCgnI2V2ZW50cy1yZXN1bHRzID4gLnZldmVudCcpLnNpemUoKSA+IHNob3dBbW91bnQpIHtcbiAgICAgICAgICAgICAgICAvL3NvcnQgdGhlIGNoaWxkcmVuIGludG8gZ3JvdXBzIG9mIHNob3dBbW91bnRcbiAgICAgICAgICAgICAgICBldmVudHNMaXN0LndyYXBDaGlsZHJlbih7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkRWxlbTogJy5ldmVudCcsXG4gICAgICAgICAgICAgICAgICAgIHNldHM6IHNob3dBbW91bnQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZXZlbnRzTGlzdC5ieFNsaWRlcih7XG4gICAgICAgICAgICAgICAgICAgIGF1dG86IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBhdXRvQ29udHJvbHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBwYXVzZTogMTUwMDAsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9Ib3ZlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcGFnZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUxvb3A6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBoaWRlQ29udHJvbE9uRW5kOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhZGFwdGl2ZUhlaWdodDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgb25TbGlkZXJMb2FkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyQnhTbGlkZXJMb2FkZWQoZXZlbnRzV2lkZ2V0LCBhbGxMaW5rKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9yZW1vdmUgd2lkZ2V0IGxvYWRpbmcgc3Bpbm5lciwgY2FzZSB3aGVyZSB0aGUgY2Fyb3VzZWwgaXNuJ3QgbmVlZGVkXG4gICAgICAgICAgICAgICAgZXZlbnRzV2lkZ2V0XG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnd2lkZ2V0LWxvYWRpbmcnKVxuICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJy5sb2FkaW5nLWZhLWljb24nKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIC8vZW5kIGluaXRFdmVudHNcbiAgICAgICAgaW5pdEZsaWNrciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyICR3aWRnZXQgPSAkKCcjZmxpY2tyLXdpZGdldCcpLFxuICAgICAgICAgICAgICAgICRzbGlkZVdyYXBwZXIgPSAkd2lkZ2V0LmZpbmQoJ3VsJyksXG4gICAgICAgICAgICAgICAgbG9hZGVkT3RoZXJQaWNzLFxuICAgICAgICAgICAgICAgIGJ4U2xpZGVyQ2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoJ2ZsaWNrciBjYWxsYmFjay4uLicpO1xuXG4gICAgICAgICAgICAgICAgICAgICQoJy53aWRnZXQtY29udGVudCcsICR3aWRnZXQpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2ZpbmQgdGhlIHVsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlyc3RkaXYgPSAkKCd1bCBkaXY6Zmlyc3QtY2hpbGQnLCB0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VsID0gJChcInVsXCIsIHRoaXMpLCBkZWZpbmVkIG5vdCB1c2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0pxID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBmaXJzdGRpdi5oZWlnaHQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IGZpcnN0ZGl2LndpZHRoKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWRkIGNsYXNzZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNKcS5hZGRDbGFzcygnc2Nyb2xsYWJsZScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCBjc3MgdG8gLndpZGdldC1jb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzSnEuc3RvcCgpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtaW4taGVpZ2h0JzogaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzSnEuY3NzKCd3aWR0aCcsIHdpZHRoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9yZW1vdmUgbG9hZGluZyBpY29uIHdoZW4gdGhlIGNvbnRlbnQgaXMgcmVhZHlcbiAgICAgICAgICAgICAgICAgICAgICAgICR3aWRnZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3dpZGdldC1sb2FkaW5nJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJy5sb2FkaW5nLWZhLWljb24nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJCeFNsaWRlckxvYWRlZCgkd2lkZ2V0KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvL2F0dGFjaCBhbiBldmVudCB0byBpbml0IHRoZSByZXN0IG9mIHRoZSBwaWNzXG4gICAgICAgICAgICAkd2lkZ2V0Lm1vdXNlZW50ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy93ZSBvbmx5IHdhbnQgdG8gcnVuIHRoaXMgb25jZVxuICAgICAgICAgICAgICAgIGlmIChsb2FkZWRPdGhlclBpY3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxvYWRlZE90aGVyUGljcyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAvL3RyYW5zbGF0ZSBhbGwgdGhlIHNwYW4uaW1hZ2V1cmxcInMgaW50byBhY3R1YWwgaW1hZ2VzXG4gICAgICAgICAgICAgICAgLy8oc2F2ZXMgc29tZSByZW5kZXJpbmcgdGltZSlcbiAgICAgICAgICAgICAgICAkKCdhIC5pbWFnZXVybCcsICR3aWRnZXQpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzSnEgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRoaXNKcS50ZXh0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWdUYWcgPSAnPGltZyBzcmM9XCInICsgdGV4dCArICdcIiBhbHQ9XCJcIj4nO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXNKcVxuICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGV4dCgnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wcmVwZW5kKGltZ1RhZyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkKCdwIC5pbWFnZXVybCcsICR3aWRnZXQpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzSnEgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRoaXNKcS50ZXh0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZUF0dHIgPSAnYmFja2dyb3VuZC1pbWFnZTogdXJsKCcgKyB0ZXh0ICsgJyk7JztcblxuICAgICAgICAgICAgICAgICAgICB0aGlzSnEucGFyZW50KCkuYXR0cignc3R5bGUnLCBzdHlsZUF0dHIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzSnEucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy9zZXQgdXAgc2Nyb2xsYWJsZVxuICAgICAgICAgICAgJHNsaWRlV3JhcHBlci5ieFNsaWRlcih7XG4gICAgICAgICAgICAgICAgYXV0bzogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXV0b0NvbnRyb2xzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwYXVzZTogMTUwMDAsXG4gICAgICAgICAgICAgICAgYXV0b0hvdmVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRvdWNoRW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcGFnZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGluZmluaXRlTG9vcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaGlkZUNvbnRyb2xPbkVuZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhZGFwdGl2ZUhlaWdodDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtaW5TbGlkZXM6IDEsXG4gICAgICAgICAgICAgICAgbWF4U2xpZGVzOiA0LFxuICAgICAgICAgICAgICAgIHNsaWRlV2lkdGg6IDMzMCxcbiAgICAgICAgICAgICAgICBzbGlkZU1hcmdpbjogMCxcbiAgICAgICAgICAgICAgICBvblNsaWRlckxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBieFNsaWRlckNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCAvL2VuZCBpbml0RmxpY2tyXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb3Vyc2VzIHdpZGdldFxuICAgICAgICAgKi9cbiAgICAgICAgaW5pdENvdXJzZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciAkd2lkZ2V0ID0gJCgnI2NvdXJzZXMtd2lkZ2V0JyksXG4gICAgICAgICAgICAgICAgd2lkZ2V0Q29udGVudCA9ICR3aWRnZXQuZmluZCgnLndpZGdldC1jb250ZW50Jyk7XG5cbiAgICAgICAgICAgIHdpZGdldENvbnRlbnQuYWNjb3JkaW9uKHtcbiAgICAgICAgICAgICAgICBoZWlnaHRTdHlsZTogJ2NvbnRlbnQnLFxuICAgICAgICAgICAgICAgIGNvbGxhcHNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyOiAndWktaWNvbi10cmlhbmdsZS0xLXMnLFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJTZWxlY3RlZDogJ3VpLWljb24tdHJpYW5nbGUtMS1uJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGFmdGVyQnhTbGlkZXJMb2FkZWQoJHdpZGdldCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCAvL2VuZCBpbml0Q291cnNlc1xuICAgICAgICAvKipcbiAgICAgICAgICogdGVzdGltb25pYWxzIHdpZGdldFxuICAgICAgICAgKi9cbiAgICAgICAgaW5pdFRlc3RpbW9uaWFscyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyICR0ZXN0aW1vbmlhbHNXaWRnZXQgPSAkKCcjdGVzdGltb25pYWxzLXdpZGdldCcpLFxuICAgICAgICAgICAgICAgIHdpZGdldENvbnRlbnQgPSAkdGVzdGltb25pYWxzV2lkZ2V0LmZpbmQoJy53aWRnZXQtY29udGVudCcpLFxuICAgICAgICAgICAgICAgIHRlc3RpbW9uaWFsc0xpc3QgPSB3aWRnZXRDb250ZW50LmZpbmQoJ3VsJyksXG4gICAgICAgICAgICAgICAgYnhTbGlkZXJDYWxsYmFjaztcblxuICAgICAgICAgICAgLy9jaGVjayB0aGVyZSBpcyBtb3JlIHRoYW4gMSB0ZXN0aW1vbmlhbHMgYW5kIGlmIHNvLCBzdGFydCB0aGUgY2Fyb3VzZWxcbiAgICAgICAgICAgIGlmICgkKCdsaScsIHRlc3RpbW9uaWFsc0xpc3QpLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZygnTGVzcyB0aGFuIDIgdGVzdGltb25pYWxzLCBubyBuZWVkIGZvciBjYXJvdXNlbCcpO1xuICAgICAgICAgICAgICAgICR0ZXN0aW1vbmlhbHNXaWRnZXRcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCd3aWRnZXQtbG9hZGluZycpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnd2lkZ2V0LW9uZS1pdGVtJylcbiAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKCcubG9hZGluZy1mYS1pY29uJylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnhTbGlkZXJDYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vYWRkIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgYWZ0ZXJCeFNsaWRlckxvYWRlZCgkdGVzdGltb25pYWxzV2lkZ2V0KTtcbiAgICAgICAgICAgICAgICAkdGVzdGltb25pYWxzV2lkZ2V0XG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnd2lkZ2V0LWxvYWRpbmcnKVxuICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJy5sb2FkaW5nLWZhLWljb24nKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvL2luaXRpYWxpc2UgYnhzbGlkZXJcbiAgICAgICAgICAgIHRlc3RpbW9uaWFsc0xpc3QuYnhTbGlkZXIoe1xuICAgICAgICAgICAgICAgIGF1dG86IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF1dG9Db250cm9sczogZmFsc2UsXG4gICAgICAgICAgICAgICAgcGF1c2U6IDE1MDAwLFxuICAgICAgICAgICAgICAgIHNsaWRlTWFyZ2luOiAxMCxcbiAgICAgICAgICAgICAgICBhdXRvSG92ZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgdG91Y2hFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwYWdlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW5maW5pdGVMb29wOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBoaWRlQ29udHJvbE9uRW5kOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiB0cnVlLFxuICAgICAgICAgICAgICAgIG9uU2xpZGVyTG9hZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ4U2xpZGVyQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIC8vZW5kIGluaXRUZXN0aW1vbmlhbHNcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHByb2ZpbGVzIHdpZGdldFxuICAgICAgICAgKi9cbiAgICAgICAgaW5pdFByb2ZpbGVzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgJHByb2ZpbGVzV2lkZ2V0ID0gJCgnI3Byb2ZpbGVzLXdpZGdldCcpLFxuICAgICAgICAgICAgICAgIHdpZGdldENvbnRlbnQgPSAkcHJvZmlsZXNXaWRnZXQuZmluZCgnLndpZGdldC1jb250ZW50JyksXG4gICAgICAgICAgICAgICAgcHJvZmlsZXNMaXN0ID0gd2lkZ2V0Q29udGVudC5maW5kKCd1bCcpLFxuICAgICAgICAgICAgICAgIGJ4U2xpZGVyQ2FsbGJhY2s7IC8vZW5kIHZhcnNcblxuICAgICAgICAgICAgLy9jaGVjayB0aGVyZSBpcyBtb3JlIHRoYW4gMSB0ZXN0aW1vbmlhbHMgYW5kIGlmIHNvLCBzdGFydCB0aGUgY2Fyb3VzZWxcbiAgICAgICAgICAgIGlmICgkKCdsaScsIHByb2ZpbGVzTGlzdCkubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgIGRlYnVnKCdMZXNzIHRoYW4gMiB0ZXN0aW1vbmlhbHMsIG5vIG5lZWQgZm9yIGNhcm91c2VsJyk7XG4gICAgICAgICAgICAgICAgJHByb2ZpbGVzV2lkZ2V0XG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnd2lkZ2V0LWxvYWRpbmcnKVxuICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJy5sb2FkaW5nLWZhLWljb24nKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBieFNsaWRlckNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy9hZGQgY29udHJvbHNcbiAgICAgICAgICAgICAgICBhZnRlckJ4U2xpZGVyTG9hZGVkKCRwcm9maWxlc1dpZGdldCk7XG4gICAgICAgICAgICAgICAgJHByb2ZpbGVzV2lkZ2V0XG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnd2lkZ2V0LWxvYWRpbmcnKVxuICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJy5sb2FkaW5nLWZhLWljb24nKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvL2luaXRpYWxpc2UgYnhzbGlkZXJcbiAgICAgICAgICAgIHByb2ZpbGVzTGlzdC5ieFNsaWRlcih7XG4gICAgICAgICAgICAgICAgYXV0bzogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXV0b0NvbnRyb2xzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwYXVzZTogMTUwMDAsXG4gICAgICAgICAgICAgICAgYXV0b0hvdmVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRvdWNoRW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcGFnZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGluZmluaXRlTG9vcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaGlkZUNvbnRyb2xPbkVuZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhZGFwdGl2ZUhlaWdodDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvblNsaWRlckxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBieFNsaWRlckNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCAvL2VuZCBwcm9maWxlc1dpZGdldHNcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNwb3RsaWdodCBvbiByZXNlYXJjaCB3aWRnZXRcbiAgICAgICAgICovXG4gICAgICAgIGluaXRTcG90bGlnaHRSZXNlYXJjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyICRzcG90bGlnaHRSZXNlYXJjaFdpZGdldCA9ICQoJyNzcG90bGlnaHQtcmVzZWFyY2gtd2lkZ2V0JyksXG4gICAgICAgICAgICAgICAgd2lkZ2V0Q29udGVudCA9ICRzcG90bGlnaHRSZXNlYXJjaFdpZGdldC5maW5kKFxuICAgICAgICAgICAgICAgICAgICAnLndpZGdldC1jb250ZW50J1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgc3BvdGxpZ2h0UmVzZWFyY2hMaXN0ID0gd2lkZ2V0Q29udGVudC5maW5kKCd1bCcpLFxuICAgICAgICAgICAgICAgIGJ4U2xpZGVyQ2FsbGJhY2s7IC8vZW5kIHZhcnNcblxuICAgICAgICAgICAgLy9jaGVjayB0aGVyZSBpcyBtb3JlIHRoYW4gMSBzcG90bGlnaHQgb24gcmVzZWFyY2ggaXRlbXMgYW5kIGlmIHNvLCBzdGFydCB0aGUgY2Fyb3VzZWxcbiAgICAgICAgICAgIGlmICgkKCdsaScsIHNwb3RsaWdodFJlc2VhcmNoTGlzdCkubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgIGRlYnVnKFxuICAgICAgICAgICAgICAgICAgICAnTGVzcyB0aGFuIDIgc3BvdGxpZ2h0IG9uIHJlc2VhcmNoLCBubyBuZWVkIGZvciBjYXJvdXNlbCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICRzcG90bGlnaHRSZXNlYXJjaFdpZGdldFxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3dpZGdldC1sb2FkaW5nJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCd3aWRnZXQtb25lLWl0ZW0nKVxuICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJy5sb2FkaW5nLWZhLWljb24nKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBieFNsaWRlckNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy9hZGQgY29udHJvbHNcbiAgICAgICAgICAgICAgICBhZnRlckJ4U2xpZGVyTG9hZGVkKCRzcG90bGlnaHRSZXNlYXJjaFdpZGdldCk7XG4gICAgICAgICAgICAgICAgJHNwb3RsaWdodFJlc2VhcmNoV2lkZ2V0XG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnd2lkZ2V0LWxvYWRpbmcnKVxuICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJy5sb2FkaW5nLWZhLWljb24nKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvL2luaXRpYWxpc2UgYnhzbGlkZXJcbiAgICAgICAgICAgIHNwb3RsaWdodFJlc2VhcmNoTGlzdC5ieFNsaWRlcih7XG4gICAgICAgICAgICAgICAgYXV0bzogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXV0b0NvbnRyb2xzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwYXVzZTogMTUwMDAsXG4gICAgICAgICAgICAgICAgYXV0b0hvdmVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRvdWNoRW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcGFnZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGluZmluaXRlTG9vcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaGlkZUNvbnRyb2xPbkVuZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhZGFwdGl2ZUhlaWdodDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvblNsaWRlckxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBieFNsaWRlckNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCAvL2VuZCBpbml0U3BvdGxpZ2h0UmVzZWFyY2hcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJTUyB3aWRnZXRcbiAgICAgICAgICovXG4gICAgICAgIGluaXRSc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciAkd2lkZ2V0ID0gJCgnI3Jzcy13aWRnZXQnKSxcbiAgICAgICAgICAgICAgICB3aWRnZXRDb250ZW50ID0gJHdpZGdldC5maW5kKCcud2lkZ2V0LWNvbnRlbnQnKSxcbiAgICAgICAgICAgICAgICBpdGVtcyA9IHdpZGdldENvbnRlbnQuZmluZCgnLml0ZW1zJyk7IC8vZW5kIHZhcnNcblxuICAgICAgICAgICAgaWYgKGl0ZW1zLmNoaWxkcmVuKCkubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIC8vbG9hZCB1cCBieHNsaWRlclxuICAgICAgICAgICAgICAgIGl0ZW1zLmJ4U2xpZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgYXV0bzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9Db250cm9sczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHBhdXNlOiAxNTAwMCxcbiAgICAgICAgICAgICAgICAgICAgYXV0b0hvdmVyOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0b3VjaEVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBwYWdlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlTG9vcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGhpZGVDb250cm9sT25FbmQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBvblNsaWRlckxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJCeFNsaWRlckxvYWRlZCgkd2lkZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9kb24ndCBsb2FkIHRoZSBieHNsaWRlciBjYXJvdXNlbCAsIGp1c3Qgc2hvdyB3aWRnZXRcbiAgICAgICAgICAgICAgICAkd2lkZ2V0XG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnd2lkZ2V0LWxvYWRpbmcnKVxuICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJy5sb2FkaW5nLWZhLWljb24nKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsIHRvIGFjdGlvbiB3aWRnZXRcbiAgICAgICAgICovXG4gICAgICAgIGluaXRDYWxsVG9BY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzdGFydF9kYXRlID0gJCgnI3N0YXJ0X2RhdGUnKS52YWwoKSxcbiAgICAgICAgICAgICAgICBlbmRfZGF0ZSA9ICQoJyNlbmRfZGF0ZScpLnZhbCgpLFxuICAgICAgICAgICAgICAgIHNkID0gbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgICBlZCA9IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgICAgY2QsXG4gICAgICAgICAgICAgICAgc3BsaXREYXRlID0gZnVuY3Rpb24oZHQsIGlkdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZUFycmF5ID0gZHQuc3BsaXQoJy8nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZG9mQXJyYXkgPSBkYXRlQXJyYXlbMl0uc3BsaXQoJyAnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZHQuc2V0RnVsbFllYXIoZW5kb2ZBcnJheVswXSk7XG4gICAgICAgICAgICAgICAgICAgIGlkdC5zZXRNb250aChkYXRlQXJyYXlbMV0gLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgaWR0LnNldERhdGUoZGF0ZUFycmF5WzBdKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWR0O1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNkID0gc3BsaXREYXRlKHN0YXJ0X2RhdGUsIHNkKTtcbiAgICAgICAgICAgIGVkID0gc3BsaXREYXRlKGVuZF9kYXRlLCBlZCk7XG5cbiAgICAgICAgICAgIC8vY3VycmVudCBkYXRlXG4gICAgICAgICAgICBjZCA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICAgICAgIGlmIChlZCA+PSBjZCAmJiBzZCA8PSBjZCkge1xuICAgICAgICAgICAgICAgIC8vU2hvdyB0aGUgb24gZGF0ZVxuICAgICAgICAgICAgICAgICQoJyNjb250ZW50X29uX2RhdGUnKS5hdHRyKFxuICAgICAgICAgICAgICAgICAgICAnY2xhc3MnLFxuICAgICAgICAgICAgICAgICAgICAnd2lkZ2V0LWNvbnRlbnQgY3RhLXdpZGdldC1zaG93J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgJCgnI2NvbnRlbnRfb3V0X29mX2RhdGUnKS5hdHRyKCdjbGFzcycsICdjdGEtd2lkZ2V0LWhpZGUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9TaG93IG91dCBvZiBkYXRlXG4gICAgICAgICAgICAgICAgJCgnI2NvbnRlbnRfb3V0X29mX2RhdGUnKS5hdHRyKFxuICAgICAgICAgICAgICAgICAgICAnY2xhc3MnLFxuICAgICAgICAgICAgICAgICAgICAnd2lkZ2V0LWNvbnRlbnQgY3RhLXdpZGdldC1zaG93J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgJCgnI2NvbnRlbnRfb25fZGF0ZScpLmF0dHIoJ2NsYXNzJywgJ2N0YS13aWRnZXQtaGlkZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogaW5pdGlhdGVzIGFuIGltYWdlIGdhbGxlcnkgd2lkZ2V0XG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm4ge29iamVjdCB8fCB1bmRlZmluZWR9IHJldHVybnMgdGhlIGdhbGxlcmlhIGpRdWVyeSBvYmplY3QgaWZcbiAgICAgICAgICogc3VjY2Vzc2Z1bCBlbHNlIHVuZGVmaW5lZCAtIGZvciBpbnN0YW5jZSBpZiAkZ2FsbGVyeSBpcyBub3QgYSBqUXVlcnkgb2JqZWN0XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBpbml0R2FsbGVyeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyICRnYWxsZXJ5ID0gJCgnI2dhbGxlcnktd2lkZ2V0IC5nYWxsZXJ5Jyk7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlR2FsbGVyeSgkZ2FsbGVyeSwgdHJ1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGluaXRGcmVlVGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCgnZGl2LmZyZWUtdGV4dCBhJylcbiAgICAgICAgICAgICAgICAudW5iaW5kKCdjbGljaycpXG4gICAgICAgICAgICAgICAgLmNsaWNrKGZ1bmN0aW9uKCkge30pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG1hc3RlciB3aWRnZXQgaW5pdGlhbGlzZXIsIGNhbGxzIGFsbCB0aGUgb3RoZXIgaW5pdHttYXAsZXZlbnRzLi4ufSBmdW5jdGlvbnNcbiAgICAgICAgICovXG4gICAgICAgIGluaXRXaWRnZXRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgd2lkZ2V0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmOiBpbml0RXZlbnRzLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBuZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmOiBpbml0TmV3cyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZmxpY2tyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmOiBpbml0RmxpY2tyLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb3Vyc2VzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmOiBpbml0Q291cnNlcyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdGVzdGltb25pYWxzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmOiBpbml0VGVzdGltb25pYWxzLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGY6IGluaXRSc3MsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdhbGxlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGY6IGluaXRHYWxsZXJ5LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGY6IGluaXRDYWxsVG9BY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZyZWV0ZXh0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmOiBpbml0RnJlZVRleHQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHByb2ZpbGVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmOiBpbml0UHJvZmlsZXMsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdzcG90bGlnaHQtcmVzZWFyY2gnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmOiBpbml0U3BvdGxpZ2h0UmVzZWFyY2gsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpZDtcblxuICAgICAgICAgICAgLy9sb29wIHRocm91Z2ggZWFjaCB3aWRnZXQgdHlwZSBhbmQgaW5pdCBpZiBwcmVzZW50XG4gICAgICAgICAgICBmb3IgKGlkIGluIHdpZGdldHMpIHtcbiAgICAgICAgICAgICAgICBpZiAod2lkZ2V0cy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9iYWlsIGhlcmUgaWYgdGhlIHdpZGdldCBpcyBub3QgcHJlc2VudFxuICAgICAgICAgICAgICAgICAgICBpZiAoJCgnIycgKyBpZCArICctd2lkZ2V0JykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Zygnbm8gJyArIGlkICsgJyB3aWRnZXQnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygd2lkZ2V0c1tpZF0uZiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJjYW4ndCBmaW5kIGluaXQgZnVuYyBvZiBcIiArIGlkICsgJyB3aWRnZXQnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcnVuIHRoZSBpbml0XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZygncnVubmluZyBpbml0IGZ1bmMgb2YgJyArIGlkICsgJyB3aWRnZXQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZGdldHNbaWRdLmYuYXBwbHkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgIHJldHVybiBpbml0V2lkZ2V0cztcbn0pKCk7XG4iLCIvKipcbiAqIFNlbmRzIGEgbWVzc2FnZSB0byB0aGUgYnJvd3NlciBjb25zb2xlIChHZWNrbywgV2Via2l0KSBvciBpbnRvIHRoZSA8Ym9keT4gKElFKVxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2U6IHRoZSBtZXNzYWdlIHRvIHByaW50IG91dFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgIHZhciBkZWJ1ZyA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKGRlYnVnLmRlYnVnTGV2ZWwgPiAwIHx8IGxvY2F0aW9uLnNlYXJjaC5tYXRjaCgnZGVidWcnKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvL2ZvciBTYWZhcmksIENocm9tZSwgRmlyZWZveCh3LyBmaXJlYnVnKVxuICAgICAgICAgICAgICAgIHcuY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy9mb3IgT3BlcmFcbiAgICAgICAgICAgICAgICAgICAgb3BlcmEucG9zdEVycm9yLmFwcGx5KG9wZXJhLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlMSkge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBkZWJ1Zy5kZWJ1Z0xldmVsID0gMDtcblxuICAgIHJldHVybiBkZWJ1Zztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgQ29va2llcyA9IHJlcXVpcmUoJ2pzLWNvb2tpZScpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCQpIHtcbiAgICAgICAgaWYgKCFDb29raWVzLmdldCgnY29va2llbm90aWNlc2hvd24nKSkge1xuICAgICAgICAgICAgQ29va2llcy5zZXQoJ2Nvb2tpZW5vdGljZXNob3duJywgJzEnLCB7IGV4cGlyZXM6IDM2NSB9KTtcblxuICAgICAgICAgICAgJCgnLmNvb2tpZS1ub3RpY2UnKS5zaG93KCk7XG5cbiAgICAgICAgICAgICQoJy5jb29raWUtbm90aWNlX19kaXNtaXNzIGJ1dHRvbicpLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAkKCcuY29va2llLW5vdGljZScpLmZhZGVPdXQoJ2Zhc3QnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBpZiAoZWxlbWVudCAmJiAhJC5pc0VtcHR5T2JqZWN0KGVsZW1lbnQub2Zmc2V0KCkpKSB7XG4gICAgICAgICQoJ2h0bWw6bm90KDphbmltYXRlZCksIGJvZHk6bm90KDphbmltYXRlZCknKS5hbmltYXRlKFxuICAgICAgICAgICAgeyBzY3JvbGxUb3A6IE1hdGgubWF4KDAsIGVsZW1lbnQub2Zmc2V0KCkudG9wIC0gODUpIH0sXG4gICAgICAgICAgICAnc2xvdydcbiAgICAgICAgKTtcbiAgICB9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==