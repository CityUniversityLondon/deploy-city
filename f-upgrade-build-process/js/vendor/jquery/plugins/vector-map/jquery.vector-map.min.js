!function(t){var e={colors:1,values:1,backgroundColor:1,scaleColors:1,normalizeFunction:1},s={onLabelShow:"labelShow",onRegionOver:"regionMouseOver",onRegionOut:"regionMouseOut",onRegionClick:"regionClick"};t.fn.vectorMap=function(i){var a,r={map:"world_en",backgroundColor:"#505050",color:"#ffffff",hoverColor:"black",scaleColors:["#b6d6ff","#005ace"],normalizeFunction:"linear"};if("addMap"===i)o.maps[arguments[1]]=arguments[2];else if("set"===i&&e[arguments[1]])this.data("mapObject")["set"+arguments[1].charAt(0).toUpperCase()+arguments[1].substr(1)].apply(this.data("mapObject"),Array.prototype.slice.call(arguments,2));else for(var n in t.extend(r,i),r.container=this,this.css({position:"relative",overflow:"hidden"}),a=new o(r),this.data("mapObject",a),s)r[n]&&this.bind(s[n]+".jvectormap",r[n])};var i=function(t,e){if(this.mode=window.SVGAngle?"svg":"vml","svg"==this.mode)this.createSvgNode=function(t){return document.createElementNS(this.svgns,t)};else{try{document.namespaces.rvml||document.namespaces.add("rvml","urn:schemas-microsoft-com:vml"),this.createVmlNode=function(t){return document.createElement("<rvml:"+t+' class="rvml">')}}catch(t){this.createVmlNode=function(t){return document.createElement("<"+t+' xmlns="urn:schemas-microsoft.com:vml" class="rvml">')}}document.createStyleSheet().addRule(".rvml","behavior:url(#default#VML)")}"svg"==this.mode?this.canvas=this.createSvgNode("svg"):(this.canvas=this.createVmlNode("group"),this.canvas.style.position="absolute"),this.setSize(t,e)};i.prototype={svgns:"http://www.w3.org/2000/svg",mode:"svg",width:0,height:0,canvas:null,setSize:function(t,e){if("svg"==this.mode)this.canvas.setAttribute("width",t),this.canvas.setAttribute("height",e);else if(this.canvas.style.width=t+"px",this.canvas.style.height=e+"px",this.canvas.coordsize=t+" "+e,this.canvas.coordorigin="0 0",this.rootGroup){for(var s=this.rootGroup.getElementsByTagName("shape"),i=0,o=s.length;i<o;i++)s[i].coordsize=t+" "+e,s[i].style.width=t+"px",s[i].style.height=e+"px";this.rootGroup.coordsize=t+" "+e,this.rootGroup.style.width=t+"px",this.rootGroup.style.height=e+"px"}this.width=t,this.height=e},createPath:function(t){var e;if("svg"==this.mode)(e=this.createSvgNode("path")).setAttribute("d",t.path),e.setFill=function(t){this.setAttribute("fill",t)},e.getFill=function(t){return this.getAttribute("fill")},e.setOpacity=function(t){this.setAttribute("fill-opacity",t)};else{(e=this.createVmlNode("shape")).coordorigin="0 0",e.coordsize=this.width+" "+this.height,e.style.width=this.width+"px",e.style.height=this.height+"px",e.fillcolor=o.defaultFillColor,e.stroked=!1,e.path=i.pathSvgToVml(t.path);var s=this.createVmlNode("skew");s.on=!0,s.matrix="0.01,0,0,0.01,0,0",s.offset="0,0",e.appendChild(s);var a=this.createVmlNode("fill");e.appendChild(a),e.setFill=function(t){this.getElementsByTagName("fill")[0].color=t},e.getFill=function(t){return this.getElementsByTagName("fill")[0].color},e.setOpacity=function(t){this.getElementsByTagName("fill")[0].opacity=parseInt(100*t)+"%"}}return e},createGroup:function(t){var e;return"svg"==this.mode?e=this.createSvgNode("g"):((e=this.createVmlNode("group")).style.width=this.width+"px",e.style.height=this.height+"px",e.style.left="0px",e.style.top="0px",e.coordorigin="0 0",e.coordsize=this.width+" "+this.height),t&&(this.rootGroup=e),e},applyTransformParams:function(t,e,s){"svg"==this.mode?this.rootGroup.setAttribute("transform","scale("+t+") translate("+e+", "+s+")"):(this.rootGroup.coordorigin=this.width-e+","+(this.height-s),this.rootGroup.coordsize=this.width/t+","+this.height/t)}},i.pathSvgToVml=function(t){var e,s,i=0,o=0;return t.replace(/([MmLlHhVvCcSs])((?:-?(?:\d+)?(?:\.\d+)?,?\s?)+)/g,function(t,a,r,n){(r=r.replace(/(\d)-/g,"$1,-").replace(/\s+/g,",").split(","))[0]||r.shift();for(var h=0,l=r.length;h<l;h++)r[h]=Math.round(100*r[h]);switch(a){case"m":return i+=r[0],o+=r[1],"t"+r.join(",");case"M":return i=r[0],o=r[1],"m"+r.join(",");case"l":return i+=r[0],o+=r[1],"r"+r.join(",");case"L":return i=r[0],o=r[1],"l"+r.join(",");case"h":return i+=r[0],"r"+r[0]+",0";case"H":return"l"+(i=r[0])+","+o;case"v":return o+=r[0],"r0,"+r[0];case"V":return o=r[0],"l"+i+","+o;case"c":return e=i+r[r.length-4],s=o+r[r.length-3],i+=r[r.length-2],o+=r[r.length-1],"v"+r.join(",");case"C":return e=r[r.length-4],s=r[r.length-3],i=r[r.length-2],o=r[r.length-1],"c"+r.join(",");case"s":return r.unshift(o-s),r.unshift(i-e),e=i+r[r.length-4],s=o+r[r.length-3],i+=r[r.length-2],o+=r[r.length-1],"v"+r.join(",");case"S":return r.unshift(o+o-s),r.unshift(i+i-e),e=r[r.length-4],s=r[r.length-3],i=r[r.length-2],o=r[r.length-1],"c"+r.join(",")}return""}).replace(/z/g,"")};var o=function(e){e=e||{};var s=this,r=o.maps[e.map];for(var n in this.container=e.container,this.defaultWidth=r.width,this.defaultHeight=r.height,this.color=e.color,this.hoverColor=e.hoverColor,this.setBackgroundColor(e.backgroundColor),this.width=e.container.width(),this.height=e.container.height(),this.resize(),t(window).resize(function(){s.width=e.container.width(),s.height=e.container.height(),s.resize(),s.canvas.setSize(s.width,s.height),s.applyTransform()}),this.canvas=new i(this.width,this.height),e.container.append(this.canvas.canvas),this.makeDraggable(),this.rootGroup=this.canvas.createGroup(!0),this.index=o.mapIndex,this.label=t("<div/>").addClass("jvectormap-label").appendTo(t("body")),t("<div/>").addClass("jvectormap-zoomin").text("+").appendTo(e.container),t("<div/>").addClass("jvectormap-zoomout").html("&#x2212;").appendTo(e.container),r.pathes){var h=this.canvas.createPath({path:r.pathes[n].path});h.setFill(this.color),h.id="jvectormap"+s.index+"_"+n,s.countries[n]=h,t(this.rootGroup).append(h)}t(e.container).delegate("svg"==this.canvas.mode?"path":"shape","mouseover mouseout",function(i){var o=i.target,a=i.target.id.split("_").pop(),n=t.Event("labelShow.jvectormap"),h=t.Event("regionMouseOver.jvectormap");"mouseover"==i.type?(t(e.container).trigger(h,[a]),h.isDefaultPrevented()||(e.hoverOpacity&&o.setOpacity(e.hoverOpacity),e.hoverColor&&(o.currentFillColor=o.getFill()+"",o.setFill(e.hoverColor))),s.label.text(r.pathes[a].name),t(e.container).trigger(n,[s.label,a]),n.isDefaultPrevented()||(s.label.show(),s.labelWidth=s.label.width(),s.labelHeight=s.label.height())):(o.setOpacity(1),o.currentFillColor&&o.setFill(o.currentFillColor),s.label.hide(),t(e.container).trigger("regionMouseOut.jvectormap",[a]))}),t(e.container).delegate("svg"==this.canvas.mode?"path":"shape","click",function(s){s.target;var i=s.target.id.split("_").pop();t(e.container).trigger("regionClick.jvectormap",[i])}),e.container.mousemove(function(t){s.label.is(":visible")&&s.label.css({left:t.pageX-15-s.labelWidth,top:t.pageY-15-s.labelHeight})}),this.setColors(e.colors),this.canvas.canvas.appendChild(this.rootGroup),this.applyTransform(),this.colorScale=new a(e.scaleColors,e.normalizeFunction,e.valueMin,e.valueMax),e.values&&(this.values=e.values,this.setValues(e.values)),this.bindZoomButtons(),o.mapIndex++};o.prototype={transX:0,transY:0,scale:1,baseTransX:0,baseTransY:0,baseScale:1,width:0,height:0,countries:{},countriesColors:{},countriesData:{},zoomStep:1.4,zoomMaxStep:4,zoomCurStep:1,setColors:function(t,e){if("string"==typeof t)this.countries[t].setFill(e);else{var s=t;for(var i in s)this.countries[i]&&this.countries[i].setFill(s[i])}},setValues:function(t){var e,s=0,i=Number.MAX_VALUE;for(var o in t)(e=parseFloat(t[o]))>s&&(s=t[o]),e&&e<i&&(i=e);this.colorScale.setMin(i),this.colorScale.setMax(s);var a={};for(o in t)e=parseFloat(t[o]),a[o]=e?this.colorScale.getColor(e):this.color;this.setColors(a),this.values=t},setBackgroundColor:function(t){this.container.css("background-color",t)},setScaleColors:function(t){this.colorScale.setColors(t),this.values&&this.setValues(this.values)},setNormalizeFunction:function(t){this.colorScale.setNormalizeFunction(t),this.values&&this.setValues(this.values)},resize:function(){var t=this.baseScale;this.width/this.height>this.defaultWidth/this.defaultHeight?(this.baseScale=this.height/this.defaultHeight,this.baseTransX=Math.abs(this.width-this.defaultWidth*this.baseScale)/(2*this.baseScale)):(this.baseScale=this.width/this.defaultWidth,this.baseTransY=Math.abs(this.height-this.defaultHeight*this.baseScale)/(2*this.baseScale)),this.scale*=this.baseScale/t,this.transX*=this.baseScale/t,this.transY*=this.baseScale/t},reset:function(){for(var t in this.countryTitle.reset(),this.countries)this.countries[t].setFill(o.defaultColor);this.scale=this.baseScale,this.transX=this.baseTransX,this.transY=this.baseTransY,this.applyTransform()},applyTransform:function(){var t,e,s;this.defaultWidth*this.scale<=this.width?(t=(this.width-this.defaultWidth*this.scale)/(2*this.scale),e=(this.width-this.defaultWidth*this.scale)/(2*this.scale)):(t=0,e=(this.width-this.defaultWidth*this.scale)/this.scale),this.defaultHeight*this.scale<=this.height?(s=(this.height-this.defaultHeight*this.scale)/(2*this.scale),minTransY=(this.height-this.defaultHeight*this.scale)/(2*this.scale)):(s=0,minTransY=(this.height-this.defaultHeight*this.scale)/this.scale),this.transY>s?this.transY=s:this.transY<minTransY&&(this.transY=minTransY),this.transX>t?this.transX=t:this.transX<e&&(this.transX=e),this.canvas.applyTransformParams(this.scale,this.transX,this.transY)},makeDraggable:function(){var t,e,s=!1,i=this;this.container.mousemove(function(o){if(s){i.transX,i.transY;i.transX-=(t-o.pageX)/i.scale,i.transY-=(e-o.pageY)/i.scale,i.applyTransform(),t=o.pageX,e=o.pageY}return!1}).mousedown(function(i){return s=!0,t=i.pageX,e=i.pageY,!1}).mouseup(function(){return s=!1,!1})},bindZoomButtons:function(){var e=this,s=(t("#zoom").innerHeight()-12-30-6-7-6)/(this.zoomMaxStep-this.zoomCurStep);this.container.find(".jvectormap-zoomin").click(function(){if(e.zoomCurStep<e.zoomMaxStep){e.transX,e.transY,e.scale;e.transX-=(e.width/e.scale-e.width/(e.scale*e.zoomStep))/2,e.transY-=(e.height/e.scale-e.height/(e.scale*e.zoomStep))/2,e.setScale(e.scale*e.zoomStep),e.zoomCurStep++,t("#zoomSlider").css("top",parseInt(t("#zoomSlider").css("top"))-s)}}),this.container.find(".jvectormap-zoomout").click(function(){if(e.zoomCurStep>1){e.transX,e.transY,e.scale;e.transX+=(e.width/(e.scale/e.zoomStep)-e.width/e.scale)/2,e.transY+=(e.height/(e.scale/e.zoomStep)-e.height/e.scale)/2,e.setScale(e.scale/e.zoomStep),e.zoomCurStep--,t("#zoomSlider").css("top",parseInt(t("#zoomSlider").css("top"))+s)}})},setScale:function(t){this.scale=t,this.applyTransform()},getCountryPath:function(e){return t("#"+e)[0]}},o.xlink="http://www.w3.org/1999/xlink",o.mapIndex=1,o.maps={};var a=function(t,e,s,i){t&&this.setColors(t),e&&this.setNormalizeFunction(e),s&&this.setMin(s),s&&this.setMax(i)};a.prototype={colors:[],setMin:function(t){this.clearMinValue=t,"function"==typeof this.normalize?this.minValue=this.normalize(t):this.minValue=t},setMax:function(t){this.clearMaxValue=t,"function"==typeof this.normalize?this.maxValue=this.normalize(t):this.maxValue=t},setColors:function(t){for(var e=0;e<t.length;e++)t[e]=a.rgbToArray(t[e]);this.colors=t},setNormalizeFunction:function(t){"polynomial"===t?this.normalize=function(t){return Math.pow(t,.2)}:"linear"===t?delete this.normalize:this.normalize=t,this.setMin(this.clearMinValue),this.setMax(this.clearMaxValue)},getColor:function(t){"function"==typeof this.normalize&&(t=this.normalize(t));for(var e,s=[],i=0,o=0;o<this.colors.length-1;o++)e=this.vectorLength(this.vectorSubtract(this.colors[o+1],this.colors[o])),s.push(e),i+=e;var a,r=(this.maxValue-this.minValue)/i;for(o=0;o<s.length;o++)s[o]*=r;for(o=0,t-=this.minValue;t-s[o]>=0;)t-=s[o],o++;for(a=o==this.colors.length-1?this.vectorToNum(this.colors[o]).toString(16):this.vectorToNum(this.vectorAdd(this.colors[o],this.vectorMult(this.vectorSubtract(this.colors[o+1],this.colors[o]),t/s[o]))).toString(16);a.length<6;)a="0"+a;return"#"+a},vectorToNum:function(t){for(var e=0,s=0;s<t.length;s++)e+=Math.round(t[s])*Math.pow(256,t.length-s-1);return e},vectorSubtract:function(t,e){for(var s=[],i=0;i<t.length;i++)s[i]=t[i]-e[i];return s},vectorAdd:function(t,e){for(var s=[],i=0;i<t.length;i++)s[i]=t[i]+e[i];return s},vectorMult:function(t,e){for(var s=[],i=0;i<t.length;i++)s[i]=t[i]*e;return s},vectorLength:function(t){for(var e=0,s=0;s<t.length;s++)e+=t[s]*t[s];return Math.sqrt(e)}},a.arrayToRgb=function(t){for(var e,s="#",i=0;i<t.length;i++)s+=1==(e=t[i].toString(16)).length?"0"+e:e;return s},a.rgbToArray=function(t){return t=t.substr(1),[parseInt(t.substr(0,2),16),parseInt(t.substr(2,2),16),parseInt(t.substr(4,2),16)]}}(jQuery);     this.width = params.container.width();
        this.height = params.container.height();
        this.resize();
        $(window).resize(function() {
            map.width = params.container.width();
            map.height = params.container.height();
            map.resize();
            map.canvas.setSize(map.width, map.height);
            map.applyTransform();
        });
        this.canvas = new VectorCanvas(this.width, this.height);
        params.container.append(this.canvas.canvas);
        this.makeDraggable();
        this.rootGroup = this.canvas.createGroup(true);
        this.index = WorldMap.mapIndex;
        this.label = $('<div/>')
            .addClass('jvectormap-label')
            .appendTo($('body'));
        $('<div/>')
            .addClass('jvectormap-zoomin')
            .text('+')
            .appendTo(params.container);
        $('<div/>')
            .addClass('jvectormap-zoomout')
            .html('&#x2212;')
            .appendTo(params.container);
        for (var key in mapData.pathes) {
            var path = this.canvas.createPath({
                path: mapData.pathes[key].path,
            });
            path.setFill(this.color);
            path.id = 'jvectormap' + map.index + '_' + key;
            map.countries[key] = path;
            $(this.rootGroup).append(path);
        }
        $(params.container).delegate(
            this.canvas.mode == 'svg' ? 'path' : 'shape',
            'mouseover mouseout',
            function(e) {
                var path = e.target,
                    code = e.target.id.split('_').pop(),
                    labelShowEvent = $.Event('labelShow.jvectormap'),
                    regionMouseOverEvent = $.Event(
                        'regionMouseOver.jvectormap'
                    );
                if (e.type == 'mouseover') {
                    $(params.container).trigger(regionMouseOverEvent, [code]);
                    if (!regionMouseOverEvent.isDefaultPrevented()) {
                        if (params.hoverOpacity) {
                            path.setOpacity(params.hoverOpacity);
                        }
                        if (params.hoverColor) {
                            path.currentFillColor = path.getFill() + '';
                            path.setFill(params.hoverColor);
                        }
                    }
                    map.label.text(mapData.pathes[code].name);
                    $(params.container).trigger(labelShowEvent, [
                        map.label,
                        code,
                    ]);
                    if (!labelShowEvent.isDefaultPrevented()) {
                        map.label.show();
                        map.labelWidth = map.label.width();
                        map.labelHeight = map.label.height();
                    }
                } else {
                    path.setOpacity(1);
                    if (path.currentFillColor) {
                        path.setFill(path.currentFillColor);
                    }
                    map.label.hide();
                    $(params.container).trigger('regionMouseOut.jvectormap', [
                        code,
                    ]);
                }
            }
        );
        $(params.container).delegate(
            this.canvas.mode == 'svg' ? 'path' : 'shape',
            'click',
            function(e) {
                var path = e.target;
                var code = e.target.id.split('_').pop();
                $(params.container).trigger('regionClick.jvectormap', [code]);
            }
        );
        params.container.mousemove(function(e) {
            if (map.label.is(':visible')) {
                map.label.css({
                    left: e.pageX - 15 - map.labelWidth,
                    top: e.pageY - 15 - map.labelHeight,
                });
            }
        });
        this.setColors(params.colors);
        this.canvas.canvas.appendChild(this.rootGroup);
        this.applyTransform();
        this.colorScale = new ColorScale(
            params.scaleColors,
            params.normalizeFunction,
            params.valueMin,
            params.valueMax
        );
        if (params.values) {
            this.values = params.values;
            this.setValues(params.values);
        }
        this.bindZoomButtons();
        WorldMap.mapIndex++;
    };
    WorldMap.prototype = {
        transX: 0,
        transY: 0,
        scale: 1,
        baseTransX: 0,
        baseTransY: 0,
        baseScale: 1,
        width: 0,
        height: 0,
        countries: {},
        countriesColors: {},
        countriesData: {},
        zoomStep: 1.4,
        zoomMaxStep: 4,
        zoomCurStep: 1,
        setColors: function(key, color) {
            if (typeof key == 'string') {
                this.countries[key].setFill(color);
            } else {
                var colors = key;
                for (var code in colors) {
                    if (this.countries[code]) {
                        this.countries[code].setFill(colors[code]);
                    }
                }
            }
        },
        setValues: function(values) {
            var max = 0,
                min = Number.MAX_VALUE,
                val;
            for (var cc in values) {
                val = parseFloat(values[cc]);
                if (val > max) {
                    max = values[cc];
                }
                if (val && val < min) {
                    min = val;
                }
            }
            this.colorScale.setMin(min);
            this.colorScale.setMax(max);
            var colors = {};
            for (cc in values) {
                val = parseFloat(values[cc]);
                if (val) {
                    colors[cc] = this.colorScale.getColor(val);
                } else {
                    colors[cc] = this.color;
                }
            }
            this.setColors(colors);
            this.values = values;
        },
        setBackgroundColor: function(backgroundColor) {
            this.container.css('background-color', backgroundColor);
        },
        setScaleColors: function(colors) {
            this.colorScale.setColors(colors);
            if (this.values) {
                this.setValues(this.values);
            }
        },
        setNormalizeFunction: function(f) {
            this.colorScale.setNormalizeFunction(f);
            if (this.values) {
                this.setValues(this.values);
            }
        },
        resize: function() {
            var curBaseScale = this.baseScale;
            if (
                this.width / this.height >
                this.defaultWidth / this.defaultHeight
            ) {
                this.baseScale = this.height / this.defaultHeight;
                this.baseTransX =
                    Math.abs(this.width - this.defaultWidth * this.baseScale) /
                    (2 * this.baseScale);
            } else {
                this.baseScale = this.width / this.defaultWidth;
                this.baseTransY =
                    Math.abs(
                        this.height - this.defaultHeight * this.baseScale
                    ) /
                    (2 * this.baseScale);
            }
            this.scale *= this.baseScale / curBaseScale;
            this.transX *= this.baseScale / curBaseScale;
            this.transY *= this.baseScale / curBaseScale;
        },
        reset: function() {
            this.countryTitle.reset();
            for (var key in this.countries) {
                this.countries[key].setFill(WorldMap.defaultColor);
            }
            this.scale = this.baseScale;
            this.transX = this.baseTransX;
            this.transY = this.baseTransY;
            this.applyTransform();
        },
        applyTransform: function() {
            var maxTransX, maxTransY, minTransX, maxTransY;
            if (this.defaultWidth * this.scale <= this.width) {
                maxTransX =
                    (this.width - this.defaultWidth * this.scale) /
                    (2 * this.scale);
                minTransX =
                    (this.width - this.defaultWidth * this.scale) /
                    (2 * this.scale);
            } else {
                maxTransX = 0;
                minTransX =
                    (this.width - this.defaultWidth * this.scale) / this.scale;
            }
            if (this.defaultHeight * this.scale <= this.height) {
                maxTransY =
                    (this.height - this.defaultHeight * this.scale) /
                    (2 * this.scale);
                minTransY =
                    (this.height - this.defaultHeight * this.scale) /
                    (2 * this.scale);
            } else {
                maxTransY = 0;
                minTransY =
                    (this.height - this.defaultHeight * this.scale) /
                    this.scale;
            }
            if (this.transY > maxTransY) {
                this.transY = maxTransY;
            } else {
                if (this.transY < minTransY) {
                    this.transY = minTransY;
                }
            }
            if (this.transX > maxTransX) {
                this.transX = maxTransX;
            } else {
                if (this.transX < minTransX) {
                    this.transX = minTransX;
                }
            }
            this.canvas.applyTransformParams(
                this.scale,
                this.transX,
                this.transY
            );
        },
        makeDraggable: function() {
            var mouseDown = false;
            var oldPageX, oldPageY;
            var self = this;
            this.container
                .mousemove(function(e) {
                    if (mouseDown) {
                        var curTransX = self.transX;
                        var curTransY = self.transY;
                        self.transX -= (oldPageX - e.pageX) / self.scale;
                        self.transY -= (oldPageY - e.pageY) / self.scale;
                        self.applyTransform();
                        oldPageX = e.pageX;
                        oldPageY = e.pageY;
                    }
                    return false;
                })
                .mousedown(function(e) {
                    mouseDown = true;
                    oldPageX = e.pageX;
                    oldPageY = e.pageY;
                    return false;
                })
                .mouseup(function() {
                    mouseDown = false;
                    return false;
                });
        },
        bindZoomButtons: function() {
            var map = this;
            var sliderDelta =
                ($('#zoom').innerHeight() - 6 * 2 - 15 * 2 - 3 * 2 - 7 - 6) /
                (this.zoomMaxStep - this.zoomCurStep);
            this.container.find('.jvectormap-zoomin').click(function() {
                if (map.zoomCurStep < map.zoomMaxStep) {
                    var curTransX = map.transX;
                    var curTransY = map.transY;
                    var curScale = map.scale;
                    map.transX -=
                        (map.width / map.scale -
                            map.width / (map.scale * map.zoomStep)) /
                        2;
                    map.transY -=
                        (map.height / map.scale -
                            map.height / (map.scale * map.zoomStep)) /
                        2;
                    map.setScale(map.scale * map.zoomStep);
                    map.zoomCurStep++;
                    $('#zoomSlider').css(
                        'top',
                        parseInt($('#zoomSlider').css('top')) - sliderDelta
                    );
                }
            });
            this.container.find('.jvectormap-zoomout').click(function() {
                if (map.zoomCurStep > 1) {
                    var curTransX = map.transX;
                    var curTransY = map.transY;
                    var curScale = map.scale;
                    map.transX +=
                        (map.width / (map.scale / map.zoomStep) -
                            map.width / map.scale) /
                        2;
                    map.transY +=
                        (map.height / (map.scale / map.zoomStep) -
                            map.height / map.scale) /
                        2;
                    map.setScale(map.scale / map.zoomStep);
                    map.zoomCurStep--;
                    $('#zoomSlider').css(
                        'top',
                        parseInt($('#zoomSlider').css('top')) + sliderDelta
                    );
                }
            });
        },
        setScale: function(scale) {
            this.scale = scale;
            this.applyTransform();
        },
        getCountryPath: function(cc) {
            return $('#' + cc)[0];
        },
    };
    WorldMap.xlink = 'http://www.w3.org/1999/xlink';
    WorldMap.mapIndex = 1;
    WorldMap.maps = {};
    var ColorScale = function(colors, normalizeFunction, minValue, maxValue) {
        if (colors) {
            this.setColors(colors);
        }
        if (normalizeFunction) {
            this.setNormalizeFunction(normalizeFunction);
        }
        if (minValue) {
            this.setMin(minValue);
        }
        if (minValue) {
            this.setMax(maxValue);
        }
    };
    ColorScale.prototype = {
        colors: [],
        setMin: function(min) {
            this.clearMinValue = min;
            if (typeof this.normalize === 'function') {
                this.minValue = this.normalize(min);
            } else {
                this.minValue = min;
            }
        },
        setMax: function(max) {
            this.clearMaxValue = max;
            if (typeof this.normalize === 'function') {
                this.maxValue = this.normalize(max);
            } else {
                this.maxValue = max;
            }
        },
        setColors: function(colors) {
            for (var i = 0; i < colors.length; i++) {
                colors[i] = ColorScale.rgbToArray(colors[i]);
            }
            this.colors = colors;
        },
        setNormalizeFunction: function(f) {
            if (f === 'polynomial') {
                this.normalize = function(value) {
                    return Math.pow(value, 0.2);
                };
            } else {
                if (f === 'linear') {
                    delete this.normalize;
                } else {
                    this.normalize = f;
                }
            }
            this.setMin(this.clearMinValue);
            this.setMax(this.clearMaxValue);
        },
        getColor: function(value) {
            if (typeof this.normalize === 'function') {
                value = this.normalize(value);
            }
            var lengthes = [];
            var fullLength = 0;
            var l;
            for (var i = 0; i < this.colors.length - 1; i++) {
                l = this.vectorLength(
                    this.vectorSubtract(this.colors[i + 1], this.colors[i])
                );
                lengthes.push(l);
                fullLength += l;
            }
            var c = (this.maxValue - this.minValue) / fullLength;
            for (i = 0; i < lengthes.length; i++) {
                lengthes[i] *= c;
            }
            i = 0;
            value -= this.minValue;
            while (value - lengthes[i] >= 0) {
                value -= lengthes[i];
                i++;
            }
            var color;
            if (i == this.colors.length - 1) {
                color = this.vectorToNum(this.colors[i]).toString(16);
            } else {
                color = this.vectorToNum(
                    this.vectorAdd(
                        this.colors[i],
                        this.vectorMult(
                            this.vectorSubtract(
                                this.colors[i + 1],
                                this.colors[i]
                            ),
                            value / lengthes[i]
                        )
                    )
                ).toString(16);
            }
            while (color.length < 6) {
                color = '0' + color;
            }
            return '#' + color;
        },
        vectorToNum: function(vector) {
            var num = 0;
            for (var i = 0; i < vector.length; i++) {
                num +=
                    Math.round(vector[i]) *
                    Math.pow(256, vector.length - i - 1);
            }
            return num;
        },
        vectorSubtract: function(vector1, vector2) {
            var vector = [];
            for (var i = 0; i < vector1.length; i++) {
                vector[i] = vector1[i] - vector2[i];
            }
            return vector;
        },
        vectorAdd: function(vector1, vector2) {
            var vector = [];
            for (var i = 0; i < vector1.length; i++) {
                vector[i] = vector1[i] + vector2[i];
            }
            return vector;
        },
        vectorMult: function(vector, num) {
            var result = [];
            for (var i = 0; i < vector.length; i++) {
                result[i] = vector[i] * num;
            }
            return result;
        },
        vectorLength: function(vector) {
            var result = 0;
            for (var i = 0; i < vector.length; i++) {
                result += vector[i] * vector[i];
            }
            return Math.sqrt(result);
        },
    };
    ColorScale.arrayToRgb = function(ar) {
        var rgb = '#';
        var d;
        for (var i = 0; i < ar.length; i++) {
            d = ar[i].toString(16);
            rgb += d.length == 1 ? '0' + d : d;
        }
        return rgb;
    };
    ColorScale.rgbToArray = function(rgb) {
        rgb = rgb.substr(1);
        return [
            parseInt(rgb.substr(0, 2), 16),
            parseInt(rgb.substr(2, 2), 16),
            parseInt(rgb.substr(4, 2), 16),
        ];
    };
})(jQuery);
